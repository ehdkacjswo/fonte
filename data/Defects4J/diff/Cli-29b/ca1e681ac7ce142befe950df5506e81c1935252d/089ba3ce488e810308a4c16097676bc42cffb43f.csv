is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.ListIterator;/** * An Option that can process values passed on the command line in the form * ""--file README"". */public interface Argument extends Option {    /**     * Returns the initial separator character or     * '\0' if no character has been set.     *     * @return char the initial separator character     */    char getInitialSeparator();    /**     * Processes the ""README"" style element of the argument.     *     * Values identified should be added to the CommandLine object in     * association with this Argument.     *     * @see WriteableCommandLine#addValue(Option,Object)     *     * @param commandLine The CommandLine object to store results in.     * @param args The arguments to process.     * @param option The option to register value against.     * @throws OptionException if any problems occur.     */    void processValues(        final WriteableCommandLine commandLine,        final ListIterator args,        final Option option)            throws OptionException;    /**     * Adds defaults to a CommandLine.     *     * @param commandLine     *            The CommandLine object to store defaults in.     * @param option     *            The Option to store the defaults against.     */    void defaultValues(final WriteableCommandLine commandLine, final Option option);    /**     * Performs any necessary validation on the values added to the     * CommandLine.     *     * Validation will typically involve using the     * CommandLine.getValues(option) method to retrieve the values     * and then either checking each value.  Optionally the String     * value can be replaced by another Object such as a Number     * instance or a File instance.     *     * @see CommandLine#getValues(Option)     *     * @param commandLine The CommandLine object to query.     * @param option The option to lookup values with.     * @throws OptionException if any problems occur.     */    void validate(final WriteableCommandLine commandLine, final Option option)        throws OptionException;    /**     * Indicates whether argument values must be present for the CommandLine to     * be valid.     *     * @see #getMinimum()     * @see #getMaximum()     * @return true iff the CommandLine will be invalid without at least one     *         value     */    boolean isRequired();    /**     * Retrieves the minimum number of values required for a valid Argument     *     * @return the minimum number of values     */    int getMinimum();    /**     * Retrieves the maximum number of values acceptable for a valid Argument     *     * @return the maximum number of values     */    int getMaximum();}"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,20,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,23,* An Option that can process values passed on the command line in the form
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,24,"* ""--file README""."
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,26,public interface Argument extends Option {
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,29,* Returns the initial separator character or
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,30,* '\0' if no character has been set.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,32,* @return char the initial separator character
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,34,char getInitialSeparator();
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,37,"* Processes the ""README"" style element of the argument."
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,39,* Values identified should be added to the CommandLine object in
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,40,* association with this Argument.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,42,"* @see WriteableCommandLine#addValue(Option,Object)"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,44,* @param commandLine The CommandLine object to store results in.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,45,* @param args The arguments to process.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,46,* @param option The option to register value against.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,47,* @throws OptionException if any problems occur.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,49,void processValues(
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,50,"final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,51,"final ListIterator args,"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,52,final Option option)
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,53,throws OptionException;
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,56,* Adds defaults to a CommandLine.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,58,* @param commandLine
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,59,*            The CommandLine object to store defaults in.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,60,* @param option
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,61,*            The Option to store the defaults against.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,63,"void defaultValues(final WriteableCommandLine commandLine, final Option option);"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,66,* Performs any necessary validation on the values added to the
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,67,* CommandLine.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,69,* Validation will typically involve using the
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,70,* CommandLine.getValues(option) method to retrieve the values
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,71,* and then either checking each value.  Optionally the String
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,72,* value can be replaced by another Object such as a Number
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,73,* instance or a File instance.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,75,* @see CommandLine#getValues(Option)
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,77,* @param commandLine The CommandLine object to query.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,78,* @param option The option to lookup values with.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,79,* @throws OptionException if any problems occur.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,81,"void validate(final WriteableCommandLine commandLine, final Option option)"
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,82,throws OptionException;
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,85,* Indicates whether argument values must be present for the CommandLine to
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,86,* be valid.
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,88,* @see #getMinimum()
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,89,* @see #getMaximum()
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,90,* @return true iff the CommandLine will be invalid without at least one
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,91,*         value
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,93,boolean isRequired();
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,96,* Retrieves the minimum number of values required for a valid Argument
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,98,* @return the minimum number of values
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,100,int getMinimum();
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,103,* Retrieves the maximum number of values acceptable for a valid Argument
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,105,* @return the maximum number of values
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,107,int getMaximum();
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.List;import java.util.Set;/** * Instances of CommandLine represent a command line that has been processed * according to the definition supplied to the parser. */public interface CommandLine {    /**     * Detects the presence of an option with the specified trigger in this     * CommandLine.     *     * @param trigger the trigger to search for     * @return true iff an option with this trigger is present     */    boolean hasOption(final String trigger);    /**     * Detects the presence of an option in this CommandLine.     *     * @param option the Option to search for     * @return true iff the option is present     */    boolean hasOption(final Option option);    /**     * Finds the Option with the specified trigger     *     * @param trigger the name of the option to retrieve     * @return the Option matching the trigger or null if none exists     */    Option getOption(final String trigger);    /**     * Retrieves the Argument values associated with the specified Option     *     * @param trigger a trigger used to lookup the Option     * @return a list of values or an empty List if none are found     */    List getValues(final String trigger);    /**     * Retrieves the Argument values associated with the specified Option     *     * @param trigger a trigger used to lookup the Option     * @param defaultValues the result to return if no values are found     * @return a list of values or defaultValues if none are found     */    List getValues(final String trigger, final List defaultValues);    /**     * Retrieves the Argument values associated with the specified Option     *     * @param option the Option associated with the values     * @return a list of values or an empty List if none are found     */    List getValues(final Option option);    /**     * Retrieves the Argument values associated with the specified Option     *     * @param option the Option associated with the values     * @param defaultValues the result to return if no values are found     * @return a list of values or defaultValues if none are found     */    List getValues(final Option option, final List defaultValues);    /**     * Retrieves the single Argument value associated with the specified Option     *     * @param trigger a trigger used to lookup the Option     * @return the matching value or null if none exists     * @throws IllegalStateException if more than one values are found     */    Object getValue(final String trigger) throws IllegalStateException;    /**     * Retrieves the single Argument value associated with the specified Option     *     * @param trigger a trigger used to lookup the Option     * @param defaultValue the result to use if no values are found     * @return the matching value or defaultValue if none exists     * @throws IllegalStateException if more than one values are found     */    Object getValue(final String trigger, final Object defaultValue) throws IllegalStateException;    /**     * Retrieves the single Argument value associated with the specified Option     *     * @param option the Option associated with the value     * @return the matching value or null if none exists     * @throws IllegalStateException if more than one values are found     */    Object getValue(final Option option) throws IllegalStateException;    /**     * Retrieves the single Argument value associated with the specified Option     *     * @param option the Option associated with the value     * @param defaultValue the result to use if no values are found     * @return the matching value or defaultValue if none exists     * @throws IllegalStateException if more than one values are found     */    Object getValue(final Option option, final Object defaultValue) throws IllegalStateException;    /**     * Retrieves the Boolean value associated with the specified Switch     *     * @param trigger a trigger used to lookup the Option     * @return the Boolean associated with trigger or null if none exists     */    Boolean getSwitch(final String trigger);    /**     * Retrieves the Boolean value associated with the specified Switch     *     * @param trigger a trigger used to lookup the Option     * @param defaultValue the Boolean to use if none match     * @return the Boolean associated with trigger or defaultValue if none exists     */    Boolean getSwitch(final String trigger, final Boolean defaultValue);    /**     * Retrieves the Boolean value associated with the specified Switch     *     * @param option the Option associated with the value     * @return the Boolean associated with option or null if none exists     */    Boolean getSwitch(final Option option);    /**     * Retrieves the Boolean value associated with the specified Switch     *     * @param option the Option associated with the value     * @param defaultValue the Boolean to use if none match     * @return the Boolean associated with option or defaultValue if none exists     */    Boolean getSwitch(final Option option, final Boolean defaultValue);    /**     * Retrieves the value associated with the specified property     *     * @param property the property name to lookup     * @return the value of the property or null     */    String getProperty(final String property);    /**     * Retrieves the value associated with the specified property     *     * @param property the property name to lookup     * @param defaultValue the value to use if no other is found     * @return the value of the property or defaultValue     */    String getProperty(final String property, final String defaultValue);    /**     * Retrieves the set of all property names associated with this CommandLine     *     * @return a none null set of property names     */    Set getProperties();    /**     * Retrieves the number of times the specified Option appeared in this     * CommandLine     *     * @param trigger a trigger used to lookup the Option     * @return the number of occurrences of the option     */    int getOptionCount(final String trigger);    /**     * Retrieves the number of times the specified Option appeared in this     * CommandLine     *     * @param option the Option associated to check     * @return the number of occurrences of the option     */    int getOptionCount(final Option option);    /**     * Retrieves a list of all Options found in this CommandLine     *     * @return a none null list of Options     */    List getOptions();    /**     * Retrieves a list of all Option triggers found in this CommandLine     *     * @return a none null list of Option triggers     */    Set getOptionTriggers();}"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,20,import java.util.List;
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,21,import java.util.Set;
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,24,* Instances of CommandLine represent a command line that has been processed
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,25,* according to the definition supplied to the parser.
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,27,public interface CommandLine {
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,30,* Detects the presence of an option with the specified trigger in this
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,31,* CommandLine.
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,33,* @param trigger the trigger to search for
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,34,* @return true iff an option with this trigger is present
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,36,boolean hasOption(final String trigger);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,39,* Detects the presence of an option in this CommandLine.
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,41,* @param option the Option to search for
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,42,* @return true iff the option is present
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,44,boolean hasOption(final Option option);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,47,* Finds the Option with the specified trigger
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,49,* @param trigger the name of the option to retrieve
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,50,* @return the Option matching the trigger or null if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,52,Option getOption(final String trigger);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,55,* Retrieves the Argument values associated with the specified Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,57,* @param trigger a trigger used to lookup the Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,58,* @return a list of values or an empty List if none are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,60,List getValues(final String trigger);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,63,* Retrieves the Argument values associated with the specified Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,65,* @param trigger a trigger used to lookup the Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,66,* @param defaultValues the result to return if no values are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,67,* @return a list of values or defaultValues if none are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,69,"List getValues(final String trigger, final List defaultValues);"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,72,* Retrieves the Argument values associated with the specified Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,74,* @param option the Option associated with the values
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,75,* @return a list of values or an empty List if none are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,77,List getValues(final Option option);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,80,* Retrieves the Argument values associated with the specified Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,82,* @param option the Option associated with the values
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,83,* @param defaultValues the result to return if no values are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,84,* @return a list of values or defaultValues if none are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,86,"List getValues(final Option option, final List defaultValues);"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,89,* Retrieves the single Argument value associated with the specified Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,91,* @param trigger a trigger used to lookup the Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,92,* @return the matching value or null if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,93,* @throws IllegalStateException if more than one values are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,95,Object getValue(final String trigger) throws IllegalStateException;
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,98,* Retrieves the single Argument value associated with the specified Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,100,* @param trigger a trigger used to lookup the Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,101,* @param defaultValue the result to use if no values are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,102,* @return the matching value or defaultValue if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,103,* @throws IllegalStateException if more than one values are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,105,"Object getValue(final String trigger, final Object defaultValue) throws IllegalStateException;"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,108,* Retrieves the single Argument value associated with the specified Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,110,* @param option the Option associated with the value
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,111,* @return the matching value or null if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,112,* @throws IllegalStateException if more than one values are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,114,Object getValue(final Option option) throws IllegalStateException;
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,117,* Retrieves the single Argument value associated with the specified Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,119,* @param option the Option associated with the value
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,120,* @param defaultValue the result to use if no values are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,121,* @return the matching value or defaultValue if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,122,* @throws IllegalStateException if more than one values are found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,124,"Object getValue(final Option option, final Object defaultValue) throws IllegalStateException;"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,127,* Retrieves the Boolean value associated with the specified Switch
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,129,* @param trigger a trigger used to lookup the Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,130,* @return the Boolean associated with trigger or null if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,132,Boolean getSwitch(final String trigger);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,135,* Retrieves the Boolean value associated with the specified Switch
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,137,* @param trigger a trigger used to lookup the Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,138,* @param defaultValue the Boolean to use if none match
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,139,* @return the Boolean associated with trigger or defaultValue if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,141,"Boolean getSwitch(final String trigger, final Boolean defaultValue);"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,144,* Retrieves the Boolean value associated with the specified Switch
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,146,* @param option the Option associated with the value
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,147,* @return the Boolean associated with option or null if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,149,Boolean getSwitch(final Option option);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,152,* Retrieves the Boolean value associated with the specified Switch
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,154,* @param option the Option associated with the value
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,155,* @param defaultValue the Boolean to use if none match
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,156,* @return the Boolean associated with option or defaultValue if none exists
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,158,"Boolean getSwitch(final Option option, final Boolean defaultValue);"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,162,* Retrieves the value associated with the specified property
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,164,* @param property the property name to lookup
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,165,* @return the value of the property or null
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,167,String getProperty(final String property);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,170,* Retrieves the value associated with the specified property
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,172,* @param property the property name to lookup
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,173,* @param defaultValue the value to use if no other is found
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,174,* @return the value of the property or defaultValue
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,176,"String getProperty(final String property, final String defaultValue);"
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,179,* Retrieves the set of all property names associated with this CommandLine
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,181,* @return a none null set of property names
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,183,Set getProperties();
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,186,* Retrieves the number of times the specified Option appeared in this
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,187,* CommandLine
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,189,* @param trigger a trigger used to lookup the Option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,190,* @return the number of occurrences of the option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,192,int getOptionCount(final String trigger);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,195,* Retrieves the number of times the specified Option appeared in this
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,196,* CommandLine
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,198,* @param option the Option associated to check
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,199,* @return the number of occurrences of the option
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,201,int getOptionCount(final Option option);
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,204,* Retrieves a list of all Options found in this CommandLine
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,206,* @return a none null list of Options
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,208,List getOptions();
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,211,* Retrieves a list of all Option triggers found in this CommandLine
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,213,* @return a none null list of Option triggers
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,215,Set getOptionTriggers();
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Collections;import java.util.HashSet;import java.util.Set;/** * An enum of possible display settings. These settings are used to control the * presence of various features in the String representations of options, * CommandLines and usage strings.  Usually a Set of DisplaySetting instances * will be passed to a method that will lookup the presence of the values. */public class DisplaySetting {    private static final Set all = new HashSet();    /**     * A Set guarenteed to contain all possible DisplaySetting values     */    public static final Set ALL = Collections.unmodifiableSet(all);    /**     * A Set guarenteed to contain no DisplaySetting values     */    public static final Set NONE = Collections.EMPTY_SET;    /**     * Indicates that aliases should be included     */    public static final DisplaySetting DISPLAY_ALIASES =        new DisplaySetting(""DISPLAY_ALIASES"");    /**     * Indicates that optionality should be included     */    public static final DisplaySetting DISPLAY_OPTIONAL =        new DisplaySetting(""DISPLAY_OPTIONAL"");    /**     * Indicates that property options should be included     */    public static final DisplaySetting DISPLAY_PROPERTY_OPTION =        new DisplaySetting(""DISPLAY_PROPERTY_OPTION"");    /**     * Indicates that switches should be included enabled     */    public static final DisplaySetting DISPLAY_SWITCH_ENABLED =        new DisplaySetting(""DISPLAY_SWITCH_ENABLED"");    /**     * Indicates that switches should be included disabled     */    public static final DisplaySetting DISPLAY_SWITCH_DISABLED =        new DisplaySetting(""DISPLAY_SWITCH_DISABLED"");    /**     * Indicates that group names should be included     */    public static final DisplaySetting DISPLAY_GROUP_NAME =        new DisplaySetting(""DISPLAY_GROUP_NAME"");    /**     * Indicates that groups should be included expanded     */    public static final DisplaySetting DISPLAY_GROUP_EXPANDED =        new DisplaySetting(""DISPLAY_GROUP_EXPANDED"");    /**     * Indicates that group arguments should be included     */    public static final DisplaySetting DISPLAY_GROUP_ARGUMENT =        new DisplaySetting(""DISPLAY_GROUP_ARGUMENT"");    /**     * Indicates that group outer brackets should be included     */    public static final DisplaySetting DISPLAY_GROUP_OUTER =        new DisplaySetting(""DISPLAY_GROUP_OUTER"");    /**     * Indicates that arguments should be included numbered     */    public static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED =        new DisplaySetting(""DISPLAY_ARGUMENT_NUMBERED"");    /**     * Indicates that arguments should be included bracketed     */    public static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED =        new DisplaySetting(""DISPLAY_ARGUMENT_BRACKETED"");    /**     * Indicates that arguments of Parents should be included     */    public static final DisplaySetting DISPLAY_PARENT_ARGUMENT =        new DisplaySetting(""DISPLAY_PARENT_ARGUMENT"");    /**     * Indicates that children of Parents should be included     */    public static final DisplaySetting DISPLAY_PARENT_CHILDREN =        new DisplaySetting(""DISPLAY_PARENT_CHILDREN"");    /**     * The name of the setting     */    private final String name;    /**     * The hashCode of the setting     */    private final int hashCode;    /**     * Creates a new DisplaySetting with the specified name     * @param name the name of the setting     */    private DisplaySetting(final String name) {        this.name = name;        this.hashCode = name.hashCode();        all.add(this);    }    public int hashCode() {        return hashCode;    }    public boolean equals(final Object that) {        if (that instanceof DisplaySetting) {            return name.compareTo(that.toString()) == 0;        }        return false;    }    public String toString() {        return name;    }}"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,20,import java.util.Collections;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,21,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,22,import java.util.Set;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,25,* An enum of possible display settings. These settings are used to control the
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,26,"* presence of various features in the String representations of options,"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,27,* CommandLines and usage strings.  Usually a Set of DisplaySetting instances
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,28,* will be passed to a method that will lookup the presence of the values.
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,30,public class DisplaySetting {
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,32,private static final Set all = new HashSet();
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,35,* A Set guarenteed to contain all possible DisplaySetting values
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,37,public static final Set ALL = Collections.unmodifiableSet(all);
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,40,* A Set guarenteed to contain no DisplaySetting values
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,42,public static final Set NONE = Collections.EMPTY_SET;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,45,* Indicates that aliases should be included
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,47,public static final DisplaySetting DISPLAY_ALIASES =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,48,"new DisplaySetting(""DISPLAY_ALIASES"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,51,* Indicates that optionality should be included
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,53,public static final DisplaySetting DISPLAY_OPTIONAL =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,54,"new DisplaySetting(""DISPLAY_OPTIONAL"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,57,* Indicates that property options should be included
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,59,public static final DisplaySetting DISPLAY_PROPERTY_OPTION =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,60,"new DisplaySetting(""DISPLAY_PROPERTY_OPTION"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,63,* Indicates that switches should be included enabled
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,65,public static final DisplaySetting DISPLAY_SWITCH_ENABLED =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,66,"new DisplaySetting(""DISPLAY_SWITCH_ENABLED"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,69,* Indicates that switches should be included disabled
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,71,public static final DisplaySetting DISPLAY_SWITCH_DISABLED =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,72,"new DisplaySetting(""DISPLAY_SWITCH_DISABLED"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,75,* Indicates that group names should be included
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,77,public static final DisplaySetting DISPLAY_GROUP_NAME =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,78,"new DisplaySetting(""DISPLAY_GROUP_NAME"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,81,* Indicates that groups should be included expanded
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,83,public static final DisplaySetting DISPLAY_GROUP_EXPANDED =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,84,"new DisplaySetting(""DISPLAY_GROUP_EXPANDED"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,87,* Indicates that group arguments should be included
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,89,public static final DisplaySetting DISPLAY_GROUP_ARGUMENT =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,90,"new DisplaySetting(""DISPLAY_GROUP_ARGUMENT"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,93,* Indicates that group outer brackets should be included
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,95,public static final DisplaySetting DISPLAY_GROUP_OUTER =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,96,"new DisplaySetting(""DISPLAY_GROUP_OUTER"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,99,* Indicates that arguments should be included numbered
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,101,public static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,102,"new DisplaySetting(""DISPLAY_ARGUMENT_NUMBERED"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,105,* Indicates that arguments should be included bracketed
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,107,public static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,108,"new DisplaySetting(""DISPLAY_ARGUMENT_BRACKETED"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,111,* Indicates that arguments of Parents should be included
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,113,public static final DisplaySetting DISPLAY_PARENT_ARGUMENT =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,114,"new DisplaySetting(""DISPLAY_PARENT_ARGUMENT"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,117,* Indicates that children of Parents should be included
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,119,public static final DisplaySetting DISPLAY_PARENT_CHILDREN =
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,120,"new DisplaySetting(""DISPLAY_PARENT_CHILDREN"");"
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,123,* The name of the setting
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,125,private final String name;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,128,* The hashCode of the setting
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,130,private final int hashCode;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,133,* Creates a new DisplaySetting with the specified name
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,134,* @param name the name of the setting
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,136,private DisplaySetting(final String name) {
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,137,this.name = name;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,138,this.hashCode = name.hashCode();
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,139,all.add(this);
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,142,public int hashCode() {
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,143,return hashCode;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,146,public boolean equals(final Object that) {
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,147,if (that instanceof DisplaySetting) {
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,148,return name.compareTo(that.toString()) == 0;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,150,return false;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,153,public String toString() {
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,154,return name;
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Comparator;import java.util.Set;/** * An Option representing a choice or group of Options in the form ""-a|-b|-c"". */public interface Group extends Option {    /**     * Appends usage information to the specified StringBuffer     *     * @param buffer the buffer to append to     * @param helpSettings a set of display settings @see DisplaySetting     * @param comp a comparator used to sort the Options     * @param separator the String used to separate member Options     */    void appendUsage(        final StringBuffer buffer,        final Set helpSettings,        final Comparator comp,        final String separator);    /**     * Indicates whether group members must be present for the CommandLine to be     * valid.     *     * @see #getMinimum()     * @see #getMaximum()     * @return true iff the CommandLine will be invalid without at least one     *         member option     */    boolean isRequired();    /**     * Retrieves the minimum number of members required for a valid Group     *     * @return the minimum number of members     */    int getMinimum();    /**     * Retrieves the maximum number of members acceptable for a valid Group     *     * @return the maximum number of members     */    int getMaximum();}"
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,20,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,21,import java.util.Set;
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,24,"* An Option representing a choice or group of Options in the form ""-a|-b|-c""."
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,26,public interface Group extends Option {
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,29,* Appends usage information to the specified StringBuffer
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,31,* @param buffer the buffer to append to
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,32,* @param helpSettings a set of display settings @see DisplaySetting
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,33,* @param comp a comparator used to sort the Options
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,34,* @param separator the String used to separate member Options
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,36,void appendUsage(
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,37,"final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,38,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,39,"final Comparator comp,"
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,40,final String separator);
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,43,* Indicates whether group members must be present for the CommandLine to be
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,44,* valid.
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,46,* @see #getMinimum()
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,47,* @see #getMaximum()
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,48,* @return true iff the CommandLine will be invalid without at least one
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,49,*         member option
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,51,boolean isRequired();
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,54,* Retrieves the minimum number of members required for a valid Group
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,56,* @return the minimum number of members
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,58,int getMinimum();
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,61,* Retrieves the maximum number of members acceptable for a valid Group
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,63,* @return the maximum number of members
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,65,int getMaximum();
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Comparator;import java.util.Set;/** * Represents a line of help for a particular Option. */public interface HelpLine {    /**     * @return The description of the option     */    String getDescription();    /**     * @return The level of indentation for this line     */    int getIndent();    /**     * @return The Option that the help line relates to     */    Option getOption();    /**     * Builds a usage string for the option using the specified settings and     * comparator.     *     * @param helpSettings     *            the settings to apply     * @param comparator     *            a comparator to sort options when applicable     * @return the usage string     */    String usage(final Set helpSettings, final Comparator comparator);}"
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,20,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,21,import java.util.Set;
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,24,* Represents a line of help for a particular Option.
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,26,public interface HelpLine {
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,29,* @return The description of the option
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,31,String getDescription();
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,34,* @return The level of indentation for this line
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,36,int getIndent();
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,39,* @return The Option that the help line relates to
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,41,Option getOption();
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,44,* Builds a usage string for the option using the specified settings and
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,45,* comparator.
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,47,* @param helpSettings
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,48,*            the settings to apply
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,49,* @param comparator
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,50,*            a comparator to sort options when applicable
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,51,* @return the usage string
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,53,"String usage(final Set helpSettings, final Comparator comparator);"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Comparator;import java.util.List;import java.util.ListIterator;import java.util.Set;/** * The super type of all options representing a particular element of the * command line interface. */public interface Option {    /**     * Processes String arguments into a CommandLine.     *     * The iterator will initially point at the first argument to be processed     * and at the end of the method should point to the first argument not     * processed. This method MUST process at least one argument from the     * ListIterator.     *     * @param commandLine     *            The CommandLine object to store results in     * @param args     *            The arguments to process     * @throws OptionException     *             if any problems occur     */    void process(        final WriteableCommandLine commandLine,        final ListIterator args)        throws OptionException;    /**     * Adds defaults to a CommandLine.     *     * Any defaults for this option are applied as well as the defaults for     * any contained options     *     * @param commandLine     *            The CommandLine object to store defaults in     */    void defaults(final WriteableCommandLine commandLine);    /**     * Indicates whether this Option will be able to process the particular     * argument.     *     * @param argument     *            The argument to be tested     * @return true if the argument can be processed by this Option     */    boolean canProcess(final WriteableCommandLine commandLine, final String argument);    /**     * Indicates whether this Option will be able to process the particular     * argument. The ListIterator must be restored to the initial state before     * returning the boolean.     *     * @see #canProcess(WriteableCommandLine,String)     * @param arguments     *            the ListIterator over String arguments     * @return true if the argument can be processed by this Option     */    boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments);    /**     * Identifies the argument prefixes that should trigger this option. This     * is used to decide which of many Options should be tried when processing     * a given argument string.     *     * The returned Set must not be null.     *     * @return The set of triggers for this Option     */    Set getTriggers();    /**     * Identifies the argument prefixes that should be considered options. This     * is used to identify whether a given string looks like an option or an     * argument value. Typically an option would return the set [--,-] while     * switches might offer [-,+].     *     * The returned Set must not be null.     *     * @return The set of prefixes for this Option     */    Set getPrefixes();    /**     * Checks that the supplied CommandLine is valid with respect to this     * option.     *     * @param commandLine     *            The CommandLine to check.     * @throws OptionException     *             if the CommandLine is not valid.     */    void validate(final WriteableCommandLine commandLine)        throws OptionException;    /**     * Builds up a list of HelpLineImpl instances to be presented by HelpFormatter.     *     * @see HelpLine     * @see org.apache.commons.cli2.util.HelpFormatter     * @param depth     *            the initial indent depth     * @param helpSettings     *            the HelpSettings that should be applied     * @param comp     *            a comparator used to sort options when applicable.     * @return a List of HelpLineImpl objects     */    List helpLines(        final int depth,        final Set helpSettings,        final Comparator comp);    /**     * Appends usage information to the specified StringBuffer     *     * @param buffer the buffer to append to     * @param helpSettings a set of display settings @see DisplaySetting     * @param comp a comparator used to sort the Options     */    void appendUsage(        final StringBuffer buffer,        final Set helpSettings,        final Comparator comp);    /**     * The preferred name of an option is used for generating help and usage     * information.     *     * @return The preferred name of the option     */    String getPreferredName();    /**     * Returns a description of the option. This string is used to build help     * messages as in the HelpFormatter.     *     * @see org.apache.commons.cli2.util.HelpFormatter     * @return a description of the option.     */    String getDescription();    /**     * Returns the id of the option.  This can be used in a loop and switch     * construct:     *     * <code>     * for(Option o : cmd.getOptions()){     *     switch(o.getId()){     *         case POTENTIAL_OPTION:     *             ...     *     }     * }     * </code>     *     * The returned value is not guarenteed to be unique.     *     * @return the id of the option.     */    int getId();	/**	 * Recursively searches for an option with the supplied trigger.	 *	 * @param trigger the trigger to search for.	 * @return the matching option or null.	 */	Option findOption(final String trigger);    /**     * Indicates whether this option is required to be present.     * @return true iff the CommandLine will be invalid without this Option     */    boolean isRequired();}"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,20,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,21,import java.util.List;
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,22,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,23,import java.util.Set;
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,26,* The super type of all options representing a particular element of the
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,27,* command line interface.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,29,public interface Option {
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,32,* Processes String arguments into a CommandLine.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,34,* The iterator will initially point at the first argument to be processed
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,35,* and at the end of the method should point to the first argument not
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,36,* processed. This method MUST process at least one argument from the
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,37,* ListIterator.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,39,* @param commandLine
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,40,*            The CommandLine object to store results in
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,41,* @param args
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,42,*            The arguments to process
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,43,* @throws OptionException
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,44,*             if any problems occur
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,46,void process(
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,47,"final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,48,final ListIterator args)
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,49,throws OptionException;
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,52,* Adds defaults to a CommandLine.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,54,* Any defaults for this option are applied as well as the defaults for
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,55,* any contained options
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,57,* @param commandLine
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,58,*            The CommandLine object to store defaults in
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,60,void defaults(final WriteableCommandLine commandLine);
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,63,* Indicates whether this Option will be able to process the particular
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,64,* argument.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,66,* @param argument
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,67,*            The argument to be tested
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,68,* @return true if the argument can be processed by this Option
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,70,"boolean canProcess(final WriteableCommandLine commandLine, final String argument);"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,73,* Indicates whether this Option will be able to process the particular
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,74,* argument. The ListIterator must be restored to the initial state before
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,75,* returning the boolean.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,77,"* @see #canProcess(WriteableCommandLine,String)"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,78,* @param arguments
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,79,*            the ListIterator over String arguments
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,80,* @return true if the argument can be processed by this Option
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,82,"boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments);"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,85,* Identifies the argument prefixes that should trigger this option. This
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,86,* is used to decide which of many Options should be tried when processing
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,87,* a given argument string.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,89,* The returned Set must not be null.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,91,* @return The set of triggers for this Option
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,93,Set getTriggers();
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,96,* Identifies the argument prefixes that should be considered options. This
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,97,* is used to identify whether a given string looks like an option or an
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,98,"* argument value. Typically an option would return the set [--,-] while"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,99,"* switches might offer [-,+]."
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,101,* The returned Set must not be null.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,103,* @return The set of prefixes for this Option
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,105,Set getPrefixes();
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,108,* Checks that the supplied CommandLine is valid with respect to this
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,109,* option.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,111,* @param commandLine
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,112,*            The CommandLine to check.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,113,* @throws OptionException
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,114,*             if the CommandLine is not valid.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,116,void validate(final WriteableCommandLine commandLine)
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,117,throws OptionException;
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,120,* Builds up a list of HelpLineImpl instances to be presented by HelpFormatter.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,122,* @see HelpLine
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,123,* @see org.apache.commons.cli2.util.HelpFormatter
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,124,* @param depth
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,125,*            the initial indent depth
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,126,* @param helpSettings
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,127,*            the HelpSettings that should be applied
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,128,* @param comp
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,129,*            a comparator used to sort options when applicable.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,130,* @return a List of HelpLineImpl objects
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,132,List helpLines(
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,133,"final int depth,"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,134,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,135,final Comparator comp);
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,138,* Appends usage information to the specified StringBuffer
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,140,* @param buffer the buffer to append to
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,141,* @param helpSettings a set of display settings @see DisplaySetting
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,142,* @param comp a comparator used to sort the Options
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,144,void appendUsage(
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,145,"final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,146,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,147,final Comparator comp);
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,150,* The preferred name of an option is used for generating help and usage
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,151,* information.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,153,* @return The preferred name of the option
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,155,String getPreferredName();
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,158,* Returns a description of the option. This string is used to build help
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,159,* messages as in the HelpFormatter.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,161,* @see org.apache.commons.cli2.util.HelpFormatter
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,162,* @return a description of the option.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,164,String getDescription();
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,167,* Returns the id of the option.  This can be used in a loop and switch
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,168,* construct:
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,170,* <code>
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,171,* for(Option o : cmd.getOptions()){
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,172,*     switch(o.getId()){
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,173,*         case POTENTIAL_OPTION:
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,177,* </code>
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,179,* The returned value is not guarenteed to be unique.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,181,* @return the id of the option.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,183,int getId();
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,186,* Recursively searches for an option with the supplied trigger.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,188,* @param trigger the trigger to search for.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,189,* @return the matching option or null.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,191,Option findOption(final String trigger);
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,194,* Indicates whether this option is required to be present.
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,195,* @return true iff the CommandLine will be invalid without this Option
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,197,boolean isRequired();
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Collections;import java.util.Set;import org.apache.commons.cli2.resource.ResourceHelper;/** * A problem found while dealing with command line options. */public class OptionException    extends Exception {    /**     * The settings used when displaying the related Option.     *     * @see DisplaySetting     */    public static final Set HELP_SETTINGS =        Collections.unmodifiableSet(Collections.singleton(DisplaySetting.DISPLAY_PROPERTY_OPTION));    /** resource helper instance */    private static final ResourceHelper helper = ResourceHelper.getResourceHelper();    /** The Option the exception relates to */    private final Option option;    /** The message explaining the Exception */    private final String message;    /**     * Creates a new OptionException.     *     * @param option     *            The Option the exception relates to     */    public OptionException(final Option option) {        this(option, null, null);    }    /**     * Creates a new OptionException.     * @param option the Option the exception relates to     * @param messageKey the id of the message to display     */    public OptionException(final Option option,                           final String messageKey) {        this(option, messageKey, null);    }    /**     * Creates a new OptionException.     * @param option the Option the exception relates to     * @param messageKey the id of the message to display     * @param value a value to display with the message     */    public OptionException(final Option option,                           final String messageKey,                           final String value) {        this.option = option;        if (messageKey != null) {            final StringBuffer buffer = new StringBuffer();            if (value != null) {                buffer.append(helper.getMessage(messageKey, value));            } else {                buffer.append(helper.getMessage(messageKey));            }            buffer.append("" "");            option.appendUsage(buffer, HELP_SETTINGS, null);            message = buffer.toString();        } else {            message = """";        }    }    /**     * Gets the Option the exception relates to     *     * @return The related Option     */    public Option getOption() {        return option;    }    public String getMessage() {        return message;    }}"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,20,import java.util.Collections;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,21,import java.util.Set;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,23,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,26,* A problem found while dealing with command line options.
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,28,public class OptionException
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,29,extends Exception {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,31,* The settings used when displaying the related Option.
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,33,* @see DisplaySetting
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,35,public static final Set HELP_SETTINGS =
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,36,Collections.unmodifiableSet(Collections.singleton(DisplaySetting.DISPLAY_PROPERTY_OPTION));
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,38,/** resource helper instance */
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,39,private static final ResourceHelper helper = ResourceHelper.getResourceHelper();
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,41,/** The Option the exception relates to */
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,42,private final Option option;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,44,/** The message explaining the Exception */
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,45,private final String message;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,48,* Creates a new OptionException.
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,50,* @param option
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,51,*            The Option the exception relates to
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,53,public OptionException(final Option option) {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,54,"this(option, null, null);"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,58,* Creates a new OptionException.
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,59,* @param option the Option the exception relates to
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,60,* @param messageKey the id of the message to display
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,62,"public OptionException(final Option option,"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,63,final String messageKey) {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,64,"this(option, messageKey, null);"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,68,* Creates a new OptionException.
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,69,* @param option the Option the exception relates to
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,70,* @param messageKey the id of the message to display
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,71,* @param value a value to display with the message
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,73,"public OptionException(final Option option,"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,74,"final String messageKey,"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,75,final String value) {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,76,this.option = option;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,78,if (messageKey != null) {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,79,final StringBuffer buffer = new StringBuffer();
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,81,if (value != null) {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,82,"buffer.append(helper.getMessage(messageKey, value));"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,83,} else {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,84,buffer.append(helper.getMessage(messageKey));
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,87,"buffer.append("" "");"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,89,"option.appendUsage(buffer, HELP_SETTINGS, null);"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,90,message = buffer.toString();
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,91,} else {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,92,"message = """";"
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,97,* Gets the Option the exception relates to
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,99,* @return The related Option
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,101,public Option getOption() {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,102,return option;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,105,public String getMessage() {
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,106,return message;
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.ListIterator;/** * An Option that can have an argument and/or group of child Options in the form * ""-f &lt;arg&gt; [-a|-b|-c]"". */public interface Parent extends Option {    /**     * Processes the parent part of the Option.  The combination of parent,     * argument and children is handled by the process method.     * @see Option#process(WriteableCommandLine, ListIterator)     *     * @param commandLine the CommandLine to write results to     * @param args a ListIterator over argument strings positioned at the next     *             argument to process     * @throws OptionException if an error occurs while processing     */    void processParent(        final WriteableCommandLine commandLine,        final ListIterator args)        throws OptionException;}"
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,20,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,23,* An Option that can have an argument and/or group of child Options in the form
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,24,"* ""-f &lt;arg&gt; [-a|-b|-c]""."
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,26,public interface Parent extends Option {
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,29,"* Processes the parent part of the Option.  The combination of parent,"
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,30,* argument and children is handled by the process method.
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,31,"* @see Option#process(WriteableCommandLine, ListIterator)"
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,33,* @param commandLine the CommandLine to write results to
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,34,* @param args a ListIterator over argument strings positioned at the next
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,35,*             argument to process
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,36,* @throws OptionException if an error occurs while processing
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,38,void processParent(
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,39,"final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,40,final ListIterator args)
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,41,throws OptionException;
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.List;/** * A CommandLine that detected values and options can be written to. */public interface WriteableCommandLine extends CommandLine {    /**     * Adds an Option to the CommandLine     * @param option the Option to add     */    void addOption(final Option option);    /**     * Adds a value to an Option in the CommandLine.     * @param option the Option to add to     * @param value the value to add     */    void addValue(final Option option, final Object value);    /**     * Sets the default values for an Option in the CommandLine     * @param option the Option to add to     * @param defaultValues the defaults for the option     */    void setDefaultValues(final Option option, final List defaultValues);    /**     * Adds a switch value to an Option in the CommandLine.     * @param option the Option to add to     * @param value the switch value to add     * @throws IllegalStateException if the switch has already been added     */    void addSwitch(final Option option, final boolean value) throws IllegalStateException;    /**     * Sets the default state for a Switch in the CommandLine.     * @param option the Option to add to     * @param defaultSwitch the defaults state for ths switch     */    void setDefaultSwitch(final Option option, final Boolean defaultSwitch);    /**     * Adds a property value to a name in the CommandLine.     * Replaces any existing value for the property.     *     * @param property the name of the property     * @param value the value of the property     */    void addProperty(final String property, final String value);    /**     * Detects whether the argument looks like an Option trigger     * @param argument the argument to test     * @return true if the argument looks like an Option trigger     */    boolean looksLikeOption(final String argument);}"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,18,package org.apache.commons.cli2;
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,20,import java.util.List;
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,23,* A CommandLine that detected values and options can be written to.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,25,public interface WriteableCommandLine extends CommandLine {
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,28,* Adds an Option to the CommandLine
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,29,* @param option the Option to add
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,31,void addOption(final Option option);
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,34,* Adds a value to an Option in the CommandLine.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,35,* @param option the Option to add to
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,36,* @param value the value to add
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,38,"void addValue(final Option option, final Object value);"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,41,* Sets the default values for an Option in the CommandLine
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,42,* @param option the Option to add to
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,43,* @param defaultValues the defaults for the option
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,45,"void setDefaultValues(final Option option, final List defaultValues);"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,48,* Adds a switch value to an Option in the CommandLine.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,49,* @param option the Option to add to
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,50,* @param value the switch value to add
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,51,* @throws IllegalStateException if the switch has already been added
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,53,"void addSwitch(final Option option, final boolean value) throws IllegalStateException;"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,56,* Sets the default state for a Switch in the CommandLine.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,57,* @param option the Option to add to
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,58,* @param defaultSwitch the defaults state for ths switch
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,60,"void setDefaultSwitch(final Option option, final Boolean defaultSwitch);"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,63,* Adds a property value to a name in the CommandLine.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,64,* Replaces any existing value for the property.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,66,* @param property the name of the property
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,67,* @param value the value of the property
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,69,"void addProperty(final String property, final String value);"
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,72,* Detects whether the argument looks like an Option trigger
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,73,* @param argument the argument to test
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,74,* @return true if the argument looks like an Option trigger
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,76,boolean looksLikeOption(final String argument);
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.ArrayList;import java.util.List;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.option.ArgumentImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;import org.apache.commons.cli2.validation.Validator;/** * Builds Argument instances. */public class ArgumentBuilder {	/** i18n */	private final static ResourceHelper resources = ResourceHelper.getResourceHelper();    /** name of the argument. Used for display and lookups in CommandLine */    private String name;    /** description of the argument. Used in the automated online help */    private String description;    /** minimum number of values required */    private int minimum;    /** maximum number of values permitted */    private int maximum;    /** character used to separate the values from the option */    private char initialSeparator;    /** character used to separate the values from each other */    private char subsequentSeparator;    /** object that should be used to ensure the values are valid */    private Validator validator;    /** used to identify the consume remaining option, typically ""--"" */    private String consumeRemaining;    /** default values for argument */    private List defaultValues;    /** id of the argument */    private int id;    /**     * Creates a new ArgumentBuilder instance     */    public ArgumentBuilder() {        reset();    }    /**     * Creates a new Argument instance using the options specified in this     * ArgumentBuilder.     *     * @return A new Argument instance using the options specified in this     * ArgumentBuilder.     */    public final Argument create() {        final Argument argument =            new ArgumentImpl(                name,                description,                minimum,                maximum,                initialSeparator,                subsequentSeparator,                validator,                consumeRemaining,                defaultValues,                id);        reset();        return argument;    }    /**     * Resets the ArgumentBuilder to the defaults for a new Argument. The     * method is called automatically at the end of a create() call.     */    public final ArgumentBuilder reset() {        name = ""arg"";        description = null;        minimum = 0;        maximum = Integer.MAX_VALUE;        initialSeparator = ArgumentImpl.DEFAULT_INITIAL_SEPARATOR;        subsequentSeparator = ArgumentImpl.DEFAULT_SUBSEQUENT_SEPARATOR;        validator = null;        consumeRemaining = ""--"";        defaultValues = null;        id = 0;        return this;    }    /**     * Sets the name of the argument. The name is used when displaying usage     * information and to allow lookups in the CommandLine object.     *     * @see org.apache.commons.cli2.CommandLine#getValue(String)     *     * @param newName the name of the argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withName(final String newName) {    	if (newName == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME));    	}    	if ("""".equals(newName)) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME));    	}        this.name = newName;        return this;    }    /**     * Sets the description of the argument.     *     * The description is used when displaying online help.     *     * @param newDescription a description of the argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Sets the minimum number of values needed for the argument to be valid.     *     * @param newMinimum the number of values needed     * @return this ArgumentBuilder     */    public final ArgumentBuilder withMinimum(final int newMinimum) {    	if (newMinimum < 0) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM));    	}        this.minimum = newMinimum;        return this;    }    /**     * Sets the maximum number of values allowed for the argument to be valid.     *     * @param newMaximum the number of values allowed     * @return this ArgumentBuilder     */    public final ArgumentBuilder withMaximum(final int newMaximum) {    	if (newMaximum < 0) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM));    	}        this.maximum = newMaximum;        return this;    }    /**     * Sets the character used to separate the values from the option. When an     * argument is of the form -libs:dir1,dir2,dir3 the initialSeparator would     * be ':'.     *     * @param newInitialSeparator the character used to separate the values     * from the option     * @return this ArgumentBuilder     */    public final ArgumentBuilder withInitialSeparator(        final char newInitialSeparator) {        this.initialSeparator = newInitialSeparator;        return this;    }    /**     * Sets the character used to separate the values from each other. When an     * argument is of the form -libs:dir1,dir2,dir3 the subsequentSeparator     * would be ','.     *     * @param newSubsequentSeparator the character used to separate the values     * from each other     * @return this ArgumentBuilder     */    public final ArgumentBuilder withSubsequentSeparator(        final char newSubsequentSeparator) {        this.subsequentSeparator = newSubsequentSeparator;        return this;    }    /**     * Sets the validator instance used to perform validation on the Argument     * values.     *     * @param newValidator a Validator instance     * @return this ArgumentBuilder     */    public final ArgumentBuilder withValidator(final Validator newValidator) {    	if (newValidator == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR));    	}        this.validator = newValidator;        return this;    }    /**     * Sets the ""consume remaining"" option, defaults to ""--"". Use this if you     * want to allow values that might be confused with option strings.     *     * @param newConsumeRemaining the string to use for the consume     * remaining option     * @return this ArgumentBuilder     */    public final ArgumentBuilder withConsumeRemaining(final String newConsumeRemaining) {    	if (newConsumeRemaining == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));    	}    	if ( """".equals(newConsumeRemaining)) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));    	}        this.consumeRemaining = newConsumeRemaining;        return this;    }    /**     * Sets the default value.     *     * @param defaultValue the default value for the Argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withDefault(final Object defaultValue) {    	if (defaultValue == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));    	}        if (this.defaultValues == null) {            this.defaultValues = new ArrayList(1);        }        this.defaultValues.add(defaultValue);        return this;    }    /**     * Sets the default values.     *     * @param newDefaultValues the default values for the Argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withDefaults(final List newDefaultValues) {    	if (newDefaultValues == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS));    	}        this.defaultValues = newDefaultValues;        return this;    }    /**     * Sets the id     *     * @param newId the id of the Argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withId(final int newId) {        this.id = newId;        return this;    }}"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,18,package org.apache.commons.cli2.builder;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,21,import java.util.List;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,23,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,24,import org.apache.commons.cli2.option.ArgumentImpl;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,25,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,26,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,27,import org.apache.commons.cli2.validation.Validator;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,30,* Builds Argument instances.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,32,public class ArgumentBuilder {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,34,/** i18n */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,35,private final static ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,37,/** name of the argument. Used for display and lookups in CommandLine */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,38,private String name;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,40,/** description of the argument. Used in the automated online help */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,41,private String description;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,43,/** minimum number of values required */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,44,private int minimum;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,46,/** maximum number of values permitted */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,47,private int maximum;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,49,/** character used to separate the values from the option */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,50,private char initialSeparator;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,52,/** character used to separate the values from each other */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,53,private char subsequentSeparator;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,55,/** object that should be used to ensure the values are valid */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,56,private Validator validator;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,58,"/** used to identify the consume remaining option, typically ""--"" */"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,59,private String consumeRemaining;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,61,/** default values for argument */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,62,private List defaultValues;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,64,/** id of the argument */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,65,private int id;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,68,* Creates a new ArgumentBuilder instance
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,70,public ArgumentBuilder() {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,71,reset();
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,75,* Creates a new Argument instance using the options specified in this
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,76,* ArgumentBuilder.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,78,* @return A new Argument instance using the options specified in this
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,79,* ArgumentBuilder.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,81,public final Argument create() {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,82,final Argument argument =
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,83,new ArgumentImpl(
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,84,"name,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,85,"description,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,86,"minimum,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,87,"maximum,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,88,"initialSeparator,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,89,"subsequentSeparator,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,90,"validator,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,91,"consumeRemaining,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,92,"defaultValues,"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,93,id);
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,95,reset();
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,97,return argument;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,101,* Resets the ArgumentBuilder to the defaults for a new Argument. The
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,102,* method is called automatically at the end of a create() call.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,104,public final ArgumentBuilder reset() {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,105,"name = ""arg"";"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,106,description = null;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,107,minimum = 0;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,108,maximum = Integer.MAX_VALUE;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,109,initialSeparator = ArgumentImpl.DEFAULT_INITIAL_SEPARATOR;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,110,subsequentSeparator = ArgumentImpl.DEFAULT_SUBSEQUENT_SEPARATOR;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,111,validator = null;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,112,"consumeRemaining = ""--"";"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,113,defaultValues = null;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,114,id = 0;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,115,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,119,* Sets the name of the argument. The name is used when displaying usage
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,120,* information and to allow lookups in the CommandLine object.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,122,* @see org.apache.commons.cli2.CommandLine#getValue(String)
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,124,* @param newName the name of the argument
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,125,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,127,public final ArgumentBuilder withName(final String newName) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,128,if (newName == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,129,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,131,"if ("""".equals(newName)) {"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,132,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,134,this.name = newName;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,135,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,139,* Sets the description of the argument.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,141,* The description is used when displaying online help.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,143,* @param newDescription a description of the argument
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,144,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,146,public final ArgumentBuilder withDescription(final String newDescription) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,147,this.description = newDescription;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,148,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,152,* Sets the minimum number of values needed for the argument to be valid.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,154,* @param newMinimum the number of values needed
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,155,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,157,public final ArgumentBuilder withMinimum(final int newMinimum) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,158,if (newMinimum < 0) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,159,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,161,this.minimum = newMinimum;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,162,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,166,* Sets the maximum number of values allowed for the argument to be valid.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,168,* @param newMaximum the number of values allowed
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,169,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,171,public final ArgumentBuilder withMaximum(final int newMaximum) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,172,if (newMaximum < 0) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,173,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,175,this.maximum = newMaximum;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,176,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,180,* Sets the character used to separate the values from the option. When an
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,181,"* argument is of the form -libs:dir1,dir2,dir3 the initialSeparator would"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,182,* be ':'.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,184,* @param newInitialSeparator the character used to separate the values
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,185,* from the option
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,186,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,188,public final ArgumentBuilder withInitialSeparator(
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,189,final char newInitialSeparator) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,191,this.initialSeparator = newInitialSeparator;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,192,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,196,* Sets the character used to separate the values from each other. When an
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,197,"* argument is of the form -libs:dir1,dir2,dir3 the subsequentSeparator"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,198,"* would be ','."
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,200,* @param newSubsequentSeparator the character used to separate the values
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,201,* from each other
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,202,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,204,public final ArgumentBuilder withSubsequentSeparator(
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,205,final char newSubsequentSeparator) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,207,this.subsequentSeparator = newSubsequentSeparator;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,208,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,212,* Sets the validator instance used to perform validation on the Argument
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,213,* values.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,215,* @param newValidator a Validator instance
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,216,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,218,public final ArgumentBuilder withValidator(final Validator newValidator) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,219,if (newValidator == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,220,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,222,this.validator = newValidator;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,223,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,227,"* Sets the ""consume remaining"" option, defaults to ""--"". Use this if you"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,228,* want to allow values that might be confused with option strings.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,230,* @param newConsumeRemaining the string to use for the consume
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,231,* remaining option
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,232,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,234,public final ArgumentBuilder withConsumeRemaining(final String newConsumeRemaining) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,235,if (newConsumeRemaining == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,236,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,238,"if ( """".equals(newConsumeRemaining)) {"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,239,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,241,this.consumeRemaining = newConsumeRemaining;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,242,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,246,* Sets the default value.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,248,* @param defaultValue the default value for the Argument
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,249,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,251,public final ArgumentBuilder withDefault(final Object defaultValue) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,252,if (defaultValue == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,253,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,256,if (this.defaultValues == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,257,this.defaultValues = new ArrayList(1);
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,259,this.defaultValues.add(defaultValue);
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,260,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,264,* Sets the default values.
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,266,* @param newDefaultValues the default values for the Argument
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,267,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,269,public final ArgumentBuilder withDefaults(final List newDefaultValues) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,270,if (newDefaultValues == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,271,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,273,this.defaultValues = newDefaultValues;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,274,return this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,278,* Sets the id
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,280,* @param newId the id of the Argument
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,281,* @return this ArgumentBuilder
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,283,public final ArgumentBuilder withId(final int newId) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,284,this.id = newId;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,285,return this;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.HashSet;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.option.Command;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Builds Command instances */public class CommandBuilder {    /** the preferred name of the command */    private String preferredName;    /** the description of the command */    private String description;    /** the aliases of the command */    private Set aliases;    /** whether the command is required or not */    private boolean required;    /** the argument of the command */    private Argument argument;    /** the children of the command */    private Group children;    /** the id of the command */    private int id;    /**     * Creates a new <code>CommandBuilder</code> instance.     */    public CommandBuilder() {        reset();    }    /**     * Creates a new <code>Command</code> instance using the properties of the     * <code>CommandBuilder</code>.     *     * @return the new Command instance     */    public Command create() {        // check we have a valid name        if (preferredName == null) {            throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME));        }        // build the command        final Command option =            new Command(preferredName, description, aliases, required, argument, children, id);        // reset the builder        reset();        return option;    }    /**     * Resets the CommandBuilder to the defaults for a new Command.     *     * This method is called automatically at the end of the     * {@link #create() create} method.     */    public CommandBuilder reset() {        preferredName = null;        description = null;        aliases = new HashSet();        required = false;        argument = null;        children = null;        id = 0;        return this;    }    /**     * Specifies the name for the next <code>Command</code>     * that is created.  The first name is used as the preferred     * display name for the <code>Command</code> and then     * later names are used as aliases.     *     * @param name the name for the next <code>Command</code>     * that is created.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withName(final String name) {        if (preferredName == null) {            preferredName = name;        } else {            aliases.add(name);        }        return this;    }    /**     * Specifies the description for the next <code>Command</code>     * that is created.  This description is used to produce     * help documentation for the <code>Command</code>.     *     * @param newDescription the description for the next     * <code>Command</code> that is created.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Specifies whether the next <code>Command</code> created is     * required or not.     * @param newRequired whether the next <code>Command</code> created is     * required or not.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withRequired(final boolean newRequired) {        this.required = newRequired;        return this;    }    /**     * Specifies the children for the next <code>Command</code>     * that is created.     *     * @param newChildren the child options for the next <code>Command</code>     * that is created.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withChildren(final Group newChildren) {        this.children = newChildren;        return this;    }    /**     * Specifies the argument for the next <code>Command</code>     * that is created.     *     * @param newArgument the argument for the next <code>Command</code>     * that is created.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withArgument(final Argument newArgument) {        this.argument = newArgument;        return this;    }    /**     * Specifies the id for the next <code>Command</code> that is created.     *     * @param newId the id for the next <code>Command</code> that is created.     * @return this <code>CommandBuilder</code>.     */    public final CommandBuilder withId(final int newId) {        this.id = newId;        return this;    }}"
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,18,package org.apache.commons.cli2.builder;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,20,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,21,import java.util.Set;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,23,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,24,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,25,import org.apache.commons.cli2.option.Command;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,26,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,27,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,30,* Builds Command instances
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,32,public class CommandBuilder {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,33,/** the preferred name of the command */
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,34,private String preferredName;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,36,/** the description of the command */
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,37,private String description;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,39,/** the aliases of the command */
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,40,private Set aliases;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,42,/** whether the command is required or not */
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,43,private boolean required;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,45,/** the argument of the command */
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,46,private Argument argument;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,48,/** the children of the command */
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,49,private Group children;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,51,/** the id of the command */
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,52,private int id;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,55,* Creates a new <code>CommandBuilder</code> instance.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,57,public CommandBuilder() {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,58,reset();
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,62,* Creates a new <code>Command</code> instance using the properties of the
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,63,* <code>CommandBuilder</code>.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,65,* @return the new Command instance
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,67,public Command create() {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,68,// check we have a valid name
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,69,if (preferredName == null) {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,70,throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME));
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,73,// build the command
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,74,final Command option =
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,75,"new Command(preferredName, description, aliases, required, argument, children, id);"
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,77,// reset the builder
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,78,reset();
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,80,return option;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,84,* Resets the CommandBuilder to the defaults for a new Command.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,86,* This method is called automatically at the end of the
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,87,* {@link #create() create} method.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,89,public CommandBuilder reset() {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,90,preferredName = null;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,91,description = null;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,92,aliases = new HashSet();
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,93,required = false;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,94,argument = null;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,95,children = null;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,96,id = 0;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,98,return this;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,102,* Specifies the name for the next <code>Command</code>
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,103,* that is created.  The first name is used as the preferred
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,104,* display name for the <code>Command</code> and then
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,105,* later names are used as aliases.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,107,* @param name the name for the next <code>Command</code>
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,108,* that is created.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,109,* @return this <code>CommandBuilder</code>.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,111,public CommandBuilder withName(final String name) {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,112,if (preferredName == null) {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,113,preferredName = name;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,114,} else {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,115,aliases.add(name);
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,118,return this;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,122,* Specifies the description for the next <code>Command</code>
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,123,* that is created.  This description is used to produce
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,124,* help documentation for the <code>Command</code>.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,126,* @param newDescription the description for the next
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,127,* <code>Command</code> that is created.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,128,* @return this <code>CommandBuilder</code>.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,130,public CommandBuilder withDescription(final String newDescription) {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,131,this.description = newDescription;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,133,return this;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,137,* Specifies whether the next <code>Command</code> created is
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,138,* required or not.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,139,* @param newRequired whether the next <code>Command</code> created is
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,140,* required or not.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,141,* @return this <code>CommandBuilder</code>.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,143,public CommandBuilder withRequired(final boolean newRequired) {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,144,this.required = newRequired;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,146,return this;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,150,* Specifies the children for the next <code>Command</code>
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,151,* that is created.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,153,* @param newChildren the child options for the next <code>Command</code>
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,154,* that is created.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,155,* @return this <code>CommandBuilder</code>.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,157,public CommandBuilder withChildren(final Group newChildren) {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,158,this.children = newChildren;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,160,return this;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,164,* Specifies the argument for the next <code>Command</code>
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,165,* that is created.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,167,* @param newArgument the argument for the next <code>Command</code>
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,168,* that is created.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,169,* @return this <code>CommandBuilder</code>.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,171,public CommandBuilder withArgument(final Argument newArgument) {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,172,this.argument = newArgument;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,174,return this;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,178,* Specifies the id for the next <code>Command</code> that is created.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,180,* @param newId the id for the next <code>Command</code> that is created.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,181,* @return this <code>CommandBuilder</code>.
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,183,public final CommandBuilder withId(final int newId) {
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,184,this.id = newId;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,186,return this;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.HashSet;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Builds DefaultOption instances. */public class DefaultOptionBuilder {    private final String shortPrefix;    private final String longPrefix;    private final boolean burstEnabled;    private String preferredName;    private Set aliases;    private Set burstAliases;    private boolean required;    private String description;    private Argument argument;    private Group children;    private int id;    /**     * Creates a new DefaultOptionBuilder using defaults     * @see DefaultOption#DEFAULT_SHORT_PREFIX     * @see DefaultOption#DEFAULT_LONG_PREFIX     * @see DefaultOption#DEFAULT_BURST_ENABLED     */    public DefaultOptionBuilder() {        this(DefaultOption.DEFAULT_SHORT_PREFIX, DefaultOption.DEFAULT_LONG_PREFIX,             DefaultOption.DEFAULT_BURST_ENABLED);    }    /**     * Creates a new DefaultOptionBuilder     * @param shortPrefix the prefix to use for short options     * @param longPrefix the prefix to use for long options     * @param burstEnabled whether to allow gnu style bursting     * @throws IllegalArgumentException if either prefix is less than on     *                                  character long     */    public DefaultOptionBuilder(final String shortPrefix,                                final String longPrefix,                                final boolean burstEnabled)        throws IllegalArgumentException {        if ((shortPrefix == null) || (shortPrefix.length() == 0)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX));        }        if ((longPrefix == null) || (longPrefix.length() == 0)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX));        }        this.shortPrefix = shortPrefix;        this.longPrefix = longPrefix;        this.burstEnabled = burstEnabled;        reset();    }    /**     * Creates a DefaultOption instance     * @return the new instance     * @throws IllegalStateException if no names have been supplied     */    public DefaultOption create()        throws IllegalStateException {        if (preferredName == null) {            throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME));        }        final DefaultOption option =            new DefaultOption(shortPrefix, longPrefix, burstEnabled, preferredName, description,                              aliases, burstAliases, required, argument, children, id);        reset();        return option;    }    /**     * Resets the builder     */    public DefaultOptionBuilder reset() {        preferredName = null;        description = null;        aliases = new HashSet();        burstAliases = new HashSet();        required = false;        argument = null;        children = null;        id = 0;        return this;    }    /**     * Use this short option name. The first name is used as the preferred     * display name for the Command and then later names are used as aliases.     *     * @param shortName the name to use     * @return this builder     */    public DefaultOptionBuilder withShortName(final String shortName) {        final String name = shortPrefix + shortName;        if (preferredName == null) {            preferredName = name;        } else {            aliases.add(name);        }        if (burstEnabled && (name.length() == (shortPrefix.length() + 1))) {            burstAliases.add(name);        }        return this;    }    /**     * Use this long option name.  The first name is used as the preferred     * display name for the Command and then later names are used as aliases.     *     * @param longName the name to use     * @return this builder     */    public DefaultOptionBuilder withLongName(final String longName) {        final String name = longPrefix + longName;        if (preferredName == null) {            preferredName = name;        } else {            aliases.add(name);        }        return this;    }    /**     * Use this option description     * @param newDescription the description to use     * @return this builder     */    public DefaultOptionBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Use this optionality     * @param newRequired true iff the Option is required     * @return this builder     */    public DefaultOptionBuilder withRequired(final boolean newRequired) {        this.required = newRequired;        return this;    }    /**     * Use this child Group     * @param newChildren the child Group to use     * @return this builder     */    public DefaultOptionBuilder withChildren(final Group newChildren) {        this.children = newChildren;        return this;    }    /**     * Use this Argument     * @param newArgument the argument to use     * @return this builder     */    public DefaultOptionBuilder withArgument(final Argument newArgument) {        this.argument = newArgument;        return this;    }    /**     * Sets the id     *     * @param newId     *            the id of the DefaultOption     * @return this DefaultOptionBuilder     */    public final DefaultOptionBuilder withId(final int newId) {        this.id = newId;        return this;    }}"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,18,package org.apache.commons.cli2.builder;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,20,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,21,import java.util.Set;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,23,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,24,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,25,import org.apache.commons.cli2.option.DefaultOption;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,26,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,27,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,30,* Builds DefaultOption instances.
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,32,public class DefaultOptionBuilder {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,33,private final String shortPrefix;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,34,private final String longPrefix;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,35,private final boolean burstEnabled;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,36,private String preferredName;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,37,private Set aliases;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,38,private Set burstAliases;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,39,private boolean required;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,40,private String description;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,41,private Argument argument;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,42,private Group children;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,43,private int id;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,46,* Creates a new DefaultOptionBuilder using defaults
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,47,* @see DefaultOption#DEFAULT_SHORT_PREFIX
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,48,* @see DefaultOption#DEFAULT_LONG_PREFIX
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,49,* @see DefaultOption#DEFAULT_BURST_ENABLED
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,51,public DefaultOptionBuilder() {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,52,"this(DefaultOption.DEFAULT_SHORT_PREFIX, DefaultOption.DEFAULT_LONG_PREFIX,"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,53,DefaultOption.DEFAULT_BURST_ENABLED);
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,57,* Creates a new DefaultOptionBuilder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,58,* @param shortPrefix the prefix to use for short options
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,59,* @param longPrefix the prefix to use for long options
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,60,* @param burstEnabled whether to allow gnu style bursting
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,61,* @throws IllegalArgumentException if either prefix is less than on
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,62,*                                  character long
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,64,"public DefaultOptionBuilder(final String shortPrefix,"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,65,"final String longPrefix,"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,66,final boolean burstEnabled)
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,67,throws IllegalArgumentException {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,68,if ((shortPrefix == null) || (shortPrefix.length() == 0)) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,69,throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX));
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,72,if ((longPrefix == null) || (longPrefix.length() == 0)) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,73,throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX));
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,76,this.shortPrefix = shortPrefix;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,77,this.longPrefix = longPrefix;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,78,this.burstEnabled = burstEnabled;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,79,reset();
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,83,* Creates a DefaultOption instance
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,84,* @return the new instance
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,85,* @throws IllegalStateException if no names have been supplied
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,87,public DefaultOption create()
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,88,throws IllegalStateException {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,89,if (preferredName == null) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,90,throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME));
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,93,final DefaultOption option =
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,94,"new DefaultOption(shortPrefix, longPrefix, burstEnabled, preferredName, description,"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,95,"aliases, burstAliases, required, argument, children, id);"
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,97,reset();
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,99,return option;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,103,* Resets the builder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,105,public DefaultOptionBuilder reset() {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,106,preferredName = null;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,107,description = null;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,108,aliases = new HashSet();
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,109,burstAliases = new HashSet();
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,110,required = false;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,111,argument = null;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,112,children = null;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,113,id = 0;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,115,return this;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,119,* Use this short option name. The first name is used as the preferred
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,120,* display name for the Command and then later names are used as aliases.
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,122,* @param shortName the name to use
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,123,* @return this builder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,125,public DefaultOptionBuilder withShortName(final String shortName) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,126,final String name = shortPrefix + shortName;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,128,if (preferredName == null) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,129,preferredName = name;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,130,} else {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,131,aliases.add(name);
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,134,if (burstEnabled && (name.length() == (shortPrefix.length() + 1))) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,135,burstAliases.add(name);
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,138,return this;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,142,* Use this long option name.  The first name is used as the preferred
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,143,* display name for the Command and then later names are used as aliases.
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,145,* @param longName the name to use
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,146,* @return this builder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,148,public DefaultOptionBuilder withLongName(final String longName) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,149,final String name = longPrefix + longName;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,151,if (preferredName == null) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,152,preferredName = name;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,153,} else {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,154,aliases.add(name);
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,157,return this;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,161,* Use this option description
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,162,* @param newDescription the description to use
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,163,* @return this builder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,165,public DefaultOptionBuilder withDescription(final String newDescription) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,166,this.description = newDescription;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,168,return this;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,172,* Use this optionality
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,173,* @param newRequired true iff the Option is required
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,174,* @return this builder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,176,public DefaultOptionBuilder withRequired(final boolean newRequired) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,177,this.required = newRequired;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,179,return this;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,183,* Use this child Group
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,184,* @param newChildren the child Group to use
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,185,* @return this builder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,187,public DefaultOptionBuilder withChildren(final Group newChildren) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,188,this.children = newChildren;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,190,return this;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,194,* Use this Argument
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,195,* @param newArgument the argument to use
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,196,* @return this builder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,198,public DefaultOptionBuilder withArgument(final Argument newArgument) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,199,this.argument = newArgument;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,201,return this;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,205,* Sets the id
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,207,* @param newId
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,208,*            the id of the DefaultOption
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,209,* @return this DefaultOptionBuilder
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,211,public final DefaultOptionBuilder withId(final int newId) {
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,212,this.id = newId;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,214,return this;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.ArrayList;import java.util.List;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.option.GroupImpl;/** * Builds Group instances */public class GroupBuilder {    private String name;    private String description;    private List options;    private int minimum;    private int maximum;    /**     * Creates a new GroupBuilder     */    public GroupBuilder() {        reset();    }    /**     * Creates a new Group instance     * @return the new Group instance     */    public Group create() {        final GroupImpl group =            new GroupImpl(options, name, description, minimum, maximum);        reset();        return group;    }    /**     * Resets the builder     */    public GroupBuilder reset() {        name = null;        description = null;        options = new ArrayList();        minimum = 0;        maximum = Integer.MAX_VALUE;        return this;    }    /**     * Use this option description     * @param newDescription the description to use     * @return this builder     */    public GroupBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Use this option name     * @param newName the name to use     * @return this builder     */    public GroupBuilder withName(final String newName) {        this.name = newName;        return this;    }    /**     * A valid group requires at least this many options present     * @param newMinimum the minimum Options required     * @return this builder     */    public GroupBuilder withMinimum(final int newMinimum) {        this.minimum = newMinimum;        return this;    }    /**     * A valid group requires at most this many options present     * @param newMaximum the maximum Options allowed     * @return this builder     */    public GroupBuilder withMaximum(final int newMaximum) {        this.maximum = newMaximum;        return this;    }    /**     * Add this option to the group     * @param option the Option to add     * @return this builder     */    public GroupBuilder withOption(final Option option) {        this.options.add(option);        return this;    }}"
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,18,package org.apache.commons.cli2.builder;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,21,import java.util.List;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,23,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,24,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,25,import org.apache.commons.cli2.option.GroupImpl;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,28,* Builds Group instances
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,30,public class GroupBuilder {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,32,private String name;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,33,private String description;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,34,private List options;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,35,private int minimum;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,36,private int maximum;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,39,* Creates a new GroupBuilder
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,41,public GroupBuilder() {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,42,reset();
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,46,* Creates a new Group instance
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,47,* @return the new Group instance
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,49,public Group create() {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,50,final GroupImpl group =
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,51,"new GroupImpl(options, name, description, minimum, maximum);"
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,53,reset();
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,55,return group;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,59,* Resets the builder
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,61,public GroupBuilder reset() {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,62,name = null;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,63,description = null;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,64,options = new ArrayList();
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,65,minimum = 0;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,66,maximum = Integer.MAX_VALUE;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,67,return this;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,71,* Use this option description
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,72,* @param newDescription the description to use
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,73,* @return this builder
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,75,public GroupBuilder withDescription(final String newDescription) {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,76,this.description = newDescription;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,77,return this;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,81,* Use this option name
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,82,* @param newName the name to use
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,83,* @return this builder
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,85,public GroupBuilder withName(final String newName) {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,86,this.name = newName;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,87,return this;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,91,* A valid group requires at least this many options present
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,92,* @param newMinimum the minimum Options required
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,93,* @return this builder
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,95,public GroupBuilder withMinimum(final int newMinimum) {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,96,this.minimum = newMinimum;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,97,return this;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,101,* A valid group requires at most this many options present
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,102,* @param newMaximum the maximum Options allowed
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,103,* @return this builder
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,105,public GroupBuilder withMaximum(final int newMaximum) {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,106,this.maximum = newMaximum;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,107,return this;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,111,* Add this option to the group
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,112,* @param option the Option to add
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,113,* @return this builder
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,115,public GroupBuilder withOption(final Option option) {
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,116,this.options.add(option);
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,117,return this;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.Iterator;import java.util.LinkedHashSet;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.validation.ClassValidator;import org.apache.commons.cli2.validation.DateValidator;import org.apache.commons.cli2.validation.FileValidator;import org.apache.commons.cli2.validation.NumberValidator;import org.apache.commons.cli2.validation.UrlValidator;import org.apache.commons.cli2.validation.Validator;/** * Builds Options using a String pattern *///TODO Document and link to the acceptable patternspublic class PatternBuilder {    private final GroupBuilder gbuilder;    private final DefaultOptionBuilder obuilder;    private final ArgumentBuilder abuilder;    /**     * Creates a new PatternBuilder     */    public PatternBuilder() {        this(            new GroupBuilder(),            new DefaultOptionBuilder(),            new ArgumentBuilder());    }    /**     * Creates a new PatternBuilder     * @param gbuilder the GroupBuilder to use     * @param obuilder the DefaultOptionBuilder to use     * @param abuilder the ArgumentBuilder to use     */    public PatternBuilder(        final GroupBuilder gbuilder,        final DefaultOptionBuilder obuilder,        final ArgumentBuilder abuilder) {        this.gbuilder = gbuilder;        this.obuilder = obuilder;        this.abuilder = abuilder;    }    private final Set options = new LinkedHashSet();    /**     * Creates a new Option instance.     * @return a new Option instance     */    public Option create() {        final Option option;        if (options.size() == 1) {            option = (Option)options.iterator().next();        }        else {            gbuilder.reset();            for (final Iterator i = options.iterator(); i.hasNext();) {                gbuilder.withOption((Option)i.next());            }            option = gbuilder.create();        }        reset();        return option;    }    /**     * Resets this builder     */    public PatternBuilder reset() {        options.clear();        return this;    }    private void createOption(        final char type,        final boolean required,        final char opt) {        final Argument argument;        if (type != ' ') {            abuilder.reset();            abuilder.withValidator(validator(type));            if (required) {                abuilder.withMinimum(1);            }            if (type != '*') {                abuilder.withMaximum(1);            }            argument = abuilder.create();        }        else {            argument = null;        }        obuilder.reset();        obuilder.withArgument(argument);        obuilder.withShortName(String.valueOf(opt));        obuilder.withRequired(required);        options.add(obuilder.create());    }    /**     * Builds an Option using a pattern string.     * @param pattern the pattern to build from     */    public void withPattern(final String pattern) {        int sz = pattern.length();        char opt = ' ';        char ch = ' ';        char type = ' ';        boolean required = false;        for (int i = 0; i < sz; i++) {            ch = pattern.charAt(i);            switch (ch) {                case '!' :                    required = true;                    break;                case '@' :                case ':' :                case '%' :                case '+' :                case '#' :                case '<' :                case '>' :                case '*' :                case '/' :                    type = ch;                    break;                default :                    if (opt != ' ') {                        createOption(type, required, opt);                        required = false;                        type = ' ';                    }                    opt = ch;            }        }        if (opt != ' ') {            createOption(type, required, opt);        }    }    private static Validator validator(final char c) {        switch (c) {            case '@' :                final ClassValidator classv = new ClassValidator();                classv.setInstance(true);                return classv;            case '+' :                final ClassValidator instancev = new ClassValidator();                return instancev;                //case ':':// no validator needed for a string            case '%' :                return NumberValidator.getNumberInstance();            case '#' :                return DateValidator.getDateInstance();            case '<' :                final FileValidator existingv = new FileValidator();                existingv.setExisting(true);                existingv.setFile(true);                return existingv;            case '>' :            case '*' :                return new FileValidator();            case '/' :                return new UrlValidator();            default :                return null;        }    }}"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,18,package org.apache.commons.cli2.builder;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,20,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,21,import java.util.LinkedHashSet;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,22,import java.util.Set;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,24,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,25,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,26,import org.apache.commons.cli2.validation.ClassValidator;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,27,import org.apache.commons.cli2.validation.DateValidator;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,28,import org.apache.commons.cli2.validation.FileValidator;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,29,import org.apache.commons.cli2.validation.NumberValidator;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,30,import org.apache.commons.cli2.validation.UrlValidator;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,31,import org.apache.commons.cli2.validation.Validator;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,34,* Builds Options using a String pattern
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,36,//TODO Document and link to the acceptable patterns
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,37,public class PatternBuilder {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,39,private final GroupBuilder gbuilder;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,40,private final DefaultOptionBuilder obuilder;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,41,private final ArgumentBuilder abuilder;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,44,* Creates a new PatternBuilder
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,46,public PatternBuilder() {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,47,this(
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,48,"new GroupBuilder(),"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,49,"new DefaultOptionBuilder(),"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,50,new ArgumentBuilder());
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,54,* Creates a new PatternBuilder
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,55,* @param gbuilder the GroupBuilder to use
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,56,* @param obuilder the DefaultOptionBuilder to use
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,57,* @param abuilder the ArgumentBuilder to use
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,59,public PatternBuilder(
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,60,"final GroupBuilder gbuilder,"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,61,"final DefaultOptionBuilder obuilder,"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,62,final ArgumentBuilder abuilder) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,63,this.gbuilder = gbuilder;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,64,this.obuilder = obuilder;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,65,this.abuilder = abuilder;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,68,private final Set options = new LinkedHashSet();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,71,* Creates a new Option instance.
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,72,* @return a new Option instance
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,74,public Option create() {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,75,final Option option;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,77,if (options.size() == 1) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,78,option = (Option)options.iterator().next();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,80,else {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,81,gbuilder.reset();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,82,for (final Iterator i = options.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,83,gbuilder.withOption((Option)i.next());
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,85,option = gbuilder.create();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,88,reset();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,90,return option;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,94,* Resets this builder
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,96,public PatternBuilder reset() {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,97,options.clear();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,98,return this;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,101,private void createOption(
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,102,"final char type,"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,103,"final boolean required,"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,104,final char opt) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,105,final Argument argument;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,106,if (type != ' ') {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,107,abuilder.reset();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,108,abuilder.withValidator(validator(type));
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,109,if (required) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,110,abuilder.withMinimum(1);
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,112,if (type != '*') {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,113,abuilder.withMaximum(1);
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,115,argument = abuilder.create();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,117,else {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,118,argument = null;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,121,obuilder.reset();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,122,obuilder.withArgument(argument);
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,123,obuilder.withShortName(String.valueOf(opt));
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,124,obuilder.withRequired(required);
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,126,options.add(obuilder.create());
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,130,* Builds an Option using a pattern string.
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,131,* @param pattern the pattern to build from
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,133,public void withPattern(final String pattern) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,134,int sz = pattern.length();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,136,char opt = ' ';
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,137,char ch = ' ';
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,138,char type = ' ';
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,139,boolean required = false;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,141,for (int i = 0; i < sz; i++) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,142,ch = pattern.charAt(i);
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,144,switch (ch) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,145,case '!' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,146,required = true;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,147,break;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,148,case '@' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,149,case ':' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,150,case '%' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,151,case '+' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,152,case '#' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,153,case '<' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,154,case '>' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,155,case '*' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,156,case '/' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,157,type = ch;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,158,break;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,159,default :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,160,if (opt != ' ') {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,161,"createOption(type, required, opt);"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,162,required = false;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,163,type = ' ';
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,166,opt = ch;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,170,if (opt != ' ') {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,171,"createOption(type, required, opt);"
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,175,private static Validator validator(final char c) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,176,switch (c) {
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,177,case '@' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,178,final ClassValidator classv = new ClassValidator();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,179,classv.setInstance(true);
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,180,return classv;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,181,case '+' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,182,final ClassValidator instancev = new ClassValidator();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,183,return instancev;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,184,//case ':':// no validator needed for a string
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,185,case '%' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,186,return NumberValidator.getNumberInstance();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,187,case '#' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,188,return DateValidator.getDateInstance();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,189,case '<' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,190,final FileValidator existingv = new FileValidator();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,191,existingv.setExisting(true);
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,192,existingv.setFile(true);
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,193,return existingv;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,194,case '>' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,195,case '*' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,196,return new FileValidator();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,197,case '/' :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,198,return new UrlValidator();
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,199,default :
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,200,return null;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.HashSet;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.option.Switch;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Builds Switch instance. */public class SwitchBuilder {    private final String enabledPrefix;    private final String disabledPrefix;    private String description;    private String preferredName;    private Set aliases;    private boolean required;    private Argument argument;    private Group children;    private int id;    private Boolean switchDefault;    /**     * Creates a new SwitchBuilder using defaults.     * @see Switch#DEFAULT_ENABLED_PREFIX     * @see Switch#DEFAULT_DISABLED_PREFIX     */    public SwitchBuilder() {        this(Switch.DEFAULT_ENABLED_PREFIX, Switch.DEFAULT_DISABLED_PREFIX);    }    /**     * Creates a new SwitchBuilder     * @param enabledPrefix the prefix to use for enabling the option     * @param disabledPrefix the prefix to use for disabling the option     * @throws IllegalArgumentException if either prefix is less than 1     *                                  character long or the prefixes match     */    public SwitchBuilder(final String enabledPrefix,                         final String disabledPrefix)        throws IllegalArgumentException {        if ((enabledPrefix == null) || (enabledPrefix.length() < 1)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ILLEGAL_ENABLED_PREFIX));        }        if ((disabledPrefix == null) || (disabledPrefix.length() < 1)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ILLEGAL_DISABLED_PREFIX));        }        if (enabledPrefix.equals(disabledPrefix)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_IDENTICAL_PREFIXES));        }        this.enabledPrefix = enabledPrefix;        this.disabledPrefix = disabledPrefix;        reset();    }    /**     * Creates a new Switch instance     * @return a new Switch instance     */    public Switch create() {        final Switch option =            new Switch(enabledPrefix, disabledPrefix, preferredName, aliases, description,                       required, argument, children, id, switchDefault);        reset();        return option;    }    /**     * Resets the builder     */    public SwitchBuilder reset() {        description = null;        preferredName = null;        required = false;        aliases = new HashSet();        argument = null;        children = null;        id = 0;        switchDefault = null;        return this;    }    /**     * Use this option description     * @param newDescription the description to use     * @return this builder     */    public SwitchBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Use this option name. The first name is used as the preferred     * display name for the Command and then later names are used as aliases.     *     * @param name the name to use     * @return this builder     */    public SwitchBuilder withName(final String name) {        if (preferredName == null) {            preferredName = name;        } else {            aliases.add(name);        }        return this;    }    /**     * Use this optionality     * @param newRequired true iff the Option is required     * @return this builder     */    public SwitchBuilder withRequired(final boolean newRequired) {        this.required = newRequired;        return this;    }    /**     * Use this Argument     * @param newArgument the argument to use     * @return this builder     */    public SwitchBuilder withArgument(final Argument newArgument) {        this.argument = newArgument;        return this;    }    /**     * Use this child Group     * @param newChildren the child Group to use     * @return this builder     */    public SwitchBuilder withChildren(final Group newChildren) {        this.children = newChildren;        return this;    }    /**     * Sets the id     *     * @param newId     *            the id of the Switch     * @return this SwitchBuilder     */    public final SwitchBuilder withId(final int newId) {        this.id = newId;        return this;    }    /**     * Sets the default state for this switch     *     * @param newSwitchDefault the default state     * @return this SwitchBuilder     */    public final SwitchBuilder withSwitchDefault(final Boolean newSwitchDefault) {        this.switchDefault = newSwitchDefault;        return this;    }}"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,18,package org.apache.commons.cli2.builder;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,20,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,21,import java.util.Set;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,23,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,24,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,25,import org.apache.commons.cli2.option.Switch;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,26,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,27,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,30,* Builds Switch instance.
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,32,public class SwitchBuilder {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,33,private final String enabledPrefix;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,34,private final String disabledPrefix;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,35,private String description;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,36,private String preferredName;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,37,private Set aliases;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,38,private boolean required;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,39,private Argument argument;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,40,private Group children;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,41,private int id;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,42,private Boolean switchDefault;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,45,* Creates a new SwitchBuilder using defaults.
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,46,* @see Switch#DEFAULT_ENABLED_PREFIX
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,47,* @see Switch#DEFAULT_DISABLED_PREFIX
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,49,public SwitchBuilder() {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,50,"this(Switch.DEFAULT_ENABLED_PREFIX, Switch.DEFAULT_DISABLED_PREFIX);"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,54,* Creates a new SwitchBuilder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,55,* @param enabledPrefix the prefix to use for enabling the option
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,56,* @param disabledPrefix the prefix to use for disabling the option
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,57,* @throws IllegalArgumentException if either prefix is less than 1
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,58,*                                  character long or the prefixes match
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,60,"public SwitchBuilder(final String enabledPrefix,"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,61,final String disabledPrefix)
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,62,throws IllegalArgumentException {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,63,if ((enabledPrefix == null) || (enabledPrefix.length() < 1)) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,64,throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ILLEGAL_ENABLED_PREFIX));
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,67,if ((disabledPrefix == null) || (disabledPrefix.length() < 1)) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,68,throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ILLEGAL_DISABLED_PREFIX));
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,71,if (enabledPrefix.equals(disabledPrefix)) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,72,throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_IDENTICAL_PREFIXES));
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,75,this.enabledPrefix = enabledPrefix;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,76,this.disabledPrefix = disabledPrefix;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,77,reset();
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,81,* Creates a new Switch instance
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,82,* @return a new Switch instance
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,84,public Switch create() {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,85,final Switch option =
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,86,"new Switch(enabledPrefix, disabledPrefix, preferredName, aliases, description,"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,87,"required, argument, children, id, switchDefault);"
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,89,reset();
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,91,return option;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,95,* Resets the builder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,97,public SwitchBuilder reset() {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,98,description = null;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,99,preferredName = null;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,100,required = false;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,101,aliases = new HashSet();
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,102,argument = null;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,103,children = null;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,104,id = 0;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,105,switchDefault = null;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,107,return this;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,111,* Use this option description
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,112,* @param newDescription the description to use
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,113,* @return this builder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,115,public SwitchBuilder withDescription(final String newDescription) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,116,this.description = newDescription;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,118,return this;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,122,* Use this option name. The first name is used as the preferred
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,123,* display name for the Command and then later names are used as aliases.
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,125,* @param name the name to use
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,126,* @return this builder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,128,public SwitchBuilder withName(final String name) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,129,if (preferredName == null) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,130,preferredName = name;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,131,} else {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,132,aliases.add(name);
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,135,return this;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,139,* Use this optionality
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,140,* @param newRequired true iff the Option is required
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,141,* @return this builder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,143,public SwitchBuilder withRequired(final boolean newRequired) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,144,this.required = newRequired;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,146,return this;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,150,* Use this Argument
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,151,* @param newArgument the argument to use
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,152,* @return this builder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,154,public SwitchBuilder withArgument(final Argument newArgument) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,155,this.argument = newArgument;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,157,return this;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,161,* Use this child Group
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,162,* @param newChildren the child Group to use
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,163,* @return this builder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,165,public SwitchBuilder withChildren(final Group newChildren) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,166,this.children = newChildren;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,168,return this;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,172,* Sets the id
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,174,* @param newId
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,175,*            the id of the Switch
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,176,* @return this SwitchBuilder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,178,public final SwitchBuilder withId(final int newId) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,179,this.id = newId;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,181,return this;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,185,* Sets the default state for this switch
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,187,* @param newSwitchDefault the default state
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,188,* @return this SwitchBuilder
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,190,public final SwitchBuilder withSwitchDefault(final Boolean newSwitchDefault) {
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,191,this.switchDefault = newSwitchDefault;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,193,return this;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.Collections;import java.util.Iterator;import java.util.List;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Instances of CommandLine represent a command line that has been processed * according to the definition supplied to the parser. */public abstract class CommandLineImpl implements CommandLine {    public final boolean hasOption(final String trigger) {        return hasOption(getOption(trigger));    }    public final List getValues(final String trigger) {        return getValues(getOption(trigger), Collections.EMPTY_LIST);    }    public final List getValues(final String trigger,                                final List defaultValues) {        return getValues(getOption(trigger), defaultValues);    }    public final List getValues(final Option option) {        return getValues(option, Collections.EMPTY_LIST);    }    public final Object getValue(final String trigger) {        return getValue(getOption(trigger), null);    }    public final Object getValue(final String trigger,                                 final Object defaultValue) {        return getValue(getOption(trigger), defaultValue);    }    public final Object getValue(final Option option) {        return getValue(option, null);    }    public final Object getValue(final Option option,                                 final Object defaultValue) {        final List values;        if (defaultValue == null) {            values = getValues(option);        } else {            values = getValues(option, Collections.singletonList(defaultValue));        }        if (values.size() > 1) {            throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES));        }        if (values.isEmpty()) {            return defaultValue;        }        return values.get(0);    }    public final Boolean getSwitch(final String trigger) {        return getSwitch(getOption(trigger), null);    }    public final Boolean getSwitch(final String trigger,                                   final Boolean defaultValue) {        return getSwitch(getOption(trigger), defaultValue);    }    public final Boolean getSwitch(final Option option) {        return getSwitch(option, null);    }    public final String getProperty(final String property) {        return getProperty(property, null);    }    public final int getOptionCount(final String trigger) {        return getOptionCount(getOption(trigger));    }    public final int getOptionCount(final Option option) {        if (option == null) {            return 0;        }        int count = 0;        for (Iterator i = getOptions().iterator(); i.hasNext();) {            if (option.equals(i.next())) {                ++count;            }        }        return count;    }}"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,18,package org.apache.commons.cli2.commandline;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,20,import java.util.Collections;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,21,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,22,import java.util.List;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,24,import org.apache.commons.cli2.CommandLine;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,25,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,26,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,27,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,30,* Instances of CommandLine represent a command line that has been processed
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,31,* according to the definition supplied to the parser.
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,33,public abstract class CommandLineImpl implements CommandLine {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,34,public final boolean hasOption(final String trigger) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,35,return hasOption(getOption(trigger));
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,38,public final List getValues(final String trigger) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,39,"return getValues(getOption(trigger), Collections.EMPTY_LIST);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,42,"public final List getValues(final String trigger,"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,43,final List defaultValues) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,44,"return getValues(getOption(trigger), defaultValues);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,47,public final List getValues(final Option option) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,48,"return getValues(option, Collections.EMPTY_LIST);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,51,public final Object getValue(final String trigger) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,52,"return getValue(getOption(trigger), null);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,55,"public final Object getValue(final String trigger,"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,56,final Object defaultValue) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,57,"return getValue(getOption(trigger), defaultValue);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,60,public final Object getValue(final Option option) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,61,"return getValue(option, null);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,64,"public final Object getValue(final Option option,"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,65,final Object defaultValue) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,66,final List values;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,68,if (defaultValue == null) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,69,values = getValues(option);
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,70,} else {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,71,"values = getValues(option, Collections.singletonList(defaultValue));"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,74,if (values.size() > 1) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,75,throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES));
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,78,if (values.isEmpty()) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,79,return defaultValue;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,82,return values.get(0);
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,85,public final Boolean getSwitch(final String trigger) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,86,"return getSwitch(getOption(trigger), null);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,89,"public final Boolean getSwitch(final String trigger,"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,90,final Boolean defaultValue) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,91,"return getSwitch(getOption(trigger), defaultValue);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,94,public final Boolean getSwitch(final Option option) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,95,"return getSwitch(option, null);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,98,public final String getProperty(final String property) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,99,"return getProperty(property, null);"
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,102,public final int getOptionCount(final String trigger) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,103,return getOptionCount(getOption(trigger));
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,106,public final int getOptionCount(final Option option) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,107,if (option == null) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,108,return 0;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,111,int count = 0;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,113,for (Iterator i = getOptions().iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,114,if (option.equals(i.next())) {
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,115,++count;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,119,return count;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Option;/** * Manages a queue of default CommandLines. This CommandLine implementation is * backed by a queue of CommandLine instances which are queried in turn until a * suitable result is found. * * CommandLine instances can either be added to the back of the queue or can be * pushed in at a specific position. * * @see #appendCommandLine(CommandLine) * @see #insertCommandLine(int, CommandLine) */public class DefaultingCommandLine extends CommandLineImpl {    /**     * The list of default CommandLine instances     */    private final List commandLines = new ArrayList();    /**     * Adds a CommandLine instance to the back of the queue. The supplied     * CommandLine will be used as defaults when all other CommandLines produce     * no result     *     * @param commandLine     *            the default values to use if all CommandLines     */    public void appendCommandLine(final CommandLine commandLine) {        commandLines.add(commandLine);    }    /**     * Adds a CommandLine instance to a specified position in the queue.     *     * @param index ths position at which to insert     * @param commandLine the CommandLine to insert     */    public void insertCommandLine(        final int index,        final CommandLine commandLine) {        commandLines.add(index, commandLine);    }    /**     * Builds an iterator over the build in CommandLines.     *     * @return an unmodifiable iterator     */    public Iterator commandLines(){    	return Collections.unmodifiableList(commandLines).iterator();    }    public Option getOption(String trigger) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            final Option actual = commandLine.getOption(trigger);            if (actual != null) {                return actual;            }        }        return null;    }    public List getOptions() {        final List options = new ArrayList();        final List temp = new ArrayList();        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            temp.clear();            temp.addAll(commandLine.getOptions());            temp.removeAll(options);            options.addAll(temp);        }        return Collections.unmodifiableList(options);    }    public Set getOptionTriggers() {        final Set all = new HashSet();        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            all.addAll(commandLine.getOptionTriggers());        }        return Collections.unmodifiableSet(all);    }    public boolean hasOption(Option option) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            if (commandLine.hasOption(option)) {                return true;            }        }        return false;    }    public List getValues(Option option, List defaultValues) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            final List actual = commandLine.getValues(option);            if (actual != null && !actual.isEmpty()) {                return actual;            }        }        if(defaultValues==null){        	return Collections.EMPTY_LIST;        }        else{        	return defaultValues;        }    }    public Boolean getSwitch(Option option, Boolean defaultValue) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            final Boolean actual = commandLine.getSwitch(option);            if (actual != null) {                return actual;            }        }        return defaultValue;    }    public String getProperty(String property, String defaultValue) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            final String actual = commandLine.getProperty(property);            if (actual != null) {                return actual;            }        }        return defaultValue;    }    public Set getProperties() {        final Set all = new HashSet();        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            all.addAll(commandLine.getProperties());        }        return Collections.unmodifiableSet(all);    }}"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,18,package org.apache.commons.cli2.commandline;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,21,import java.util.Collections;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,22,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,23,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,24,import java.util.List;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,25,import java.util.Set;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,27,import org.apache.commons.cli2.CommandLine;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,28,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,31,* Manages a queue of default CommandLines. This CommandLine implementation is
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,32,* backed by a queue of CommandLine instances which are queried in turn until a
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,33,* suitable result is found.
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,35,* CommandLine instances can either be added to the back of the queue or can be
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,36,* pushed in at a specific position.
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,38,* @see #appendCommandLine(CommandLine)
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,39,"* @see #insertCommandLine(int, CommandLine)"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,41,public class DefaultingCommandLine extends CommandLineImpl {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,44,* The list of default CommandLine instances
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,46,private final List commandLines = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,49,* Adds a CommandLine instance to the back of the queue. The supplied
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,50,* CommandLine will be used as defaults when all other CommandLines produce
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,51,* no result
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,53,* @param commandLine
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,54,*            the default values to use if all CommandLines
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,56,public void appendCommandLine(final CommandLine commandLine) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,57,commandLines.add(commandLine);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,61,* Adds a CommandLine instance to a specified position in the queue.
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,63,* @param index ths position at which to insert
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,64,* @param commandLine the CommandLine to insert
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,66,public void insertCommandLine(
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,67,"final int index,"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,68,final CommandLine commandLine) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,69,"commandLines.add(index, commandLine);"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,73,* Builds an iterator over the build in CommandLines.
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,75,* @return an unmodifiable iterator
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,77,public Iterator commandLines(){
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,78,return Collections.unmodifiableList(commandLines).iterator();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,81,public Option getOption(String trigger) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,82,for (final Iterator i = commandLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,83,final CommandLine commandLine = (CommandLine)i.next();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,84,final Option actual = commandLine.getOption(trigger);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,85,if (actual != null) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,86,return actual;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,89,return null;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,92,public List getOptions() {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,93,final List options = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,95,final List temp = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,96,for (final Iterator i = commandLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,97,final CommandLine commandLine = (CommandLine)i.next();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,98,temp.clear();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,99,temp.addAll(commandLine.getOptions());
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,100,temp.removeAll(options);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,101,options.addAll(temp);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,104,return Collections.unmodifiableList(options);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,107,public Set getOptionTriggers() {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,108,final Set all = new HashSet();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,109,for (final Iterator i = commandLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,110,final CommandLine commandLine = (CommandLine)i.next();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,111,all.addAll(commandLine.getOptionTriggers());
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,114,return Collections.unmodifiableSet(all);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,117,public boolean hasOption(Option option) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,118,for (final Iterator i = commandLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,119,final CommandLine commandLine = (CommandLine)i.next();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,120,if (commandLine.hasOption(option)) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,121,return true;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,124,return false;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,127,"public List getValues(Option option, List defaultValues) {"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,128,for (final Iterator i = commandLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,129,final CommandLine commandLine = (CommandLine)i.next();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,130,final List actual = commandLine.getValues(option);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,131,if (actual != null && !actual.isEmpty()) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,132,return actual;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,135,if(defaultValues==null){
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,136,return Collections.EMPTY_LIST;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,138,else{
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,139,return defaultValues;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,143,"public Boolean getSwitch(Option option, Boolean defaultValue) {"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,144,for (final Iterator i = commandLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,145,final CommandLine commandLine = (CommandLine)i.next();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,146,final Boolean actual = commandLine.getSwitch(option);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,147,if (actual != null) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,148,return actual;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,151,return defaultValue;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,154,"public String getProperty(String property, String defaultValue) {"
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,155,for (final Iterator i = commandLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,156,final CommandLine commandLine = (CommandLine)i.next();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,157,final String actual = commandLine.getProperty(property);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,158,if (actual != null) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,159,return actual;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,162,return defaultValue;
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,165,public Set getProperties() {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,166,final Set all = new HashSet();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,167,for (final Iterator i = commandLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,168,final CommandLine commandLine = (CommandLine)i.next();
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,169,all.addAll(commandLine.getProperties());
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,171,return Collections.unmodifiableSet(all);
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.LinkedList;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.util.HelpFormatter;/** * A class that implements the <code>Parser</code> interface can parse a * String array according to the {@link Group}specified and return a * {@link CommandLine}. * * @author John Keyes (john at integralsource.com) */public class Parser {    private HelpFormatter helpFormatter = new HelpFormatter();    private Option helpOption = null;    private String helpTrigger = null;    private Group group = null;    /**     * Parse the arguments according to the specified options and properties.     *     * @param arguments     *            the command line arguments     *     * @return the list of atomic option and value tokens     * @throws OptionException     *             if there are any problems encountered while parsing the     *             command line tokens.     */    public CommandLine parse(final String[] arguments)        throws OptionException {        // build a mutable list for the arguments        final List argumentList = new LinkedList();        // copy the arguments into the new list        for (int i = 0; i < arguments.length; i++) {            final String argument = arguments[i];            // ensure non intern'd strings are used            // so that == comparisons work as expected            argumentList.add(new String(argument));        }        // wet up a command line for this group        final WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);        // pick up any defaults from the model        group.defaults(commandLine);        // process the options as far as possible        final ListIterator iterator = argumentList.listIterator();        Object previous = null;        while (group.canProcess(commandLine, iterator)) {            // peek at the next item and backtrack            final Object next = iterator.next();            iterator.previous();            // if we have just tried to process this instance            if (next == previous) {                // abort                break;            }            // remember previous            previous = next;            group.process(commandLine, iterator);        }        // if there are more arguments we have a problem        if (iterator.hasNext()) {            final String arg = (String) iterator.next();            throw new OptionException(group, ResourceConstants.UNEXPECTED_TOKEN, arg);        }        // no need to validate if the help option is present        if (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {            group.validate(commandLine);        }        return commandLine;    }    /**     * Parse the arguments according to the specified options and properties and     * displays the usage screen if the CommandLine is not valid or the help     * option was specified.     *     * @param arguments the command line arguments     * @return a valid CommandLine or null if the parse was unsuccessful     * @throws IOException if an error occurs while formatting help     */    public CommandLine parseAndHelp(final String[] arguments) {        helpFormatter.setGroup(group);        try {            // attempt to parse the command line            final CommandLine commandLine = parse(arguments);            if (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {                return commandLine;            }        } catch (final OptionException oe) {            // display help regarding the exception            helpFormatter.setException(oe);        }        // print help        helpFormatter.print();        return null;    }    /**     * Sets the Group of options to parse against     * @param group the group of options to parse against     */    public void setGroup(final Group group) {        this.group = group;    }    /**     * Sets the HelpFormatter to use with the simplified parsing.     * @see #parseAndHelp(String[])     * @param helpFormatter the HelpFormatter to use with the simplified parsing     */    public void setHelpFormatter(final HelpFormatter helpFormatter) {        this.helpFormatter = helpFormatter;    }    /**     * Sets the help option to use with the simplified parsing.  For example     * <code>--help</code>, <code>-h</code> and <code>-?</code> are often used.     * @see #parseAndHelp(String[])     * @param helpOption the help Option     */    public void setHelpOption(final Option helpOption) {        this.helpOption = helpOption;    }    /**     * Sets the help option to use with the simplified parsing.  For example     * <code>--help</code>, <code>-h</code> and <code>-?</code> are often used.     * @see #parseAndHelp(String[])     * @param helpTrigger the trigger of the help Option     */    public void setHelpTrigger(final String helpTrigger) {        this.helpTrigger = helpTrigger;    }}"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,18,package org.apache.commons.cli2.commandline;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,20,import java.util.LinkedList;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,21,import java.util.List;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,22,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,24,import org.apache.commons.cli2.CommandLine;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,25,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,26,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,27,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,28,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,29,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,30,import org.apache.commons.cli2.util.HelpFormatter;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,33,* A class that implements the <code>Parser</code> interface can parse a
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,34,* String array according to the {@link Group}specified and return a
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,35,* {@link CommandLine}.
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,37,* @author John Keyes (john at integralsource.com)
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,39,public class Parser {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,40,private HelpFormatter helpFormatter = new HelpFormatter();
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,41,private Option helpOption = null;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,42,private String helpTrigger = null;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,43,private Group group = null;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,46,* Parse the arguments according to the specified options and properties.
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,48,* @param arguments
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,49,*            the command line arguments
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,51,* @return the list of atomic option and value tokens
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,52,* @throws OptionException
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,53,*             if there are any problems encountered while parsing the
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,54,*             command line tokens.
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,56,public CommandLine parse(final String[] arguments)
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,57,throws OptionException {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,58,// build a mutable list for the arguments
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,59,final List argumentList = new LinkedList();
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,61,// copy the arguments into the new list
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,62,for (int i = 0; i < arguments.length; i++) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,63,final String argument = arguments[i];
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,65,// ensure non intern'd strings are used
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,66,// so that == comparisons work as expected
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,67,argumentList.add(new String(argument));
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,70,// wet up a command line for this group
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,71,"final WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,73,// pick up any defaults from the model
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,74,group.defaults(commandLine);
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,76,// process the options as far as possible
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,77,final ListIterator iterator = argumentList.listIterator();
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,78,Object previous = null;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,80,"while (group.canProcess(commandLine, iterator)) {"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,81,// peek at the next item and backtrack
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,82,final Object next = iterator.next();
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,83,iterator.previous();
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,85,// if we have just tried to process this instance
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,86,if (next == previous) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,87,// abort
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,88,break;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,91,// remember previous
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,92,previous = next;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,94,"group.process(commandLine, iterator);"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,97,// if there are more arguments we have a problem
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,98,if (iterator.hasNext()) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,99,final String arg = (String) iterator.next();
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,100,"throw new OptionException(group, ResourceConstants.UNEXPECTED_TOKEN, arg);"
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,103,// no need to validate if the help option is present
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,104,if (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,105,group.validate(commandLine);
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,108,return commandLine;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,112,* Parse the arguments according to the specified options and properties and
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,113,* displays the usage screen if the CommandLine is not valid or the help
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,114,* option was specified.
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,116,* @param arguments the command line arguments
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,117,* @return a valid CommandLine or null if the parse was unsuccessful
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,118,* @throws IOException if an error occurs while formatting help
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,120,public CommandLine parseAndHelp(final String[] arguments) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,121,helpFormatter.setGroup(group);
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,123,try {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,124,// attempt to parse the command line
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,125,final CommandLine commandLine = parse(arguments);
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,127,if (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,128,return commandLine;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,130,} catch (final OptionException oe) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,131,// display help regarding the exception
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,132,helpFormatter.setException(oe);
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,135,// print help
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,136,helpFormatter.print();
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,138,return null;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,142,* Sets the Group of options to parse against
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,143,* @param group the group of options to parse against
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,145,public void setGroup(final Group group) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,146,this.group = group;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,150,* Sets the HelpFormatter to use with the simplified parsing.
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,151,* @see #parseAndHelp(String[])
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,152,* @param helpFormatter the HelpFormatter to use with the simplified parsing
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,154,public void setHelpFormatter(final HelpFormatter helpFormatter) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,155,this.helpFormatter = helpFormatter;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,159,* Sets the help option to use with the simplified parsing.  For example
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,160,"* <code>--help</code>, <code>-h</code> and <code>-?</code> are often used."
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,161,* @see #parseAndHelp(String[])
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,162,* @param helpOption the help Option
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,164,public void setHelpOption(final Option helpOption) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,165,this.helpOption = helpOption;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,169,* Sets the help option to use with the simplified parsing.  For example
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,170,"* <code>--help</code>, <code>-h</code> and <code>-?</code> are often used."
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,171,* @see #parseAndHelp(String[])
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,172,* @param helpTrigger the trigger of the help Option
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,174,public void setHelpTrigger(final String helpTrigger) {
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,175,this.helpTrigger = helpTrigger;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import java.util.StringTokenizer;import java.util.prefs.BackingStoreException;import java.util.prefs.Preferences;import org.apache.commons.cli2.Option;/** * A CommandLine implementation using the Preferences API, useful when * constructing a complex DefaultingCommandLine * * This implementation uses the children of a single preference node to populate * the CommandLine.  Options are keyed from their preferred name and presence in * the Preferences object is taken as presence in the CommandLine.  Argument * values are taken from the Preference value and are optionally separated using * the separator char defined, at construction time.  Switch values can be * specified using a simple value of <code>true</code> or <code>false</code>; * obviously this means that Switches with Arguments are not supported by this * implementation. * * @see java.util.prefs.Preferences * @see org.apache.commons.cli2.commandline.DefaultingCommandLine * @see org.apache.commons.cli2.Option#getPreferredName() */public class PreferencesCommandLine extends CommandLineImpl {	private static final char NUL = '\0';	private final Preferences preferences;	private final Option root;	private final char separator;	/**     * Creates a new PreferencesCommandLine using the specified root Option and     * Preferences node.  Argument values will be separated using the char 0.     *	 * @param root the CommandLine's root Option	 * @param preferences the Preferences node to get values from	 */	public PreferencesCommandLine(final Option root, final Preferences preferences){		this(root,preferences,NUL);	}    /**     * Creates a new PreferencesCommandLine using the specified root Option,     * Preferences node and value separator.     *     * @param root the CommandLine's root Option     * @param preferences the Preferences node to get values from     * @param separator the character to split argument values     */	public PreferencesCommandLine(final Option root, final Preferences preferences, final char separator){		this.root = root;		this.preferences = preferences;		this.separator = separator;	}	public boolean hasOption(Option option) {		if(option==null){			return false;		}		else{			try {				return Arrays.asList(preferences.keys()).contains(option.getPreferredName());			} catch (BackingStoreException e) {				return false;			}		}	}	public Option getOption(String trigger) {		return root.findOption(trigger);	}	public List getValues(final Option option, final List defaultValues) {		final String value = preferences.get(option.getPreferredName(),null);		if(value==null){			return defaultValues;		}		else if(separator>NUL){			final List values = new ArrayList();			final StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));			while(tokens.hasMoreTokens()){				values.add(tokens.nextToken());			}			return values;		}		else{			return Collections.singletonList(value);		}	}	public Boolean getSwitch(final Option option, final Boolean defaultValue) {		final String value = preferences.get(option.getPreferredName(),null);		if(""true"".equals(value)){			return Boolean.TRUE;		}		else if(""false"".equals(value)){			return Boolean.FALSE;		}		else{			return defaultValue;		}	}	public String getProperty(final String property, final String defaultValue) {		return preferences.get(property, defaultValue);	}	public Set getProperties() {		try {			return new HashSet(Arrays.asList(preferences.keys()));		} catch (BackingStoreException e) {			return Collections.EMPTY_SET;		}	}	public List getOptions() {		try {			final List options = new ArrayList();			final Iterator keys = Arrays.asList(preferences.keys()).iterator();			while (keys.hasNext()) {				final String trigger = (String) keys.next();				final Option option = root.findOption(trigger);				if (option != null) {					options.add(option);				}			}			return Collections.unmodifiableList(options);		} catch (BackingStoreException e) {			return Collections.EMPTY_LIST;		}	}	public Set getOptionTriggers() {		final Set triggers = new HashSet();		final Iterator options = getOptions().iterator();		while(options.hasNext()){			final Option option = (Option)options.next();			triggers.addAll(option.getTriggers());		}		return Collections.unmodifiableSet(triggers);	}}"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,18,package org.apache.commons.cli2.commandline;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,21,import java.util.Arrays;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,22,import java.util.Collections;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,23,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,24,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,25,import java.util.List;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,26,import java.util.Set;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,27,import java.util.StringTokenizer;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,28,import java.util.prefs.BackingStoreException;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,29,import java.util.prefs.Preferences;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,31,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,34,"* A CommandLine implementation using the Preferences API, useful when"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,35,* constructing a complex DefaultingCommandLine
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,37,* This implementation uses the children of a single preference node to populate
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,38,* the CommandLine.  Options are keyed from their preferred name and presence in
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,39,* the Preferences object is taken as presence in the CommandLine.  Argument
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,40,* values are taken from the Preference value and are optionally separated using
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,41,"* the separator char defined, at construction time.  Switch values can be"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,42,* specified using a simple value of <code>true</code> or <code>false</code>;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,43,* obviously this means that Switches with Arguments are not supported by this
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,44,* implementation.
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,46,* @see java.util.prefs.Preferences
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,47,* @see org.apache.commons.cli2.commandline.DefaultingCommandLine
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,48,* @see org.apache.commons.cli2.Option#getPreferredName()
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,50,public class PreferencesCommandLine extends CommandLineImpl {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,52,private static final char NUL = '\0';
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,53,private final Preferences preferences;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,54,private final Option root;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,55,private final char separator;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,58,* Creates a new PreferencesCommandLine using the specified root Option and
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,59,* Preferences node.  Argument values will be separated using the char 0.
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,61,* @param root the CommandLine's root Option
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,62,* @param preferences the Preferences node to get values from
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,64,"public PreferencesCommandLine(final Option root, final Preferences preferences){"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,65,"this(root,preferences,NUL);"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,69,"* Creates a new PreferencesCommandLine using the specified root Option,"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,70,* Preferences node and value separator.
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,72,* @param root the CommandLine's root Option
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,73,* @param preferences the Preferences node to get values from
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,74,* @param separator the character to split argument values
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,76,"public PreferencesCommandLine(final Option root, final Preferences preferences, final char separator){"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,77,this.root = root;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,78,this.preferences = preferences;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,79,this.separator = separator;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,82,public boolean hasOption(Option option) {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,83,if(option==null){
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,84,return false;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,86,else{
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,87,try {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,88,return Arrays.asList(preferences.keys()).contains(option.getPreferredName());
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,89,} catch (BackingStoreException e) {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,90,return false;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,95,public Option getOption(String trigger) {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,96,return root.findOption(trigger);
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,99,"public List getValues(final Option option, final List defaultValues) {"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,100,"final String value = preferences.get(option.getPreferredName(),null);"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,102,if(value==null){
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,103,return defaultValues;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,105,else if(separator>NUL){
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,106,final List values = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,107,"final StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,109,while(tokens.hasMoreTokens()){
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,110,values.add(tokens.nextToken());
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,113,return values;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,115,else{
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,116,return Collections.singletonList(value);
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,120,"public Boolean getSwitch(final Option option, final Boolean defaultValue) {"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,121,"final String value = preferences.get(option.getPreferredName(),null);"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,122,"if(""true"".equals(value)){"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,123,return Boolean.TRUE;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,125,"else if(""false"".equals(value)){"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,126,return Boolean.FALSE;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,128,else{
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,129,return defaultValue;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,133,"public String getProperty(final String property, final String defaultValue) {"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,134,"return preferences.get(property, defaultValue);"
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,137,public Set getProperties() {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,138,try {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,139,return new HashSet(Arrays.asList(preferences.keys()));
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,140,} catch (BackingStoreException e) {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,141,return Collections.EMPTY_SET;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,145,public List getOptions() {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,146,try {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,147,final List options = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,148,final Iterator keys = Arrays.asList(preferences.keys()).iterator();
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,149,while (keys.hasNext()) {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,150,final String trigger = (String) keys.next();
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,151,final Option option = root.findOption(trigger);
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,152,if (option != null) {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,153,options.add(option);
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,156,return Collections.unmodifiableList(options);
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,157,} catch (BackingStoreException e) {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,158,return Collections.EMPTY_LIST;
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,162,public Set getOptionTriggers() {
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,163,final Set triggers = new HashSet();
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,164,final Iterator options = getOptions().iterator();
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,165,while(options.hasNext()){
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,166,final Option option = (Option)options.next();
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,167,triggers.addAll(option.getTriggers());
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,169,return Collections.unmodifiableSet(triggers);
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Properties;import java.util.Set;import java.util.StringTokenizer;import org.apache.commons.cli2.Option;/** * A CommandLine implementation using a java Properties instance, useful for * constructing a complex DefaultingCommandLine * * Options are keyed from their property name and presence in the Properties * instance is taken as presence in the CommandLine.  Argument values are taken * from the property value and are optionally separated using the separator * char, defined at construction time.  Switch values can be specified using a * simple value of <code>true</code> or <code>false</code>; obviously this means * that Switches with Arguments are not supported by this implementation. * * @see java.util.Properties * @see org.apache.commons.cli2.commandline.DefaultingCommandLine * @see org.apache.commons.cli2.Option#getPreferredName() */public class PropertiesCommandLine extends CommandLineImpl {	private static final char NUL = '\0';	private final Properties properties;	private final Option root;	private final char separator;    /**     * Creates a new PropertiesCommandLine using the specified root Option,     * Properties instance.  The character 0 is used as the value separator.     *     * @param root the CommandLine's root Option     * @param properties the Properties instance to get values from     */	public PropertiesCommandLine(final Option root, final Properties properties){		this(root,properties,NUL);	}    /**     * Creates a new PropertiesCommandLine using the specified root Option,     * Properties instance and value separator.     *     * @param root the CommandLine's root Option     * @param properties the Properties instance to get values from     * @param separator the character to split argument values     */	public PropertiesCommandLine(final Option root, final Properties properties, final char separator){		this.root = root;		this.properties = properties;		this.separator = separator;	}	public boolean hasOption(Option option) {		if(option==null){			return false;		}		else{			return properties.containsKey(option.getPreferredName());		}	}	public Option getOption(String trigger) {		return root.findOption(trigger);	}	public List getValues(final Option option, final List defaultValues) {		final String value = properties.getProperty(option.getPreferredName());		if(value==null){			return defaultValues;		}		else if(separator>NUL){			final List values = new ArrayList();			final StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));			while(tokens.hasMoreTokens()){				values.add(tokens.nextToken());			}			return values;		}		else{			return Collections.singletonList(value);		}	}	public Boolean getSwitch(final Option option, final Boolean defaultValue) {		final String value = properties.getProperty(option.getPreferredName());		if(""true"".equals(value)){			return Boolean.TRUE;		}		else if(""false"".equals(value)){			return Boolean.FALSE;		}		else{			return defaultValue;		}	}	public String getProperty(final String property, final String defaultValue) {		return properties.getProperty(property,defaultValue);	}	public Set getProperties() {		return properties.keySet();	}	public List getOptions() {		final List options = new ArrayList();		final Iterator keys = properties.keySet().iterator();		while(keys.hasNext()){			final String trigger = (String)keys.next();			final Option option = root.findOption(trigger);			if(option!=null){				options.add(option);			}		}		return Collections.unmodifiableList(options);	}	public Set getOptionTriggers() {		final Set triggers = new HashSet();		final Iterator options = getOptions().iterator();		while(options.hasNext()){			final Option option = (Option)options.next();			triggers.addAll(option.getTriggers());		}		return Collections.unmodifiableSet(triggers);	}}"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,18,package org.apache.commons.cli2.commandline;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,21,import java.util.Collections;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,22,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,23,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,24,import java.util.List;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,25,import java.util.Properties;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,26,import java.util.Set;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,27,import java.util.StringTokenizer;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,29,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,32,"* A CommandLine implementation using a java Properties instance, useful for"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,33,* constructing a complex DefaultingCommandLine
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,35,* Options are keyed from their property name and presence in the Properties
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,36,* instance is taken as presence in the CommandLine.  Argument values are taken
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,37,* from the property value and are optionally separated using the separator
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,38,"* char, defined at construction time.  Switch values can be specified using a"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,39,* simple value of <code>true</code> or <code>false</code>; obviously this means
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,40,* that Switches with Arguments are not supported by this implementation.
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,42,* @see java.util.Properties
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,43,* @see org.apache.commons.cli2.commandline.DefaultingCommandLine
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,44,* @see org.apache.commons.cli2.Option#getPreferredName()
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,46,public class PropertiesCommandLine extends CommandLineImpl {
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,48,private static final char NUL = '\0';
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,49,private final Properties properties;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,50,private final Option root;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,51,private final char separator;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,54,"* Creates a new PropertiesCommandLine using the specified root Option,"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,55,* Properties instance.  The character 0 is used as the value separator.
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,57,* @param root the CommandLine's root Option
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,58,* @param properties the Properties instance to get values from
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,60,"public PropertiesCommandLine(final Option root, final Properties properties){"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,61,"this(root,properties,NUL);"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,65,"* Creates a new PropertiesCommandLine using the specified root Option,"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,66,* Properties instance and value separator.
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,68,* @param root the CommandLine's root Option
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,69,* @param properties the Properties instance to get values from
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,70,* @param separator the character to split argument values
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,72,"public PropertiesCommandLine(final Option root, final Properties properties, final char separator){"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,73,this.root = root;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,74,this.properties = properties;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,75,this.separator = separator;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,79,public boolean hasOption(Option option) {
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,80,if(option==null){
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,81,return false;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,83,else{
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,84,return properties.containsKey(option.getPreferredName());
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,88,public Option getOption(String trigger) {
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,89,return root.findOption(trigger);
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,92,"public List getValues(final Option option, final List defaultValues) {"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,93,final String value = properties.getProperty(option.getPreferredName());
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,95,if(value==null){
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,96,return defaultValues;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,98,else if(separator>NUL){
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,99,final List values = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,100,"final StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,102,while(tokens.hasMoreTokens()){
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,103,values.add(tokens.nextToken());
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,106,return values;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,108,else{
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,109,return Collections.singletonList(value);
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,113,"public Boolean getSwitch(final Option option, final Boolean defaultValue) {"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,114,final String value = properties.getProperty(option.getPreferredName());
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,115,"if(""true"".equals(value)){"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,116,return Boolean.TRUE;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,118,"else if(""false"".equals(value)){"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,119,return Boolean.FALSE;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,121,else{
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,122,return defaultValue;
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,126,"public String getProperty(final String property, final String defaultValue) {"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,127,"return properties.getProperty(property,defaultValue);"
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,130,public Set getProperties() {
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,131,return properties.keySet();
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,134,public List getOptions() {
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,135,final List options = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,136,final Iterator keys = properties.keySet().iterator();
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,137,while(keys.hasNext()){
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,138,final String trigger = (String)keys.next();
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,139,final Option option = root.findOption(trigger);
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,140,if(option!=null){
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,141,options.add(option);
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,144,return Collections.unmodifiableList(options);
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,147,public Set getOptionTriggers() {
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,148,final Set triggers = new HashSet();
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,149,final Iterator options = getOptions().iterator();
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,150,while(options.hasNext()){
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,151,final Option option = (Option)options.next();
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,152,triggers.addAll(option.getTriggers());
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,154,return Collections.unmodifiableSet(triggers);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * A WriteableCommandLine implementation allowing Options to write their * processed information to a CommandLine. */public class WriteableCommandLineImpl    extends CommandLineImpl implements WriteableCommandLine {    private final Properties properties = new Properties();    private final List options = new ArrayList();    private final Map nameToOption = new HashMap();    private final Map values = new HashMap();    private final Map switches = new HashMap();    private final Map defaultValues = new HashMap();    private final Map defaultSwitches = new HashMap();    private final List normalised;    private final Set prefixes;    /**     * Creates a new WriteableCommandLineImpl rooted on the specified Option, to     * hold the parsed arguments.     *     * @param rootOption the CommandLine's root Option     * @param arguments the arguments this CommandLine represents     */    public WriteableCommandLineImpl(final Option rootOption,                                    final List arguments) {        this.prefixes = rootOption.getPrefixes();        this.normalised = arguments;    }    public void addOption(Option option) {        options.add(option);        nameToOption.put(option.getPreferredName(), option);        for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {            nameToOption.put(i.next(), option);        }    }    public void addValue(final Option option,                         final Object value) {        if (option instanceof Argument) {            addOption(option);        }        List valueList = (List) values.get(option);        if (valueList == null) {            valueList = new ArrayList();            values.put(option, valueList);        }        valueList.add(value);    }    public void addSwitch(final Option option,                          final boolean value) {        addOption(option);        if (switches.containsKey(option)) {            throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET));        } else {            switches.put(option, value ? Boolean.TRUE : Boolean.FALSE);        }    }    public boolean hasOption(final Option option) {        final boolean present = options.contains(option);        return present;    }    public Option getOption(final String trigger) {        return (Option) nameToOption.get(trigger);    }    public List getValues(final Option option,                          final List defaultValues) {        // First grab the command line values        List valueList = (List) values.get(option);        // Secondly try the defaults supplied to the method        if ((valueList == null) || valueList.isEmpty()) {            valueList = defaultValues;        }        // Thirdly try the option's default values        if ((valueList == null) || valueList.isEmpty()) {            valueList = (List) this.defaultValues.get(option);        }        // Finally use an empty list        if (valueList == null) {            valueList = Collections.EMPTY_LIST;        }        return valueList;    }    public Boolean getSwitch(final Option option,                             final Boolean defaultValue) {        // First grab the command line values        Boolean bool = (Boolean) switches.get(option);        // Secondly try the defaults supplied to the method        if (bool == null) {            bool = defaultValue;        }        // Thirdly try the option's default values        if (bool == null) {            bool = (Boolean) this.defaultSwitches.get(option);        }        return bool;    }    public void addProperty(final String property,                            final String value) {        properties.setProperty(property, value);    }    public String getProperty(final String property,                              final String defaultValue) {        return properties.getProperty(property, defaultValue);    }    public Set getProperties() {        return Collections.unmodifiableSet(properties.keySet());    }    public boolean looksLikeOption(final String trigger) {        for (final Iterator i = prefixes.iterator(); i.hasNext();) {            final String prefix = (String) i.next();            if (trigger.startsWith(prefix)) {                return true;            }        }        return false;    }    public String toString() {        final StringBuffer buffer = new StringBuffer();        // need to add group header        for (final Iterator i = normalised.iterator(); i.hasNext();) {            final String arg = (String) i.next();            if (arg.indexOf(' ') >= 0) {                buffer.append(""\"""").append(arg).append(""\"""");            } else {                buffer.append(arg);            }            if (i.hasNext()) {                buffer.append(' ');            }        }        return buffer.toString();    }    public List getOptions() {        return Collections.unmodifiableList(options);    }    public Set getOptionTriggers() {        return Collections.unmodifiableSet(nameToOption.keySet());    }    public void setDefaultValues(final Option option,                                 final List defaults) {        if (defaults == null) {            defaultValues.remove(option);        } else {            defaultValues.put(option, defaults);        }    }    public void setDefaultSwitch(final Option option,                                 final Boolean defaultSwitch) {        if (defaultSwitch == null) {            defaultSwitches.remove(option);        } else {            defaultSwitches.put(option, defaultSwitch);        }    }    public List getNormalised() {        return Collections.unmodifiableList(normalised);    }}"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,18,package org.apache.commons.cli2.commandline;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,21,import java.util.Collections;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,22,import java.util.HashMap;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,23,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,24,import java.util.List;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,25,import java.util.Map;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,26,import java.util.Properties;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,27,import java.util.Set;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,29,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,30,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,31,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,32,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,33,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,36,* A WriteableCommandLine implementation allowing Options to write their
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,37,* processed information to a CommandLine.
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,39,public class WriteableCommandLineImpl
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,40,extends CommandLineImpl implements WriteableCommandLine {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,41,private final Properties properties = new Properties();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,42,private final List options = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,43,private final Map nameToOption = new HashMap();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,44,private final Map values = new HashMap();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,45,private final Map switches = new HashMap();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,46,private final Map defaultValues = new HashMap();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,47,private final Map defaultSwitches = new HashMap();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,48,private final List normalised;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,49,private final Set prefixes;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,52,"* Creates a new WriteableCommandLineImpl rooted on the specified Option, to"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,53,* hold the parsed arguments.
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,55,* @param rootOption the CommandLine's root Option
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,56,* @param arguments the arguments this CommandLine represents
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,58,"public WriteableCommandLineImpl(final Option rootOption,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,59,final List arguments) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,60,this.prefixes = rootOption.getPrefixes();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,61,this.normalised = arguments;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,64,public void addOption(Option option) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,65,options.add(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,66,"nameToOption.put(option.getPreferredName(), option);"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,68,for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,69,"nameToOption.put(i.next(), option);"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,73,"public void addValue(final Option option,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,74,final Object value) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,75,if (option instanceof Argument) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,76,addOption(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,79,List valueList = (List) values.get(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,81,if (valueList == null) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,82,valueList = new ArrayList();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,83,"values.put(option, valueList);"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,86,valueList.add(value);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,89,"public void addSwitch(final Option option,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,90,final boolean value) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,91,addOption(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,93,if (switches.containsKey(option)) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,94,throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET));
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,95,} else {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,96,"switches.put(option, value ? Boolean.TRUE : Boolean.FALSE);"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,100,public boolean hasOption(final Option option) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,101,final boolean present = options.contains(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,103,return present;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,106,public Option getOption(final String trigger) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,107,return (Option) nameToOption.get(trigger);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,110,"public List getValues(final Option option,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,111,final List defaultValues) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,112,// First grab the command line values
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,113,List valueList = (List) values.get(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,115,// Secondly try the defaults supplied to the method
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,116,if ((valueList == null) || valueList.isEmpty()) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,117,valueList = defaultValues;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,120,// Thirdly try the option's default values
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,121,if ((valueList == null) || valueList.isEmpty()) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,122,valueList = (List) this.defaultValues.get(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,125,// Finally use an empty list
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,126,if (valueList == null) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,127,valueList = Collections.EMPTY_LIST;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,130,return valueList;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,133,"public Boolean getSwitch(final Option option,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,134,final Boolean defaultValue) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,135,// First grab the command line values
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,136,Boolean bool = (Boolean) switches.get(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,138,// Secondly try the defaults supplied to the method
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,139,if (bool == null) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,140,bool = defaultValue;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,143,// Thirdly try the option's default values
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,144,if (bool == null) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,145,bool = (Boolean) this.defaultSwitches.get(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,148,return bool;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,151,"public void addProperty(final String property,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,152,final String value) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,153,"properties.setProperty(property, value);"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,156,"public String getProperty(final String property,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,157,final String defaultValue) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,158,"return properties.getProperty(property, defaultValue);"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,161,public Set getProperties() {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,162,return Collections.unmodifiableSet(properties.keySet());
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,165,public boolean looksLikeOption(final String trigger) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,166,for (final Iterator i = prefixes.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,167,final String prefix = (String) i.next();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,169,if (trigger.startsWith(prefix)) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,170,return true;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,174,return false;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,177,public String toString() {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,178,final StringBuffer buffer = new StringBuffer();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,180,// need to add group header
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,181,for (final Iterator i = normalised.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,182,final String arg = (String) i.next();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,184,if (arg.indexOf(' ') >= 0) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,185,"buffer.append(""\"""").append(arg).append(""\"""");"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,186,} else {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,187,buffer.append(arg);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,190,if (i.hasNext()) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,191,buffer.append(' ');
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,195,return buffer.toString();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,198,public List getOptions() {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,199,return Collections.unmodifiableList(options);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,202,public Set getOptionTriggers() {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,203,return Collections.unmodifiableSet(nameToOption.keySet());
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,206,"public void setDefaultValues(final Option option,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,207,final List defaults) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,208,if (defaults == null) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,209,defaultValues.remove(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,210,} else {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,211,"defaultValues.put(option, defaults);"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,215,"public void setDefaultSwitch(final Option option,"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,216,final Boolean defaultSwitch) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,217,if (defaultSwitch == null) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,218,defaultSwitches.remove(option);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,219,} else {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,220,"defaultSwitches.put(option, defaultSwitch);"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,224,public List getNormalised() {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,225,return Collections.unmodifiableList(normalised);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.ListIterator;import java.util.Set;import java.util.StringTokenizer;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;import org.apache.commons.cli2.validation.InvalidArgumentException;import org.apache.commons.cli2.validation.Validator;/** * An implementation of an Argument. */public class ArgumentImpl    extends OptionImpl implements Argument {    private static final char NUL = '\0';    /**     * The default value for the initial separator char.     */    public static final char DEFAULT_INITIAL_SEPARATOR = NUL;    /**     * The default value for the subsequent separator char.     */    public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL;    /**     * The default token to indicate that remaining arguments should be consumed     * as values.     */    public static final String DEFAULT_CONSUME_REMAINING = ""--"";    private final String name;    private final String description;    private final int minimum;    private final int maximum;    private final char initialSeparator;    private final char subsequentSeparator;    private final boolean subsequentSplit;    private final Validator validator;    private final String consumeRemaining;    private final List defaultValues;    private final ResourceHelper resources = ResourceHelper.getResourceHelper();    /**     * Creates a new Argument instance.     *     * @param name     *            The name of the argument     * @param description     *            A description of the argument     * @param minimum     *            The minimum number of values needed to be valid     * @param maximum     *            The maximum number of values allowed to be valid     * @param initialSeparator     *            The char separating option from value     * @param subsequentSeparator     *            The char separating values from each other     * @param validator     *            The object responsible for validating the values     * @param consumeRemaining     *            The String used for the ""consuming option"" group     * @param valueDefaults     *            The values to be used if none are specified.     * @param id     *            The id of the option, 0 implies automatic assignment.     *     * @see OptionImpl#OptionImpl(int,boolean)     */    public ArgumentImpl(final String name,                        final String description,                        final int minimum,                        final int maximum,                        final char initialSeparator,                        final char subsequentSeparator,                        final Validator validator,                        final String consumeRemaining,                        final List valueDefaults,                        final int id) {        super(id, false);        this.name = (name == null) ? ""arg"" : name;        this.description = description;        this.minimum = minimum;        this.maximum = maximum;        this.initialSeparator = initialSeparator;        this.subsequentSeparator = subsequentSeparator;        this.subsequentSplit = subsequentSeparator != NUL;        this.validator = validator;        this.consumeRemaining = consumeRemaining;        this.defaultValues = valueDefaults;        if (minimum > maximum) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX));        }        if ((valueDefaults != null) && (valueDefaults.size() > 0)) {            if (valueDefaults.size() < minimum) {                throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS));            }            if (valueDefaults.size() > maximum) {                throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS));            }        }    }    public String getPreferredName() {        return name;    }    public void processValues(final WriteableCommandLine commandLine,                              final ListIterator arguments,                              final Option option)        throws OptionException {        int argumentCount = commandLine.getValues(option, Collections.EMPTY_LIST).size();        while (arguments.hasNext() && (argumentCount < maximum)) {            final String allValuesQuoted = (String) arguments.next();            final String allValues = stripBoundaryQuotes(allValuesQuoted);            // should we ignore things that look like options?            if (allValuesQuoted.equals(consumeRemaining)) {                while (arguments.hasNext() && (argumentCount < maximum)) {                    ++argumentCount;                    commandLine.addValue(option, arguments.next());                }            }            // does it look like an option?            else if (commandLine.looksLikeOption(allValuesQuoted)) {                arguments.previous();                break;            }            // should we split the string up?            else if (subsequentSplit) {                final StringTokenizer values =                    new StringTokenizer(allValues, String.valueOf(subsequentSeparator));                arguments.remove();                while (values.hasMoreTokens() && (argumentCount < maximum)) {                    ++argumentCount;                    final String token = values.nextToken();                    commandLine.addValue(option, token);                    arguments.add(token);                }                if (values.hasMoreTokens()) {                    throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,                                              values.nextToken());                }            }            // it must be a value as it is            else {                ++argumentCount;                commandLine.addValue(option, allValues);            }        }    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String arg) {        return true;    }    public Set getPrefixes() {        return Collections.EMPTY_SET;    }    public void process(WriteableCommandLine commandLine,                        ListIterator args)        throws OptionException {        processValues(commandLine, args, this);    }    public char getInitialSeparator() {        return this.initialSeparator;    }    public char getSubsequentSeparator() {        return this.subsequentSeparator;    }    public Set getTriggers() {        return Collections.EMPTY_SET;    }    public String getConsumeRemaining() {    	return this.consumeRemaining;    }    public List getDefaultValues() {    	return this.defaultValues;    }    public Validator getValidator() {    	return this.validator;    }    public void validate(final WriteableCommandLine commandLine)        throws OptionException {        validate(commandLine, this);    }    public void validate(final WriteableCommandLine commandLine,                         final Option option)        throws OptionException {        final List values = commandLine.getValues(option);        if (values.size() < minimum) {            throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES);        }        if (values.size() > maximum) {            throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,                                      (String) values.get(maximum));        }        if (validator != null) {            try {                validator.validate(values);            } catch (InvalidArgumentException ive) {                throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,                                          ive.getMessage());            }        }    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        // do we display the outer optionality        final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);        // allow numbering if multiple args        final boolean numbered =            (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);        final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);        // if infinite args are allowed then crop the list        final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;        int i = 0;        // for each argument        while (i < max) {            // if we're past the first add a space            if (i > 0) {                buffer.append(' ');            }            // if the next arg is optional            if ((i >= minimum) && (optional || (i > 0))) {                buffer.append('[');            }            if (bracketed) {                buffer.append('<');            }            // add name            buffer.append(name);            ++i;            // if numbering            if (numbered) {                buffer.append(i);            }            if (bracketed) {                buffer.append('>');            }        }        // if infinite args are allowed        if (maximum == Integer.MAX_VALUE) {            // append elipsis            buffer.append("" ..."");        }        // for each argument        while (i > 0) {            --i;            // if the next arg is optional            if ((i >= minimum) && (optional || (i > 0))) {                buffer.append(']');            }        }    }    public String getDescription() {        return description;    }    public List helpLines(final int depth,                          final Set helpSettings,                          final Comparator comp) {        final HelpLine helpLine = new HelpLineImpl(this, depth);        return Collections.singletonList(helpLine);    }    public int getMaximum() {        return maximum;    }    public int getMinimum() {        return minimum;    }    /**     * If there are any leading or trailing quotes remove them from the     * specified token.     *     * @param token     *            the token to strip leading and trailing quotes     *     * @return String the possibly modified token     */    public String stripBoundaryQuotes(String token) {        if (!token.startsWith(""\"""") || !token.endsWith(""\"""")) {            return token;        }        token = token.substring(1, token.length() - 1);        return token;    }    public boolean isRequired() {        return getMinimum() > 0;    }    public void defaults(final WriteableCommandLine commandLine) {        super.defaults(commandLine);        defaultValues(commandLine, this);    }    public void defaultValues(final WriteableCommandLine commandLine,                              final Option option) {        commandLine.setDefaultValues(option, defaultValues);    }}"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,20,import java.util.Collections;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,21,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,22,import java.util.List;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,23,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,24,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,25,import java.util.StringTokenizer;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,27,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,28,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,29,import org.apache.commons.cli2.HelpLine;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,30,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,31,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,32,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,33,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,34,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,35,import org.apache.commons.cli2.validation.InvalidArgumentException;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,36,import org.apache.commons.cli2.validation.Validator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,39,* An implementation of an Argument.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,41,public class ArgumentImpl
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,42,extends OptionImpl implements Argument {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,43,private static final char NUL = '\0';
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,46,* The default value for the initial separator char.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,48,public static final char DEFAULT_INITIAL_SEPARATOR = NUL;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,51,* The default value for the subsequent separator char.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,53,public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,56,* The default token to indicate that remaining arguments should be consumed
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,57,* as values.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,59,"public static final String DEFAULT_CONSUME_REMAINING = ""--"";"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,60,private final String name;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,61,private final String description;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,62,private final int minimum;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,63,private final int maximum;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,64,private final char initialSeparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,65,private final char subsequentSeparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,66,private final boolean subsequentSplit;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,67,private final Validator validator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,68,private final String consumeRemaining;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,69,private final List defaultValues;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,70,private final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,73,* Creates a new Argument instance.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,75,* @param name
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,76,*            The name of the argument
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,77,* @param description
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,78,*            A description of the argument
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,79,* @param minimum
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,80,*            The minimum number of values needed to be valid
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,81,* @param maximum
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,82,*            The maximum number of values allowed to be valid
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,83,* @param initialSeparator
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,84,*            The char separating option from value
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,85,* @param subsequentSeparator
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,86,*            The char separating values from each other
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,87,* @param validator
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,88,*            The object responsible for validating the values
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,89,* @param consumeRemaining
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,90,"*            The String used for the ""consuming option"" group"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,91,* @param valueDefaults
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,92,*            The values to be used if none are specified.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,93,* @param id
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,94,"*            The id of the option, 0 implies automatic assignment."
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,96,"* @see OptionImpl#OptionImpl(int,boolean)"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,98,"public ArgumentImpl(final String name,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,99,"final String description,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,100,"final int minimum,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,101,"final int maximum,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,102,"final char initialSeparator,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,103,"final char subsequentSeparator,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,104,"final Validator validator,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,105,"final String consumeRemaining,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,106,"final List valueDefaults,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,107,final int id) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,108,"super(id, false);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,110,"this.name = (name == null) ? ""arg"" : name;"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,111,this.description = description;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,112,this.minimum = minimum;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,113,this.maximum = maximum;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,114,this.initialSeparator = initialSeparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,115,this.subsequentSeparator = subsequentSeparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,116,this.subsequentSplit = subsequentSeparator != NUL;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,117,this.validator = validator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,118,this.consumeRemaining = consumeRemaining;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,119,this.defaultValues = valueDefaults;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,121,if (minimum > maximum) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,122,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX));
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,125,if ((valueDefaults != null) && (valueDefaults.size() > 0)) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,126,if (valueDefaults.size() < minimum) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,127,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS));
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,130,if (valueDefaults.size() > maximum) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,131,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS));
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,136,public String getPreferredName() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,137,return name;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,140,"public void processValues(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,141,"final ListIterator arguments,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,142,final Option option)
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,143,throws OptionException {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,144,"int argumentCount = commandLine.getValues(option, Collections.EMPTY_LIST).size();"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,146,while (arguments.hasNext() && (argumentCount < maximum)) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,147,final String allValuesQuoted = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,148,final String allValues = stripBoundaryQuotes(allValuesQuoted);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,150,// should we ignore things that look like options?
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,151,if (allValuesQuoted.equals(consumeRemaining)) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,152,while (arguments.hasNext() && (argumentCount < maximum)) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,153,++argumentCount;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,154,"commandLine.addValue(option, arguments.next());"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,157,// does it look like an option?
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,158,else if (commandLine.looksLikeOption(allValuesQuoted)) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,159,arguments.previous();
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,161,break;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,163,// should we split the string up?
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,164,else if (subsequentSplit) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,165,final StringTokenizer values =
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,166,"new StringTokenizer(allValues, String.valueOf(subsequentSeparator));"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,168,arguments.remove();
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,170,while (values.hasMoreTokens() && (argumentCount < maximum)) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,171,++argumentCount;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,173,final String token = values.nextToken();
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,174,"commandLine.addValue(option, token);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,175,arguments.add(token);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,178,if (values.hasMoreTokens()) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,179,"throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,180,values.nextToken());
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,183,// it must be a value as it is
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,184,else {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,185,++argumentCount;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,186,"commandLine.addValue(option, allValues);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,191,"public boolean canProcess(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,192,final String arg) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,193,return true;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,196,public Set getPrefixes() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,197,return Collections.EMPTY_SET;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,200,"public void process(WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,201,ListIterator args)
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,202,throws OptionException {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,203,"processValues(commandLine, args, this);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,206,public char getInitialSeparator() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,207,return this.initialSeparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,210,public char getSubsequentSeparator() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,211,return this.subsequentSeparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,214,public Set getTriggers() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,215,return Collections.EMPTY_SET;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,218,public String getConsumeRemaining() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,219,return this.consumeRemaining;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,222,public List getDefaultValues() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,223,return this.defaultValues;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,226,public Validator getValidator() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,227,return this.validator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,230,public void validate(final WriteableCommandLine commandLine)
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,231,throws OptionException {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,232,"validate(commandLine, this);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,235,"public void validate(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,236,final Option option)
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,237,throws OptionException {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,238,final List values = commandLine.getValues(option);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,240,if (values.size() < minimum) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,241,"throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,244,if (values.size() > maximum) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,245,"throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,246,(String) values.get(maximum));
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,249,if (validator != null) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,250,try {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,251,validator.validate(values);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,252,} catch (InvalidArgumentException ive) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,253,"throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,254,ive.getMessage());
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,259,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,260,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,261,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,262,// do we display the outer optionality
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,263,final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,265,// allow numbering if multiple args
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,266,final boolean numbered =
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,267,(maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,269,final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,271,// if infinite args are allowed then crop the list
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,272,final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,274,int i = 0;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,276,// for each argument
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,277,while (i < max) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,278,// if we're past the first add a space
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,279,if (i > 0) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,280,buffer.append(' ');
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,283,// if the next arg is optional
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,284,if ((i >= minimum) && (optional || (i > 0))) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,285,buffer.append('[');
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,288,if (bracketed) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,289,buffer.append('<');
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,292,// add name
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,293,buffer.append(name);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,294,++i;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,296,// if numbering
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,297,if (numbered) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,298,buffer.append(i);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,301,if (bracketed) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,302,buffer.append('>');
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,306,// if infinite args are allowed
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,307,if (maximum == Integer.MAX_VALUE) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,308,// append elipsis
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,309,"buffer.append("" ..."");"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,312,// for each argument
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,313,while (i > 0) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,314,--i;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,316,// if the next arg is optional
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,317,if ((i >= minimum) && (optional || (i > 0))) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,318,buffer.append(']');
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,323,public String getDescription() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,324,return description;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,327,"public List helpLines(final int depth,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,328,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,329,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,330,"final HelpLine helpLine = new HelpLineImpl(this, depth);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,332,return Collections.singletonList(helpLine);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,335,public int getMaximum() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,336,return maximum;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,339,public int getMinimum() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,340,return minimum;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,344,* If there are any leading or trailing quotes remove them from the
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,345,* specified token.
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,347,* @param token
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,348,*            the token to strip leading and trailing quotes
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,350,* @return String the possibly modified token
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,352,public String stripBoundaryQuotes(String token) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,353,"if (!token.startsWith(""\"""") || !token.endsWith(""\"""")) {"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,354,return token;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,357,"token = token.substring(1, token.length() - 1);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,359,return token;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,362,public boolean isRequired() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,363,return getMinimum() > 0;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,366,public void defaults(final WriteableCommandLine commandLine) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,367,super.defaults(commandLine);
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,368,"defaultValues(commandLine, this);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,371,"public void defaultValues(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,372,final Option option) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,373,"commandLine.setDefaultValues(option, defaultValues);"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Represents a cvs ""update"" style command line option. * * Like all Parents, Commands can have child options and can be part of * Arguments */public class Command    extends ParentImpl {    /** The display name for the command */    private final String preferredName;    /** The aliases for this command */    private final Set aliases;    /** All the names for this command */    private final Set triggers;    /**     * Creates a new Command instance.     *     * @param preferredName     *            The name normally used to refer to the Command     * @param description     *            A description of the Command     * @param aliases     *            Alternative names for the Command     * @param required     *            Whether the Command is required     * @param argument     *            An Argument that the command takes     * @param children     *            The Group of child options for this Command     * @param id     *            A unique id for the Command     *     * @see ParentImpl#ParentImpl(Argument, Group, String, int, boolean)     */    public Command(final String preferredName,                   final String description,                   final Set aliases,                   final boolean required,                   final Argument argument,                   final Group children,                   final int id) {        super(argument, children, description, id, required);        // check the preferred name is valid        if ((preferredName == null) || (preferredName.length() < 1)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT));        }        this.preferredName = preferredName;        // gracefully and defensively handle aliases        this.aliases =            (aliases == null) ? Collections.EMPTY_SET                              : Collections.unmodifiableSet(new HashSet(aliases));        // populate the triggers Set        final Set newTriggers = new HashSet();        newTriggers.add(preferredName);        newTriggers.addAll(this.aliases);        this.triggers = Collections.unmodifiableSet(newTriggers);    }    public void processParent(final WriteableCommandLine commandLine,                              final ListIterator arguments)        throws OptionException {        // grab the argument to process        final String arg = (String) arguments.next();        // if we can process it        if (canProcess(commandLine, arg)) {            // then note the option            commandLine.addOption(this);            // normalise the argument list            arguments.set(preferredName);        } else {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);        }    }    public Set getTriggers() {        return triggers;    }    public void validate(WriteableCommandLine commandLine)        throws OptionException {        if (isRequired() && !commandLine.hasOption(this)) {            throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,                                      getPreferredName());        }        super.validate(commandLine);    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        // do we display optionality        final boolean optional =            !isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);        final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);        if (optional) {            buffer.append('[');        }        buffer.append(preferredName);        if (displayAliases && !aliases.isEmpty()) {            buffer.append("" ("");            final List list = new ArrayList(aliases);            Collections.sort(list);            for (final Iterator i = list.iterator(); i.hasNext();) {                final String alias = (String) i.next();                buffer.append(alias);                if (i.hasNext()) {                    buffer.append(',');                }            }            buffer.append(')');        }        super.appendUsage(buffer, helpSettings, comp);        if (optional) {            buffer.append(']');        }    }    public String getPreferredName() {        return preferredName;    }}"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,21,import java.util.Collections;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,22,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,23,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,24,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,25,import java.util.List;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,26,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,27,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,29,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,30,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,31,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,32,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,33,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,34,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,35,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,38,"* Represents a cvs ""update"" style command line option."
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,40,"* Like all Parents, Commands can have child options and can be part of"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,41,* Arguments
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,43,public class Command
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,44,extends ParentImpl {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,45,/** The display name for the command */
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,46,private final String preferredName;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,48,/** The aliases for this command */
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,49,private final Set aliases;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,51,/** All the names for this command */
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,52,private final Set triggers;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,55,* Creates a new Command instance.
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,57,* @param preferredName
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,58,*            The name normally used to refer to the Command
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,59,* @param description
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,60,*            A description of the Command
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,61,* @param aliases
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,62,*            Alternative names for the Command
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,63,* @param required
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,64,*            Whether the Command is required
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,65,* @param argument
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,66,*            An Argument that the command takes
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,67,* @param children
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,68,*            The Group of child options for this Command
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,69,* @param id
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,70,*            A unique id for the Command
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,72,"* @see ParentImpl#ParentImpl(Argument, Group, String, int, boolean)"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,74,"public Command(final String preferredName,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,75,"final String description,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,76,"final Set aliases,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,77,"final boolean required,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,78,"final Argument argument,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,79,"final Group children,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,80,final int id) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,81,"super(argument, children, description, id, required);"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,83,// check the preferred name is valid
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,84,if ((preferredName == null) || (preferredName.length() < 1)) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,85,throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT));
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,88,this.preferredName = preferredName;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,90,// gracefully and defensively handle aliases
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,91,this.aliases =
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,92,(aliases == null) ? Collections.EMPTY_SET
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,93,: Collections.unmodifiableSet(new HashSet(aliases));
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,95,// populate the triggers Set
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,96,final Set newTriggers = new HashSet();
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,97,newTriggers.add(preferredName);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,98,newTriggers.addAll(this.aliases);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,99,this.triggers = Collections.unmodifiableSet(newTriggers);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,102,"public void processParent(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,103,final ListIterator arguments)
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,104,throws OptionException {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,105,// grab the argument to process
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,106,final String arg = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,108,// if we can process it
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,109,"if (canProcess(commandLine, arg)) {"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,110,// then note the option
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,111,commandLine.addOption(this);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,113,// normalise the argument list
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,114,arguments.set(preferredName);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,115,} else {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,116,"throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,120,public Set getTriggers() {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,121,return triggers;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,124,public void validate(WriteableCommandLine commandLine)
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,125,throws OptionException {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,126,if (isRequired() && !commandLine.hasOption(this)) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,127,"throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,128,getPreferredName());
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,131,super.validate(commandLine);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,134,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,135,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,136,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,137,// do we display optionality
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,138,final boolean optional =
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,139,!isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,140,final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,142,if (optional) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,143,buffer.append('[');
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,146,buffer.append(preferredName);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,148,if (displayAliases && !aliases.isEmpty()) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,149,"buffer.append("" ("");"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,151,final List list = new ArrayList(aliases);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,152,Collections.sort(list);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,154,for (final Iterator i = list.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,155,final String alias = (String) i.next();
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,156,buffer.append(alias);
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,158,if (i.hasNext()) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,159,"buffer.append(',');"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,163,buffer.append(')');
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,166,"super.appendUsage(buffer, helpSettings, comp);"
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,168,if (optional) {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,169,buffer.append(']');
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,173,public String getPreferredName() {
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,174,return preferredName;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;/** * A Parent implementation representing normal options. */public class DefaultOption    extends ParentImpl {    /**     * The default token used to prefix a short option     */    public static final String DEFAULT_SHORT_PREFIX = ""-"";    /**     * The default token used to prefix a long option     */    public static final String DEFAULT_LONG_PREFIX = ""--"";    /**     * The default value for the burstEnabled constructor parameter     */    public static final boolean DEFAULT_BURST_ENABLED = true;    private final String preferredName;    private final Set aliases;    private final Set burstAliases;    private final Set triggers;    private final Set prefixes;    private final String shortPrefix;    private final boolean burstEnabled;    private final int burstLength;    /**     * Creates a new DefaultOption     *     * @param shortPrefix the prefix used for short options     * @param longPrefix the prefix used for long options     * @param burstEnabled should option bursting be enabled     * @param preferredName the preferred name for this Option, this should begin with either shortPrefix or longPrefix     * @param description a description of this Option     * @param aliases the alternative names for this Option     * @param burstAliases the aliases that can be burst     * @param required whether the Option is strictly required     * @param argument the Argument belonging to this Parent, or null     * @param children the Group children belonging to this Parent, ot null     * @param id the unique identifier for this Option     * @throws IllegalArgumentException if the preferredName or an alias isn't     *     prefixed with shortPrefix or longPrefix     */    public DefaultOption(final String shortPrefix,                         final String longPrefix,                         final boolean burstEnabled,                         final String preferredName,                         final String description,                         final Set aliases,                         final Set burstAliases,                         final boolean required,                         final Argument argument,                         final Group children,                         final int id) {        super(argument, children, description, id, required);        this.shortPrefix = shortPrefix;        this.burstEnabled = burstEnabled;        this.burstLength = shortPrefix.length() + 1;        this.preferredName = preferredName;        this.aliases =            (aliases == null) ? Collections.EMPTY_SET                              : Collections.unmodifiableSet(new HashSet(aliases));        this.burstAliases =            (burstAliases == null) ? Collections.EMPTY_SET                                   : Collections.unmodifiableSet(new HashSet(burstAliases));        final Set newTriggers = new HashSet();        newTriggers.add(preferredName);        newTriggers.addAll(this.aliases);        newTriggers.addAll(this.burstAliases);        this.triggers = Collections.unmodifiableSet(newTriggers);        final Set newPrefixes = new HashSet(super.getPrefixes());        newPrefixes.add(shortPrefix);        newPrefixes.add(longPrefix);        this.prefixes = Collections.unmodifiableSet(newPrefixes);        checkPrefixes(newPrefixes);    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String argument) {        return (argument != null) &&               (super.canProcess(commandLine, argument) ||               ((argument.length() >= burstLength) &&               burstAliases.contains(argument.substring(0, burstLength))));    }    public void processParent(WriteableCommandLine commandLine,                              ListIterator arguments)        throws OptionException {        final String argument = (String) arguments.next();        if (triggers.contains(argument)) {            commandLine.addOption(this);            arguments.set(preferredName);        } else if (burstEnabled && (argument.length() >= burstLength)) {            final String burst = argument.substring(0, burstLength);            if (burstAliases.contains(burst)) {                commandLine.addOption(this);                //HMM test bursting all vs bursting one by one.                arguments.set(preferredName);                if (getArgument() == null) {                    arguments.add(shortPrefix + argument.substring(burstLength));                } else {                    arguments.add(argument.substring(burstLength));                }                arguments.previous();            } else {                throw new OptionException(this, ResourceConstants.CANNOT_BURST, argument);            }        } else {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, argument);        }    }    public Set getTriggers() {        return triggers;    }    public Set getPrefixes() {        return prefixes;    }    public void validate(WriteableCommandLine commandLine)        throws OptionException {        if (isRequired() && !commandLine.hasOption(this)) {            throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,                                      getPreferredName());        }        super.validate(commandLine);    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        // do we display optionality        final boolean optional =            !isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);        final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);        if (optional) {            buffer.append('[');        }        buffer.append(preferredName);        if (displayAliases && !aliases.isEmpty()) {            buffer.append("" ("");            final List list = new ArrayList(aliases);            Collections.sort(list);            for (final Iterator i = list.iterator(); i.hasNext();) {                final String alias = (String) i.next();                buffer.append(alias);                if (i.hasNext()) {                    buffer.append(',');                }            }            buffer.append(')');        }        super.appendUsage(buffer, helpSettings, comp);        if (optional) {            buffer.append(']');        }    }    public String getPreferredName() {        return preferredName;    }}"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,21,import java.util.Collections;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,22,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,23,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,24,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,25,import java.util.List;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,26,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,27,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,29,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,30,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,31,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,32,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,33,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,34,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,37,* A Parent implementation representing normal options.
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,39,public class DefaultOption
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,40,extends ParentImpl {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,42,* The default token used to prefix a short option
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,44,"public static final String DEFAULT_SHORT_PREFIX = ""-"";"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,47,* The default token used to prefix a long option
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,49,"public static final String DEFAULT_LONG_PREFIX = ""--"";"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,52,* The default value for the burstEnabled constructor parameter
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,54,public static final boolean DEFAULT_BURST_ENABLED = true;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,55,private final String preferredName;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,56,private final Set aliases;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,57,private final Set burstAliases;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,58,private final Set triggers;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,59,private final Set prefixes;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,60,private final String shortPrefix;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,61,private final boolean burstEnabled;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,62,private final int burstLength;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,65,* Creates a new DefaultOption
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,67,* @param shortPrefix the prefix used for short options
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,68,* @param longPrefix the prefix used for long options
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,69,* @param burstEnabled should option bursting be enabled
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,70,"* @param preferredName the preferred name for this Option, this should begin with either shortPrefix or longPrefix"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,71,* @param description a description of this Option
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,72,* @param aliases the alternative names for this Option
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,73,* @param burstAliases the aliases that can be burst
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,74,* @param required whether the Option is strictly required
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,75,"* @param argument the Argument belonging to this Parent, or null"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,76,"* @param children the Group children belonging to this Parent, ot null"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,77,* @param id the unique identifier for this Option
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,78,* @throws IllegalArgumentException if the preferredName or an alias isn't
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,79,*     prefixed with shortPrefix or longPrefix
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,81,"public DefaultOption(final String shortPrefix,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,82,"final String longPrefix,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,83,"final boolean burstEnabled,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,84,"final String preferredName,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,85,"final String description,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,86,"final Set aliases,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,87,"final Set burstAliases,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,88,"final boolean required,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,89,"final Argument argument,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,90,"final Group children,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,91,final int id) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,92,"super(argument, children, description, id, required);"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,94,this.shortPrefix = shortPrefix;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,95,this.burstEnabled = burstEnabled;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,97,this.burstLength = shortPrefix.length() + 1;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,99,this.preferredName = preferredName;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,100,this.aliases =
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,101,(aliases == null) ? Collections.EMPTY_SET
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,102,: Collections.unmodifiableSet(new HashSet(aliases));
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,104,this.burstAliases =
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,105,(burstAliases == null) ? Collections.EMPTY_SET
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,106,: Collections.unmodifiableSet(new HashSet(burstAliases));
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,108,final Set newTriggers = new HashSet();
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,109,newTriggers.add(preferredName);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,110,newTriggers.addAll(this.aliases);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,111,newTriggers.addAll(this.burstAliases);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,112,this.triggers = Collections.unmodifiableSet(newTriggers);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,114,final Set newPrefixes = new HashSet(super.getPrefixes());
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,115,newPrefixes.add(shortPrefix);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,116,newPrefixes.add(longPrefix);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,117,this.prefixes = Collections.unmodifiableSet(newPrefixes);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,119,checkPrefixes(newPrefixes);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,122,"public boolean canProcess(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,123,final String argument) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,124,return (argument != null) &&
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,125,"(super.canProcess(commandLine, argument) ||"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,126,((argument.length() >= burstLength) &&
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,127,"burstAliases.contains(argument.substring(0, burstLength))));"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,130,"public void processParent(WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,131,ListIterator arguments)
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,132,throws OptionException {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,133,final String argument = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,135,if (triggers.contains(argument)) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,136,commandLine.addOption(this);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,137,arguments.set(preferredName);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,138,} else if (burstEnabled && (argument.length() >= burstLength)) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,139,"final String burst = argument.substring(0, burstLength);"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,141,if (burstAliases.contains(burst)) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,142,commandLine.addOption(this);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,144,//HMM test bursting all vs bursting one by one.
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,145,arguments.set(preferredName);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,147,if (getArgument() == null) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,148,arguments.add(shortPrefix + argument.substring(burstLength));
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,149,} else {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,150,arguments.add(argument.substring(burstLength));
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,153,arguments.previous();
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,154,} else {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,155,"throw new OptionException(this, ResourceConstants.CANNOT_BURST, argument);"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,157,} else {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,158,"throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, argument);"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,162,public Set getTriggers() {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,163,return triggers;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,166,public Set getPrefixes() {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,167,return prefixes;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,170,public void validate(WriteableCommandLine commandLine)
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,171,throws OptionException {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,172,if (isRequired() && !commandLine.hasOption(this)) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,173,"throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,174,getPreferredName());
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,177,super.validate(commandLine);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,180,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,181,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,182,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,183,// do we display optionality
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,184,final boolean optional =
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,185,!isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,186,final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,188,if (optional) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,189,buffer.append('[');
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,192,buffer.append(preferredName);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,194,if (displayAliases && !aliases.isEmpty()) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,195,"buffer.append("" ("");"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,197,final List list = new ArrayList(aliases);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,198,Collections.sort(list);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,200,for (final Iterator i = list.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,201,final String alias = (String) i.next();
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,202,buffer.append(alias);
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,204,if (i.hasNext()) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,205,"buffer.append(',');"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,209,buffer.append(')');
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,212,"super.appendUsage(buffer, helpSettings, comp);"
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,214,if (optional) {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,215,buffer.append(']');
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,219,public String getPreferredName() {
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,220,return preferredName;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collection;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Map;import java.util.Set;import java.util.SortedMap;import java.util.TreeMap;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;/** * An implementation of Group */public class GroupImpl    extends OptionImpl implements Group {    private final String name;    private final String description;    private final List options;    private final int minimum;    private final int maximum;    private final List anonymous;    private final SortedMap optionMap;    private final Set prefixes;    /**     * Creates a new GroupImpl using the specified parameters.     *     * @param options the Options and Arguments that make up the Group     * @param name the name of this Group, or null     * @param description a description of this Group     * @param minimum the minimum number of Options for a valid CommandLine     * @param maximum the maximum number of Options for a valid CommandLine     */    public GroupImpl(final List options,                     final String name,                     final String description,                     final int minimum,                     final int maximum) {        super(0, false);        this.name = name;        this.description = description;        this.minimum = minimum;        this.maximum = maximum;        // store a copy of the options to be used by the        // help methods        this.options = Collections.unmodifiableList(options);        // anonymous Argument temporary storage        final List newAnonymous = new ArrayList();        // map (key=trigger & value=Option) temporary storage        final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());        // prefixes temporary storage        final Set newPrefixes = new HashSet();        // process the options        for (final Iterator i = options.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            if (option instanceof Argument) {                i.remove();                newAnonymous.add(option);            } else {                final Set triggers = option.getTriggers();                for (Iterator j = triggers.iterator(); j.hasNext();) {                    newOptionMap.put(j.next(), option);                }                // store the prefixes                newPrefixes.addAll(option.getPrefixes());            }        }        this.anonymous = Collections.unmodifiableList(newAnonymous);        this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);        this.prefixes = Collections.unmodifiableSet(newPrefixes);    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String arg) {        if (arg == null) {            return false;        }        // if arg does not require bursting        if (optionMap.containsKey(arg)) {            return true;        }        // filter        final Map tailMap = optionMap.tailMap(arg);        // check if bursting is required        for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) {            final Option option = (Option) iter.next();            if (option.canProcess(commandLine, arg)) {                return true;            }        }        if (commandLine.looksLikeOption(arg)) {            return false;        }        // anonymous argument(s) means we can process it        if (anonymous.size() > 0) {            return true;        }        return false;    }    public Set getPrefixes() {        return prefixes;    }    public Set getTriggers() {        return optionMap.keySet();    }    public void process(final WriteableCommandLine commandLine,                        final ListIterator arguments)        throws OptionException {        String previous = null;        // [START process each command line token        while (arguments.hasNext()) {            // grab the next argument            final String arg = (String) arguments.next();            // if we have just tried to process this instance            if (arg == previous) {                // rollback and abort                arguments.previous();                break;            }            // remember last processed instance            previous = arg;            final Option opt = (Option) optionMap.get(arg);            // option found            if (opt != null) {                arguments.previous();                opt.process(commandLine, arguments);            }            // [START option NOT found            else {                // it might be an anonymous argument continue search                // [START argument may be anonymous                if (commandLine.looksLikeOption(arg)) {                    // narrow the search                    final Collection values = optionMap.tailMap(arg).values();                    boolean foundMemberOption = false;                    for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {                        final Option option = (Option) i.next();                        if (option.canProcess(commandLine, arg)) {                            foundMemberOption = true;                            arguments.previous();                            option.process(commandLine, arguments);                        }                    }                    // back track and abort this group if necessary                    if (!foundMemberOption) {                        arguments.previous();                        return;                    }                } // [END argument may be anonymous                // [START argument is NOT anonymous                else {                    // move iterator back, current value not used                    arguments.previous();                    // if there are no anonymous arguments then this group can't                    // process the argument                    if (anonymous.isEmpty()) {                        break;                    }                    // TODO: why do we iterate over all anonymous arguments?                    // canProcess will always return true?                    for (final Iterator i = anonymous.iterator(); i.hasNext();) {                        final Argument argument = (Argument) i.next();                        if (argument.canProcess(commandLine, arguments)) {                            argument.process(commandLine, arguments);                        }                    }                } // [END argument is NOT anonymous            } // [END option NOT found        } // [END process each command line token    }    public void validate(final WriteableCommandLine commandLine)        throws OptionException {        // number of options found        int present = 0;        // reference to first unexpected option        Option unexpected = null;        for (final Iterator i = options.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            // if the child option is required then validate it            if (option.isRequired()) {                option.validate(commandLine);            }            if (option instanceof Group) {                option.validate(commandLine);            }            // if the child option is present then validate it            if (commandLine.hasOption(option)) {                if (++present > maximum) {                    unexpected = option;                    break;                }                option.validate(commandLine);            }        }        // too many options        if (unexpected != null) {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,                                      unexpected.getPreferredName());        }        // too few option        if (present < minimum) {            throw new OptionException(this, ResourceConstants.MISSING_OPTION);        }        // validate each anonymous argument        for (final Iterator i = anonymous.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            option.validate(commandLine);        }    }    public String getPreferredName() {        return name;    }    public String getDescription() {        return description;    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        appendUsage(buffer, helpSettings, comp, ""|"");    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp,                            final String separator) {        final Set helpSettingsCopy = new HashSet(helpSettings);        final boolean optional =            (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);        final boolean expanded =            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);        final boolean named =            !expanded ||            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));        final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);        helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);        final boolean both = named && expanded;        if (optional) {            buffer.append('[');        }        if (named) {            buffer.append(name);        }        if (both) {            buffer.append("" ("");        }        if (expanded) {            final Set childSettings;            if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {                childSettings = DisplaySetting.NONE;            } else {                childSettings = new HashSet(helpSettingsCopy);                childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);            }            // grab a list of the group's options.            final List list;            if (comp == null) {                // default to using the initial order                list = options;            } else {                // sort options if comparator is supplied                list = new ArrayList(options);                Collections.sort(list, comp);            }            // for each option.            for (final Iterator i = list.iterator(); i.hasNext();) {                final Option option = (Option) i.next();                // append usage information                option.appendUsage(buffer, childSettings, comp);                // add separators as needed                if (i.hasNext()) {                    buffer.append(separator);                }            }        }        if (both) {            buffer.append(')');        }        if (optional && outer) {            buffer.append(']');        }        if (arguments) {            for (final Iterator i = anonymous.iterator(); i.hasNext();) {                buffer.append(' ');                final Option option = (Option) i.next();                option.appendUsage(buffer, helpSettingsCopy, comp);            }        }        if (optional && !outer) {            buffer.append(']');        }    }    public List helpLines(final int depth,                          final Set helpSettings,                          final Comparator comp) {        final List helpLines = new ArrayList();        if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) {            final HelpLine helpLine = new HelpLineImpl(this, depth);            helpLines.add(helpLine);        }        if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {            // grab a list of the group's options.            final List list;            if (comp == null) {                // default to using the initial order                list = options;            } else {                // sort options if comparator is supplied                list = new ArrayList(options);                Collections.sort(list, comp);            }            // for each option            for (final Iterator i = list.iterator(); i.hasNext();) {                final Option option = (Option) i.next();                helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));            }        }        if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) {            for (final Iterator i = anonymous.iterator(); i.hasNext();) {                final Option option = (Option) i.next();                helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));            }        }        return helpLines;    }    /**     * Gets the member Options of thie Group.     * Note this does not include any Arguments     * @return only the non Argument Options of the Group     */    public List getOptions() {        return options;    }    /**     * Gets the anonymous Arguments of this Group.     * @return the Argument options of this Group     */    public List getAnonymous() {        return anonymous;    }    public Option findOption(final String trigger) {        final Iterator i = getOptions().iterator();        while (i.hasNext()) {            final Option option = (Option) i.next();            final Option found = option.findOption(trigger);            if (found != null) {                return found;            }        }        return null;    }    public int getMinimum() {        return minimum;    }    public int getMaximum() {        return maximum;    }    public boolean isRequired() {        return getMinimum() > 0;    }    public void defaults(final WriteableCommandLine commandLine) {        super.defaults(commandLine);        for (final Iterator i = options.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            option.defaults(commandLine);        }        for (final Iterator i = anonymous.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            option.defaults(commandLine);        }    }}class ReverseStringComparator implements Comparator {    private static final Comparator instance = new ReverseStringComparator();    private ReverseStringComparator() {        // just making sure nobody else creates one    }    /**     * Gets a singleton instance of a ReverseStringComparator     * @return the singleton instance     */    public static final Comparator getInstance() {        return instance;    }    public int compare(final Object o1,                       final Object o2) {        final String s1 = (String) o1;        final String s2 = (String) o2;        return -s1.compareTo(s2);    }}"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,21,import java.util.Collection;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,22,import java.util.Collections;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,23,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,24,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,25,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,26,import java.util.List;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,27,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,28,import java.util.Map;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,29,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,30,import java.util.SortedMap;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,31,import java.util.TreeMap;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,33,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,34,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,35,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,36,import org.apache.commons.cli2.HelpLine;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,37,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,38,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,39,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,40,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,43,* An implementation of Group
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,45,public class GroupImpl
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,46,extends OptionImpl implements Group {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,47,private final String name;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,48,private final String description;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,49,private final List options;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,50,private final int minimum;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,51,private final int maximum;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,52,private final List anonymous;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,53,private final SortedMap optionMap;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,54,private final Set prefixes;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,57,* Creates a new GroupImpl using the specified parameters.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,59,* @param options the Options and Arguments that make up the Group
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,60,"* @param name the name of this Group, or null"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,61,* @param description a description of this Group
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,62,* @param minimum the minimum number of Options for a valid CommandLine
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,63,* @param maximum the maximum number of Options for a valid CommandLine
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,65,"public GroupImpl(final List options,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,66,"final String name,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,67,"final String description,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,68,"final int minimum,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,69,final int maximum) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,70,"super(0, false);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,72,this.name = name;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,73,this.description = description;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,74,this.minimum = minimum;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,75,this.maximum = maximum;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,77,// store a copy of the options to be used by the
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,78,// help methods
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,79,this.options = Collections.unmodifiableList(options);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,81,// anonymous Argument temporary storage
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,82,final List newAnonymous = new ArrayList();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,84,// map (key=trigger & value=Option) temporary storage
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,85,final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,87,// prefixes temporary storage
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,88,final Set newPrefixes = new HashSet();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,90,// process the options
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,91,for (final Iterator i = options.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,92,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,94,if (option instanceof Argument) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,95,i.remove();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,96,newAnonymous.add(option);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,97,} else {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,98,final Set triggers = option.getTriggers();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,100,for (Iterator j = triggers.iterator(); j.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,101,"newOptionMap.put(j.next(), option);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,104,// store the prefixes
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,105,newPrefixes.addAll(option.getPrefixes());
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,109,this.anonymous = Collections.unmodifiableList(newAnonymous);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,110,this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,111,this.prefixes = Collections.unmodifiableSet(newPrefixes);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,114,"public boolean canProcess(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,115,final String arg) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,116,if (arg == null) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,117,return false;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,120,// if arg does not require bursting
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,121,if (optionMap.containsKey(arg)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,122,return true;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,125,// filter
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,126,final Map tailMap = optionMap.tailMap(arg);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,128,// check if bursting is required
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,129,for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,130,final Option option = (Option) iter.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,132,"if (option.canProcess(commandLine, arg)) {"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,133,return true;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,137,if (commandLine.looksLikeOption(arg)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,138,return false;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,141,// anonymous argument(s) means we can process it
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,142,if (anonymous.size() > 0) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,143,return true;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,146,return false;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,149,public Set getPrefixes() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,150,return prefixes;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,153,public Set getTriggers() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,154,return optionMap.keySet();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,157,"public void process(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,158,final ListIterator arguments)
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,159,throws OptionException {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,160,String previous = null;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,162,// [START process each command line token
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,163,while (arguments.hasNext()) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,164,// grab the next argument
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,165,final String arg = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,167,// if we have just tried to process this instance
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,168,if (arg == previous) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,169,// rollback and abort
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,170,arguments.previous();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,172,break;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,175,// remember last processed instance
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,176,previous = arg;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,178,final Option opt = (Option) optionMap.get(arg);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,180,// option found
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,181,if (opt != null) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,182,arguments.previous();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,183,"opt.process(commandLine, arguments);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,185,// [START option NOT found
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,186,else {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,187,// it might be an anonymous argument continue search
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,188,// [START argument may be anonymous
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,189,if (commandLine.looksLikeOption(arg)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,190,// narrow the search
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,191,final Collection values = optionMap.tailMap(arg).values();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,193,boolean foundMemberOption = false;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,195,for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,196,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,198,"if (option.canProcess(commandLine, arg)) {"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,199,foundMemberOption = true;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,200,arguments.previous();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,201,"option.process(commandLine, arguments);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,205,// back track and abort this group if necessary
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,206,if (!foundMemberOption) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,207,arguments.previous();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,209,return;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,211,} // [END argument may be anonymous
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,213,// [START argument is NOT anonymous
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,214,else {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,215,"// move iterator back, current value not used"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,216,arguments.previous();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,218,// if there are no anonymous arguments then this group can't
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,219,// process the argument
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,220,if (anonymous.isEmpty()) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,221,break;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,224,// TODO: why do we iterate over all anonymous arguments?
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,225,// canProcess will always return true?
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,226,for (final Iterator i = anonymous.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,227,final Argument argument = (Argument) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,229,"if (argument.canProcess(commandLine, arguments)) {"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,230,"argument.process(commandLine, arguments);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,233,} // [END argument is NOT anonymous
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,234,} // [END option NOT found
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,235,} // [END process each command line token
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,238,public void validate(final WriteableCommandLine commandLine)
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,239,throws OptionException {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,240,// number of options found
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,241,int present = 0;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,243,// reference to first unexpected option
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,244,Option unexpected = null;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,246,for (final Iterator i = options.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,247,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,249,// if the child option is required then validate it
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,250,if (option.isRequired()) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,251,option.validate(commandLine);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,254,if (option instanceof Group) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,255,option.validate(commandLine);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,258,// if the child option is present then validate it
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,259,if (commandLine.hasOption(option)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,260,if (++present > maximum) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,261,unexpected = option;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,263,break;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,266,option.validate(commandLine);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,270,// too many options
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,271,if (unexpected != null) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,272,"throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,273,unexpected.getPreferredName());
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,276,// too few option
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,277,if (present < minimum) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,278,"throw new OptionException(this, ResourceConstants.MISSING_OPTION);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,281,// validate each anonymous argument
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,282,for (final Iterator i = anonymous.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,283,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,284,option.validate(commandLine);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,288,public String getPreferredName() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,289,return name;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,292,public String getDescription() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,293,return description;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,296,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,297,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,298,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,299,"appendUsage(buffer, helpSettings, comp, ""|"");"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,302,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,303,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,304,"final Comparator comp,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,305,final String separator) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,306,final Set helpSettingsCopy = new HashSet(helpSettings);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,308,final boolean optional =
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,309,(minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,311,final boolean expanded =
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,312,(name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,314,final boolean named =
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,315,!expanded ||
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,316,((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,318,final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,320,final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,322,helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,324,final boolean both = named && expanded;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,326,if (optional) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,327,buffer.append('[');
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,330,if (named) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,331,buffer.append(name);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,334,if (both) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,335,"buffer.append("" ("");"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,338,if (expanded) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,339,final Set childSettings;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,341,if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,342,childSettings = DisplaySetting.NONE;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,343,} else {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,344,childSettings = new HashSet(helpSettingsCopy);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,345,childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,348,// grab a list of the group's options.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,349,final List list;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,351,if (comp == null) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,352,// default to using the initial order
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,353,list = options;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,354,} else {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,355,// sort options if comparator is supplied
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,356,list = new ArrayList(options);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,357,"Collections.sort(list, comp);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,360,// for each option.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,361,for (final Iterator i = list.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,362,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,364,// append usage information
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,365,"option.appendUsage(buffer, childSettings, comp);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,367,// add separators as needed
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,368,if (i.hasNext()) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,369,buffer.append(separator);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,374,if (both) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,375,buffer.append(')');
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,378,if (optional && outer) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,379,buffer.append(']');
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,382,if (arguments) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,383,for (final Iterator i = anonymous.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,384,buffer.append(' ');
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,386,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,387,"option.appendUsage(buffer, helpSettingsCopy, comp);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,391,if (optional && !outer) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,392,buffer.append(']');
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,396,"public List helpLines(final int depth,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,397,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,398,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,399,final List helpLines = new ArrayList();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,401,if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,402,"final HelpLine helpLine = new HelpLineImpl(this, depth);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,403,helpLines.add(helpLine);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,406,if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,407,// grab a list of the group's options.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,408,final List list;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,410,if (comp == null) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,411,// default to using the initial order
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,412,list = options;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,413,} else {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,414,// sort options if comparator is supplied
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,415,list = new ArrayList(options);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,416,"Collections.sort(list, comp);"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,419,// for each option
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,420,for (final Iterator i = list.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,421,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,422,"helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,426,if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,427,for (final Iterator i = anonymous.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,428,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,429,"helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,433,return helpLines;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,437,* Gets the member Options of thie Group.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,438,* Note this does not include any Arguments
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,439,* @return only the non Argument Options of the Group
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,441,public List getOptions() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,442,return options;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,446,* Gets the anonymous Arguments of this Group.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,447,* @return the Argument options of this Group
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,449,public List getAnonymous() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,450,return anonymous;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,453,public Option findOption(final String trigger) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,454,final Iterator i = getOptions().iterator();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,456,while (i.hasNext()) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,457,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,458,final Option found = option.findOption(trigger);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,460,if (found != null) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,461,return found;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,465,return null;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,468,public int getMinimum() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,469,return minimum;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,472,public int getMaximum() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,473,return maximum;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,476,public boolean isRequired() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,477,return getMinimum() > 0;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,480,public void defaults(final WriteableCommandLine commandLine) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,481,super.defaults(commandLine);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,483,for (final Iterator i = options.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,484,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,485,option.defaults(commandLine);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,488,for (final Iterator i = anonymous.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,489,final Option option = (Option) i.next();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,490,option.defaults(commandLine);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,496,class ReverseStringComparator implements Comparator {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,497,private static final Comparator instance = new ReverseStringComparator();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,499,private ReverseStringComparator() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,500,// just making sure nobody else creates one
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,504,* Gets a singleton instance of a ReverseStringComparator
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,505,* @return the singleton instance
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,507,public static final Comparator getInstance() {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,508,return instance;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,511,"public int compare(final Object o1,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,512,final Object o2) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,513,final String s1 = (String) o1;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,514,final String s2 = (String) o2;
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,516,return -s1.compareTo(s2);
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Comparator;import java.util.Set;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;/** * Represents a line in the help screen. */public class HelpLineImpl implements HelpLine {    /** The option that this HelpLineImpl describes */    private final Option option;    /** The level of indenting for this item */    private final int indent;    /** The help settings used to obtain the previous usage */    private transient Set cachedHelpSettings;    /** The comparator used to obtain the previous usage */    private transient Comparator cachedComparator;    /** The previously obtained usage */    private transient String cachedUsage;    /**     * Creates a new HelpLineImpl to represent a particular Option in the online     * help.     *     * @param option     *            Option that the HelpLineImpl describes     * @param indent     *            Level of indentation for this line     */    public HelpLineImpl(final Option option, final int indent) {        this.option = option;        this.indent = indent;    }    /**     * @return The description of the option     */    public String getDescription() {        return option.getDescription();    }    /**     * @return The level of indentation for this line     */    public int getIndent() {        return indent;    }    /**     * @return The Option that the help line relates to     */    public Option getOption() {        return option;    }    /**     * Builds a usage string for the option using the specified settings and     * comparator.     *     *     * @param helpSettings the settings to apply     * @param comparator a comparator to sort options when applicable     * @return the usage string     */    public String usage(final Set helpSettings, final Comparator comparator) {        if (cachedUsage == null            || cachedHelpSettings != helpSettings            || cachedComparator != comparator) {            // cache the arguments to avoid redoing work            cachedHelpSettings = helpSettings;            cachedComparator = comparator;            // build the new buffer            final StringBuffer buffer = new StringBuffer();            for (int i = 0; i < indent; ++i) {                buffer.append(""  "");            }            option.appendUsage(buffer, helpSettings, comparator);            // cache the usage string            cachedUsage = buffer.toString();        }        return cachedUsage;    }}"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,20,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,21,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,23,import org.apache.commons.cli2.HelpLine;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,24,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,27,* Represents a line in the help screen.
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,29,public class HelpLineImpl implements HelpLine {
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,31,/** The option that this HelpLineImpl describes */
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,32,private final Option option;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,34,/** The level of indenting for this item */
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,35,private final int indent;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,37,/** The help settings used to obtain the previous usage */
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,38,private transient Set cachedHelpSettings;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,40,/** The comparator used to obtain the previous usage */
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,41,private transient Comparator cachedComparator;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,43,/** The previously obtained usage */
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,44,private transient String cachedUsage;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,47,* Creates a new HelpLineImpl to represent a particular Option in the online
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,48,* help.
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,50,* @param option
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,51,*            Option that the HelpLineImpl describes
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,52,* @param indent
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,53,*            Level of indentation for this line
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,55,"public HelpLineImpl(final Option option, final int indent) {"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,56,this.option = option;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,57,this.indent = indent;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,61,* @return The description of the option
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,63,public String getDescription() {
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,64,return option.getDescription();
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,68,* @return The level of indentation for this line
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,70,public int getIndent() {
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,71,return indent;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,75,* @return The Option that the help line relates to
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,77,public Option getOption() {
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,78,return option;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,82,* Builds a usage string for the option using the specified settings and
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,83,* comparator.
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,86,* @param helpSettings the settings to apply
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,87,* @param comparator a comparator to sort options when applicable
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,88,* @return the usage string
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,90,"public String usage(final Set helpSettings, final Comparator comparator) {"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,91,if (cachedUsage == null
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,92,|| cachedHelpSettings != helpSettings
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,93,|| cachedComparator != comparator) {
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,95,// cache the arguments to avoid redoing work
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,96,cachedHelpSettings = helpSettings;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,97,cachedComparator = comparator;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,99,// build the new buffer
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,100,final StringBuffer buffer = new StringBuffer();
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,101,for (int i = 0; i < indent; ++i) {
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,102,"buffer.append(""  "");"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,104,"option.appendUsage(buffer, helpSettings, comparator);"
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,106,// cache the usage string
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,107,cachedUsage = buffer.toString();
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,109,return cachedUsage;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Iterator;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * A base implementation of Option providing limited ground work for further * Option implementations. */public abstract class OptionImpl implements Option {    private final int id;    private final boolean required;    /**     * Creates an OptionImpl with the specified id     * @param id the unique id of this Option     * @param required true iff this Option must be present     */    public OptionImpl(final int id,                      final boolean required) {        this.id = id;        this.required = required;    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final ListIterator arguments) {        if (arguments.hasNext()) {            final String argument = (String) arguments.next();            arguments.previous();            return canProcess(commandLine, argument);        } else {            return false;        }    }    public String toString() {        final StringBuffer buffer = new StringBuffer();        appendUsage(buffer, DisplaySetting.ALL, null);        return buffer.toString();    }    public int getId() {        return id;    }    public boolean equals(final Object thatObj) {        if (thatObj instanceof OptionImpl) {            final OptionImpl that = (OptionImpl) thatObj;            return (getId() == that.getId()) &&                   equals(getPreferredName(), that.getPreferredName()) &&                   equals(getDescription(), that.getDescription()) &&                   equals(getPrefixes(), that.getPrefixes()) &&                   equals(getTriggers(), that.getTriggers());        } else {            return false;        }    }    private boolean equals(Object left,                           Object right) {        if ((left == null) && (right == null)) {            return true;        } else if ((left == null) || (right == null)) {            return false;        } else {            return left.equals(right);        }    }    public int hashCode() {        int hashCode = getId();        hashCode = (hashCode * 37) + getPreferredName().hashCode();        if (getDescription() != null) {            hashCode = (hashCode * 37) + getDescription().hashCode();        }        hashCode = (hashCode * 37) + getPrefixes().hashCode();        hashCode = (hashCode * 37) + getTriggers().hashCode();        return hashCode;    }    public Option findOption(String trigger) {        if (getTriggers().contains(trigger)) {            return this;        } else {            return null;        }    }    public boolean isRequired() {        return required;    }    public void defaults(final WriteableCommandLine commandLine) {        // nothing to do normally    }    protected void checkPrefixes(final Set prefixes) {        // nothing to do if empty prefix list        if (prefixes.isEmpty()) {            return;        }        // check preferred name        checkPrefix(prefixes, getPreferredName());        // check triggers        this.getTriggers();        for (final Iterator i = getTriggers().iterator(); i.hasNext();) {            checkPrefix(prefixes, (String) i.next());        }    }    private void checkPrefix(final Set prefixes,                             final String trigger) {        for (final Iterator i = prefixes.iterator(); i.hasNext();) {            String prefix = (String) i.next();            if (trigger.startsWith(prefix)) {                return;            }        }        final ResourceHelper helper = ResourceHelper.getResourceHelper();        final String message =            helper.getMessage(ResourceConstants.OPTION_TRIGGER_NEEDS_PREFIX, trigger,                              prefixes.toString());        throw new IllegalArgumentException(message);    }}"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,20,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,21,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,22,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,24,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,25,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,26,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,27,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,28,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,31,* A base implementation of Option providing limited ground work for further
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,32,* Option implementations.
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,34,public abstract class OptionImpl implements Option {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,35,private final int id;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,36,private final boolean required;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,39,* Creates an OptionImpl with the specified id
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,40,* @param id the unique id of this Option
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,41,* @param required true iff this Option must be present
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,43,"public OptionImpl(final int id,"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,44,final boolean required) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,45,this.id = id;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,46,this.required = required;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,49,"public boolean canProcess(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,50,final ListIterator arguments) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,51,if (arguments.hasNext()) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,52,final String argument = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,53,arguments.previous();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,55,"return canProcess(commandLine, argument);"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,56,} else {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,57,return false;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,61,public String toString() {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,62,final StringBuffer buffer = new StringBuffer();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,63,"appendUsage(buffer, DisplaySetting.ALL, null);"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,65,return buffer.toString();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,68,public int getId() {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,69,return id;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,72,public boolean equals(final Object thatObj) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,73,if (thatObj instanceof OptionImpl) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,74,final OptionImpl that = (OptionImpl) thatObj;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,76,return (getId() == that.getId()) &&
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,77,"equals(getPreferredName(), that.getPreferredName()) &&"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,78,"equals(getDescription(), that.getDescription()) &&"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,79,"equals(getPrefixes(), that.getPrefixes()) &&"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,80,"equals(getTriggers(), that.getTriggers());"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,81,} else {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,82,return false;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,86,"private boolean equals(Object left,"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,87,Object right) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,88,if ((left == null) && (right == null)) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,89,return true;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,90,} else if ((left == null) || (right == null)) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,91,return false;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,92,} else {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,93,return left.equals(right);
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,97,public int hashCode() {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,98,int hashCode = getId();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,99,hashCode = (hashCode * 37) + getPreferredName().hashCode();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,101,if (getDescription() != null) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,102,hashCode = (hashCode * 37) + getDescription().hashCode();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,105,hashCode = (hashCode * 37) + getPrefixes().hashCode();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,106,hashCode = (hashCode * 37) + getTriggers().hashCode();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,108,return hashCode;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,111,public Option findOption(String trigger) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,112,if (getTriggers().contains(trigger)) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,113,return this;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,114,} else {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,115,return null;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,119,public boolean isRequired() {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,120,return required;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,123,public void defaults(final WriteableCommandLine commandLine) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,124,// nothing to do normally
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,127,protected void checkPrefixes(final Set prefixes) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,128,// nothing to do if empty prefix list
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,129,if (prefixes.isEmpty()) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,130,return;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,133,// check preferred name
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,134,"checkPrefix(prefixes, getPreferredName());"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,136,// check triggers
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,137,this.getTriggers();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,139,for (final Iterator i = getTriggers().iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,140,"checkPrefix(prefixes, (String) i.next());"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,144,"private void checkPrefix(final Set prefixes,"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,145,final String trigger) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,146,for (final Iterator i = prefixes.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,147,String prefix = (String) i.next();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,149,if (trigger.startsWith(prefix)) {
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,150,return;
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,154,final ResourceHelper helper = ResourceHelper.getResourceHelper();
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,155,final String message =
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,156,"helper.getMessage(ResourceConstants.OPTION_TRIGGER_NEEDS_PREFIX, trigger,"
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,157,prefixes.toString());
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,158,throw new IllegalArgumentException(message);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;/** * A base implementation of Parent providing limited ground work for further * Parent implementations. */public abstract class ParentImpl    extends OptionImpl implements Parent {    private static final char NUL = '\0';    private final Group children;    private final Argument argument;    private final String description;    protected ParentImpl(final Argument argument,                         final Group children,                         final String description,                         final int id,                         final boolean required) {        super(id, required);        this.children = children;        this.argument = argument;        this.description = description;    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#process(org.apache.commons.cli2.CommandLine,     *      java.util.ListIterator)     */    public void process(final WriteableCommandLine commandLine,                        final ListIterator arguments)        throws OptionException {        if (argument != null) {            handleInitialSeparator(arguments, argument.getInitialSeparator());        }        processParent(commandLine, arguments);        if (argument != null) {            argument.processValues(commandLine, arguments, this);        }        if ((children != null) && children.canProcess(commandLine, arguments)) {            children.process(commandLine, arguments);        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#canProcess(java.lang.String)     */    public boolean canProcess(final WriteableCommandLine commandLine,                              final String arg) {        final Set triggers = getTriggers();        if (argument != null) {            final char separator = argument.getInitialSeparator();            // if there is a valid separator character            if (separator != NUL) {                final int initialIndex = arg.indexOf(separator);                // if there is a separator present                if (initialIndex > 0) {                    return triggers.contains(arg.substring(0, initialIndex));                }            }        }        return triggers.contains(arg);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#prefixes()     */    public Set getPrefixes() {        return (children == null) ? Collections.EMPTY_SET : children.getPrefixes();    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#validate(org.apache.commons.cli2.CommandLine)     */    public void validate(WriteableCommandLine commandLine)        throws OptionException {        if (commandLine.hasOption(this)) {            if (argument != null) {                argument.validate(commandLine, this);            }            if (children != null) {                children.validate(commandLine);            }        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#appendUsage(java.lang.StringBuffer,     *      java.util.Set, java.util.Comparator)     */    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        final boolean displayArgument =            (this.argument != null) &&            helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        final boolean displayChildren =            (this.children != null) &&            helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN);        if (displayArgument) {            buffer.append(' ');            argument.appendUsage(buffer, helpSettings, comp);        }        if (displayChildren) {            buffer.append(' ');            children.appendUsage(buffer, helpSettings, comp);        }    }    /**     * @return a description of this parent option     */    public String getDescription() {        return description;    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#helpLines(int, java.util.Set,     *      java.util.Comparator)     */    public List helpLines(final int depth,                          final Set helpSettings,                          final Comparator comp) {        final List helpLines = new ArrayList();        helpLines.add(new HelpLineImpl(this, depth));        if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT) && (argument != null)) {            helpLines.addAll(argument.helpLines(depth + 1, helpSettings, comp));        }        if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN) && (children != null)) {            helpLines.addAll(children.helpLines(depth + 1, helpSettings, comp));        }        return helpLines;    }    /**     * @return Returns the argument.     */    public Argument getArgument() {        return argument;    }    /**     * @return Returns the children.     */    public Group getChildren() {        return children;    }    /**     * Split the token using the specified separator character.     * @param arguments the current position in the arguments iterator     * @param separator the separator char to split on     */    private void handleInitialSeparator(final ListIterator arguments,                                        final char separator) {        // next token        final String newArgument = (String) arguments.next();        // split the token        final int initialIndex = newArgument.indexOf(separator);        if (initialIndex > 0) {            arguments.remove();            arguments.add(newArgument.substring(0, initialIndex));            String value = newArgument.substring(initialIndex + 1);            // The value obviously isn't an option, so we need to quote it if looks like an option.            // The quotes will be removed later            if (value.startsWith(""-"")) {                value = '""' + value + '""';            }            arguments.add(value);            arguments.previous();        }        arguments.previous();    }    /*     * @see org.apache.commons.cli2.Option#findOption(java.lang.String)     */    public Option findOption(final String trigger) {        final Option found = super.findOption(trigger);        if ((found == null) && (children != null)) {            return children.findOption(trigger);        } else {            return found;        }    }    public void defaults(final WriteableCommandLine commandLine) {        super.defaults(commandLine);        if (argument != null) {            argument.defaultValues(commandLine, this);        }        if (children != null) {            children.defaults(commandLine);        }    }}"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,21,import java.util.Collections;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,22,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,23,import java.util.List;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,24,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,25,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,27,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,28,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,29,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,30,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,31,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,32,import org.apache.commons.cli2.Parent;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,33,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,36,* A base implementation of Parent providing limited ground work for further
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,37,* Parent implementations.
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,39,public abstract class ParentImpl
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,40,extends OptionImpl implements Parent {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,41,private static final char NUL = '\0';
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,42,private final Group children;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,43,private final Argument argument;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,44,private final String description;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,46,"protected ParentImpl(final Argument argument,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,47,"final Group children,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,48,"final String description,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,49,"final int id,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,50,final boolean required) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,51,"super(id, required);"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,52,this.children = children;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,53,this.argument = argument;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,54,this.description = description;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,58,* (non-Javadoc)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,60,"* @see org.apache.commons.cli2.Option#process(org.apache.commons.cli2.CommandLine,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,61,*      java.util.ListIterator)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,63,"public void process(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,64,final ListIterator arguments)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,65,throws OptionException {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,66,if (argument != null) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,67,"handleInitialSeparator(arguments, argument.getInitialSeparator());"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,70,"processParent(commandLine, arguments);"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,72,if (argument != null) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,73,"argument.processValues(commandLine, arguments, this);"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,76,"if ((children != null) && children.canProcess(commandLine, arguments)) {"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,77,"children.process(commandLine, arguments);"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,82,* (non-Javadoc)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,84,* @see org.apache.commons.cli2.Option#canProcess(java.lang.String)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,86,"public boolean canProcess(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,87,final String arg) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,88,final Set triggers = getTriggers();
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,90,if (argument != null) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,91,final char separator = argument.getInitialSeparator();
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,93,// if there is a valid separator character
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,94,if (separator != NUL) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,95,final int initialIndex = arg.indexOf(separator);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,97,// if there is a separator present
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,98,if (initialIndex > 0) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,99,"return triggers.contains(arg.substring(0, initialIndex));"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,104,return triggers.contains(arg);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,108,* (non-Javadoc)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,110,* @see org.apache.commons.cli2.Option#prefixes()
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,112,public Set getPrefixes() {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,113,return (children == null) ? Collections.EMPTY_SET : children.getPrefixes();
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,117,* (non-Javadoc)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,119,* @see org.apache.commons.cli2.Option#validate(org.apache.commons.cli2.CommandLine)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,121,public void validate(WriteableCommandLine commandLine)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,122,throws OptionException {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,123,if (commandLine.hasOption(this)) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,124,if (argument != null) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,125,"argument.validate(commandLine, this);"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,128,if (children != null) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,129,children.validate(commandLine);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,135,* (non-Javadoc)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,137,"* @see org.apache.commons.cli2.Option#appendUsage(java.lang.StringBuffer,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,138,"*      java.util.Set, java.util.Comparator)"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,140,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,141,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,142,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,143,final boolean displayArgument =
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,144,(this.argument != null) &&
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,145,helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,146,final boolean displayChildren =
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,147,(this.children != null) &&
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,148,helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,150,if (displayArgument) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,151,buffer.append(' ');
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,152,"argument.appendUsage(buffer, helpSettings, comp);"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,155,if (displayChildren) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,156,buffer.append(' ');
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,157,"children.appendUsage(buffer, helpSettings, comp);"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,162,* @return a description of this parent option
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,164,public String getDescription() {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,165,return description;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,169,* (non-Javadoc)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,171,"* @see org.apache.commons.cli2.Option#helpLines(int, java.util.Set,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,172,*      java.util.Comparator)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,174,"public List helpLines(final int depth,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,175,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,176,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,177,final List helpLines = new ArrayList();
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,178,"helpLines.add(new HelpLineImpl(this, depth));"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,180,if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT) && (argument != null)) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,181,"helpLines.addAll(argument.helpLines(depth + 1, helpSettings, comp));"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,184,if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN) && (children != null)) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,185,"helpLines.addAll(children.helpLines(depth + 1, helpSettings, comp));"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,188,return helpLines;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,192,* @return Returns the argument.
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,194,public Argument getArgument() {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,195,return argument;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,199,* @return Returns the children.
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,201,public Group getChildren() {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,202,return children;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,206,* Split the token using the specified separator character.
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,207,* @param arguments the current position in the arguments iterator
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,208,* @param separator the separator char to split on
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,210,"private void handleInitialSeparator(final ListIterator arguments,"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,211,final char separator) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,212,// next token
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,213,final String newArgument = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,215,// split the token
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,216,final int initialIndex = newArgument.indexOf(separator);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,218,if (initialIndex > 0) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,219,arguments.remove();
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,220,"arguments.add(newArgument.substring(0, initialIndex));"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,221,String value = newArgument.substring(initialIndex + 1);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,222,"// The value obviously isn't an option, so we need to quote it if looks like an option."
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,223,// The quotes will be removed later
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,224,"if (value.startsWith(""-"")) {"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,225,"value = '""' + value + '""';"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,227,arguments.add(value);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,228,arguments.previous();
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,231,arguments.previous();
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,235,* @see org.apache.commons.cli2.Option#findOption(java.lang.String)
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,237,public Option findOption(final String trigger) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,238,final Option found = super.findOption(trigger);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,240,if ((found == null) && (children != null)) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,241,return children.findOption(trigger);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,242,} else {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,243,return found;
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,247,public void defaults(final WriteableCommandLine commandLine) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,248,super.defaults(commandLine);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,250,if (argument != null) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,251,"argument.defaultValues(commandLine, this);"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,254,if (children != null) {
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,255,children.defaults(commandLine);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;/** * Handles the java style ""-Dprop=value"" opions */public class PropertyOption    extends OptionImpl {    public static final String DEFAULT_OPTION_STRING = ""-D"";    public static final String DEFAULT_DESCRIPTION =        ""Passes properties and values to the application"";    /**     * A default PropertyOption instance     */    public static final PropertyOption INSTANCE = new PropertyOption();    private final String optionString;    private final String description;    private final Set prefixes;    /**     * Creates a new PropertyOption using the default settings of a ""-D"" trigger     * and an id of 'D'     */    public PropertyOption() {        this(DEFAULT_OPTION_STRING, DEFAULT_DESCRIPTION, 'D');    }    /**     * Creates a new PropertyOption using the specified parameters     * @param optionString the trigger for the Option     * @param description the description of the Option     * @param id the id of the Option     */    public PropertyOption(final String optionString,                          final String description,                          final int id) {        super(id, false);        this.optionString = optionString;        this.description = description;        this.prefixes = Collections.singleton(optionString);    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String argument) {        return (argument != null) && argument.startsWith(optionString) &&               (argument.length() > optionString.length());    }    public Set getPrefixes() {        return prefixes;    }    public void process(final WriteableCommandLine commandLine,                        final ListIterator arguments)        throws OptionException {        final String arg = (String) arguments.next();        if (!canProcess(commandLine, arg)) {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);        }        final int propertyStart = optionString.length();        final int equalsIndex = arg.indexOf('=', propertyStart);        final String property;        final String value;        if (equalsIndex < 0) {            property = arg.substring(propertyStart);            value = ""true"";        } else {            property = arg.substring(propertyStart, equalsIndex);            value = arg.substring(equalsIndex + 1);        }        commandLine.addProperty(property, value);    }    public Set getTriggers() {        return Collections.singleton(optionString);    }    public void validate(WriteableCommandLine commandLine) {        // PropertyOption needs no validation    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        final boolean display = helpSettings.contains(DisplaySetting.DISPLAY_PROPERTY_OPTION);        final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);        if (display) {            buffer.append(optionString);            if (bracketed) {                buffer.append('<');            }            buffer.append(""property"");            if (bracketed) {                buffer.append('>');            }            buffer.append(""="");            if (bracketed) {                buffer.append('<');            }            buffer.append(""value"");            if (bracketed) {                buffer.append('>');            }        }    }    public String getPreferredName() {        return optionString;    }    public String getDescription() {        return description;    }    public List helpLines(final int depth,                          final Set helpSettings,                          final Comparator comp) {        if (helpSettings.contains(DisplaySetting.DISPLAY_PROPERTY_OPTION)) {            final HelpLine helpLine = new HelpLineImpl(this, depth);            return Collections.singletonList(helpLine);        } else {            return Collections.EMPTY_LIST;        }    }}"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,20,import java.util.Collections;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,21,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,22,import java.util.List;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,23,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,24,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,26,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,27,import org.apache.commons.cli2.HelpLine;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,28,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,29,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,30,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,33,"* Handles the java style ""-Dprop=value"" opions"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,35,public class PropertyOption
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,36,extends OptionImpl {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,37,"public static final String DEFAULT_OPTION_STRING = ""-D"";"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,38,public static final String DEFAULT_DESCRIPTION =
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,39,"""Passes properties and values to the application"";"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,42,* A default PropertyOption instance
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,44,public static final PropertyOption INSTANCE = new PropertyOption();
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,45,private final String optionString;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,46,private final String description;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,47,private final Set prefixes;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,50,"* Creates a new PropertyOption using the default settings of a ""-D"" trigger"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,51,* and an id of 'D'
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,53,public PropertyOption() {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,54,"this(DEFAULT_OPTION_STRING, DEFAULT_DESCRIPTION, 'D');"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,58,* Creates a new PropertyOption using the specified parameters
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,59,* @param optionString the trigger for the Option
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,60,* @param description the description of the Option
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,61,* @param id the id of the Option
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,63,"public PropertyOption(final String optionString,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,64,"final String description,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,65,final int id) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,66,"super(id, false);"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,67,this.optionString = optionString;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,68,this.description = description;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,69,this.prefixes = Collections.singleton(optionString);
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,72,"public boolean canProcess(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,73,final String argument) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,74,return (argument != null) && argument.startsWith(optionString) &&
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,75,(argument.length() > optionString.length());
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,78,public Set getPrefixes() {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,79,return prefixes;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,82,"public void process(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,83,final ListIterator arguments)
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,84,throws OptionException {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,85,final String arg = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,87,"if (!canProcess(commandLine, arg)) {"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,88,"throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,91,final int propertyStart = optionString.length();
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,92,"final int equalsIndex = arg.indexOf('=', propertyStart);"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,93,final String property;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,94,final String value;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,96,if (equalsIndex < 0) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,97,property = arg.substring(propertyStart);
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,98,"value = ""true"";"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,99,} else {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,100,"property = arg.substring(propertyStart, equalsIndex);"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,101,value = arg.substring(equalsIndex + 1);
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,104,"commandLine.addProperty(property, value);"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,107,public Set getTriggers() {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,108,return Collections.singleton(optionString);
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,111,public void validate(WriteableCommandLine commandLine) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,112,// PropertyOption needs no validation
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,115,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,116,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,117,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,118,final boolean display = helpSettings.contains(DisplaySetting.DISPLAY_PROPERTY_OPTION);
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,120,final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,122,if (display) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,123,buffer.append(optionString);
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,125,if (bracketed) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,126,buffer.append('<');
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,129,"buffer.append(""property"");"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,131,if (bracketed) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,132,buffer.append('>');
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,135,"buffer.append(""="");"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,137,if (bracketed) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,138,buffer.append('<');
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,141,"buffer.append(""value"");"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,143,if (bracketed) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,144,buffer.append('>');
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,149,public String getPreferredName() {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,150,return optionString;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,153,public String getDescription() {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,154,return description;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,157,"public List helpLines(final int depth,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,158,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,159,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,160,if (helpSettings.contains(DisplaySetting.DISPLAY_PROPERTY_OPTION)) {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,161,"final HelpLine helpLine = new HelpLineImpl(this, depth);"
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,163,return Collections.singletonList(helpLine);
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,164,} else {
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,165,return Collections.EMPTY_LIST;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Comparator;import java.util.Iterator;import java.util.List;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * An Argument implementation that allows a variable size Argument to precede a * fixed size argument.  The canonical example of it's use is in the unix * <code>cp</code> command where a number of source can be specified with * exactly one destination specfied at the end. */public class SourceDestArgument    extends ArgumentImpl {    private final Argument source;    private final Argument dest;    /**     * Creates a SourceDestArgument using defaults where possible.     *     * @param source the variable size Argument     * @param dest the fixed size Argument     */    public SourceDestArgument(final Argument source,                              final Argument dest) {        this(source, dest, DEFAULT_INITIAL_SEPARATOR, DEFAULT_SUBSEQUENT_SEPARATOR,             DEFAULT_CONSUME_REMAINING, null);    }    /**     * Creates a SourceDestArgument using the specified parameters.     *     * @param source the variable size Argument     * @param dest the fixed size Argument     * @param initialSeparator the inistial separator to use     * @param subsequentSeparator the subsequent separator to use     * @param consumeRemaining the token triggering consume remaining behaviour     * @param defaultValues the default values for the SourceDestArgument     */    public SourceDestArgument(final Argument source,                              final Argument dest,                              final char initialSeparator,                              final char subsequentSeparator,                              final String consumeRemaining,                              final List defaultValues) {        super(""SourceDestArgument"", null, sum(source.getMinimum(), dest.getMinimum()),              sum(source.getMaximum(), dest.getMaximum()), initialSeparator, subsequentSeparator,              null, consumeRemaining, defaultValues, 0);        this.source = source;        this.dest = dest;        if (dest.getMinimum() != dest.getMaximum()) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES));        }    }    private static int sum(final int a,                           final int b) {        return Math.max(a, Math.max(b, a + b));    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        final int length = buffer.length();        source.appendUsage(buffer, helpSettings, comp);        if (buffer.length() != length) {            buffer.append(' ');        }        dest.appendUsage(buffer, helpSettings, comp);    }    public List helpLines(int depth,                          Set helpSettings,                          Comparator comp) {        final List helpLines = new ArrayList();        helpLines.addAll(source.helpLines(depth, helpSettings, comp));        helpLines.addAll(dest.helpLines(depth, helpSettings, comp));        return helpLines;    }    public void validate(WriteableCommandLine commandLine,                         Option option)        throws OptionException {        final List values = commandLine.getValues(option);        final int limit = values.size() - dest.getMinimum();        int count = 0;        final Iterator i = values.iterator();        while (count++ < limit) {            commandLine.addValue(source, i.next());        }        while (i.hasNext()) {            commandLine.addValue(dest, i.next());        }        source.validate(commandLine, source);        dest.validate(commandLine, dest);    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String arg) {        return source.canProcess(commandLine, arg) || dest.canProcess(commandLine, arg);    }}"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,21,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,22,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,23,import java.util.List;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,24,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,26,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,27,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,28,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,29,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,30,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,31,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,34,* An Argument implementation that allows a variable size Argument to precede a
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,35,* fixed size argument.  The canonical example of it's use is in the unix
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,36,* <code>cp</code> command where a number of source can be specified with
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,37,* exactly one destination specfied at the end.
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,39,public class SourceDestArgument
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,40,extends ArgumentImpl {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,41,private final Argument source;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,42,private final Argument dest;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,45,* Creates a SourceDestArgument using defaults where possible.
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,47,* @param source the variable size Argument
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,48,* @param dest the fixed size Argument
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,50,"public SourceDestArgument(final Argument source,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,51,final Argument dest) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,52,"this(source, dest, DEFAULT_INITIAL_SEPARATOR, DEFAULT_SUBSEQUENT_SEPARATOR,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,53,"DEFAULT_CONSUME_REMAINING, null);"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,57,* Creates a SourceDestArgument using the specified parameters.
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,59,* @param source the variable size Argument
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,60,* @param dest the fixed size Argument
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,61,* @param initialSeparator the inistial separator to use
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,62,* @param subsequentSeparator the subsequent separator to use
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,63,* @param consumeRemaining the token triggering consume remaining behaviour
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,64,* @param defaultValues the default values for the SourceDestArgument
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,66,"public SourceDestArgument(final Argument source,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,67,"final Argument dest,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,68,"final char initialSeparator,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,69,"final char subsequentSeparator,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,70,"final String consumeRemaining,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,71,final List defaultValues) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,72,"super(""SourceDestArgument"", null, sum(source.getMinimum(), dest.getMinimum()),"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,73,"sum(source.getMaximum(), dest.getMaximum()), initialSeparator, subsequentSeparator,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,74,"null, consumeRemaining, defaultValues, 0);"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,76,this.source = source;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,77,this.dest = dest;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,79,if (dest.getMinimum() != dest.getMaximum()) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,80,throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES));
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,84,"private static int sum(final int a,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,85,final int b) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,86,"return Math.max(a, Math.max(b, a + b));"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,89,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,90,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,91,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,92,final int length = buffer.length();
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,94,"source.appendUsage(buffer, helpSettings, comp);"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,96,if (buffer.length() != length) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,97,buffer.append(' ');
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,100,"dest.appendUsage(buffer, helpSettings, comp);"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,103,"public List helpLines(int depth,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,104,"Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,105,Comparator comp) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,106,final List helpLines = new ArrayList();
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,107,"helpLines.addAll(source.helpLines(depth, helpSettings, comp));"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,108,"helpLines.addAll(dest.helpLines(depth, helpSettings, comp));"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,110,return helpLines;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,113,"public void validate(WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,114,Option option)
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,115,throws OptionException {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,116,final List values = commandLine.getValues(option);
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,118,final int limit = values.size() - dest.getMinimum();
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,119,int count = 0;
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,121,final Iterator i = values.iterator();
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,123,while (count++ < limit) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,124,"commandLine.addValue(source, i.next());"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,127,while (i.hasNext()) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,128,"commandLine.addValue(dest, i.next());"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,131,"source.validate(commandLine, source);"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,132,"dest.validate(commandLine, dest);"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,135,"public boolean canProcess(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,136,final String arg) {
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,137,"return source.canProcess(commandLine, arg) || dest.canProcess(commandLine, arg);"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * A Parent implementation representing normal switch options. * For example: <code>+d|-d</code> or <code>--enable-x|--disable-x</code>. */public class Switch    extends ParentImpl {    /** i18n */    public static final ResourceHelper resources = ResourceHelper.getResourceHelper();    /**     * The default prefix for enabled switches     */    public static final String DEFAULT_ENABLED_PREFIX = ""+"";    /**     * The default prefix for disabled switches     */    public static final String DEFAULT_DISABLED_PREFIX = ""-"";    private final String enabledPrefix;    private final String disabledPrefix;    private final Set triggers;    private final String preferredName;    private final Set aliases;    private final Set prefixes;    private final Boolean defaultSwitch;    /**     * Creates a new Switch with the specified parameters     * @param enabledPrefix the prefix used for enabled switches     * @param disabledPrefix the prefix used for disabled switches     * @param preferredName the preferred name of the switch     * @param aliases the aliases by which the Switch is known     * @param description a description of the Switch     * @param required whether the Option is strictly required     * @param argument the Argument belonging to this Parent, or null     * @param children the Group children belonging to this Parent, ot null     * @param id the unique identifier for this Option     * @throws IllegalArgumentException if the preferredName or an alias isn't     *     prefixed with enabledPrefix or disabledPrefix     */    public Switch(final String enabledPrefix,                  final String disabledPrefix,                  final String preferredName,                  final Set aliases,                  final String description,                  final boolean required,                  final Argument argument,                  final Group children,                  final int id,                  final Boolean switchDefault) {        super(argument, children, description, id, required);        if (enabledPrefix == null) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX));        }        if (disabledPrefix == null) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX));        }        if (enabledPrefix.startsWith(disabledPrefix)) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED));        }        if (disabledPrefix.startsWith(enabledPrefix)) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED));        }        this.enabledPrefix = enabledPrefix;        this.disabledPrefix = disabledPrefix;        this.preferredName = preferredName;        if ((preferredName == null) || (preferredName.length() < 1)) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT));        }        final Set newTriggers = new HashSet();        newTriggers.add(enabledPrefix + preferredName);        newTriggers.add(disabledPrefix + preferredName);        this.triggers = Collections.unmodifiableSet(newTriggers);        if (aliases == null) {            this.aliases = Collections.EMPTY_SET;        } else {            this.aliases = Collections.unmodifiableSet(new HashSet(aliases));            for (final Iterator i = aliases.iterator(); i.hasNext();) {                final String alias = (String) i.next();                newTriggers.add(enabledPrefix + alias);                newTriggers.add(disabledPrefix + alias);            }        }        final Set newPrefixes = new HashSet(super.getPrefixes());        newPrefixes.add(enabledPrefix);        newPrefixes.add(disabledPrefix);        this.prefixes = Collections.unmodifiableSet(newPrefixes);        this.defaultSwitch = switchDefault;        checkPrefixes(newPrefixes);    }    public void processParent(final WriteableCommandLine commandLine,                              final ListIterator arguments)        throws OptionException {        final String arg = (String) arguments.next();        if (canProcess(commandLine, arg)) {            if (arg.startsWith(enabledPrefix)) {                commandLine.addSwitch(this, true);                arguments.set(enabledPrefix + preferredName);            }            if (arg.startsWith(disabledPrefix)) {                commandLine.addSwitch(this, false);                arguments.set(disabledPrefix + preferredName);            }        } else {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);        }    }    public Set getTriggers() {        return triggers;    }    public Set getPrefixes() {        return prefixes;    }    public void validate(WriteableCommandLine commandLine)        throws OptionException {        if (isRequired() && !commandLine.hasOption(this)) {            throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,                                      getPreferredName());        }        super.validate(commandLine);    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        // do we display optionality        final boolean optional =            !isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);        final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);        final boolean disabled = helpSettings.contains(DisplaySetting.DISPLAY_SWITCH_DISABLED);        final boolean enabled =            !disabled || helpSettings.contains(DisplaySetting.DISPLAY_SWITCH_ENABLED);        final boolean both = disabled && enabled;        if (optional) {            buffer.append('[');        }        if (enabled) {            buffer.append(enabledPrefix).append(preferredName);        }        if (both) {            buffer.append('|');        }        if (disabled) {            buffer.append(disabledPrefix).append(preferredName);        }        if (displayAliases && !aliases.isEmpty()) {            buffer.append("" ("");            final List list = new ArrayList(aliases);            Collections.sort(list);            for (final Iterator i = list.iterator(); i.hasNext();) {                final String alias = (String) i.next();                if (enabled) {                    buffer.append(enabledPrefix).append(alias);                }                if (both) {                    buffer.append('|');                }                if (disabled) {                    buffer.append(disabledPrefix).append(alias);                }                if (i.hasNext()) {                    buffer.append(',');                }            }            buffer.append(')');        }        super.appendUsage(buffer, helpSettings, comp);        if (optional) {            buffer.append(']');        }    }    public String getPreferredName() {        return enabledPrefix + preferredName;    }    public void defaults(final WriteableCommandLine commandLine) {        commandLine.setDefaultSwitch(this, defaultSwitch);    }}"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,18,package org.apache.commons.cli2.option;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,21,import java.util.Collections;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,22,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,23,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,24,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,25,import java.util.List;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,26,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,27,import java.util.Set;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,29,import org.apache.commons.cli2.Argument;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,30,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,31,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,32,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,33,import org.apache.commons.cli2.WriteableCommandLine;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,34,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,35,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,38,* A Parent implementation representing normal switch options.
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,39,* For example: <code>+d|-d</code> or <code>--enable-x|--disable-x</code>.
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,41,public class Switch
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,42,extends ParentImpl {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,43,/** i18n */
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,44,public static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,47,* The default prefix for enabled switches
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,49,"public static final String DEFAULT_ENABLED_PREFIX = ""+"";"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,52,* The default prefix for disabled switches
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,54,"public static final String DEFAULT_DISABLED_PREFIX = ""-"";"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,55,private final String enabledPrefix;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,56,private final String disabledPrefix;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,57,private final Set triggers;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,58,private final String preferredName;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,59,private final Set aliases;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,60,private final Set prefixes;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,61,private final Boolean defaultSwitch;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,64,* Creates a new Switch with the specified parameters
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,65,* @param enabledPrefix the prefix used for enabled switches
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,66,* @param disabledPrefix the prefix used for disabled switches
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,67,* @param preferredName the preferred name of the switch
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,68,* @param aliases the aliases by which the Switch is known
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,69,* @param description a description of the Switch
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,70,* @param required whether the Option is strictly required
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,71,"* @param argument the Argument belonging to this Parent, or null"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,72,"* @param children the Group children belonging to this Parent, ot null"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,73,* @param id the unique identifier for this Option
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,74,* @throws IllegalArgumentException if the preferredName or an alias isn't
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,75,*     prefixed with enabledPrefix or disabledPrefix
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,77,"public Switch(final String enabledPrefix,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,78,"final String disabledPrefix,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,79,"final String preferredName,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,80,"final Set aliases,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,81,"final String description,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,82,"final boolean required,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,83,"final Argument argument,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,84,"final Group children,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,85,"final int id,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,86,final Boolean switchDefault) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,87,"super(argument, children, description, id, required);"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,89,if (enabledPrefix == null) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,90,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX));
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,93,if (disabledPrefix == null) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,94,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX));
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,97,if (enabledPrefix.startsWith(disabledPrefix)) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,98,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED));
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,101,if (disabledPrefix.startsWith(enabledPrefix)) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,102,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED));
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,105,this.enabledPrefix = enabledPrefix;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,106,this.disabledPrefix = disabledPrefix;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,107,this.preferredName = preferredName;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,109,if ((preferredName == null) || (preferredName.length() < 1)) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,110,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT));
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,113,final Set newTriggers = new HashSet();
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,114,newTriggers.add(enabledPrefix + preferredName);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,115,newTriggers.add(disabledPrefix + preferredName);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,116,this.triggers = Collections.unmodifiableSet(newTriggers);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,118,if (aliases == null) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,119,this.aliases = Collections.EMPTY_SET;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,120,} else {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,121,this.aliases = Collections.unmodifiableSet(new HashSet(aliases));
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,123,for (final Iterator i = aliases.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,124,final String alias = (String) i.next();
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,125,newTriggers.add(enabledPrefix + alias);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,126,newTriggers.add(disabledPrefix + alias);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,130,final Set newPrefixes = new HashSet(super.getPrefixes());
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,131,newPrefixes.add(enabledPrefix);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,132,newPrefixes.add(disabledPrefix);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,133,this.prefixes = Collections.unmodifiableSet(newPrefixes);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,135,this.defaultSwitch = switchDefault;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,137,checkPrefixes(newPrefixes);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,140,"public void processParent(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,141,final ListIterator arguments)
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,142,throws OptionException {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,143,final String arg = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,145,"if (canProcess(commandLine, arg)) {"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,146,if (arg.startsWith(enabledPrefix)) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,147,"commandLine.addSwitch(this, true);"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,148,arguments.set(enabledPrefix + preferredName);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,151,if (arg.startsWith(disabledPrefix)) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,152,"commandLine.addSwitch(this, false);"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,153,arguments.set(disabledPrefix + preferredName);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,155,} else {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,156,"throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,160,public Set getTriggers() {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,161,return triggers;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,164,public Set getPrefixes() {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,165,return prefixes;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,168,public void validate(WriteableCommandLine commandLine)
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,169,throws OptionException {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,170,if (isRequired() && !commandLine.hasOption(this)) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,171,"throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,172,getPreferredName());
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,175,super.validate(commandLine);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,178,"public void appendUsage(final StringBuffer buffer,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,179,"final Set helpSettings,"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,180,final Comparator comp) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,181,// do we display optionality
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,182,final boolean optional =
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,183,!isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,184,final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,185,final boolean disabled = helpSettings.contains(DisplaySetting.DISPLAY_SWITCH_DISABLED);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,186,final boolean enabled =
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,187,!disabled || helpSettings.contains(DisplaySetting.DISPLAY_SWITCH_ENABLED);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,188,final boolean both = disabled && enabled;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,190,if (optional) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,191,buffer.append('[');
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,194,if (enabled) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,195,buffer.append(enabledPrefix).append(preferredName);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,198,if (both) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,199,buffer.append('|');
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,202,if (disabled) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,203,buffer.append(disabledPrefix).append(preferredName);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,206,if (displayAliases && !aliases.isEmpty()) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,207,"buffer.append("" ("");"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,209,final List list = new ArrayList(aliases);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,210,Collections.sort(list);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,212,for (final Iterator i = list.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,213,final String alias = (String) i.next();
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,215,if (enabled) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,216,buffer.append(enabledPrefix).append(alias);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,219,if (both) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,220,buffer.append('|');
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,223,if (disabled) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,224,buffer.append(disabledPrefix).append(alias);
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,227,if (i.hasNext()) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,228,"buffer.append(',');"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,232,buffer.append(')');
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,235,"super.appendUsage(buffer, helpSettings, comp);"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,237,if (optional) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,238,buffer.append(']');
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,242,public String getPreferredName() {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,243,return enabledPrefix + preferredName;
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,246,public void defaults(final WriteableCommandLine commandLine) {
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,247,"commandLine.setDefaultSwitch(this, defaultSwitch);"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.resource;public abstract class ResourceConstants {    public static final String CLASSVALIDATOR_BAD_CLASSNAME = ""ClassValidator.bad.classname"";    public static final String CLASSVALIDATOR_CLASS_NOTFOUND = ""ClassValidator.class.notfound"";    public static final String CLASSVALIDATOR_CLASS_ACCESS = ""ClassValidator.class.access"";    public static final String CLASSVALIDATOR_CLASS_CREATE = ""ClassValidator.class.create"";    public static final String DATEVALIDATOR_DATE_OUTOFRANGE = ""DateValidator.date.OutOfRange"";    public static final String URLVALIDATOR_MALFORMED_URL = ""URLValidator.malformed.URL"";    public static final String NUMBERVALIDATOR_NUMBER_OUTOFRANGE =        ""NumberValidator.number.OutOfRange"";    public static final String ARGUMENT_UNEXPECTED_VALUE = ""Argument.unexpected.value"";    public static final String ARGUMENT_MIN_EXCEEDS_MAX = ""Argument.minimum.exceeds.maximum"";    public static final String ARGUMENT_TOO_FEW_DEFAULTS = ""Argument.too.few.defaults"";    public static final String ARGUMENT_TOO_MANY_DEFAULTS = ""Argument.too.many.defaults"";    public static final String ARGUMENT_MISSING_VALUES = ""Argument.missing.values"";    public static final String ARGUMENT_TOO_MANY_VALUES = ""Argument.too.many.values"";    public static final String OPTION_TRIGGER_NEEDS_PREFIX = ""Option.trigger.needs.prefix"";    public static final String OPTION_MISSING_REQUIRED = ""Option.missing.required"";    public static final String OPTION_NO_NAME = ""Option.no.name"";    public static final String OPTION_ILLEGAL_LONG_PREFIX = ""Option.illegal.long.prefix"";    public static final String OPTION_ILLEGAL_SHORT_PREFIX = ""Option.illegal.short.prefix"";    public static final String UNEXPECTED_TOKEN = ""Unexpected.token"";    public static final String MISSING_OPTION = ""Missing.option"";    public static final String CANNOT_BURST = ""Cannot.burst"";    public static final String COMMAND_PREFERRED_NAME_TOO_SHORT = ""Command.preferredName.too.short"";    public static final String SWITCH_ILLEGAL_ENABLED_PREFIX = ""Option.illegal.enabled.prefix"";    public static final String SWITCH_ILLEGAL_DISABLED_PREFIX = ""Option.illegal.disabled.prefix"";    public static final String SWITCH_IDENTICAL_PREFIXES = ""Option.identical.prefixes"";    public static final String SWITCH_ALREADY_SET = ""Switch.already.set"";    public static final String SWITCH_NO_ENABLED_PREFIX = ""Switch.no.enabledPrefix"";    public static final String SWITCH_NO_DISABLED_PREFIX = ""Switch.no.disabledPrefix"";    public static final String SWITCH_ENABLED_STARTS_WITH_DISABLED =        ""Switch.enabled.startsWith.disabled"";    public static final String SWITCH_DISABLED_STARTWS_WITH_ENABLED =        ""Switch.disabled.startsWith.enabled"";    public static final String SWITCH_PREFERRED_NAME_TOO_SHORT = ""Switch.preferredName.too.short"";    public static final String SOURCE_DEST_MUST_ENFORCE_VALUES = ""SourceDest.must.enforce.values"";    public static final String HELPFORMATTER_GUTTER_TOO_LONG = ""HelpFormatter.gutter.too.long"";    public static final String HELPFORMATTER_WIDTH_TOO_NARROW = ""HelpFormatter.width.too.narrow"";    public static final String ENUM_ILLEGAL_VALUE = ""Enum.illegal.value"";    public static final String ARGUMENT_BUILDER_NULL_CONSUME_REMAINING = ""ArgumentBuilder.null.consume.remaining"";    public static final String ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING = ""ArgumentBuilder.empty.consume.remaining"";    public static final String ARGUMENT_BUILDER_NULL_DEFAULT = ""ArgumentBuilder.null.default"";    public static final String ARGUMENT_BUILDER_NULL_DEFAULTS = ""ArgumentBuilder.null.defaults"";    public static final String ARGUMENT_BUILDER_NEGATIVE_MAXIMUM = ""ArgumentBuilder.negative.maximum"";    public static final String ARGUMENT_BUILDER_NEGATIVE_MINIMUM = ""ArgumentBuilder.negative.minimum"";    public static final String ARGUMENT_BUILDER_NULL_NAME = ""ArgumentBuilder.null.name"";    public static final String ARGUMENT_BUILDER_EMPTY_NAME = ""ArgumentBuilder.empty.name"";    public static final String ARGUMENT_BUILDER_NULL_VALIDATOR = ""ArgumentBuilder.null.validator"";}"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,3,* Licensed to the Apache Software Foundation (ASF) under one
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,4,* or more contributor license agreements.  See the NOTICE file
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,5,* distributed with this work for additional information
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,6,* regarding copyright ownership.  The ASF licenses this file
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,7,"* to you under the Apache License, Version 2.0 (the"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,8,"* ""License""); you may not use this file except in compliance"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,9,* with the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,11,* http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,13,"* Unless required by applicable law or agreed to in writing,"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,14,* software distributed under the License is distributed on an
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,15,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,16,"* KIND, either express or implied.  See the License for the"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,17,* specific language governing permissions and limitations
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,18,* under the License.
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,20,package org.apache.commons.cli2.resource;
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,22,public abstract class ResourceConstants {
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,23,"public static final String CLASSVALIDATOR_BAD_CLASSNAME = ""ClassValidator.bad.classname"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,24,"public static final String CLASSVALIDATOR_CLASS_NOTFOUND = ""ClassValidator.class.notfound"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,25,"public static final String CLASSVALIDATOR_CLASS_ACCESS = ""ClassValidator.class.access"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,26,"public static final String CLASSVALIDATOR_CLASS_CREATE = ""ClassValidator.class.create"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,27,"public static final String DATEVALIDATOR_DATE_OUTOFRANGE = ""DateValidator.date.OutOfRange"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,28,"public static final String URLVALIDATOR_MALFORMED_URL = ""URLValidator.malformed.URL"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,29,public static final String NUMBERVALIDATOR_NUMBER_OUTOFRANGE =
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,30,"""NumberValidator.number.OutOfRange"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,31,"public static final String ARGUMENT_UNEXPECTED_VALUE = ""Argument.unexpected.value"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,32,"public static final String ARGUMENT_MIN_EXCEEDS_MAX = ""Argument.minimum.exceeds.maximum"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,33,"public static final String ARGUMENT_TOO_FEW_DEFAULTS = ""Argument.too.few.defaults"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,34,"public static final String ARGUMENT_TOO_MANY_DEFAULTS = ""Argument.too.many.defaults"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,35,"public static final String ARGUMENT_MISSING_VALUES = ""Argument.missing.values"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,36,"public static final String ARGUMENT_TOO_MANY_VALUES = ""Argument.too.many.values"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,37,"public static final String OPTION_TRIGGER_NEEDS_PREFIX = ""Option.trigger.needs.prefix"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,38,"public static final String OPTION_MISSING_REQUIRED = ""Option.missing.required"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,39,"public static final String OPTION_NO_NAME = ""Option.no.name"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,40,"public static final String OPTION_ILLEGAL_LONG_PREFIX = ""Option.illegal.long.prefix"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,41,"public static final String OPTION_ILLEGAL_SHORT_PREFIX = ""Option.illegal.short.prefix"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,42,"public static final String UNEXPECTED_TOKEN = ""Unexpected.token"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,43,"public static final String MISSING_OPTION = ""Missing.option"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,44,"public static final String CANNOT_BURST = ""Cannot.burst"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,45,"public static final String COMMAND_PREFERRED_NAME_TOO_SHORT = ""Command.preferredName.too.short"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,46,"public static final String SWITCH_ILLEGAL_ENABLED_PREFIX = ""Option.illegal.enabled.prefix"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,47,"public static final String SWITCH_ILLEGAL_DISABLED_PREFIX = ""Option.illegal.disabled.prefix"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,48,"public static final String SWITCH_IDENTICAL_PREFIXES = ""Option.identical.prefixes"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,49,"public static final String SWITCH_ALREADY_SET = ""Switch.already.set"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,50,"public static final String SWITCH_NO_ENABLED_PREFIX = ""Switch.no.enabledPrefix"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,51,"public static final String SWITCH_NO_DISABLED_PREFIX = ""Switch.no.disabledPrefix"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,52,public static final String SWITCH_ENABLED_STARTS_WITH_DISABLED =
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,53,"""Switch.enabled.startsWith.disabled"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,54,public static final String SWITCH_DISABLED_STARTWS_WITH_ENABLED =
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,55,"""Switch.disabled.startsWith.enabled"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,56,"public static final String SWITCH_PREFERRED_NAME_TOO_SHORT = ""Switch.preferredName.too.short"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,57,"public static final String SOURCE_DEST_MUST_ENFORCE_VALUES = ""SourceDest.must.enforce.values"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,58,"public static final String HELPFORMATTER_GUTTER_TOO_LONG = ""HelpFormatter.gutter.too.long"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,59,"public static final String HELPFORMATTER_WIDTH_TOO_NARROW = ""HelpFormatter.width.too.narrow"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,60,"public static final String ENUM_ILLEGAL_VALUE = ""Enum.illegal.value"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,61,"public static final String ARGUMENT_BUILDER_NULL_CONSUME_REMAINING = ""ArgumentBuilder.null.consume.remaining"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,62,"public static final String ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING = ""ArgumentBuilder.empty.consume.remaining"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,63,"public static final String ARGUMENT_BUILDER_NULL_DEFAULT = ""ArgumentBuilder.null.default"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,64,"public static final String ARGUMENT_BUILDER_NULL_DEFAULTS = ""ArgumentBuilder.null.defaults"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,65,"public static final String ARGUMENT_BUILDER_NEGATIVE_MAXIMUM = ""ArgumentBuilder.negative.maximum"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,66,"public static final String ARGUMENT_BUILDER_NEGATIVE_MINIMUM = ""ArgumentBuilder.negative.minimum"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,67,"public static final String ARGUMENT_BUILDER_NULL_NAME = ""ArgumentBuilder.null.name"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,68,"public static final String ARGUMENT_BUILDER_EMPTY_NAME = ""ArgumentBuilder.empty.name"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,69,"public static final String ARGUMENT_BUILDER_NULL_VALIDATOR = ""ArgumentBuilder.null.validator"";"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.resource;import java.text.MessageFormat;import java.util.Locale;import java.util.MissingResourceException;import java.util.ResourceBundle;/** * A utility class used to provide internationalisation support. * * @author John Keyes */public class ResourceHelper {    /** system property */    private static final String PROP_LOCALE = ""org.apache.commons.cli2.resource.bundle"";    /** default package name */    private static final String DEFAULT_BUNDLE =        ""org.apache.commons.cli2.resource.CLIMessageBundle_en_US"";    private static ResourceHelper helper;    /** resource bundle */    private ResourceBundle bundle;    private String prop;    /**     * Create a new ResourceHelper for the current locale.     */    private ResourceHelper() {        String bundleName = System.getProperty(PROP_LOCALE);        if (bundleName == null) {            bundleName = DEFAULT_BUNDLE;        }        this.prop = bundleName;        int firstUnderscore = bundleName.indexOf('_');        int secondUnderscore = bundleName.indexOf('_', firstUnderscore + 1);        Locale locale;        if (firstUnderscore != -1) {        String language = bundleName.substring(firstUnderscore + 1, secondUnderscore);        String country = bundleName.substring(secondUnderscore + 1);        	locale = new Locale(language, country);        }        else {        	locale = Locale.getDefault();        }        // initialize the bundle        try {            bundle = ResourceBundle.getBundle(bundleName, locale);        } catch (MissingResourceException exp) {            bundle = ResourceBundle.getBundle(DEFAULT_BUNDLE, locale);        }    }    public String getBundleName() {    	return this.prop;    }    /**     * Gets the ResourceHelper appropriate to the current locale.     * @return a ResourceHelper     */    public static ResourceHelper getResourceHelper() {        String bundleName = System.getProperty(PROP_LOCALE);        if (helper == null || !helper.getBundleName().equals(bundleName)) {            helper = new ResourceHelper();        }        return helper;    }    /**     * Returns the message for the specified key.     *     * @param key the unique identifier of the message     * @return String the formatted String     */    public String getMessage(final String key) {        return getMessage(key, new Object[] {  });    }    /**     * Returns the message for the specified key and argument.     *     * @param key the unique identifier of the message     * @param value the argument value     * @return String the formatted String     */    public String getMessage(final String key,                             final Object value) {        return getMessage(key, new Object[] { value });    }    /**     * Returns the message for the specified key and arguments.     *     * @param key the unique identifier of the message     * @param value1 an argument value     * @param value2 an argument value     * @return String the formatted String     */    public String getMessage(final String key,                             final Object value1,                             final Object value2) {        return getMessage(key, new Object[] { value1, value2 });    }    /**     * Returns the message for the specified key and arguments.     *     * @param key the unique identifier of the message     * @param value1 an argument value     * @param value2 an argument value     * @param value3 an argument value     *     * @return String the formatted String     */    public String getMessage(final String key,                             final Object value1,                             final Object value2,                             final Object value3) {        return getMessage(key, new Object[] { value1, value2, value3 });    }    /**     * Returns the message for the specified key and arguments.     *     * @param key the unique identifier of the message     * @param values argument values     * @return String the formatted String     */    public String getMessage(final String key,                             final Object[] values) {        final String msgFormatStr = bundle.getString(key);        final MessageFormat msgFormat = new MessageFormat(msgFormatStr);        return msgFormat.format(values);    }}"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,18,package org.apache.commons.cli2.resource;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,20,import java.text.MessageFormat;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,22,import java.util.Locale;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,23,import java.util.MissingResourceException;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,24,import java.util.ResourceBundle;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,27,* A utility class used to provide internationalisation support.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,29,* @author John Keyes
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,31,public class ResourceHelper {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,32,/** system property */
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,33,"private static final String PROP_LOCALE = ""org.apache.commons.cli2.resource.bundle"";"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,35,/** default package name */
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,36,private static final String DEFAULT_BUNDLE =
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,37,"""org.apache.commons.cli2.resource.CLIMessageBundle_en_US"";"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,38,private static ResourceHelper helper;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,40,/** resource bundle */
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,41,private ResourceBundle bundle;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,43,private String prop;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,46,* Create a new ResourceHelper for the current locale.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,48,private ResourceHelper() {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,49,String bundleName = System.getProperty(PROP_LOCALE);
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,51,if (bundleName == null) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,52,bundleName = DEFAULT_BUNDLE;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,55,this.prop = bundleName;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,57,int firstUnderscore = bundleName.indexOf('_');
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,58,"int secondUnderscore = bundleName.indexOf('_', firstUnderscore + 1);"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,60,Locale locale;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,61,if (firstUnderscore != -1) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,62,"String language = bundleName.substring(firstUnderscore + 1, secondUnderscore);"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,63,String country = bundleName.substring(secondUnderscore + 1);
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,64,"locale = new Locale(language, country);"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,66,else {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,67,locale = Locale.getDefault();
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,69,// initialize the bundle
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,70,try {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,71,"bundle = ResourceBundle.getBundle(bundleName, locale);"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,72,} catch (MissingResourceException exp) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,73,"bundle = ResourceBundle.getBundle(DEFAULT_BUNDLE, locale);"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,77,public String getBundleName() {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,78,return this.prop;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,82,* Gets the ResourceHelper appropriate to the current locale.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,83,* @return a ResourceHelper
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,85,public static ResourceHelper getResourceHelper() {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,86,String bundleName = System.getProperty(PROP_LOCALE);
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,87,if (helper == null || !helper.getBundleName().equals(bundleName)) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,88,helper = new ResourceHelper();
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,91,return helper;
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,95,* Returns the message for the specified key.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,97,* @param key the unique identifier of the message
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,98,* @return String the formatted String
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,100,public String getMessage(final String key) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,101,"return getMessage(key, new Object[] {  });"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,105,* Returns the message for the specified key and argument.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,107,* @param key the unique identifier of the message
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,108,* @param value the argument value
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,109,* @return String the formatted String
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,111,"public String getMessage(final String key,"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,112,final Object value) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,113,"return getMessage(key, new Object[] { value });"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,117,* Returns the message for the specified key and arguments.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,119,* @param key the unique identifier of the message
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,120,* @param value1 an argument value
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,121,* @param value2 an argument value
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,122,* @return String the formatted String
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,124,"public String getMessage(final String key,"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,125,"final Object value1,"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,126,final Object value2) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,127,"return getMessage(key, new Object[] { value1, value2 });"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,131,* Returns the message for the specified key and arguments.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,133,* @param key the unique identifier of the message
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,134,* @param value1 an argument value
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,135,* @param value2 an argument value
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,136,* @param value3 an argument value
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,138,* @return String the formatted String
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,140,"public String getMessage(final String key,"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,141,"final Object value1,"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,142,"final Object value2,"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,143,final Object value3) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,144,"return getMessage(key, new Object[] { value1, value2, value3 });"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,148,* Returns the message for the specified key and arguments.
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,150,* @param key the unique identifier of the message
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,151,* @param values argument values
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,152,* @return String the formatted String
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,154,"public String getMessage(final String key,"
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,155,final Object[] values) {
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,156,final String msgFormatStr = bundle.getString(key);
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,157,final MessageFormat msgFormat = new MessageFormat(msgFormatStr);
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,159,return msgFormat.format(values);
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.util;import java.util.Comparator;import java.util.List;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.option.Command;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.option.Switch;/** * A collection of Comparators suitable for use with Option instances. */public class Comparators {	private Comparators(){		// constructor hiden from potential users	}    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param c0     *            a comparator     * @param c1     *            a comparator     * @return a chained comparator     */    public static Comparator chain(final Comparator c0, final Comparator c1) {        return chain(new Comparator[] { c0, c1 });    }    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param c0     *            a comparator     * @param c1     *            a comparator     * @param c2     *            a comparator     * @return a chained comparator     */    public static Comparator chain(        final Comparator c0,        final Comparator c1,        final Comparator c2) {        return chain(new Comparator[] { c0, c1, c2 });    }    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param c0     *            a comparator     * @param c1     *            a comparator     * @param c2     *            a comparator     * @param c3     *            a comparator     * @return a chained comparator     */    public static Comparator chain(        final Comparator c0,        final Comparator c1,        final Comparator c2,        final Comparator c3) {        return chain(new Comparator[] { c0, c1, c2, c3 });    }    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param c0     *            a comparator     * @param c1     *            a comparator     * @param c2     *            a comparator     * @param c3     *            a comparator     * @param c4     *            a comparator     * @return a chained comparator     */    public static Comparator chain(        final Comparator c0,        final Comparator c1,        final Comparator c2,        final Comparator c3,        final Comparator c4) {        return chain(new Comparator[] { c0, c1, c2, c3, c4 });    }    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param comparators     *            a List of comparators to chain together     * @return a chained comparator     */    public static Comparator chain(final List comparators) {        return new Chain(            (Comparator[])comparators.toArray(                new Comparator[comparators.size()]));    }    /**     * Chains an array of comparators together. Each Comparator will be called     * in turn until one of them return a non-zero value, this value will be     * returned.     *     * @param comparators     *            the array of comparators     * @return a chained comparator     */    public static Comparator chain(final Comparator[] comparators) {        return new Chain(comparators);    }    /**     * Chains a series of Comparators together.     */    private static class Chain implements Comparator {        final Comparator[] chain;        /**         * Creates a Comparator chain using the specified array of Comparators         * @param chain the Comparators in the chain         */        public Chain(final Comparator[] chain) {            this.chain = new Comparator[chain.length];            System.arraycopy(chain, 0, this.chain, 0, chain.length);        }        public int compare(final Object left, final Object right) {            int result = 0;            for (int i = 0; result == 0 && i < chain.length; ++i) {                result = chain[i].compare(left, right);            }            return result;        }    }    /**     * Reverses a comparator's logic.     *     * @param wrapped     *            the Comparator to reverse the logic of     * @return a comparator with reverse logic     */    private static Comparator reverse(final Comparator wrapped) {        return new Reverse(wrapped);    }    private static class Reverse implements Comparator {        private final Comparator wrapped;        /**         * Creates a Comparator with reverse logic         * @param wrapped the original logic         */        public Reverse(final Comparator wrapped) {            this.wrapped = wrapped;        }        public int compare(final Object left, final Object right) {            return -wrapped.compare(left, right);        }    }    /**     * Forces Group instances to appear at the beginning of lists     *     * @see Group     * @return a new comparator     */    public static Comparator groupFirst() {        return new GroupFirst();    }    /**     * Forces Group instances to appear at the end of lists     *     * @see Group     * @return a new comparator     */    public static Comparator groupLast() {        return reverse(groupFirst());    }    private static class GroupFirst implements Comparator {        public int compare(final Object left, final Object right) {            final boolean l = left instanceof Group;            final boolean r = right instanceof Group;            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Forces Switch instances to appear at the beginning of lists     *     * @see Switch     * @return a new comparator     */    public static Comparator switchFirst() {        return new SwitchFirst();    }    /**     * Forces Switch instances to appear at the end of lists     *     * @see Switch     * @return a new comparator     */    public static Comparator switchLast() {        return reverse(switchFirst());    }    private static class SwitchFirst implements Comparator {        public int compare(final Object left, final Object right) {            final boolean l = left instanceof Switch;            final boolean r = right instanceof Switch;            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Forces Command instances to appear at the beginning of lists     *     * @see Command     * @return a new comparator     */    public static Comparator commandFirst() {        return new CommandFirst();    }    /**     * Forces Command instances to appear at the end of lists     *     * @see Command     * @return a new comparator     */    public static Comparator commandLast() {        return reverse(commandFirst());    }    private static class CommandFirst implements Comparator {        public int compare(final Object left, final Object right) {            final boolean l = left instanceof Command;            final boolean r = right instanceof Command;            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Forces DefaultOption instances to appear at the beginning of lists     *     * @see DefaultOption     * @return a new comparator     */    public static Comparator defaultOptionFirst() {        return new DefaultOptionFirst();    }    /**     * Forces DefaultOption instances to appear at the end of lists     *     * @see DefaultOption     * @return a new comparator     */    public static Comparator defaultOptionLast() {        return reverse(defaultOptionFirst());    }    private static class DefaultOptionFirst implements Comparator {        public int compare(final Object left, final Object right) {            final boolean l = left instanceof DefaultOption;            final boolean r = right instanceof DefaultOption;            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Forces Comparators with a particular trigger to appear at the beginning     * of lists     *     * @param name     *            the trigger name to select     * @see Option#getTriggers()     * @return a new comparator     */    public static Comparator namedFirst(final String name) {        return new Named(name);    }    /**     * Forces Comparators with a particular trigger to appear at the end of     * lists     *     * @param name     *            the trigger name to select     * @see Option#getTriggers()     * @return a new comparator     */    public static Comparator namedLast(final String name) {        return reverse(new Named(name));    }    private static class Named implements Comparator {        private final String name;        /**         * Creates a Comparator that sorts a particular name high in order         * @param name the trigger name to select         */        public Named(final String name) {            this.name = name;        }        public int compare(final Object oleft, final Object oright) {            final Option left = (Option)oleft;            final Option right = (Option)oright;            final boolean l = left.getTriggers().contains(name);            final boolean r = right.getTriggers().contains(name);            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Orders Options by preferredName     *     * @see Option#getPreferredName()     * @return a new comparator     */    public static Comparator preferredNameFirst() {        return new PreferredName();    }    /**     * Orders Options by preferredName, reversed     *     * @see Option#getPreferredName()     * @return a new comparator     */    public static Comparator preferredNameLast() {        return reverse(preferredNameFirst());    }    private static class PreferredName implements Comparator {        public int compare(final Object oleft, final Object oright) {            final Option left = (Option)oleft;            final Option right = (Option)oright;            return left.getPreferredName().compareTo(right.getPreferredName());        }    }    /**     * Orders Options grouping required Options first     *     * @see Option#isRequired()     * @return a new comparator     */    public static Comparator requiredFirst() {        return new Required();    }    /**     * Orders Options grouping required Options last     *     * @see Option#isRequired()     * @return a new comparator     */    public static Comparator requiredLast() {        return reverse(requiredFirst());    }    private static class Required implements Comparator {        public int compare(final Object oleft, final Object oright) {            final Option left = (Option)oleft;            final Option right = (Option)oright;            final boolean l = left.isRequired();            final boolean r = right.isRequired();            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }}"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,18,package org.apache.commons.cli2.util;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,20,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,21,import java.util.List;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,23,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,24,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,25,import org.apache.commons.cli2.option.Command;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,26,import org.apache.commons.cli2.option.DefaultOption;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,27,import org.apache.commons.cli2.option.Switch;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,30,* A collection of Comparators suitable for use with Option instances.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,32,public class Comparators {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,34,private Comparators(){
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,35,// constructor hiden from potential users
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,40,* Chains comparators together.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,42,* @see #chain(Comparator[])
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,43,* @param c0
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,44,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,45,* @param c1
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,46,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,47,* @return a chained comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,49,"public static Comparator chain(final Comparator c0, final Comparator c1) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,50,"return chain(new Comparator[] { c0, c1 });"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,54,* Chains comparators together.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,56,* @see #chain(Comparator[])
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,57,* @param c0
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,58,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,59,* @param c1
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,60,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,61,* @param c2
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,62,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,63,* @return a chained comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,65,public static Comparator chain(
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,66,"final Comparator c0,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,67,"final Comparator c1,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,68,final Comparator c2) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,69,"return chain(new Comparator[] { c0, c1, c2 });"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,73,* Chains comparators together.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,75,* @see #chain(Comparator[])
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,76,* @param c0
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,77,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,78,* @param c1
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,79,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,80,* @param c2
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,81,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,82,* @param c3
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,83,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,84,* @return a chained comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,86,public static Comparator chain(
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,87,"final Comparator c0,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,88,"final Comparator c1,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,89,"final Comparator c2,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,90,final Comparator c3) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,91,"return chain(new Comparator[] { c0, c1, c2, c3 });"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,95,* Chains comparators together.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,97,* @see #chain(Comparator[])
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,98,* @param c0
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,99,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,100,* @param c1
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,101,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,102,* @param c2
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,103,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,104,* @param c3
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,105,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,106,* @param c4
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,107,*            a comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,108,* @return a chained comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,110,public static Comparator chain(
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,111,"final Comparator c0,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,112,"final Comparator c1,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,113,"final Comparator c2,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,114,"final Comparator c3,"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,115,final Comparator c4) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,116,"return chain(new Comparator[] { c0, c1, c2, c3, c4 });"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,120,* Chains comparators together.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,122,* @see #chain(Comparator[])
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,123,* @param comparators
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,124,*            a List of comparators to chain together
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,125,* @return a chained comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,127,public static Comparator chain(final List comparators) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,128,return new Chain(
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,129,(Comparator[])comparators.toArray(
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,130,new Comparator[comparators.size()]));
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,134,* Chains an array of comparators together. Each Comparator will be called
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,135,"* in turn until one of them return a non-zero value, this value will be"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,136,* returned.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,138,* @param comparators
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,139,*            the array of comparators
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,140,* @return a chained comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,142,public static Comparator chain(final Comparator[] comparators) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,143,return new Chain(comparators);
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,147,* Chains a series of Comparators together.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,149,private static class Chain implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,151,final Comparator[] chain;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,154,* Creates a Comparator chain using the specified array of Comparators
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,155,* @param chain the Comparators in the chain
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,157,public Chain(final Comparator[] chain) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,158,this.chain = new Comparator[chain.length];
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,159,"System.arraycopy(chain, 0, this.chain, 0, chain.length);"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,162,"public int compare(final Object left, final Object right) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,163,int result = 0;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,164,for (int i = 0; result == 0 && i < chain.length; ++i) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,165,"result = chain[i].compare(left, right);"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,167,return result;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,172,* Reverses a comparator's logic.
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,174,* @param wrapped
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,175,*            the Comparator to reverse the logic of
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,176,* @return a comparator with reverse logic
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,178,private static Comparator reverse(final Comparator wrapped) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,179,return new Reverse(wrapped);
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,182,private static class Reverse implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,183,private final Comparator wrapped;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,186,* Creates a Comparator with reverse logic
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,187,* @param wrapped the original logic
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,189,public Reverse(final Comparator wrapped) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,190,this.wrapped = wrapped;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,193,"public int compare(final Object left, final Object right) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,194,"return -wrapped.compare(left, right);"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,199,* Forces Group instances to appear at the beginning of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,201,* @see Group
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,202,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,204,public static Comparator groupFirst() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,205,return new GroupFirst();
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,209,* Forces Group instances to appear at the end of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,211,* @see Group
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,212,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,214,public static Comparator groupLast() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,215,return reverse(groupFirst());
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,218,private static class GroupFirst implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,219,"public int compare(final Object left, final Object right) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,220,final boolean l = left instanceof Group;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,221,final boolean r = right instanceof Group;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,223,if (l ^ r) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,224,if (l) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,225,return -1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,227,return 1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,229,return 0;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,234,* Forces Switch instances to appear at the beginning of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,236,* @see Switch
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,237,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,239,public static Comparator switchFirst() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,240,return new SwitchFirst();
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,244,* Forces Switch instances to appear at the end of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,246,* @see Switch
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,247,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,249,public static Comparator switchLast() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,250,return reverse(switchFirst());
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,253,private static class SwitchFirst implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,254,"public int compare(final Object left, final Object right) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,255,final boolean l = left instanceof Switch;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,256,final boolean r = right instanceof Switch;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,258,if (l ^ r) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,259,if (l) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,260,return -1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,262,return 1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,264,return 0;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,269,* Forces Command instances to appear at the beginning of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,271,* @see Command
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,272,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,274,public static Comparator commandFirst() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,275,return new CommandFirst();
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,279,* Forces Command instances to appear at the end of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,281,* @see Command
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,282,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,284,public static Comparator commandLast() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,285,return reverse(commandFirst());
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,288,private static class CommandFirst implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,289,"public int compare(final Object left, final Object right) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,290,final boolean l = left instanceof Command;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,291,final boolean r = right instanceof Command;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,293,if (l ^ r) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,294,if (l) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,295,return -1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,297,return 1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,299,return 0;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,304,* Forces DefaultOption instances to appear at the beginning of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,306,* @see DefaultOption
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,307,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,309,public static Comparator defaultOptionFirst() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,310,return new DefaultOptionFirst();
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,314,* Forces DefaultOption instances to appear at the end of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,316,* @see DefaultOption
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,317,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,319,public static Comparator defaultOptionLast() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,320,return reverse(defaultOptionFirst());
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,323,private static class DefaultOptionFirst implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,324,"public int compare(final Object left, final Object right) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,325,final boolean l = left instanceof DefaultOption;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,326,final boolean r = right instanceof DefaultOption;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,328,if (l ^ r) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,329,if (l) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,330,return -1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,332,return 1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,334,return 0;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,339,* Forces Comparators with a particular trigger to appear at the beginning
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,340,* of lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,342,* @param name
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,343,*            the trigger name to select
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,344,* @see Option#getTriggers()
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,345,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,347,public static Comparator namedFirst(final String name) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,348,return new Named(name);
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,352,* Forces Comparators with a particular trigger to appear at the end of
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,353,* lists
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,355,* @param name
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,356,*            the trigger name to select
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,357,* @see Option#getTriggers()
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,358,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,360,public static Comparator namedLast(final String name) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,361,return reverse(new Named(name));
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,364,private static class Named implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,365,private final String name;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,368,* Creates a Comparator that sorts a particular name high in order
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,369,* @param name the trigger name to select
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,371,public Named(final String name) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,372,this.name = name;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,374,"public int compare(final Object oleft, final Object oright) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,375,final Option left = (Option)oleft;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,376,final Option right = (Option)oright;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,378,final boolean l = left.getTriggers().contains(name);
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,379,final boolean r = right.getTriggers().contains(name);
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,381,if (l ^ r) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,382,if (l) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,383,return -1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,385,return 1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,387,return 0;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,392,* Orders Options by preferredName
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,394,* @see Option#getPreferredName()
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,395,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,397,public static Comparator preferredNameFirst() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,398,return new PreferredName();
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,402,"* Orders Options by preferredName, reversed"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,404,* @see Option#getPreferredName()
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,405,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,407,public static Comparator preferredNameLast() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,408,return reverse(preferredNameFirst());
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,411,private static class PreferredName implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,412,"public int compare(final Object oleft, final Object oright) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,413,final Option left = (Option)oleft;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,414,final Option right = (Option)oright;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,416,return left.getPreferredName().compareTo(right.getPreferredName());
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,421,* Orders Options grouping required Options first
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,423,* @see Option#isRequired()
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,424,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,426,public static Comparator requiredFirst() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,427,return new Required();
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,431,* Orders Options grouping required Options last
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,433,* @see Option#isRequired()
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,434,* @return a new comparator
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,436,public static Comparator requiredLast() {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,437,return reverse(requiredFirst());
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,440,private static class Required implements Comparator {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,441,"public int compare(final Object oleft, final Object oright) {"
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,442,final Option left = (Option)oleft;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,443,final Option right = (Option)oright;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,445,final boolean l = left.isRequired();
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,446,final boolean r = right.isRequired();
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,448,if (l ^ r) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,449,if (l) {
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,450,return -1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,452,return 1;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,454,return 0;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.util;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Presents on screen help based on the application's Options */public class HelpFormatter {    /**     * The default screen width     */    public static final int DEFAULT_FULL_WIDTH = 80;    /**     * The default screen furniture left of screen     */    public static final String DEFAULT_GUTTER_LEFT = """";    /**     * The default screen furniture right of screen     */    public static final String DEFAULT_GUTTER_CENTER = ""    "";    /**     * The default screen furniture between columns     */    public static final String DEFAULT_GUTTER_RIGHT = """";    /**     * The default DisplaySettings used to select the elements to display in the     * displayed line of full usage information.     *     * @see DisplaySetting     */    public static final Set DEFAULT_FULL_USAGE_SETTINGS;    /**     * The default DisplaySettings used to select the elements of usage per help     * line in the main body of help     *     * @see DisplaySetting     */    public static final Set DEFAULT_LINE_USAGE_SETTINGS;    /**     * The default DisplaySettings used to select the help lines in the main     * body of help     */    public static final Set DEFAULT_DISPLAY_USAGE_SETTINGS;    static {        final Set fullUsage = new HashSet(DisplaySetting.ALL);        fullUsage.remove(DisplaySetting.DISPLAY_ALIASES);        fullUsage.remove(DisplaySetting.DISPLAY_GROUP_NAME);        DEFAULT_FULL_USAGE_SETTINGS = Collections.unmodifiableSet(fullUsage);        final Set lineUsage = new HashSet();        lineUsage.add(DisplaySetting.DISPLAY_ALIASES);        lineUsage.add(DisplaySetting.DISPLAY_GROUP_NAME);        lineUsage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        DEFAULT_LINE_USAGE_SETTINGS = Collections.unmodifiableSet(lineUsage);        final Set displayUsage = new HashSet(DisplaySetting.ALL);        displayUsage.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        DEFAULT_DISPLAY_USAGE_SETTINGS = Collections.unmodifiableSet(displayUsage);    }    private Set fullUsageSettings = new HashSet(DEFAULT_FULL_USAGE_SETTINGS);    private Set lineUsageSettings = new HashSet(DEFAULT_LINE_USAGE_SETTINGS);    private Set displaySettings = new HashSet(DEFAULT_DISPLAY_USAGE_SETTINGS);    private OptionException exception = null;    private Group group;    private Comparator comparator = null;    private String divider = null;    private String header = null;    private String footer = null;    private String shellCommand = """";    private PrintWriter out = new PrintWriter(System.out);    //or should this default to .err?    private final String gutterLeft;    private final String gutterCenter;    private final String gutterRight;    private final int pageWidth;    /**     * Creates a new HelpFormatter using the defaults     */    public HelpFormatter() {        this(DEFAULT_GUTTER_LEFT, DEFAULT_GUTTER_CENTER, DEFAULT_GUTTER_RIGHT, DEFAULT_FULL_WIDTH);    }    /**     * Creates a new HelpFormatter using the specified parameters     * @param gutterLeft the string marking left of screen     * @param gutterCenter the string marking center of screen     * @param gutterRight the string marking right of screen     * @param fullWidth the width of the screen     */    public HelpFormatter(final String gutterLeft,                         final String gutterCenter,                         final String gutterRight,                         final int fullWidth) {        // default the left gutter to empty string        this.gutterLeft = (gutterLeft == null) ? DEFAULT_GUTTER_LEFT : gutterLeft;        // default the center gutter to a single space        this.gutterCenter = (gutterCenter == null) ? DEFAULT_GUTTER_CENTER : gutterCenter;        // default the right gutter to empty string        this.gutterRight = (gutterRight == null) ? DEFAULT_GUTTER_RIGHT : gutterRight;        // calculate the available page width        this.pageWidth = fullWidth - this.gutterLeft.length() - this.gutterRight.length();        // check available page width is valid        int availableWidth = fullWidth - pageWidth + this.gutterCenter.length();        if (availableWidth < 2) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.HELPFORMATTER_GUTTER_TOO_LONG));        }    }    /**     * Prints the Option help.     */    public void print() {        printHeader();        printException();        printUsage();        printHelp();        printFooter();        out.flush();    }    /**     * Prints any error message.     */    public void printException() {        if (exception != null) {            printDivider();            printWrapped(exception.getMessage());        }    }    /**     * Prints detailed help per option.     */    public void printHelp() {        printDivider();        final Option option;        if ((exception != null) && (exception.getOption() != null)) {            option = exception.getOption();        } else {            option = group;        }        // grab the HelpLines to display        final List helpLines = option.helpLines(0, displaySettings, comparator);        // calculate the maximum width of the usage strings        int usageWidth = 0;        for (final Iterator i = helpLines.iterator(); i.hasNext();) {            final HelpLine helpLine = (HelpLine) i.next();            final String usage = helpLine.usage(lineUsageSettings, comparator);            usageWidth = Math.max(usageWidth, usage.length());        }        // build a blank string to pad wrapped descriptions        final StringBuffer blankBuffer = new StringBuffer();        for (int i = 0; i < usageWidth; i++) {            blankBuffer.append(' ');        }        // determine the width available for descriptions        final int descriptionWidth = Math.max(1, pageWidth - gutterCenter.length() - usageWidth);        // display each HelpLine        for (final Iterator i = helpLines.iterator(); i.hasNext();) {            // grab the HelpLine            final HelpLine helpLine = (HelpLine) i.next();            // wrap the description            final List descList = wrap(helpLine.getDescription(), descriptionWidth);            final Iterator descriptionIterator = descList.iterator();            // display usage + first line of description            printGutterLeft();            pad(helpLine.usage(lineUsageSettings, comparator), usageWidth, out);            out.print(gutterCenter);            pad((String) descriptionIterator.next(), descriptionWidth, out);            printGutterRight();            out.println();            // display padding + remaining lines of description            while (descriptionIterator.hasNext()) {                printGutterLeft();                //pad(helpLine.getUsage(),usageWidth,out);                out.print(blankBuffer);                out.print(gutterCenter);                pad((String) descriptionIterator.next(), descriptionWidth, out);                printGutterRight();                out.println();            }        }        printDivider();    }    /**     * Prints a single line of usage information (wrapping if necessary)     */    public void printUsage() {        printDivider();        final StringBuffer buffer = new StringBuffer(""Usage:\n"");        buffer.append(shellCommand).append(' ');        group.appendUsage(buffer, fullUsageSettings, comparator, "" "");        printWrapped(buffer.toString());    }    /**     * Prints a header string if necessary     */    public void printHeader() {        if (header != null) {            printDivider();            printWrapped(header);        }    }    /**     * Prints a footer string if necessary     */    public void printFooter() {        if (footer != null) {            printWrapped(footer);            printDivider();        }    }    /**     * Prints a string wrapped if necessary     * @param text the string to wrap     */    public void printWrapped(final String text) {        for (final Iterator i = wrap(text, pageWidth).iterator(); i.hasNext();) {            printGutterLeft();            pad((String) i.next(), pageWidth, out);            printGutterRight();            out.println();        }        out.flush();    }    /**     * Prints the left gutter string     */    public void printGutterLeft() {        if (gutterLeft != null) {            out.print(gutterLeft);        }    }    /**     * Prints the right gutter string     */    public void printGutterRight() {        if (gutterRight != null) {            out.print(gutterRight);        }    }    /**     * Prints the divider text     */    public void printDivider() {        if (divider != null) {            out.println(divider);        }    }    protected static void pad(final String text,                              final int width,                              final PrintWriter writer) {        final int left;        // write the text and record how many characters written        if (text == null) {            left = 0;        } else {            writer.write(text);            left = text.length();        }        // pad remainder with spaces        for (int i = left; i < width; ++i) {            writer.write(' ');        }    }    protected static List wrap(final String text,                               final int width) {        // check for valid width        if (width < 1) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.HELPFORMATTER_WIDTH_TOO_NARROW,                                                                                             new Object[] {                                                                                                 new Integer(width)                                                                                             }));        }        // handle degenerate case        if (text == null) {            return Collections.singletonList("""");        }        final List lines = new ArrayList();        final char[] chars = text.toCharArray();        int left = 0;        // for each character in the string        while (left < chars.length) {            // sync left and right indeces            int right = left;            // move right until we run out of characters, width or find a newline            while ((right < chars.length) && (chars[right] != '\n') &&                       (right < (left + width + 1))) {                right++;            }            // if a newline was found            if ((right < chars.length) && (chars[right] == '\n')) {                // record the substring                final String line = new String(chars, left, right - left);                lines.add(line);                // move to the end of the substring                left = right + 1;                if (left == chars.length) {                    lines.add("""");                }                // restart the loop                continue;            }            // move to the next ideal wrap point            right = (left + width) - 1;            // if we have run out of characters            if (chars.length <= right) {                // record the substring                final String line = new String(chars, left, chars.length - left);                lines.add(line);                // abort the loop                break;            }            // back track the substring end until a space is found            while ((right >= left) && (chars[right] != ' ')) {                right--;            }            // if a space was found            if (right >= left) {                // record the substring to space                final String line = new String(chars, left, right - left);                lines.add(line);                // absorb all the spaces before next substring                while ((right < chars.length) && (chars[right] == ' ')) {                    right++;                }                left = right;                // restart the loop                continue;            }            // move to the wrap position irrespective of spaces            right = Math.min(left + width, chars.length);            // record the substring            final String line = new String(chars, left, right - left);            lines.add(line);            // absorb any the spaces before next substring            while ((right < chars.length) && (chars[right] == ' ')) {                right++;            }            left = right;        }        return lines;    }    /**     * The Comparator to use when sorting Options     * @param comparator Comparator to use when sorting Options     */    public void setComparator(Comparator comparator) {        this.comparator = comparator;    }    /**     * The DisplaySettings used to select the help lines in the main body of     * help     *     * @param displaySettings the settings to use     * @see DisplaySetting     */    public void setDisplaySettings(Set displaySettings) {        this.displaySettings = displaySettings;    }    /**     * Sets the string to use as a divider between sections of help     * @param divider the dividing string     */    public void setDivider(String divider) {        this.divider = divider;    }    /**     * Sets the exception to document     * @param exception the exception that occured     */    public void setException(OptionException exception) {        this.exception = exception;    }    /**     * Sets the footer text of the help screen     * @param footer the footer text     */    public void setFooter(String footer) {        this.footer = footer;    }    /**     * The DisplaySettings used to select the elements to display in the     * displayed line of full usage information.     * @see DisplaySetting     * @param fullUsageSettings     */    public void setFullUsageSettings(Set fullUsageSettings) {        this.fullUsageSettings = fullUsageSettings;    }    /**     * Sets the Group of Options to document     * @param group the options to document     */    public void setGroup(Group group) {        this.group = group;    }    /**     * Sets the footer text of the help screen     * @param header the footer text     */    public void setHeader(String header) {        this.header = header;    }    /**     * Sets the DisplaySettings used to select elements in the per helpline     * usage strings.     * @see DisplaySetting     * @param lineUsageSettings the DisplaySettings to use     */    public void setLineUsageSettings(Set lineUsageSettings) {        this.lineUsageSettings = lineUsageSettings;    }    /**     * Sets the command string used to invoke the application     * @param shellCommand the invokation command     */    public void setShellCommand(String shellCommand) {        this.shellCommand = shellCommand;    }    /**     * @return the Comparator used to sort the Group     */    public Comparator getComparator() {        return comparator;    }    /**     * @return the DisplaySettings used to select HelpLines     */    public Set getDisplaySettings() {        return displaySettings;    }    /**     * @return the String used as a horizontal section divider     */    public String getDivider() {        return divider;    }    /**     * @return the Exception being documented by this HelpFormatter     */    public OptionException getException() {        return exception;    }    /**     * @return the help screen footer text     */    public String getFooter() {        return footer;    }    /**     * @return the DisplaySettings used in the full usage string     */    public Set getFullUsageSettings() {        return fullUsageSettings;    }    /**     * @return the group documented by this HelpFormatter     */    public Group getGroup() {        return group;    }    /**     * @return the String used as the central gutter     */    public String getGutterCenter() {        return gutterCenter;    }    /**     * @return the String used as the left gutter     */    public String getGutterLeft() {        return gutterLeft;    }    /**     * @return the String used as the right gutter     */    public String getGutterRight() {        return gutterRight;    }    /**     * @return the help screen header text     */    public String getHeader() {        return header;    }    /**     * @return the DisplaySettings used in the per help line usage strings     */    public Set getLineUsageSettings() {        return lineUsageSettings;    }    /**     * @return the width of the screen in characters     */    public int getPageWidth() {        return pageWidth;    }    /**     * @return the command used to execute the application     */    public String getShellCommand() {        return shellCommand;    }    /**     * @param out the PrintWriter to write to     */    public void setPrintWriter(PrintWriter out) {        this.out = out;    }    /**     * @return the PrintWriter that will be written to     */    public PrintWriter getPrintWriter() {        return out;    }}"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,18,package org.apache.commons.cli2.util;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,20,import java.io.PrintWriter;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,22,import java.util.ArrayList;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,23,import java.util.Collections;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,24,import java.util.Comparator;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,25,import java.util.HashSet;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,26,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,27,import java.util.List;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,28,import java.util.Set;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,30,import org.apache.commons.cli2.DisplaySetting;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,31,import org.apache.commons.cli2.Group;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,32,import org.apache.commons.cli2.HelpLine;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,33,import org.apache.commons.cli2.Option;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,34,import org.apache.commons.cli2.OptionException;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,35,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,36,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,39,* Presents on screen help based on the application's Options
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,41,public class HelpFormatter {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,43,* The default screen width
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,45,public static final int DEFAULT_FULL_WIDTH = 80;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,48,* The default screen furniture left of screen
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,50,"public static final String DEFAULT_GUTTER_LEFT = """";"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,53,* The default screen furniture right of screen
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,55,"public static final String DEFAULT_GUTTER_CENTER = ""    "";"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,58,* The default screen furniture between columns
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,60,"public static final String DEFAULT_GUTTER_RIGHT = """";"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,63,* The default DisplaySettings used to select the elements to display in the
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,64,* displayed line of full usage information.
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,66,* @see DisplaySetting
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,68,public static final Set DEFAULT_FULL_USAGE_SETTINGS;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,71,* The default DisplaySettings used to select the elements of usage per help
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,72,* line in the main body of help
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,74,* @see DisplaySetting
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,76,public static final Set DEFAULT_LINE_USAGE_SETTINGS;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,79,* The default DisplaySettings used to select the help lines in the main
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,80,* body of help
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,82,public static final Set DEFAULT_DISPLAY_USAGE_SETTINGS;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,84,static {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,85,final Set fullUsage = new HashSet(DisplaySetting.ALL);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,86,fullUsage.remove(DisplaySetting.DISPLAY_ALIASES);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,87,fullUsage.remove(DisplaySetting.DISPLAY_GROUP_NAME);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,88,DEFAULT_FULL_USAGE_SETTINGS = Collections.unmodifiableSet(fullUsage);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,90,final Set lineUsage = new HashSet();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,91,lineUsage.add(DisplaySetting.DISPLAY_ALIASES);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,92,lineUsage.add(DisplaySetting.DISPLAY_GROUP_NAME);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,93,lineUsage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,94,DEFAULT_LINE_USAGE_SETTINGS = Collections.unmodifiableSet(lineUsage);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,96,final Set displayUsage = new HashSet(DisplaySetting.ALL);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,97,displayUsage.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,98,DEFAULT_DISPLAY_USAGE_SETTINGS = Collections.unmodifiableSet(displayUsage);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,101,private Set fullUsageSettings = new HashSet(DEFAULT_FULL_USAGE_SETTINGS);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,102,private Set lineUsageSettings = new HashSet(DEFAULT_LINE_USAGE_SETTINGS);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,103,private Set displaySettings = new HashSet(DEFAULT_DISPLAY_USAGE_SETTINGS);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,104,private OptionException exception = null;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,105,private Group group;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,106,private Comparator comparator = null;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,107,private String divider = null;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,108,private String header = null;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,109,private String footer = null;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,110,"private String shellCommand = """";"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,111,private PrintWriter out = new PrintWriter(System.out);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,113,//or should this default to .err?
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,114,private final String gutterLeft;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,115,private final String gutterCenter;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,116,private final String gutterRight;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,117,private final int pageWidth;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,120,* Creates a new HelpFormatter using the defaults
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,122,public HelpFormatter() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,123,"this(DEFAULT_GUTTER_LEFT, DEFAULT_GUTTER_CENTER, DEFAULT_GUTTER_RIGHT, DEFAULT_FULL_WIDTH);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,127,* Creates a new HelpFormatter using the specified parameters
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,128,* @param gutterLeft the string marking left of screen
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,129,* @param gutterCenter the string marking center of screen
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,130,* @param gutterRight the string marking right of screen
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,131,* @param fullWidth the width of the screen
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,133,"public HelpFormatter(final String gutterLeft,"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,134,"final String gutterCenter,"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,135,"final String gutterRight,"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,136,final int fullWidth) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,137,// default the left gutter to empty string
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,138,this.gutterLeft = (gutterLeft == null) ? DEFAULT_GUTTER_LEFT : gutterLeft;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,140,// default the center gutter to a single space
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,141,this.gutterCenter = (gutterCenter == null) ? DEFAULT_GUTTER_CENTER : gutterCenter;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,143,// default the right gutter to empty string
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,144,this.gutterRight = (gutterRight == null) ? DEFAULT_GUTTER_RIGHT : gutterRight;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,146,// calculate the available page width
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,147,this.pageWidth = fullWidth - this.gutterLeft.length() - this.gutterRight.length();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,149,// check available page width is valid
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,150,int availableWidth = fullWidth - pageWidth + this.gutterCenter.length();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,152,if (availableWidth < 2) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,153,throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.HELPFORMATTER_GUTTER_TOO_LONG));
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,158,* Prints the Option help.
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,160,public void print() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,161,printHeader();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,162,printException();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,163,printUsage();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,164,printHelp();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,165,printFooter();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,166,out.flush();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,170,* Prints any error message.
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,172,public void printException() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,173,if (exception != null) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,174,printDivider();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,175,printWrapped(exception.getMessage());
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,180,* Prints detailed help per option.
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,182,public void printHelp() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,183,printDivider();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,185,final Option option;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,187,if ((exception != null) && (exception.getOption() != null)) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,188,option = exception.getOption();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,189,} else {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,190,option = group;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,193,// grab the HelpLines to display
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,194,"final List helpLines = option.helpLines(0, displaySettings, comparator);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,196,// calculate the maximum width of the usage strings
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,197,int usageWidth = 0;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,199,for (final Iterator i = helpLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,200,final HelpLine helpLine = (HelpLine) i.next();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,201,"final String usage = helpLine.usage(lineUsageSettings, comparator);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,202,"usageWidth = Math.max(usageWidth, usage.length());"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,205,// build a blank string to pad wrapped descriptions
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,206,final StringBuffer blankBuffer = new StringBuffer();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,208,for (int i = 0; i < usageWidth; i++) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,209,blankBuffer.append(' ');
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,212,// determine the width available for descriptions
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,213,"final int descriptionWidth = Math.max(1, pageWidth - gutterCenter.length() - usageWidth);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,215,// display each HelpLine
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,216,for (final Iterator i = helpLines.iterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,217,// grab the HelpLine
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,218,final HelpLine helpLine = (HelpLine) i.next();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,220,// wrap the description
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,221,"final List descList = wrap(helpLine.getDescription(), descriptionWidth);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,222,final Iterator descriptionIterator = descList.iterator();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,224,// display usage + first line of description
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,225,printGutterLeft();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,226,"pad(helpLine.usage(lineUsageSettings, comparator), usageWidth, out);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,227,out.print(gutterCenter);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,228,"pad((String) descriptionIterator.next(), descriptionWidth, out);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,229,printGutterRight();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,230,out.println();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,232,// display padding + remaining lines of description
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,233,while (descriptionIterator.hasNext()) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,234,printGutterLeft();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,236,"//pad(helpLine.getUsage(),usageWidth,out);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,237,out.print(blankBuffer);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,238,out.print(gutterCenter);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,239,"pad((String) descriptionIterator.next(), descriptionWidth, out);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,240,printGutterRight();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,241,out.println();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,245,printDivider();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,249,* Prints a single line of usage information (wrapping if necessary)
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,251,public void printUsage() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,252,printDivider();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,254,"final StringBuffer buffer = new StringBuffer(""Usage:\n"");"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,255,buffer.append(shellCommand).append(' ');
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,256,"group.appendUsage(buffer, fullUsageSettings, comparator, "" "");"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,257,printWrapped(buffer.toString());
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,261,* Prints a header string if necessary
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,263,public void printHeader() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,264,if (header != null) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,265,printDivider();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,266,printWrapped(header);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,271,* Prints a footer string if necessary
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,273,public void printFooter() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,274,if (footer != null) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,275,printWrapped(footer);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,276,printDivider();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,281,* Prints a string wrapped if necessary
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,282,* @param text the string to wrap
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,284,public void printWrapped(final String text) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,285,"for (final Iterator i = wrap(text, pageWidth).iterator(); i.hasNext();) {"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,286,printGutterLeft();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,287,"pad((String) i.next(), pageWidth, out);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,288,printGutterRight();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,289,out.println();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,292,out.flush();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,296,* Prints the left gutter string
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,298,public void printGutterLeft() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,299,if (gutterLeft != null) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,300,out.print(gutterLeft);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,305,* Prints the right gutter string
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,307,public void printGutterRight() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,308,if (gutterRight != null) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,309,out.print(gutterRight);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,314,* Prints the divider text
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,316,public void printDivider() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,317,if (divider != null) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,318,out.println(divider);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,322,"protected static void pad(final String text,"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,323,"final int width,"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,324,final PrintWriter writer) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,325,final int left;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,327,// write the text and record how many characters written
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,328,if (text == null) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,329,left = 0;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,330,} else {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,331,writer.write(text);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,332,left = text.length();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,335,// pad remainder with spaces
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,336,for (int i = left; i < width; ++i) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,337,writer.write(' ');
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,341,"protected static List wrap(final String text,"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,342,final int width) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,343,// check for valid width
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,344,if (width < 1) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,345,"throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.HELPFORMATTER_WIDTH_TOO_NARROW,"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,346,new Object[] {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,347,new Integer(width)
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,351,// handle degenerate case
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,352,if (text == null) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,353,"return Collections.singletonList("""");"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,356,final List lines = new ArrayList();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,357,final char[] chars = text.toCharArray();
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,358,int left = 0;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,360,// for each character in the string
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,361,while (left < chars.length) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,362,// sync left and right indeces
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,363,int right = left;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,365,"// move right until we run out of characters, width or find a newline"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,366,while ((right < chars.length) && (chars[right] != '\n') &&
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,367,(right < (left + width + 1))) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,368,right++;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,371,// if a newline was found
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,372,if ((right < chars.length) && (chars[right] == '\n')) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,373,// record the substring
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,374,"final String line = new String(chars, left, right - left);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,375,lines.add(line);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,377,// move to the end of the substring
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,378,left = right + 1;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,380,if (left == chars.length) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,381,"lines.add("""");"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,384,// restart the loop
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,385,continue;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,388,// move to the next ideal wrap point
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,389,right = (left + width) - 1;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,391,// if we have run out of characters
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,392,if (chars.length <= right) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,393,// record the substring
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,394,"final String line = new String(chars, left, chars.length - left);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,395,lines.add(line);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,397,// abort the loop
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,398,break;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,401,// back track the substring end until a space is found
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,402,while ((right >= left) && (chars[right] != ' ')) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,403,right--;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,406,// if a space was found
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,407,if (right >= left) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,408,// record the substring to space
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,409,"final String line = new String(chars, left, right - left);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,410,lines.add(line);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,412,// absorb all the spaces before next substring
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,413,while ((right < chars.length) && (chars[right] == ' ')) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,414,right++;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,417,left = right;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,419,// restart the loop
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,420,continue;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,423,// move to the wrap position irrespective of spaces
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,424,"right = Math.min(left + width, chars.length);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,426,// record the substring
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,427,"final String line = new String(chars, left, right - left);"
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,428,lines.add(line);
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,430,// absorb any the spaces before next substring
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,431,while ((right < chars.length) && (chars[right] == ' ')) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,432,right++;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,435,left = right;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,438,return lines;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,442,* The Comparator to use when sorting Options
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,443,* @param comparator Comparator to use when sorting Options
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,445,public void setComparator(Comparator comparator) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,446,this.comparator = comparator;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,450,* The DisplaySettings used to select the help lines in the main body of
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,451,* help
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,453,* @param displaySettings the settings to use
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,454,* @see DisplaySetting
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,456,public void setDisplaySettings(Set displaySettings) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,457,this.displaySettings = displaySettings;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,461,* Sets the string to use as a divider between sections of help
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,462,* @param divider the dividing string
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,464,public void setDivider(String divider) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,465,this.divider = divider;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,469,* Sets the exception to document
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,470,* @param exception the exception that occured
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,472,public void setException(OptionException exception) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,473,this.exception = exception;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,477,* Sets the footer text of the help screen
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,478,* @param footer the footer text
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,480,public void setFooter(String footer) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,481,this.footer = footer;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,485,* The DisplaySettings used to select the elements to display in the
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,486,* displayed line of full usage information.
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,487,* @see DisplaySetting
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,488,* @param fullUsageSettings
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,490,public void setFullUsageSettings(Set fullUsageSettings) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,491,this.fullUsageSettings = fullUsageSettings;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,495,* Sets the Group of Options to document
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,496,* @param group the options to document
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,498,public void setGroup(Group group) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,499,this.group = group;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,503,* Sets the footer text of the help screen
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,504,* @param header the footer text
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,506,public void setHeader(String header) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,507,this.header = header;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,511,* Sets the DisplaySettings used to select elements in the per helpline
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,512,* usage strings.
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,513,* @see DisplaySetting
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,514,* @param lineUsageSettings the DisplaySettings to use
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,516,public void setLineUsageSettings(Set lineUsageSettings) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,517,this.lineUsageSettings = lineUsageSettings;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,521,* Sets the command string used to invoke the application
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,522,* @param shellCommand the invokation command
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,524,public void setShellCommand(String shellCommand) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,525,this.shellCommand = shellCommand;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,529,* @return the Comparator used to sort the Group
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,531,public Comparator getComparator() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,532,return comparator;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,536,* @return the DisplaySettings used to select HelpLines
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,538,public Set getDisplaySettings() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,539,return displaySettings;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,543,* @return the String used as a horizontal section divider
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,545,public String getDivider() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,546,return divider;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,550,* @return the Exception being documented by this HelpFormatter
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,552,public OptionException getException() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,553,return exception;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,557,* @return the help screen footer text
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,559,public String getFooter() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,560,return footer;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,564,* @return the DisplaySettings used in the full usage string
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,566,public Set getFullUsageSettings() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,567,return fullUsageSettings;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,571,* @return the group documented by this HelpFormatter
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,573,public Group getGroup() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,574,return group;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,578,* @return the String used as the central gutter
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,580,public String getGutterCenter() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,581,return gutterCenter;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,585,* @return the String used as the left gutter
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,587,public String getGutterLeft() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,588,return gutterLeft;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,592,* @return the String used as the right gutter
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,594,public String getGutterRight() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,595,return gutterRight;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,599,* @return the help screen header text
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,601,public String getHeader() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,602,return header;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,606,* @return the DisplaySettings used in the per help line usage strings
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,608,public Set getLineUsageSettings() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,609,return lineUsageSettings;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,613,* @return the width of the screen in characters
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,615,public int getPageWidth() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,616,return pageWidth;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,620,* @return the command used to execute the application
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,622,public String getShellCommand() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,623,return shellCommand;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,627,* @param out the PrintWriter to write to
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,629,public void setPrintWriter(PrintWriter out) {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,630,this.out = out;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,634,* @return the PrintWriter that will be written to
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,636,public PrintWriter getPrintWriter() {
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,637,return out;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>ClassValidator</code> validates the string argument * values are class names. * * The following example shows how to validate the 'logger' * argument value is a class name, that can be instantiated. * * <pre> * ... * ClassValidator validator = new ClassValidator(); * validator.setInstance(true); * * ArgumentBuilder builder = new ArgumentBuilder(); * Argument logger = *     builder.withName(""logger""); *            .withValidator(validator); * </pre> * * @author John Keyes */public class ClassValidator implements Validator {    /** i18n */    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    /** whether the class argument is loadable */    private boolean loadable;    /** whether to create an instance of the class */    private boolean instance;    /** the classloader to load classes from */    private ClassLoader loader;    /**     * Validate each argument value in the specified List against this instances     * permitted attributes.     *     * If a value is valid then it's <code>String</code> value in the list is     * replaced with it's <code>Class</code> value or instance.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String name = (String) i.next();            if (!isPotentialClassName(name)) {                throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_BAD_CLASSNAME,                                                                        name));            }            if (loadable || instance) {                final ClassLoader theLoader = getClassLoader();                try {                    final Class clazz = theLoader.loadClass(name);                    if (instance) {                        i.set(clazz.newInstance());                    } else {                        i.set(clazz);                    }                } catch (final ClassNotFoundException exp) {                    throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_NOTFOUND,                                                                            name));                } catch (final IllegalAccessException exp) {                    throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_ACCESS,                                                                            name, exp.getMessage()));                } catch (final InstantiationException exp) {                    throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_CREATE,                                                                            name));                }            }        }    }    /**     * Returns whether the argument value must represent a     * class that is loadable.     *     * @return whether the argument value must represent a     * class that is loadable.     */    public boolean isLoadable() {        return loadable;    }    /**     * Specifies whether the argument value must represent a     * class that is loadable.     *     * @param loadable whether the argument value must     * represent a class that is loadable.     */    public void setLoadable(boolean loadable) {        this.loadable = loadable;    }    /**     * Returns the {@link ClassLoader} used to resolve and load     * the classes specified by the argument values.     *     * @return the {@link ClassLoader} used to resolve and load     * the classes specified by the argument values.     */    public ClassLoader getClassLoader() {        if (loader == null) {            loader = getClass().getClassLoader();        }        return loader;    }    /**     * Specifies the {@link ClassLoader} used to resolve and load     * the classes specified by the argument values.     *     * @param loader the {@link ClassLoader} used to resolve and load     * the classes specified by the argument values.     */    public void setClassLoader(ClassLoader loader) {        this.loader = loader;    }    /**     * Returns whether the argument value must represent a     * class that can be instantiated.     *     * @return whether the argument value must represent a     * class that can be instantiated.     */    public boolean isInstance() {        return instance;    }    /**     * Specifies whether the argument value must represent a     * class that can be instantiated.     *     * @param instance whether the argument value must     * represent a class that can be instantiated.     */    public void setInstance(boolean instance) {        this.instance = instance;    }    /**     * Returns whether the specified name is allowed as     * a Java class name.     */    protected boolean isPotentialClassName(final String name) {        final char[] chars = name.toCharArray();        boolean expectingStart = true;        for (int i = 0; i < chars.length; ++i) {            final char c = chars[i];            if (expectingStart) {                if (!Character.isJavaIdentifierStart(c)) {                    return false;                }                expectingStart = false;            } else {                if (c == '.') {                    expectingStart = true;                } else if (!Character.isJavaIdentifierPart(c)) {                    return false;                }            }        }        return !expectingStart;    }}"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,18,package org.apache.commons.cli2.validation;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,20,import java.util.List;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,21,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,23,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,24,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,27,* The <code>ClassValidator</code> validates the string argument
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,28,* values are class names.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,30,* The following example shows how to validate the 'logger'
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,31,"* argument value is a class name, that can be instantiated."
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,33,* <pre>
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,35,* ClassValidator validator = new ClassValidator();
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,36,* validator.setInstance(true);
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,38,* ArgumentBuilder builder = new ArgumentBuilder();
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,39,* Argument logger =
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,40,"*     builder.withName(""logger"");"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,41,*            .withValidator(validator);
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,42,* </pre>
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,44,* @author John Keyes
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,46,public class ClassValidator implements Validator {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,47,/** i18n */
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,48,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,50,/** whether the class argument is loadable */
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,51,private boolean loadable;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,53,/** whether to create an instance of the class */
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,54,private boolean instance;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,56,/** the classloader to load classes from */
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,57,private ClassLoader loader;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,60,* Validate each argument value in the specified List against this instances
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,61,* permitted attributes.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,63,* If a value is valid then it's <code>String</code> value in the list is
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,64,* replaced with it's <code>Class</code> value or instance.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,66,* @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,68,public void validate(final List values)
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,69,throws InvalidArgumentException {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,70,for (final ListIterator i = values.listIterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,71,final String name = (String) i.next();
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,73,if (!isPotentialClassName(name)) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,74,"throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_BAD_CLASSNAME,"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,75,name));
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,78,if (loadable || instance) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,79,final ClassLoader theLoader = getClassLoader();
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,81,try {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,82,final Class clazz = theLoader.loadClass(name);
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,84,if (instance) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,85,i.set(clazz.newInstance());
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,86,} else {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,87,i.set(clazz);
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,89,} catch (final ClassNotFoundException exp) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,90,"throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_NOTFOUND,"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,91,name));
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,92,} catch (final IllegalAccessException exp) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,93,"throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_ACCESS,"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,94,"name, exp.getMessage()));"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,95,} catch (final InstantiationException exp) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,96,"throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_CREATE,"
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,97,name));
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,104,* Returns whether the argument value must represent a
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,105,* class that is loadable.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,107,* @return whether the argument value must represent a
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,108,* class that is loadable.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,110,public boolean isLoadable() {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,111,return loadable;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,115,* Specifies whether the argument value must represent a
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,116,* class that is loadable.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,118,* @param loadable whether the argument value must
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,119,* represent a class that is loadable.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,121,public void setLoadable(boolean loadable) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,122,this.loadable = loadable;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,126,* Returns the {@link ClassLoader} used to resolve and load
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,127,* the classes specified by the argument values.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,129,* @return the {@link ClassLoader} used to resolve and load
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,130,* the classes specified by the argument values.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,132,public ClassLoader getClassLoader() {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,133,if (loader == null) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,134,loader = getClass().getClassLoader();
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,137,return loader;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,141,* Specifies the {@link ClassLoader} used to resolve and load
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,142,* the classes specified by the argument values.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,144,* @param loader the {@link ClassLoader} used to resolve and load
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,145,* the classes specified by the argument values.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,147,public void setClassLoader(ClassLoader loader) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,148,this.loader = loader;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,152,* Returns whether the argument value must represent a
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,153,* class that can be instantiated.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,155,* @return whether the argument value must represent a
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,156,* class that can be instantiated.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,158,public boolean isInstance() {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,159,return instance;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,163,* Specifies whether the argument value must represent a
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,164,* class that can be instantiated.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,166,* @param instance whether the argument value must
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,167,* represent a class that can be instantiated.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,169,public void setInstance(boolean instance) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,170,this.instance = instance;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,174,* Returns whether the specified name is allowed as
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,175,* a Java class name.
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,177,protected boolean isPotentialClassName(final String name) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,178,final char[] chars = name.toCharArray();
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,180,boolean expectingStart = true;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,182,for (int i = 0; i < chars.length; ++i) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,183,final char c = chars[i];
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,185,if (expectingStart) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,186,if (!Character.isJavaIdentifierStart(c)) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,187,return false;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,190,expectingStart = false;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,191,} else {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,192,if (c == '.') {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,193,expectingStart = true;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,194,} else if (!Character.isJavaIdentifierPart(c)) {
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,195,return false;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,200,return !expectingStart;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.text.DateFormat;import java.text.ParsePosition;import java.util.Date;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>DateValidator</code> validates the argument values * are date or time value(s). * * The following example shows how to validate that * an argument value(s) is a Date of the following * type: d/M/yy (see {@link java.text.DateFormat}). * * <pre> * DateFormat date = new SimpleDateFormat(""d/M/yy""); * ... * ArgumentBuilder builder = new ArgumentBuilder(); * Argument dateFormat = *     builder.withName(""date""); *            .withValidator(new DateValidator(dateFormat)); * </pre> * * The following example shows how to validate that * an argument value(s) is a time of the following * type: HH:mm:ss (see {@link java.text.DateFormat}). * * <pre> * DateFormat timeFormat = new SimpleDateFormat(""HH:mm:ss""); * ... * ArgumentBuilder builder = new ArgumentBuilder(); * Argument time = *     builder.withName(""time""); *            .withValidator(new DateValidator(timeFormat)); * </pre> * * @author John Keyes * * @see java.text.DateFormat */public class DateValidator implements Validator {    /** i18n */    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    /** an array of permitted DateFormats */    private DateFormat[] formats;    /** minimum Date allowed i.e: a valid date occurs later than this date */    private Date minimum;    /** maximum Date allowed i.e: a valid date occurs earlier than this date */    private Date maximum;    /** leniant parsing */    private boolean isLenient;    /**     * Creates a Validator for the default date/time format     */    public DateValidator() {        this(DateFormat.getInstance());    }    /**     * Creates a Validator for the specified DateFormat.     *     * @param format     *            a DateFormat which dates must conform to     */    public DateValidator(final DateFormat format) {        setFormat(format);    }    /**     * Creates a Validator for the List of specified DateFormats.     *     * @param formats     *            a List of DateFormats which dates must conform to     */    public DateValidator(final List formats) {        setFormats(formats);    }    /**     * Creates a Validator for dates.     *     * @return DateValidator a Validator for dates     */    public static DateValidator getDateInstance() {        return new DateValidator(DateFormat.getDateInstance());    }    /**     * Creates a Validator for times.     *     * @return DateValidator a Validator for times     */    public static DateValidator getTimeInstance() {        return new DateValidator(DateFormat.getTimeInstance());    }    /**     * Creates a Validator for date/times     *     * @return DateValidator a Validator for date/times     */    public static DateValidator getDateTimeInstance() {        return new DateValidator(DateFormat.getDateTimeInstance());    }    /**     * Validate each String value in the specified List against this instances     * permitted DateFormats.     *     * If a value is valid then it's <code>String</code> value in the list is     * replaced with it's <code>Date</code> value.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        // for each value        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String value = (String) i.next();            Date date = null;            // create a resuable ParsePosition instance            final ParsePosition pp = new ParsePosition(0);            // for each permitted DateFormat            for (int f = 0; (f < this.formats.length) && (date == null); ++f) {                // reset the parse position                pp.setIndex(0);                date = this.formats[f].parse(value, pp);                // if the wrong number of characters have been parsed                if (pp.getIndex() < value.length()) {                    date = null;                }            }            // if date has not been set throw an InvalidArgumentException            if (date == null) {                throw new InvalidArgumentException(value);            }            // if the date is outside the bounds            if (isDateEarlier(date) || isDateLater(date)) {                throw new InvalidArgumentException(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,                                                                        value));            }            // replace the value in the list with the actual Date            i.set(date);        }    }    /**     * Sets whether this validator uses lenient parsing.     *     * @param lenient whether this validator uses lenient parsing     */    public void setLenient(final boolean lenient) {        for (int i = 0; i < this.formats.length; i++) {            this.formats[i].setLenient(lenient);        }        this.isLenient = lenient;    }    /**     * Returns whether this validator uses lenient parsing.     *     * @return whether this validator uses lenient parsing     */    public boolean isLenient() {        return this.isLenient;    }    /**     * Returns the maximum date permitted.     *     * @return Date the maximum date permitted. If no maximum date has been     *         specified then return <code>null</code>.     */    public Date getMaximum() {        return maximum;    }    /**     * Sets the maximum Date to the specified value.     *     * @param maximum     *            the maximum Date permitted     */    public void setMaximum(final Date maximum) {        this.maximum = maximum;    }    /**     * Returns the minimum date permitted.     *     * @return Date the minimum date permitted. If no minimum date has been     *         specified then return <code>null</code>.     */    public Date getMinimum() {        return minimum;    }    /**     * Sets the minimum Date to the specified value.     *     * @param minimum     *            the minimum Date permitted     */    public void setMinimum(Date minimum) {        this.minimum = minimum;    }    /**     * Returns whether the specified Date is later than the maximum date.     *     * @param date     *            the Date to evaluate     *     * @return boolean whether <code>date</code> is earlier than the maximum     *         date     */    private boolean isDateLater(Date date) {        return (maximum != null) && (date.getTime() > maximum.getTime());    }    /**     * Returns whether the specified Date is earlier than the minimum date.     *     * @param date     *            the Date to evaluate     *     * @return boolean whether <code>date</code> is earlier than the minimum     *         date     */    private boolean isDateEarlier(Date date) {        return (minimum != null) && (date.getTime() < minimum.getTime());    }    /**     * Sets the date format permitted.     *     * @param format     *              the format to use     */    public void setFormat(final DateFormat format) {        setFormats(new DateFormat[] { format });    }    /**     * Sets the date formats permitted.     *     * @param formats     *               the List of DateFormats to use     */    public void setFormats(final List formats) {        setFormats((DateFormat[]) formats.toArray(new DateFormat[formats.size()]));    }    /**     * Sets the date formats permitted.     *     * @param formats     *               the array of DateFormats to use     */    public void setFormats(final DateFormat[] formats) {        this.formats = formats;        setLenient(this.isLenient);    }    /**     * Gets the date formats permitted.     *     * @return the permitted formats     */    public DateFormat[] getFormats() {        return this.formats;    }}"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,18,package org.apache.commons.cli2.validation;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,20,import java.text.DateFormat;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,21,import java.text.ParsePosition;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,23,import java.util.Date;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,24,import java.util.List;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,25,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,27,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,28,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,31,* The <code>DateValidator</code> validates the argument values
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,32,* are date or time value(s).
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,34,* The following example shows how to validate that
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,35,* an argument value(s) is a Date of the following
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,36,* type: d/M/yy (see {@link java.text.DateFormat}).
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,38,* <pre>
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,39,"* DateFormat date = new SimpleDateFormat(""d/M/yy"");"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,41,* ArgumentBuilder builder = new ArgumentBuilder();
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,42,* Argument dateFormat =
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,43,"*     builder.withName(""date"");"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,44,*            .withValidator(new DateValidator(dateFormat));
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,45,* </pre>
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,47,* The following example shows how to validate that
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,48,* an argument value(s) is a time of the following
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,49,* type: HH:mm:ss (see {@link java.text.DateFormat}).
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,51,* <pre>
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,52,"* DateFormat timeFormat = new SimpleDateFormat(""HH:mm:ss"");"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,54,* ArgumentBuilder builder = new ArgumentBuilder();
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,55,* Argument time =
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,56,"*     builder.withName(""time"");"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,57,*            .withValidator(new DateValidator(timeFormat));
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,58,* </pre>
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,60,* @author John Keyes
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,62,* @see java.text.DateFormat
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,64,public class DateValidator implements Validator {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,65,/** i18n */
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,66,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,68,/** an array of permitted DateFormats */
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,69,private DateFormat[] formats;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,71,/** minimum Date allowed i.e: a valid date occurs later than this date */
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,72,private Date minimum;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,74,/** maximum Date allowed i.e: a valid date occurs earlier than this date */
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,75,private Date maximum;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,77,/** leniant parsing */
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,78,private boolean isLenient;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,81,* Creates a Validator for the default date/time format
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,83,public DateValidator() {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,84,this(DateFormat.getInstance());
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,88,* Creates a Validator for the specified DateFormat.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,90,* @param format
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,91,*            a DateFormat which dates must conform to
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,93,public DateValidator(final DateFormat format) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,94,setFormat(format);
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,98,* Creates a Validator for the List of specified DateFormats.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,100,* @param formats
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,101,*            a List of DateFormats which dates must conform to
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,103,public DateValidator(final List formats) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,104,setFormats(formats);
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,108,* Creates a Validator for dates.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,110,* @return DateValidator a Validator for dates
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,112,public static DateValidator getDateInstance() {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,113,return new DateValidator(DateFormat.getDateInstance());
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,117,* Creates a Validator for times.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,119,* @return DateValidator a Validator for times
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,121,public static DateValidator getTimeInstance() {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,122,return new DateValidator(DateFormat.getTimeInstance());
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,126,* Creates a Validator for date/times
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,128,* @return DateValidator a Validator for date/times
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,130,public static DateValidator getDateTimeInstance() {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,131,return new DateValidator(DateFormat.getDateTimeInstance());
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,135,* Validate each String value in the specified List against this instances
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,136,* permitted DateFormats.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,138,* If a value is valid then it's <code>String</code> value in the list is
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,139,* replaced with it's <code>Date</code> value.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,141,* @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,143,public void validate(final List values)
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,144,throws InvalidArgumentException {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,145,// for each value
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,146,for (final ListIterator i = values.listIterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,147,final String value = (String) i.next();
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,149,Date date = null;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,151,// create a resuable ParsePosition instance
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,152,final ParsePosition pp = new ParsePosition(0);
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,154,// for each permitted DateFormat
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,155,for (int f = 0; (f < this.formats.length) && (date == null); ++f) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,156,// reset the parse position
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,157,pp.setIndex(0);
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,158,"date = this.formats[f].parse(value, pp);"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,160,// if the wrong number of characters have been parsed
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,161,if (pp.getIndex() < value.length()) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,162,date = null;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,166,// if date has not been set throw an InvalidArgumentException
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,167,if (date == null) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,168,throw new InvalidArgumentException(value);
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,171,// if the date is outside the bounds
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,172,if (isDateEarlier(date) || isDateLater(date)) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,173,"throw new InvalidArgumentException(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,"
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,174,value));
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,177,// replace the value in the list with the actual Date
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,178,i.set(date);
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,183,* Sets whether this validator uses lenient parsing.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,185,* @param lenient whether this validator uses lenient parsing
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,187,public void setLenient(final boolean lenient) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,188,for (int i = 0; i < this.formats.length; i++) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,189,this.formats[i].setLenient(lenient);
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,192,this.isLenient = lenient;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,196,* Returns whether this validator uses lenient parsing.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,198,* @return whether this validator uses lenient parsing
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,200,public boolean isLenient() {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,201,return this.isLenient;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,205,* Returns the maximum date permitted.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,207,* @return Date the maximum date permitted. If no maximum date has been
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,208,*         specified then return <code>null</code>.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,210,public Date getMaximum() {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,211,return maximum;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,215,* Sets the maximum Date to the specified value.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,217,* @param maximum
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,218,*            the maximum Date permitted
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,220,public void setMaximum(final Date maximum) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,221,this.maximum = maximum;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,225,* Returns the minimum date permitted.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,227,* @return Date the minimum date permitted. If no minimum date has been
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,228,*         specified then return <code>null</code>.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,230,public Date getMinimum() {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,231,return minimum;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,235,* Sets the minimum Date to the specified value.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,237,* @param minimum
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,238,*            the minimum Date permitted
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,240,public void setMinimum(Date minimum) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,241,this.minimum = minimum;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,245,* Returns whether the specified Date is later than the maximum date.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,247,* @param date
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,248,*            the Date to evaluate
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,250,* @return boolean whether <code>date</code> is earlier than the maximum
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,251,*         date
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,253,private boolean isDateLater(Date date) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,254,return (maximum != null) && (date.getTime() > maximum.getTime());
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,258,* Returns whether the specified Date is earlier than the minimum date.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,260,* @param date
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,261,*            the Date to evaluate
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,263,* @return boolean whether <code>date</code> is earlier than the minimum
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,264,*         date
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,266,private boolean isDateEarlier(Date date) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,267,return (minimum != null) && (date.getTime() < minimum.getTime());
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,271,* Sets the date format permitted.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,273,* @param format
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,274,*              the format to use
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,276,public void setFormat(final DateFormat format) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,277,setFormats(new DateFormat[] { format });
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,281,* Sets the date formats permitted.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,283,* @param formats
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,284,*               the List of DateFormats to use
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,286,public void setFormats(final List formats) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,287,setFormats((DateFormat[]) formats.toArray(new DateFormat[formats.size()]));
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,291,* Sets the date formats permitted.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,293,* @param formats
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,294,*               the array of DateFormats to use
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,296,public void setFormats(final DateFormat[] formats) {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,297,this.formats = formats;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,298,setLenient(this.isLenient);
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,302,* Gets the date formats permitted.
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,304,* @return the permitted formats
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,306,public DateFormat[] getFormats() {
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,307,return this.formats;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.Iterator;import java.util.List;import java.util.Set;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>EnumValidator</code> validates the string argument * values are valid. * * The following example shows how to limit the valid values * for the color argument to 'red', 'green', or 'blue'. * * <pre> * Set values = new HashSet(); * values.add(""red""); * values.add(""green""); * values.add(""blue""); * ... * ArgumentBuilder builder = new ArgumentBuilder(); * Argument color = *     builder.withName(""color""); *            .withValidator(new EnumValidator(values)); * </pre> * * @author John Keyes */public class EnumValidator implements Validator {    /** List of permitted values */    private Set validValues;    /**     * Creates a new EnumValidator for the specified values.     *     * @param values The list of permitted values     */    public EnumValidator(final Set values) {        setValidValues(values);    }    /**     * Validate the list of values against the list of permitted values.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        for (final Iterator iter = values.iterator(); iter.hasNext();) {            final String value = (String) iter.next();            if (!this.validValues.contains(value)) {                throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ENUM_ILLEGAL_VALUE,                                                                                                 new Object[] {                                                                                                     value,                                                                                                     getValuesAsString()                                                                                                 }));            }        }    }    /**     * Returns the permitted values in a comma separated String     *     * @return String formatted list of values     */    String getValuesAsString() {        final StringBuffer buff = new StringBuffer();        buff.append(""["");        for (final Iterator iter = this.validValues.iterator(); iter.hasNext();) {            buff.append(""'"").append(iter.next()).append(""'"");            if (iter.hasNext()) {                buff.append("", "");            }        }        buff.append(""]"");        return buff.toString();    }    /**     * Returns the Set of valid argument values.     *     * @return Returns the Set of valid argument values.     */    public Set getValidValues() {        return validValues;    }    /**     * Specifies the Set of valid argument values.     *     * @param validValues The Set of valid argument values.     */    protected void setValidValues(Set validValues) {        this.validValues = validValues;    }}"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,18,package org.apache.commons.cli2.validation;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,20,import java.util.Iterator;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,21,import java.util.List;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,22,import java.util.Set;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,24,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,25,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,28,* The <code>EnumValidator</code> validates the string argument
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,29,* values are valid.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,31,* The following example shows how to limit the valid values
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,32,"* for the color argument to 'red', 'green', or 'blue'."
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,34,* <pre>
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,35,* Set values = new HashSet();
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,36,"* values.add(""red"");"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,37,"* values.add(""green"");"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,38,"* values.add(""blue"");"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,40,* ArgumentBuilder builder = new ArgumentBuilder();
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,41,* Argument color =
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,42,"*     builder.withName(""color"");"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,43,*            .withValidator(new EnumValidator(values));
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,44,* </pre>
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,46,* @author John Keyes
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,48,public class EnumValidator implements Validator {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,49,/** List of permitted values */
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,50,private Set validValues;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,53,* Creates a new EnumValidator for the specified values.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,55,* @param values The list of permitted values
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,57,public EnumValidator(final Set values) {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,58,setValidValues(values);
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,62,* Validate the list of values against the list of permitted values.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,64,* @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,66,public void validate(final List values)
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,67,throws InvalidArgumentException {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,68,for (final Iterator iter = values.iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,69,final String value = (String) iter.next();
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,71,if (!this.validValues.contains(value)) {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,72,"throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ENUM_ILLEGAL_VALUE,"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,73,new Object[] {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,74,"value,"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,75,getValuesAsString()
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,82,* Returns the permitted values in a comma separated String
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,84,* @return String formatted list of values
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,86,String getValuesAsString() {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,87,final StringBuffer buff = new StringBuffer();
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,89,"buff.append(""["");"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,91,for (final Iterator iter = this.validValues.iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,92,"buff.append(""'"").append(iter.next()).append(""'"");"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,94,if (iter.hasNext()) {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,95,"buff.append("", "");"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,99,"buff.append(""]"");"
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,101,return buff.toString();
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,105,* Returns the Set of valid argument values.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,107,* @return Returns the Set of valid argument values.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,109,public Set getValidValues() {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,110,return validValues;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,114,* Specifies the Set of valid argument values.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,116,* @param validValues The Set of valid argument values.
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,118,protected void setValidValues(Set validValues) {
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,119,this.validValues = validValues;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.io.File;import java.util.List;import java.util.ListIterator;/** * The <code>FileValidator</code> validates the string argument * values are files.  If the value is a file, the string value in * the {@link java.util.List} of values is replaced with the * {@link java.io.File} instance. * * The following attributes can also be specified using the * appropriate settors: * <ul> *  <li>writable</li> *  <li>readable</li> *  <li>hidden</li> *  <li>existing</li> *  <li>is a file</li> *  <li>is a directory</li> * </ul> * * The following example shows how to limit the valid values * for the config attribute to files that are readable, writeable, * and that already existing. * * <pre> * ... * ArgumentBuilder builder = new ArgumentBuilder(); * FileValidator validator = FileValidator.getExistingFileInstance(); * validator.setReadable(true); * validator.setWritable(true); * * Argument age = *     builder.withName(""config""); *            .withValidator(validator); * </pre> * * @author Rob Oxspring * @author John Keyes */public class FileValidator implements Validator {    /**     * Returns a <code>FileValidator</code> for existing files/directories.     *     * @return a <code>FileValidator</code> for existing files/directories.     */    public static FileValidator getExistingInstance() {        final FileValidator validator = new FileValidator();        validator.setExisting(true);        return validator;    }    /**     * Returns a <code>FileValidator</code> for existing files.     *     * @return a <code>FileValidator</code> for existing files.     */    public static FileValidator getExistingFileInstance() {        final FileValidator validator = new FileValidator();        validator.setExisting(true);        validator.setFile(true);        return validator;    }    /**     * Returns a <code>FileValidator</code> for existing directories.     *     * @return a <code>FileValidator</code> for existing directories.     */    public static FileValidator getExistingDirectoryInstance() {        final FileValidator validator = new FileValidator();        validator.setExisting(true);        validator.setDirectory(true);        return validator;    }    /** whether the argument value is readable */    private boolean readable = false;    /** whether the argument value is writable */    private boolean writable = false;    /** whether the argument value exists */    private boolean existing = false;    /** whether the argument value is a directory */    private boolean directory = false;    /** whether the argument value is a file */    private boolean file = false;    /** whether the argument value is a hidden file or directory */    private boolean hidden = false;    /**     * Validate the list of values against the list of permitted values.     * If a value is valid, replace the string in the <code>values</code>     * {@link java.util.List} with the {@link java.io.File} instance.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values) throws InvalidArgumentException {        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String name = (String)i.next();            final File f = new File(name);            if ((existing && !f.exists())                || (file && !f.isFile())                || (directory && !f.isDirectory())                || (hidden && !f.isHidden())                || (readable && !f.canRead())                || (writable && !f.canWrite())) {                throw new InvalidArgumentException(name);            }            i.set(f);        }    }    /**     * Returns whether the argument values must represent directories.     *     * @return whether the argument values must represent directories.     */    public boolean isDirectory() {        return directory;    }    /**     * Specifies whether the argument values must represent directories.     *     * @param directory specifies whether the argument values must     * represent directories.     */    public void setDirectory(boolean directory) {        this.directory = directory;    }    /**     * Returns whether the argument values must represent existing     * files/directories.     *     * @return whether the argument values must represent existing     * files/directories.     */    public boolean isExisting() {        return existing;    }    /**     * Specifies whether the argument values must represent existing     * files/directories.     *     * @param existing specifies whether the argument values must     * represent existing files/directories.     */    public void setExisting(boolean existing) {        this.existing = existing;    }    /**     * Returns whether the argument values must represent directories.     *     * @return whether the argument values must represent directories.     */    public boolean isFile() {        return file;    }    /**     * Specifies whether the argument values must represent files.     *     * @param file specifies whether the argument values must     * represent files.     */    public void setFile(boolean file) {        this.file = file;    }    /**     * Returns whether the argument values must represent hidden     * files/directories.     *     * @return whether the argument values must represent hidden     * files/directories.     */    public boolean isHidden() {        return hidden;    }    /**     * Specifies whether the argument values must represent hidden     * files/directories.     *     * @param hidden specifies whether the argument values must     * represent hidden files/directories.     */    public void setHidden(boolean hidden) {        this.hidden = hidden;    }    /**     * Returns whether the argument values must represent readable     * files/directories.     *     * @return whether the argument values must represent readable     * files/directories.     */    public boolean isReadable() {        return readable;    }    /**     * Specifies whether the argument values must represent readable     * files/directories.     *     * @param readable specifies whether the argument values must     * represent readable files/directories.     */    public void setReadable(boolean readable) {        this.readable = readable;    }    /**     * Returns whether the argument values must represent writable     * files/directories.     *     * @return whether the argument values must represent writable     * files/directories.     */    public boolean isWritable() {        return writable;    }    /**     * Specifies whether the argument values must represent writable     * files/directories.     *     * @param writable specifies whether the argument values must     * represent writable files/directories.     */    public void setWritable(boolean writable) {        this.writable = writable;    }}"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,18,package org.apache.commons.cli2.validation;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,20,import java.io.File;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,21,import java.util.List;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,22,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,25,* The <code>FileValidator</code> validates the string argument
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,26,"* values are files.  If the value is a file, the string value in"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,27,* the {@link java.util.List} of values is replaced with the
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,28,* {@link java.io.File} instance.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,30,* The following attributes can also be specified using the
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,31,* appropriate settors:
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,32,* <ul>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,33,*  <li>writable</li>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,34,*  <li>readable</li>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,35,*  <li>hidden</li>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,36,*  <li>existing</li>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,37,*  <li>is a file</li>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,38,*  <li>is a directory</li>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,39,* </ul>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,41,* The following example shows how to limit the valid values
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,42,"* for the config attribute to files that are readable, writeable,"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,43,* and that already existing.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,45,* <pre>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,47,* ArgumentBuilder builder = new ArgumentBuilder();
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,48,* FileValidator validator = FileValidator.getExistingFileInstance();
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,49,* validator.setReadable(true);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,50,* validator.setWritable(true);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,52,* Argument age =
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,53,"*     builder.withName(""config"");"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,54,*            .withValidator(validator);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,55,* </pre>
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,57,* @author Rob Oxspring
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,58,* @author John Keyes
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,60,public class FileValidator implements Validator {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,63,* Returns a <code>FileValidator</code> for existing files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,65,* @return a <code>FileValidator</code> for existing files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,67,public static FileValidator getExistingInstance() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,68,final FileValidator validator = new FileValidator();
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,69,validator.setExisting(true);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,70,return validator;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,74,* Returns a <code>FileValidator</code> for existing files.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,76,* @return a <code>FileValidator</code> for existing files.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,78,public static FileValidator getExistingFileInstance() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,79,final FileValidator validator = new FileValidator();
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,80,validator.setExisting(true);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,81,validator.setFile(true);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,82,return validator;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,86,* Returns a <code>FileValidator</code> for existing directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,88,* @return a <code>FileValidator</code> for existing directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,90,public static FileValidator getExistingDirectoryInstance() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,91,final FileValidator validator = new FileValidator();
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,92,validator.setExisting(true);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,93,validator.setDirectory(true);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,94,return validator;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,97,/** whether the argument value is readable */
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,98,private boolean readable = false;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,100,/** whether the argument value is writable */
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,101,private boolean writable = false;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,103,/** whether the argument value exists */
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,104,private boolean existing = false;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,106,/** whether the argument value is a directory */
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,107,private boolean directory = false;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,109,/** whether the argument value is a file */
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,110,private boolean file = false;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,112,/** whether the argument value is a hidden file or directory */
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,113,private boolean hidden = false;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,116,* Validate the list of values against the list of permitted values.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,117,"* If a value is valid, replace the string in the <code>values</code>"
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,118,* {@link java.util.List} with the {@link java.io.File} instance.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,120,* @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,122,public void validate(final List values) throws InvalidArgumentException {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,123,for (final ListIterator i = values.listIterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,124,final String name = (String)i.next();
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,125,final File f = new File(name);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,127,if ((existing && !f.exists())
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,128,|| (file && !f.isFile())
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,129,|| (directory && !f.isDirectory())
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,130,|| (hidden && !f.isHidden())
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,131,|| (readable && !f.canRead())
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,132,|| (writable && !f.canWrite())) {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,134,throw new InvalidArgumentException(name);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,137,i.set(f);
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,142,* Returns whether the argument values must represent directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,144,* @return whether the argument values must represent directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,146,public boolean isDirectory() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,147,return directory;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,151,* Specifies whether the argument values must represent directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,153,* @param directory specifies whether the argument values must
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,154,* represent directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,156,public void setDirectory(boolean directory) {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,157,this.directory = directory;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,161,* Returns whether the argument values must represent existing
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,162,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,164,* @return whether the argument values must represent existing
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,165,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,167,public boolean isExisting() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,168,return existing;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,172,* Specifies whether the argument values must represent existing
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,173,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,175,* @param existing specifies whether the argument values must
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,176,* represent existing files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,178,public void setExisting(boolean existing) {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,179,this.existing = existing;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,183,* Returns whether the argument values must represent directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,185,* @return whether the argument values must represent directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,187,public boolean isFile() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,188,return file;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,192,* Specifies whether the argument values must represent files.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,194,* @param file specifies whether the argument values must
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,195,* represent files.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,197,public void setFile(boolean file) {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,198,this.file = file;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,202,* Returns whether the argument values must represent hidden
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,203,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,205,* @return whether the argument values must represent hidden
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,206,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,208,public boolean isHidden() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,209,return hidden;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,213,* Specifies whether the argument values must represent hidden
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,214,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,216,* @param hidden specifies whether the argument values must
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,217,* represent hidden files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,219,public void setHidden(boolean hidden) {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,220,this.hidden = hidden;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,224,* Returns whether the argument values must represent readable
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,225,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,227,* @return whether the argument values must represent readable
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,228,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,230,public boolean isReadable() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,231,return readable;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,235,* Specifies whether the argument values must represent readable
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,236,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,238,* @param readable specifies whether the argument values must
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,239,* represent readable files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,241,public void setReadable(boolean readable) {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,242,this.readable = readable;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,246,* Returns whether the argument values must represent writable
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,247,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,249,* @return whether the argument values must represent writable
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,250,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,252,public boolean isWritable() {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,253,return writable;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,257,* Specifies whether the argument values must represent writable
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,258,* files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,260,* @param writable specifies whether the argument values must
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,261,* represent writable files/directories.
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,263,public void setWritable(boolean writable) {
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,264,this.writable = writable;
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;/** * An exception indicating validation failure. * * @author Rob Oxspring * @author John Keyes */public class InvalidArgumentException extends Exception {    /**     * Creates a new exception     * @param message the reason for failure     */    public InvalidArgumentException(final String message) {        super(message);    }}"
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,18,package org.apache.commons.cli2.validation;
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,21,* An exception indicating validation failure.
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,23,* @author Rob Oxspring
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,24,* @author John Keyes
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,26,public class InvalidArgumentException extends Exception {
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,29,* Creates a new exception
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,30,* @param message the reason for failure
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,32,public InvalidArgumentException(final String message) {
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,33,super(message);
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.text.NumberFormat;import java.text.ParsePosition;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>NumberValidator</code> validates the string argument * values are numbers.  If the value is a number, the string value in * the {@link java.util.List} of values is replaced with the * {@link java.lang.Number} instance. * * A maximum and minimum value can also be specified using * the {@link #setMaximum setMaximum}, and the * {@link #setMinimum setMinimum} methods. * * The following example shows how to limit the valid values * for the age attribute to integers less than 100. * * <pre> * ... * ArgumentBuilder builder = new ArgumentBuilder(); * NumberValidator validator = NumberValidator.getIntegerInstance(); * validator.setMaximum(new Integer(100)); * * Argument age = *     builder.withName(""age""); *            .withValidator(validator); * </pre> * * @author Rob Oxspring * @author John Keyes */public class NumberValidator implements Validator {    /** the <code>NumberFormat</code> being used. */    private NumberFormat format;    /** the lower bound for argument values. */    private Number minimum = null;    /** the upper bound for argument values */    private Number maximum = null;    /**     * Creates a new NumberValidator based on the specified NumberFormat     * @param format the format of numbers to accept     */    public NumberValidator(final NumberFormat format) {        setFormat(format);    }    /**     * Returns a <code>NumberValidator</code> for a currency format     * for the current default locale.     * @return a <code>NumberValidator</code> for a currency format     * for the current default locale.     */    public static NumberValidator getCurrencyInstance() {        return new NumberValidator(NumberFormat.getCurrencyInstance());    }    /**     * Returns a <code>NumberValidator</code> for an integer number format     * for the current default locale.     * @return a <code>NumberValidator</code> for an integer number format     * for the current default locale.     */    public static NumberValidator getIntegerInstance() {        final NumberFormat format = NumberFormat.getNumberInstance();        format.setParseIntegerOnly(true);        return new NumberValidator(format);    }    /**     * Returns a <code>NumberValidator</code> for a percentage format     * for the current default locale.     * @return a <code>NumberValidator</code> for a percentage format     * for the current default locale.     */    public static NumberValidator getPercentInstance() {        return new NumberValidator(NumberFormat.getPercentInstance());    }    /**     * Returns a <code>NumberValidator</code> for a general-purpose     * number format for the current default locale.     * @return a <code>NumberValidator</code> for a general-purpose     * number format for the current default locale.     */    public static NumberValidator getNumberInstance() {        return new NumberValidator(NumberFormat.getNumberInstance());    }    /**     * Validate the list of values against the list of permitted values.     * If a value is valid, replace the string in the <code>values</code>     * {@link java.util.List} with the {@link java.lang.Number} instance.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String value = (String) i.next();            final ParsePosition pp = new ParsePosition(0);            final Number number = format.parse(value, pp);            if (pp.getIndex() < value.length()) {                throw new InvalidArgumentException(value);            }            if (((minimum != null) && (number.doubleValue() < minimum.doubleValue())) ||                    ((maximum != null) && (number.doubleValue() > maximum.doubleValue()))) {                throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,                                                                                                 new Object[] {                                                                                                     value                                                                                                 }));            }            i.set(number);        }    }    /**     * Return the format being used to validate argument values against.     *     * @return the format being used to validate argument values against.     */    public NumberFormat getFormat() {        return format;    }    /**     * Specify the format being used to validate argument values against.     *     * @param format the format being used to validate argument values against.     */    protected void setFormat(NumberFormat format) {        this.format = format;    }    /**     * Return the maximum value allowed for an argument value.     *     * @return the maximum value allowed for an argument value.     */    public Number getMaximum() {        return maximum;    }    /**     * Specify the maximum value allowed for an argument value.     *     * @param maximum the maximum value allowed for an argument value.     */    public void setMaximum(Number maximum) {        this.maximum = maximum;    }    /**     * Return the minimum value allowed for an argument value.     *     * @return the minimum value allowed for an argument value.     */    public Number getMinimum() {        return minimum;    }    /**     * Specify the minimum value allowed for an argument value.     *     * @param minimum the minimum value allowed for an argument value.     */    public void setMinimum(Number minimum) {        this.minimum = minimum;    }}"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,18,package org.apache.commons.cli2.validation;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,20,import java.text.NumberFormat;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,21,import java.text.ParsePosition;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,23,import java.util.List;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,24,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,26,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,27,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,30,* The <code>NumberValidator</code> validates the string argument
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,31,"* values are numbers.  If the value is a number, the string value in"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,32,* the {@link java.util.List} of values is replaced with the
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,33,* {@link java.lang.Number} instance.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,35,* A maximum and minimum value can also be specified using
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,36,"* the {@link #setMaximum setMaximum}, and the"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,37,* {@link #setMinimum setMinimum} methods.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,39,* The following example shows how to limit the valid values
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,40,* for the age attribute to integers less than 100.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,42,* <pre>
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,44,* ArgumentBuilder builder = new ArgumentBuilder();
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,45,* NumberValidator validator = NumberValidator.getIntegerInstance();
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,46,* validator.setMaximum(new Integer(100));
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,48,* Argument age =
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,49,"*     builder.withName(""age"");"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,50,*            .withValidator(validator);
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,51,* </pre>
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,53,* @author Rob Oxspring
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,54,* @author John Keyes
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,56,public class NumberValidator implements Validator {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,57,/** the <code>NumberFormat</code> being used. */
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,58,private NumberFormat format;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,60,/** the lower bound for argument values. */
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,61,private Number minimum = null;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,63,/** the upper bound for argument values */
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,64,private Number maximum = null;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,67,* Creates a new NumberValidator based on the specified NumberFormat
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,68,* @param format the format of numbers to accept
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,70,public NumberValidator(final NumberFormat format) {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,71,setFormat(format);
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,75,* Returns a <code>NumberValidator</code> for a currency format
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,76,* for the current default locale.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,77,* @return a <code>NumberValidator</code> for a currency format
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,78,* for the current default locale.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,80,public static NumberValidator getCurrencyInstance() {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,81,return new NumberValidator(NumberFormat.getCurrencyInstance());
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,85,* Returns a <code>NumberValidator</code> for an integer number format
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,86,* for the current default locale.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,87,* @return a <code>NumberValidator</code> for an integer number format
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,88,* for the current default locale.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,90,public static NumberValidator getIntegerInstance() {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,91,final NumberFormat format = NumberFormat.getNumberInstance();
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,92,format.setParseIntegerOnly(true);
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,94,return new NumberValidator(format);
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,98,* Returns a <code>NumberValidator</code> for a percentage format
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,99,* for the current default locale.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,100,* @return a <code>NumberValidator</code> for a percentage format
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,101,* for the current default locale.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,103,public static NumberValidator getPercentInstance() {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,104,return new NumberValidator(NumberFormat.getPercentInstance());
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,108,* Returns a <code>NumberValidator</code> for a general-purpose
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,109,* number format for the current default locale.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,110,* @return a <code>NumberValidator</code> for a general-purpose
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,111,* number format for the current default locale.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,113,public static NumberValidator getNumberInstance() {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,114,return new NumberValidator(NumberFormat.getNumberInstance());
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,118,* Validate the list of values against the list of permitted values.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,119,"* If a value is valid, replace the string in the <code>values</code>"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,120,* {@link java.util.List} with the {@link java.lang.Number} instance.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,122,* @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,124,public void validate(final List values)
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,125,throws InvalidArgumentException {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,126,for (final ListIterator i = values.listIterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,127,final String value = (String) i.next();
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,129,final ParsePosition pp = new ParsePosition(0);
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,130,"final Number number = format.parse(value, pp);"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,132,if (pp.getIndex() < value.length()) {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,133,throw new InvalidArgumentException(value);
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,136,if (((minimum != null) && (number.doubleValue() < minimum.doubleValue())) ||
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,137,((maximum != null) && (number.doubleValue() > maximum.doubleValue()))) {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,138,"throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,"
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,139,new Object[] {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,140,value
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,144,i.set(number);
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,149,* Return the format being used to validate argument values against.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,151,* @return the format being used to validate argument values against.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,153,public NumberFormat getFormat() {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,154,return format;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,158,* Specify the format being used to validate argument values against.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,160,* @param format the format being used to validate argument values against.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,162,protected void setFormat(NumberFormat format) {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,163,this.format = format;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,167,* Return the maximum value allowed for an argument value.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,169,* @return the maximum value allowed for an argument value.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,171,public Number getMaximum() {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,172,return maximum;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,176,* Specify the maximum value allowed for an argument value.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,178,* @param maximum the maximum value allowed for an argument value.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,180,public void setMaximum(Number maximum) {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,181,this.maximum = maximum;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,185,* Return the minimum value allowed for an argument value.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,187,* @return the minimum value allowed for an argument value.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,189,public Number getMinimum() {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,190,return minimum;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,194,* Specify the minimum value allowed for an argument value.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,196,* @param minimum the minimum value allowed for an argument value.
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,198,public void setMinimum(Number minimum) {
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,199,this.minimum = minimum;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.net.MalformedURLException;import java.net.URL;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>UrlValidator</code> validates the string argument * values are URLs.  If the value is a URL, the string value in * the {@link java.util.List} of values is replaced with the * {@link java.net.URL} instance. * * URLs can also be validated based on their scheme by using * the {@link #setProtocol setProtocol} method, or by using the specified * {@link #UrlValidator(java.lang.String) constructor}. * * The following example shows how to limit the valid values * for the site argument to 'https' URLs. * * <pre> * ... * ArgumentBuilder builder = new ArgumentBuilder(); * Argument site = *     builder.withName(""site""); *            .withValidator(new URLValidator(""https"")); * </pre> * * @author Rob Oxspring * @author John Keyes */public class UrlValidator implements Validator {    /** allowed protocol */    private String protocol = null;    /**     * Creates a UrlValidator.     */    public UrlValidator() {    }    /**     * Creates a UrlValidator for the specified protocol.     */    public UrlValidator(final String protocol) {        setProtocol(protocol);    }    /**     * Validate the list of values against the list of permitted values.     * If a value is valid, replace the string in the <code>values</code>     * {@link java.util.List} with the { java.net.URL} instance.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String name = (String) i.next();            try {                final URL url = new URL(name);                if ((protocol != null) && !protocol.equals(url.getProtocol())) {                    throw new InvalidArgumentException(name);                }                i.set(url);            } catch (final MalformedURLException mue) {                throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.URLVALIDATOR_MALFORMED_URL,                                                                                                 new Object[] {                                                                                                     name                                                                                                 }));            }        }    }    /**     * Returns the protocol that must be used by a valid URL.     *     * @return the protocol that must be used by a valid URL.     */    public String getProtocol() {        return protocol;    }    /**     * Specifies the protocol that a URL must have to be valid.     *     * @param protocol the protocol that a URL must have to be valid.     */    public void setProtocol(String protocol) {        this.protocol = protocol;    }}"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,18,package org.apache.commons.cli2.validation;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,20,import java.net.MalformedURLException;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,21,import java.net.URL;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,23,import java.util.List;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,24,import java.util.ListIterator;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,26,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,27,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,30,* The <code>UrlValidator</code> validates the string argument
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,31,"* values are URLs.  If the value is a URL, the string value in"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,32,* the {@link java.util.List} of values is replaced with the
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,33,* {@link java.net.URL} instance.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,35,* URLs can also be validated based on their scheme by using
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,36,"* the {@link #setProtocol setProtocol} method, or by using the specified"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,37,* {@link #UrlValidator(java.lang.String) constructor}.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,39,* The following example shows how to limit the valid values
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,40,* for the site argument to 'https' URLs.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,42,* <pre>
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,44,* ArgumentBuilder builder = new ArgumentBuilder();
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,45,* Argument site =
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,46,"*     builder.withName(""site"");"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,47,"*            .withValidator(new URLValidator(""https""));"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,48,* </pre>
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,50,* @author Rob Oxspring
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,51,* @author John Keyes
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,53,public class UrlValidator implements Validator {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,54,/** allowed protocol */
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,55,private String protocol = null;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,58,* Creates a UrlValidator.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,60,public UrlValidator() {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,64,* Creates a UrlValidator for the specified protocol.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,66,public UrlValidator(final String protocol) {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,67,setProtocol(protocol);
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,71,* Validate the list of values against the list of permitted values.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,72,"* If a value is valid, replace the string in the <code>values</code>"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,73,* {@link java.util.List} with the { java.net.URL} instance.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,75,* @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,77,public void validate(final List values)
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,78,throws InvalidArgumentException {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,79,for (final ListIterator i = values.listIterator(); i.hasNext();) {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,80,final String name = (String) i.next();
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,82,try {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,83,final URL url = new URL(name);
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,85,if ((protocol != null) && !protocol.equals(url.getProtocol())) {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,86,throw new InvalidArgumentException(name);
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,89,i.set(url);
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,90,} catch (final MalformedURLException mue) {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,91,"throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.URLVALIDATOR_MALFORMED_URL,"
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,92,new Object[] {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,93,name
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,100,* Returns the protocol that must be used by a valid URL.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,102,* @return the protocol that must be used by a valid URL.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,104,public String getProtocol() {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,105,return protocol;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,109,* Specifies the protocol that a URL must have to be valid.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,111,* @param protocol the protocol that a URL must have to be valid.
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,113,public void setProtocol(String protocol) {
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,114,this.protocol = protocol;
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.List;/** * The validation interface for validating argument values(s). * * A validator can replace the argument string value with a * specific class instance e.g. the {@link UrlValidator} replaces * the string value with a {@link java.net.URL} instance. * * @author Rob Oxspring * @author John Keyes */public interface Validator {    /**     * Validate the specified values (List of Strings).     *     * @param values The values to validate.     *     * @throws InvalidArgumentException If any of the     * specified values are not valid.     */    void validate(final List values) throws InvalidArgumentException;}"
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,5,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,8,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,15,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,16,* limitations under the License.
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,18,package org.apache.commons.cli2.validation;
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,20,import java.util.List;
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,23,* The validation interface for validating argument values(s).
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,25,* A validator can replace the argument string value with a
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,26,* specific class instance e.g. the {@link UrlValidator} replaces
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,27,* the string value with a {@link java.net.URL} instance.
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,29,* @author Rob Oxspring
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,30,* @author John Keyes
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,32,public interface Validator {
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,35,* Validate the specified values (List of Strings).
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,37,* @param values The values to validate.
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,39,* @throws InvalidArgumentException If any of the
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,40,* specified values are not valid.
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,42,void validate(final List values) throws InvalidArgumentException;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Arrays;import java.util.Collection;import java.util.Collections;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import junit.framework.TestCase;public abstract class CLITestCase extends TestCase {	public static List list() {	    return Collections.EMPTY_LIST;	}	public static List list(final Object args[]) {	    return new LinkedList(Arrays.asList(args));	}	public static List list(final Object arg0) {	    return list(new Object[] { arg0 });	}	public static List list(final Object arg0, final Object arg1) {	    return list(new Object[] { arg0, arg1 });	}	public static List list(final Object arg0, final Object arg1, final Object arg2) {	    return list(new Object[] { arg0, arg1, arg2 });	}	public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3) {	    return list(new Object[] { arg0, arg1, arg2, arg3 });	}	public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3, final Object arg4) {	    return list(new Object[] { arg0, arg1, arg2, arg3, arg4 });	}	public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3, final Object arg4, final Object arg5) {	    return list(new Object[] { arg0, arg1, arg2, arg3, arg4, arg5 });	}	public static void assertListContentsEqual(final List expected, final List found) {	    final Iterator e = expected.iterator();	    final Iterator f = found.iterator();	    while (e.hasNext() && f.hasNext()) {	        assertEquals(e.next(), f.next());	    }	    if (e.hasNext()) {	        fail(""Expected more elements"");	    }	    if (f.hasNext()) {	        fail(""Found more elements"");	    }	}	public static void assertContentsEqual(final Collection expected, final Collection found) {	    assertTrue(expected.containsAll(found));	    assertTrue(found.containsAll(expected));	    assertEquals(expected.size(), found.size());	}}"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,18,package org.apache.commons.cli2;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,21,import java.util.Collection;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,22,import java.util.Collections;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,23,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,24,import java.util.LinkedList;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,25,import java.util.List;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,29,public abstract class CLITestCase extends TestCase {
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,31,public static List list() {
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,32,return Collections.EMPTY_LIST;
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,35,public static List list(final Object args[]) {
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,36,return new LinkedList(Arrays.asList(args));
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,39,public static List list(final Object arg0) {
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,40,return list(new Object[] { arg0 });
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,43,"public static List list(final Object arg0, final Object arg1) {"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,44,"return list(new Object[] { arg0, arg1 });"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,47,"public static List list(final Object arg0, final Object arg1, final Object arg2) {"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,48,"return list(new Object[] { arg0, arg1, arg2 });"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,51,"public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3) {"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,52,"return list(new Object[] { arg0, arg1, arg2, arg3 });"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,55,"public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3, final Object arg4) {"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,56,"return list(new Object[] { arg0, arg1, arg2, arg3, arg4 });"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,59,"public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3, final Object arg4, final Object arg5) {"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,60,"return list(new Object[] { arg0, arg1, arg2, arg3, arg4, arg5 });"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,63,"public static void assertListContentsEqual(final List expected, final List found) {"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,65,final Iterator e = expected.iterator();
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,66,final Iterator f = found.iterator();
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,68,while (e.hasNext() && f.hasNext()) {
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,69,"assertEquals(e.next(), f.next());"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,72,if (e.hasNext()) {
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,73,"fail(""Expected more elements"");"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,76,if (f.hasNext()) {
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,77,"fail(""Found more elements"");"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,81,"public static void assertContentsEqual(final Collection expected, final Collection found) {"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,82,assertTrue(expected.containsAll(found));
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,83,assertTrue(found.containsAll(expected));
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,84,"assertEquals(expected.size(), found.size());"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Arrays;import java.util.Collections;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.SwitchBuilder;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * Tests the interaction of command line values and defaults supplied in different ways. * * Tests marked _Parsed involve values parsed from a command line. * * Tests marked _Method involve defaults supplied in the query method. * * Tests marked _Option involce defaults specified in the model. * * @author Rob Oxspring */public class CommandLineDefaultsTest extends TestCase {    /*     * utils to grab the default from the method     */    private Object methodSwitch(WriteableCommandLine cl, Option o, Boolean bool) {        return cl.getSwitch(o, bool);    }    private Object methodSwitchNull(WriteableCommandLine cl, Option o) {        return methodSwitch(cl, o, null);    }    private Object methodSwitchOff(WriteableCommandLine cl, Option o) {        return methodSwitch(cl, o, Boolean.FALSE);    }    private Object methodSwitchOn(WriteableCommandLine cl, Option o) {        return methodSwitch(cl, o, Boolean.TRUE);    }    private Object methodValueMissing(WriteableCommandLine cl, Option o) {        return cl.getValue(o);    }    private Object methodValuePresent(WriteableCommandLine cl, Option o) {        return cl.getValue(o, ""method"");    }    /*     * utils to grab the default from the option model     */    private Option optionSwitch(Boolean bool) {        return new SwitchBuilder().withName(""switch"").withSwitchDefault(bool)                .create();    }    private Option optionSwitchNull() {        return optionSwitch(null);    }    private Option optionSwitchOff() {        return optionSwitch(Boolean.FALSE);    }    private Option optionSwitchOn() {        return optionSwitch(Boolean.TRUE);    }    private Option optionValueMissing() {        return new ArgumentBuilder().create();    }    private Option optionValuePresent() {        return new ArgumentBuilder().withDefaults(                Arrays.asList(new String[] { ""option"" })).create();    }    /*     * utils to grab the input from the command line     */    private WriteableCommandLine parsedSwitch(Option o, Boolean bool) {        final List args;        if (bool == null) {            args = Collections.EMPTY_LIST;        } else {            args = Collections                    .singletonList(String.valueOf(bool).toLowerCase());        }        WriteableCommandLine cl = new WriteableCommandLineImpl(o, args);        o.defaults(cl);        if (bool != null) {            cl.addSwitch(o, bool.booleanValue());        }        return cl;    }    private WriteableCommandLine parsedSwitchNull(Option o) {        return parsedSwitch(o, null);    }    private WriteableCommandLine parsedSwitchOn(Option o) {        return parsedSwitch(o, Boolean.TRUE);    }    private WriteableCommandLine parsedValueMissing(Option o) {        WriteableCommandLine cl = new WriteableCommandLineImpl(o,                Collections.EMPTY_LIST);        o.defaults(cl);        return cl;    }    private WriteableCommandLine parsedValuePresent(Option o) {        WriteableCommandLine cl = new WriteableCommandLineImpl(o, Arrays                .asList(new String[] { ""parsed"" }));        o.defaults(cl);        cl.addValue(o, ""parsed"");        return cl;    }    /*     * tests     */    public void testSwitch_Method() {        final Option o = optionSwitchNull();        final WriteableCommandLine cl = parsedSwitchNull(o);        final Object v = methodSwitchOn(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Method_Option() {        final Option o = optionSwitchOff();        final WriteableCommandLine cl = parsedSwitchNull(o);        final Object v = methodSwitchOn(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Option() {        final Option o = optionSwitchOn();        final WriteableCommandLine cl = parsedSwitchNull(o);        final Object v = methodSwitchNull(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Parsed() {        final Option o = optionSwitchNull();        final WriteableCommandLine cl = parsedSwitchOn(o);        final Object v = methodSwitchNull(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Parsed_Method() {        final Option o = optionSwitchOff();        final WriteableCommandLine cl = parsedSwitchOn(o);        final Object v = methodSwitchNull(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Parsed_Method_Option() {        final Option o = optionSwitchOff();        final WriteableCommandLine cl = parsedSwitchOn(o);        final Object v = methodSwitchOff(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Parsed_Option() {        final Option o = optionSwitchOff();        final WriteableCommandLine cl = parsedSwitchOn(o);        final Object v = methodSwitchNull(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testValues() {        final Option o = optionValueMissing();        final WriteableCommandLine cl = parsedValueMissing(o);        final Object v = methodValueMissing(cl, o);        assertNull(v);    }    public void testValues_Method() {        final Option o = optionValueMissing();        final WriteableCommandLine cl = parsedValueMissing(o);        final Object v = methodValuePresent(cl, o);        assertEquals(""method"", v);    }    public void testValues_Method_Option() {        final Option o = optionValuePresent();        final WriteableCommandLine cl = parsedValueMissing(o);        final Object v = methodValuePresent(cl, o);        assertEquals(""method"", v);    }    public void testValues_Option() {        final Option o = optionValuePresent();        final WriteableCommandLine cl = parsedValueMissing(o);        final Object v = methodValueMissing(cl, o);        assertEquals(""option"", v);    }    public void testValues_Parsed() {        final Option o = optionValueMissing();        final WriteableCommandLine cl = parsedValuePresent(o);        final Object v = methodValueMissing(cl, o);        assertEquals(""parsed"", v);    }    public void testValues_Parsed_Method() {        final Option o = optionValueMissing();        final WriteableCommandLine cl = parsedValuePresent(o);        final Object v = methodValuePresent(cl, o);        assertEquals(""parsed"", v);    }    public void testValues_Parsed_Method_Option() {        final Option o = optionValuePresent();        final WriteableCommandLine cl = parsedValuePresent(o);        final Object v = methodValuePresent(cl, o);        assertEquals(""parsed"", v);    }    public void testValues_Parsed_Option() {        final Option o = optionValuePresent();        final WriteableCommandLine cl = parsedValuePresent(o);        final Object v = methodValueMissing(cl, o);        assertEquals(""parsed"", v);    }}"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,18,package org.apache.commons.cli2;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,21,import java.util.Collections;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,22,import java.util.List;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,26,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,27,import org.apache.commons.cli2.builder.SwitchBuilder;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,28,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,31,* Tests the interaction of command line values and defaults supplied in different ways.
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,33,* Tests marked _Parsed involve values parsed from a command line.
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,35,* Tests marked _Method involve defaults supplied in the query method.
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,37,* Tests marked _Option involce defaults specified in the model.
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,39,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,41,public class CommandLineDefaultsTest extends TestCase {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,44,* utils to grab the default from the method
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,47,"private Object methodSwitch(WriteableCommandLine cl, Option o, Boolean bool) {"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,48,"return cl.getSwitch(o, bool);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,51,"private Object methodSwitchNull(WriteableCommandLine cl, Option o) {"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,52,"return methodSwitch(cl, o, null);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,55,"private Object methodSwitchOff(WriteableCommandLine cl, Option o) {"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,56,"return methodSwitch(cl, o, Boolean.FALSE);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,59,"private Object methodSwitchOn(WriteableCommandLine cl, Option o) {"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,60,"return methodSwitch(cl, o, Boolean.TRUE);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,63,"private Object methodValueMissing(WriteableCommandLine cl, Option o) {"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,64,return cl.getValue(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,67,"private Object methodValuePresent(WriteableCommandLine cl, Option o) {"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,68,"return cl.getValue(o, ""method"");"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,72,* utils to grab the default from the option model
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,75,private Option optionSwitch(Boolean bool) {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,76,"return new SwitchBuilder().withName(""switch"").withSwitchDefault(bool)"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,77,.create();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,80,private Option optionSwitchNull() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,81,return optionSwitch(null);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,84,private Option optionSwitchOff() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,85,return optionSwitch(Boolean.FALSE);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,88,private Option optionSwitchOn() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,89,return optionSwitch(Boolean.TRUE);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,92,private Option optionValueMissing() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,93,return new ArgumentBuilder().create();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,96,private Option optionValuePresent() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,97,return new ArgumentBuilder().withDefaults(
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,98,"Arrays.asList(new String[] { ""option"" })).create();"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,102,* utils to grab the input from the command line
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,105,"private WriteableCommandLine parsedSwitch(Option o, Boolean bool) {"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,106,final List args;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,107,if (bool == null) {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,108,args = Collections.EMPTY_LIST;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,109,} else {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,110,args = Collections
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,111,.singletonList(String.valueOf(bool).toLowerCase());
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,113,"WriteableCommandLine cl = new WriteableCommandLineImpl(o, args);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,114,o.defaults(cl);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,115,if (bool != null) {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,116,"cl.addSwitch(o, bool.booleanValue());"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,118,return cl;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,121,private WriteableCommandLine parsedSwitchNull(Option o) {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,122,"return parsedSwitch(o, null);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,125,private WriteableCommandLine parsedSwitchOn(Option o) {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,126,"return parsedSwitch(o, Boolean.TRUE);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,129,private WriteableCommandLine parsedValueMissing(Option o) {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,130,"WriteableCommandLine cl = new WriteableCommandLineImpl(o,"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,131,Collections.EMPTY_LIST);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,132,o.defaults(cl);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,133,return cl;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,136,private WriteableCommandLine parsedValuePresent(Option o) {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,137,"WriteableCommandLine cl = new WriteableCommandLineImpl(o, Arrays"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,138,".asList(new String[] { ""parsed"" }));"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,139,o.defaults(cl);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,140,"cl.addValue(o, ""parsed"");"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,141,return cl;
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,145,* tests
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,148,public void testSwitch_Method() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,149,final Option o = optionSwitchNull();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,150,final WriteableCommandLine cl = parsedSwitchNull(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,151,"final Object v = methodSwitchOn(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,152,"assertEquals(Boolean.TRUE, v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,155,public void testSwitch_Method_Option() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,156,final Option o = optionSwitchOff();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,157,final WriteableCommandLine cl = parsedSwitchNull(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,158,"final Object v = methodSwitchOn(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,159,"assertEquals(Boolean.TRUE, v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,162,public void testSwitch_Option() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,163,final Option o = optionSwitchOn();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,164,final WriteableCommandLine cl = parsedSwitchNull(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,165,"final Object v = methodSwitchNull(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,166,"assertEquals(Boolean.TRUE, v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,169,public void testSwitch_Parsed() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,170,final Option o = optionSwitchNull();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,171,final WriteableCommandLine cl = parsedSwitchOn(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,172,"final Object v = methodSwitchNull(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,173,"assertEquals(Boolean.TRUE, v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,176,public void testSwitch_Parsed_Method() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,177,final Option o = optionSwitchOff();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,178,final WriteableCommandLine cl = parsedSwitchOn(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,179,"final Object v = methodSwitchNull(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,180,"assertEquals(Boolean.TRUE, v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,183,public void testSwitch_Parsed_Method_Option() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,184,final Option o = optionSwitchOff();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,185,final WriteableCommandLine cl = parsedSwitchOn(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,186,"final Object v = methodSwitchOff(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,187,"assertEquals(Boolean.TRUE, v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,190,public void testSwitch_Parsed_Option() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,191,final Option o = optionSwitchOff();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,192,final WriteableCommandLine cl = parsedSwitchOn(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,193,"final Object v = methodSwitchNull(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,194,"assertEquals(Boolean.TRUE, v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,197,public void testValues() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,198,final Option o = optionValueMissing();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,199,final WriteableCommandLine cl = parsedValueMissing(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,200,"final Object v = methodValueMissing(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,201,assertNull(v);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,204,public void testValues_Method() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,205,final Option o = optionValueMissing();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,206,final WriteableCommandLine cl = parsedValueMissing(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,207,"final Object v = methodValuePresent(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,208,"assertEquals(""method"", v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,211,public void testValues_Method_Option() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,212,final Option o = optionValuePresent();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,213,final WriteableCommandLine cl = parsedValueMissing(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,214,"final Object v = methodValuePresent(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,215,"assertEquals(""method"", v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,218,public void testValues_Option() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,219,final Option o = optionValuePresent();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,220,final WriteableCommandLine cl = parsedValueMissing(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,221,"final Object v = methodValueMissing(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,222,"assertEquals(""option"", v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,225,public void testValues_Parsed() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,226,final Option o = optionValueMissing();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,227,final WriteableCommandLine cl = parsedValuePresent(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,228,"final Object v = methodValueMissing(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,229,"assertEquals(""parsed"", v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,232,public void testValues_Parsed_Method() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,233,final Option o = optionValueMissing();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,234,final WriteableCommandLine cl = parsedValuePresent(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,235,"final Object v = methodValuePresent(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,236,"assertEquals(""parsed"", v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,239,public void testValues_Parsed_Method_Option() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,240,final Option o = optionValuePresent();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,241,final WriteableCommandLine cl = parsedValuePresent(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,242,"final Object v = methodValuePresent(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,243,"assertEquals(""parsed"", v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,246,public void testValues_Parsed_Option() {
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,247,final Option o = optionValuePresent();
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,248,final WriteableCommandLine cl = parsedValuePresent(o);
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,249,"final Object v = methodValueMissing(cl, o);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,250,"assertEquals(""parsed"", v);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Collections;import java.util.Iterator;import java.util.List;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.ArgumentTest;import org.apache.commons.cli2.option.CommandTest;import org.apache.commons.cli2.option.DefaultOptionTest;import org.apache.commons.cli2.option.OptionTestCase;import org.apache.commons.cli2.option.PropertyOption;import org.apache.commons.cli2.option.SwitchTest;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public abstract class CommandLineTestCase    extends CLITestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    public final Option present =        new DefaultOptionBuilder().withLongName(""present"").withLongName(""alsopresent"").create();    public final Option missing = new DefaultOptionBuilder().withLongName(""missing"").create();    public final Option multiple = new DefaultOptionBuilder().withLongName(""multiple"").create();    public final Option bool = new DefaultOptionBuilder().withLongName(""bool"").create();    public final Option root =        new GroupBuilder().withOption(present).withOption(missing).withOption(multiple)                          .withOption(bool).create();    private CommandLine commandLine;    protected abstract CommandLine createCommandLine();    /*     * @see TestCase#setUp()     */    public void setUp()        throws Exception {        super.setUp();        commandLine = createCommandLine();    }    /*     * Class to test for boolean hasOption(String)     */    public final void testHasOptionString() {        assertTrue(commandLine.hasOption(""--present""));        assertTrue(commandLine.hasOption(""--alsopresent""));        assertFalse(commandLine.hasOption(""--missing""));    }    /*     * Class to test for boolean hasOption(Option)     */    public final void testHasOptionOption() {        assertTrue(commandLine.hasOption(present));        assertFalse(commandLine.hasOption(missing));    }    public final void testGetOption() {        assertSame(present, commandLine.getOption(""--present""));        assertSame(present, commandLine.getOption(""--alsopresent""));        //TODO decide whether the following assertion is valid        //assertSame(missing,commandLine.getOption(""--missing""));    }    /*     * Class to test for List getValues(String)     */    public final void testGetValuesString() {        assertListContentsEqual(list(""present value""), commandLine.getValues(""--present""));        assertListContentsEqual(list(""value 1"", ""value 2"", ""value 3""),                                commandLine.getValues(""--multiple""));        assertTrue(commandLine.getValues(""--missing"").isEmpty());    }    /*     * Class to test for List getValues(String, List)     */    public final void testGetValuesStringList() {        assertListContentsEqual(list(""present value""), commandLine.getValues(""--present"", null));        assertListContentsEqual(list(""present value""), commandLine.getValues(""--alsopresent"", null));        assertSame(commandLine.getValues(""--missing"", Collections.EMPTY_LIST),                   Collections.EMPTY_LIST);        final List def = Collections.singletonList(""default value"");        assertSame(def, commandLine.getValues(""--missing"", def));    }    /*     * Class to test for List getValues(Option)     */    public final void testGetValuesOption() {        assertListContentsEqual(list(""present value""), commandLine.getValues(present));        assertTrue(commandLine.getValues(missing).isEmpty());    }    /*     * Class to test for List getValues(Option, List)     */    public final void testGetValuesOptionList() {        assertListContentsEqual(list(""present value""), commandLine.getValues(present));        assertSame(commandLine.getValues(missing, Collections.EMPTY_LIST), Collections.EMPTY_LIST);        final List defs = Collections.singletonList(""custom default"");        assertSame(defs, commandLine.getValues(missing, defs));    }    /*     * Class to test for Object getValue(String)     */    public final void testGetValueString() {        assertEquals(""present value"", commandLine.getValue(""--present""));        assertEquals(""present value"", commandLine.getValue(""--alsopresent""));        assertNull(commandLine.getValue(""--missing""));        try {            commandLine.getValue(""--multiple"");            fail(""expected IllegalStateException"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         e.getMessage());        }    }    /*     * Class to test for Object getValue(String, Object)     */    public final void testGetValueStringObject() {        assertEquals(""present value"", commandLine.getValue(""--present"", ""default value""));        assertEquals(""present value"", commandLine.getValue(""--alsopresent"", ""default value""));        assertEquals(""default value"", commandLine.getValue(""--missing"", ""default value""));        try {            commandLine.getValue(""--multiple"");            fail(""expected IllegalStateException"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         e.getMessage());        }    }    /*     * Class to test for Object getValue(Option)     */    public final void testGetValueOption() {        assertEquals(""present value"", commandLine.getValue(present));        assertNull(commandLine.getValue(missing));        try {            commandLine.getValue(multiple);            fail(""expected IllegalStateException"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         e.getMessage());        }    }    /*     * Class to test for Object getValue(Option, Object)     */    public final void testGetValueOptionObject() {        assertEquals(""present value"", commandLine.getValue(present, ""default value""));        assertEquals(""default value"", commandLine.getValue(missing, ""default value""));        try {            commandLine.getValue(multiple);            fail(""expected IllegalStateException"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         e.getMessage());        }    }    /*     * Class to test for Boolean getSwitch(String)     */    public final void testGetSwitchString() {        assertEquals(Boolean.TRUE, commandLine.getSwitch(""--bool""));        assertNull(commandLine.getSwitch(""--missing""));    }    /*     * Class to test for Boolean getSwitch(String, Boolean)     */    public final void testGetSwitchStringBoolean() {        assertEquals(Boolean.TRUE, commandLine.getSwitch(""--bool"", Boolean.FALSE));        assertEquals(Boolean.FALSE, commandLine.getSwitch(""--missing"", Boolean.FALSE));    }    /*     * Class to test for Boolean getSwitch(Option)     */    public final void testGetSwitchOption() {        assertEquals(Boolean.TRUE, commandLine.getSwitch(bool));        assertNull(commandLine.getSwitch(missing));    }    /*     * Class to test for Boolean getSwitch(Option, Boolean)     */    public final void testGetSwitchOptionBoolean() {        assertEquals(Boolean.TRUE, commandLine.getSwitch(bool, Boolean.FALSE));        assertEquals(Boolean.FALSE, commandLine.getSwitch(missing, Boolean.FALSE));    }    /*     * Class to test for String getProperty(String)     */    public final void testGetPropertyString() {        assertEquals(""present property"", commandLine.getProperty(""present""));        assertNull(commandLine.getProperty(""missing""));    }    /*     * Class to test for String getProperty(String, String)     */    public final void testGetPropertyStringString() {        assertEquals(""present property"", commandLine.getProperty(""present"", ""default property""));        assertEquals(""default property"", commandLine.getProperty(""missing"", ""default property""));    }    public final void testGetProperties() {        assertTrue(commandLine.getProperties().containsAll(list(""present"")));    }    /*     * Class to test for int getOptionCount(String)     */    public final void testGetOptionCountString() {        // one option, one switch        assertTrue(1 <= commandLine.getOptionCount(""--present""));        assertTrue(1 <= commandLine.getOptionCount(""--bool""));        assertEquals(0, commandLine.getOptionCount(""--missing""));    }    /*     * Class to test for int getOptionCount(Option)     */    public final void testGetOptionCountOption() {        // one option, one switch        assertTrue(1 <= commandLine.getOptionCount(present));        assertTrue(1 <= commandLine.getOptionCount(bool));        assertEquals(0, commandLine.getOptionCount(missing));    }    public final void testGetOptions() {        //TODO Implement getOptions().    }    public final void testGetOptionTriggers() {        //TODO Implement getOptionTriggers().    }    // OLD TESTS FOLLOW    public final void testProperties() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        assertTrue(writeable.getProperties().isEmpty());        writeable.addProperty(""myprop"", ""myval"");        assertEquals(1, writeable.getProperties().size());        assertEquals(""myval"", writeable.getProperty(""myprop""));        writeable.addProperty(""myprop"", ""myval2"");        assertEquals(1, writeable.getProperties().size());        assertEquals(""myval2"", writeable.getProperty(""myprop""));        writeable.addProperty(""myprop2"", ""myval3"");        assertEquals(2, writeable.getProperties().size());        assertEquals(""myval3"", writeable.getProperty(""myprop2""));    }    public final void testOptions() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        assertFalse(writeable.hasOption(start));        assertFalse(writeable.hasOption(""start""));        assertFalse(writeable.hasOption(""go""));        writeable.addOption(start);        assertTrue(writeable.hasOption(start));        assertTrue(writeable.hasOption(""start""));        assertTrue(writeable.hasOption(""go""));    }    public final void testValues() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        assertNull(writeable.getValue(start));        assertTrue(writeable.getValues(start).isEmpty());        writeable.addOption(start);        assertTrue(writeable.getValues(start).isEmpty());        writeable.addValue(start, ""file1"");        assertEquals(""file1"", writeable.getValue(start));        assertEquals(""file1"", writeable.getValue(""start""));        assertEquals(""file1"", writeable.getValue(""go""));        assertEquals(1, writeable.getValues(start).size());        assertEquals(1, writeable.getValues(""start"").size());        assertEquals(1, writeable.getValues(""go"").size());        assertTrue(writeable.getValues(start).contains(""file1""));        assertTrue(writeable.getValues(""start"").contains(""file1""));        assertTrue(writeable.getValues(""go"").contains(""file1""));        writeable.addValue(start, ""file2"");        try {            writeable.getValue(start);            fail(""Cannot get single value if multiple are present"");        } catch (IllegalStateException ise) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         ise.getMessage());        }        try {            writeable.getValue(""start"");            fail(""Cannot get single value if multiple are present"");        } catch (IllegalStateException ise) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         ise.getMessage());        }        writeable.getValues(start).add(""file3"");    }    public final void testSwitches() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        assertNull(writeable.getSwitch(start));        assertNull(writeable.getSwitch(""start""));        assertNull(writeable.getSwitch(""go""));        writeable.addSwitch(start, true);        try {            writeable.addSwitch(start, false);            fail(""Switch cannot be changed"");        } catch (IllegalStateException ise) {            assertEquals(resources.getMessage(ResourceConstants.SWITCH_ALREADY_SET),                         ise.getMessage());        }    }    public final void testSwitches_True() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        writeable.addSwitch(start, true);        assertSame(Boolean.TRUE, writeable.getSwitch(start));    }    public final void testSwitches_False() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        writeable.addSwitch(start, false);        assertSame(Boolean.FALSE, writeable.getSwitch(start));    }    //    public final void testLooksLikeOption() {    //        final Option option = new PropertyOption();    //        final List args = OptionTestCase.list();    //        final WriteableCommandLine commandLine =    //            OptionTestCase.commandLine(option, args);    //    //        assertTrue(commandLine.looksLikeOption(""-D""));    //        assertFalse(commandLine.looksLikeOption(""--help""));    //        assertFalse(commandLine.looksLikeOption(""+display""));    //        assertFalse(commandLine.looksLikeOption(""myprefix""));    //        assertFalse(commandLine.looksLikeOption(""myprefix2""));    //        assertFalse(commandLine.looksLikeOption(""myprefference""));    //        assertFalse(commandLine.looksLikeOption(""/SCANDISK""));    //        assertFalse(commandLine.looksLikeOption(""update""));    //    }    public final void testGetOptions_Order()        throws OptionException {        final Option help = DefaultOptionTest.buildHelpOption();        final Option login = CommandTest.buildLoginCommand();        final Option targets = ArgumentTest.buildTargetsArgument();        final Group group =            new GroupBuilder().withOption(help).withOption(login).withOption(targets).create();        final Parser parser = new Parser();        parser.setGroup(group);        final CommandLine cl =            parser.parse(new String[] { ""login"", ""rob"", ""--help"", ""target1"", ""target2"" });        final Iterator i = cl.getOptions().iterator();        assertSame(login, i.next());        assertSame(help, i.next());        assertSame(targets, i.next());        assertSame(targets, i.next());        assertFalse(i.hasNext());    }    public final void testGetOptionCount()        throws OptionException {        final Option help = DefaultOptionTest.buildHelpOption();        final Option login = CommandTest.buildLoginCommand();        final Option targets = ArgumentTest.buildTargetsArgument();        final Option display = SwitchTest.buildDisplaySwitch();        final Group group =            new GroupBuilder().withOption(help).withOption(login).withOption(targets)                              .withOption(display).create();        final Parser parser = new Parser();        parser.setGroup(group);        final CommandLine cl =            parser.parse(new String[] {                             ""--help"", ""login"", ""rob"", ""+display"", ""--help"", ""--help"", ""target1"",                             ""target2""                         });        assertEquals(1, cl.getOptionCount(login));        assertEquals(3, cl.getOptionCount(help));        assertEquals(2, cl.getOptionCount(targets));        assertEquals(1, cl.getOptionCount(display));    }    public final void testGetOptionCount_Strings()        throws OptionException {        final Option help = DefaultOptionTest.buildHelpOption();        final Option login = CommandTest.buildLoginCommand();        final Option targets = ArgumentTest.buildTargetsArgument();        final Option display = SwitchTest.buildDisplaySwitch();        final Group group =            new GroupBuilder().withOption(help).withOption(login).withOption(targets)                              .withOption(display).create();        final Parser parser = new Parser();        parser.setGroup(group);        final CommandLine cl =            parser.parse(new String[] {                             ""--help"", ""login"", ""rob"", ""+display"", ""--help"", ""--help"", ""target1"",                             ""target2""                         });        assertEquals(1, cl.getOptionCount(""login""));        assertEquals(3, cl.getOptionCount(""-?""));        assertEquals(1, cl.getOptionCount(""+display""));    }    public final void testOptionAsArgument()        throws OptionException {        final Option p = new DefaultOptionBuilder().withShortName(""p"").create();        final Argument argument = new ArgumentBuilder().create();        final Option withArgument =            new DefaultOptionBuilder().withShortName(""attr"").withArgument(argument).create();        final Group group = new GroupBuilder().withOption(p).withOption(withArgument).create();        final Parser parser = new Parser();        parser.setGroup(group);        final CommandLine cl = parser.parse(new String[] { ""-p"", ""-attr"", ""p"" });        assertEquals(1, cl.getOptionCount(""-p""));        assertTrue(cl.hasOption(""-p""));        assertTrue(cl.hasOption(""-attr""));        assertTrue(cl.getValue(""-attr"").equals(""p""));    }}"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,18,package org.apache.commons.cli2;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,20,import java.util.Collections;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,21,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,22,import java.util.List;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,24,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,25,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,26,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,27,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,28,import org.apache.commons.cli2.option.ArgumentTest;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,29,import org.apache.commons.cli2.option.CommandTest;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,30,import org.apache.commons.cli2.option.DefaultOptionTest;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,31,import org.apache.commons.cli2.option.OptionTestCase;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,32,import org.apache.commons.cli2.option.PropertyOption;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,33,import org.apache.commons.cli2.option.SwitchTest;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,34,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,35,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,37,public abstract class CommandLineTestCase
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,38,extends CLITestCase {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,39,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,40,public final Option present =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,41,"new DefaultOptionBuilder().withLongName(""present"").withLongName(""alsopresent"").create();"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,42,"public final Option missing = new DefaultOptionBuilder().withLongName(""missing"").create();"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,43,"public final Option multiple = new DefaultOptionBuilder().withLongName(""multiple"").create();"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,44,"public final Option bool = new DefaultOptionBuilder().withLongName(""bool"").create();"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,45,public final Option root =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,46,new GroupBuilder().withOption(present).withOption(missing).withOption(multiple)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,47,.withOption(bool).create();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,48,private CommandLine commandLine;
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,50,protected abstract CommandLine createCommandLine();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,53,* @see TestCase#setUp()
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,55,public void setUp()
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,56,throws Exception {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,57,super.setUp();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,58,commandLine = createCommandLine();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,62,* Class to test for boolean hasOption(String)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,64,public final void testHasOptionString() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,65,"assertTrue(commandLine.hasOption(""--present""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,66,"assertTrue(commandLine.hasOption(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,67,"assertFalse(commandLine.hasOption(""--missing""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,71,* Class to test for boolean hasOption(Option)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,73,public final void testHasOptionOption() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,74,assertTrue(commandLine.hasOption(present));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,75,assertFalse(commandLine.hasOption(missing));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,78,public final void testGetOption() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,79,"assertSame(present, commandLine.getOption(""--present""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,80,"assertSame(present, commandLine.getOption(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,82,//TODO decide whether the following assertion is valid
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,83,"//assertSame(missing,commandLine.getOption(""--missing""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,87,* Class to test for List getValues(String)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,89,public final void testGetValuesString() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,90,"assertListContentsEqual(list(""present value""), commandLine.getValues(""--present""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,91,"assertListContentsEqual(list(""value 1"", ""value 2"", ""value 3""),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,92,"commandLine.getValues(""--multiple""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,93,"assertTrue(commandLine.getValues(""--missing"").isEmpty());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,97,"* Class to test for List getValues(String, List)"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,99,public final void testGetValuesStringList() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,100,"assertListContentsEqual(list(""present value""), commandLine.getValues(""--present"", null));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,101,"assertListContentsEqual(list(""present value""), commandLine.getValues(""--alsopresent"", null));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,102,"assertSame(commandLine.getValues(""--missing"", Collections.EMPTY_LIST),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,103,Collections.EMPTY_LIST);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,105,"final List def = Collections.singletonList(""default value"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,106,"assertSame(def, commandLine.getValues(""--missing"", def));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,110,* Class to test for List getValues(Option)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,112,public final void testGetValuesOption() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,113,"assertListContentsEqual(list(""present value""), commandLine.getValues(present));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,114,assertTrue(commandLine.getValues(missing).isEmpty());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,118,"* Class to test for List getValues(Option, List)"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,120,public final void testGetValuesOptionList() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,121,"assertListContentsEqual(list(""present value""), commandLine.getValues(present));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,122,"assertSame(commandLine.getValues(missing, Collections.EMPTY_LIST), Collections.EMPTY_LIST);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,124,"final List defs = Collections.singletonList(""custom default"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,125,"assertSame(defs, commandLine.getValues(missing, defs));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,129,* Class to test for Object getValue(String)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,131,public final void testGetValueString() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,132,"assertEquals(""present value"", commandLine.getValue(""--present""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,133,"assertEquals(""present value"", commandLine.getValue(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,134,"assertNull(commandLine.getValue(""--missing""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,136,try {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,137,"commandLine.getValue(""--multiple"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,138,"fail(""expected IllegalStateException"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,139,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,140,"assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,141,e.getMessage());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,146,"* Class to test for Object getValue(String, Object)"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,148,public final void testGetValueStringObject() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,149,"assertEquals(""present value"", commandLine.getValue(""--present"", ""default value""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,150,"assertEquals(""present value"", commandLine.getValue(""--alsopresent"", ""default value""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,151,"assertEquals(""default value"", commandLine.getValue(""--missing"", ""default value""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,153,try {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,154,"commandLine.getValue(""--multiple"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,155,"fail(""expected IllegalStateException"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,156,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,157,"assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,158,e.getMessage());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,163,* Class to test for Object getValue(Option)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,165,public final void testGetValueOption() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,166,"assertEquals(""present value"", commandLine.getValue(present));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,167,assertNull(commandLine.getValue(missing));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,169,try {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,170,commandLine.getValue(multiple);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,171,"fail(""expected IllegalStateException"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,172,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,173,"assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,174,e.getMessage());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,179,"* Class to test for Object getValue(Option, Object)"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,181,public final void testGetValueOptionObject() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,182,"assertEquals(""present value"", commandLine.getValue(present, ""default value""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,183,"assertEquals(""default value"", commandLine.getValue(missing, ""default value""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,185,try {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,186,commandLine.getValue(multiple);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,187,"fail(""expected IllegalStateException"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,188,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,189,"assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,190,e.getMessage());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,195,* Class to test for Boolean getSwitch(String)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,197,public final void testGetSwitchString() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,198,"assertEquals(Boolean.TRUE, commandLine.getSwitch(""--bool""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,199,"assertNull(commandLine.getSwitch(""--missing""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,203,"* Class to test for Boolean getSwitch(String, Boolean)"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,205,public final void testGetSwitchStringBoolean() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,206,"assertEquals(Boolean.TRUE, commandLine.getSwitch(""--bool"", Boolean.FALSE));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,207,"assertEquals(Boolean.FALSE, commandLine.getSwitch(""--missing"", Boolean.FALSE));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,211,* Class to test for Boolean getSwitch(Option)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,213,public final void testGetSwitchOption() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,214,"assertEquals(Boolean.TRUE, commandLine.getSwitch(bool));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,215,assertNull(commandLine.getSwitch(missing));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,219,"* Class to test for Boolean getSwitch(Option, Boolean)"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,221,public final void testGetSwitchOptionBoolean() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,222,"assertEquals(Boolean.TRUE, commandLine.getSwitch(bool, Boolean.FALSE));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,223,"assertEquals(Boolean.FALSE, commandLine.getSwitch(missing, Boolean.FALSE));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,227,* Class to test for String getProperty(String)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,229,public final void testGetPropertyString() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,230,"assertEquals(""present property"", commandLine.getProperty(""present""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,231,"assertNull(commandLine.getProperty(""missing""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,235,"* Class to test for String getProperty(String, String)"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,237,public final void testGetPropertyStringString() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,238,"assertEquals(""present property"", commandLine.getProperty(""present"", ""default property""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,239,"assertEquals(""default property"", commandLine.getProperty(""missing"", ""default property""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,242,public final void testGetProperties() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,243,"assertTrue(commandLine.getProperties().containsAll(list(""present"")));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,247,* Class to test for int getOptionCount(String)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,249,public final void testGetOptionCountString() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,250,"// one option, one switch"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,251,"assertTrue(1 <= commandLine.getOptionCount(""--present""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,252,"assertTrue(1 <= commandLine.getOptionCount(""--bool""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,253,"assertEquals(0, commandLine.getOptionCount(""--missing""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,257,* Class to test for int getOptionCount(Option)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,259,public final void testGetOptionCountOption() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,260,"// one option, one switch"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,261,assertTrue(1 <= commandLine.getOptionCount(present));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,262,assertTrue(1 <= commandLine.getOptionCount(bool));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,263,"assertEquals(0, commandLine.getOptionCount(missing));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,266,public final void testGetOptions() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,267,//TODO Implement getOptions().
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,270,public final void testGetOptionTriggers() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,271,//TODO Implement getOptionTriggers().
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,274,// OLD TESTS FOLLOW
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,275,public final void testProperties() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,276,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,277,final List args = CLITestCase.list();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,278,"final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,280,assertTrue(writeable.getProperties().isEmpty());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,282,"writeable.addProperty(""myprop"", ""myval"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,283,"assertEquals(1, writeable.getProperties().size());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,284,"assertEquals(""myval"", writeable.getProperty(""myprop""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,286,"writeable.addProperty(""myprop"", ""myval2"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,287,"assertEquals(1, writeable.getProperties().size());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,288,"assertEquals(""myval2"", writeable.getProperty(""myprop""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,290,"writeable.addProperty(""myprop2"", ""myval3"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,291,"assertEquals(2, writeable.getProperties().size());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,292,"assertEquals(""myval3"", writeable.getProperty(""myprop2""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,295,public final void testOptions() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,296,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,297,final List args = CLITestCase.list();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,298,"final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,300,final Option start = CommandTest.buildStartCommand();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,302,assertFalse(writeable.hasOption(start));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,303,"assertFalse(writeable.hasOption(""start""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,304,"assertFalse(writeable.hasOption(""go""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,306,writeable.addOption(start);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,308,assertTrue(writeable.hasOption(start));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,309,"assertTrue(writeable.hasOption(""start""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,310,"assertTrue(writeable.hasOption(""go""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,313,public final void testValues() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,314,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,315,final List args = CLITestCase.list();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,316,"final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,318,final Option start = CommandTest.buildStartCommand();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,320,assertNull(writeable.getValue(start));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,321,assertTrue(writeable.getValues(start).isEmpty());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,323,writeable.addOption(start);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,325,assertTrue(writeable.getValues(start).isEmpty());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,327,"writeable.addValue(start, ""file1"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,329,"assertEquals(""file1"", writeable.getValue(start));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,330,"assertEquals(""file1"", writeable.getValue(""start""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,331,"assertEquals(""file1"", writeable.getValue(""go""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,332,"assertEquals(1, writeable.getValues(start).size());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,333,"assertEquals(1, writeable.getValues(""start"").size());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,334,"assertEquals(1, writeable.getValues(""go"").size());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,335,"assertTrue(writeable.getValues(start).contains(""file1""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,336,"assertTrue(writeable.getValues(""start"").contains(""file1""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,337,"assertTrue(writeable.getValues(""go"").contains(""file1""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,339,"writeable.addValue(start, ""file2"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,341,try {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,342,writeable.getValue(start);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,343,"fail(""Cannot get single value if multiple are present"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,344,} catch (IllegalStateException ise) {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,345,"assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,346,ise.getMessage());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,349,try {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,350,"writeable.getValue(""start"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,351,"fail(""Cannot get single value if multiple are present"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,352,} catch (IllegalStateException ise) {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,353,"assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,354,ise.getMessage());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,357,"writeable.getValues(start).add(""file3"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,360,public final void testSwitches() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,361,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,362,final List args = CLITestCase.list();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,363,"final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,365,final Option start = CommandTest.buildStartCommand();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,367,assertNull(writeable.getSwitch(start));
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,368,"assertNull(writeable.getSwitch(""start""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,369,"assertNull(writeable.getSwitch(""go""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,371,"writeable.addSwitch(start, true);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,373,try {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,374,"writeable.addSwitch(start, false);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,375,"fail(""Switch cannot be changed"");"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,376,} catch (IllegalStateException ise) {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,377,"assertEquals(resources.getMessage(ResourceConstants.SWITCH_ALREADY_SET),"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,378,ise.getMessage());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,382,public final void testSwitches_True() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,383,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,384,final List args = CLITestCase.list();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,385,"final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,387,final Option start = CommandTest.buildStartCommand();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,389,"writeable.addSwitch(start, true);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,390,"assertSame(Boolean.TRUE, writeable.getSwitch(start));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,393,public final void testSwitches_False() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,394,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,395,final List args = CLITestCase.list();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,396,"final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,398,final Option start = CommandTest.buildStartCommand();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,400,"writeable.addSwitch(start, false);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,401,"assertSame(Boolean.FALSE, writeable.getSwitch(start));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,404,//    public final void testLooksLikeOption() {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,405,//        final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,406,//        final List args = OptionTestCase.list();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,407,//        final WriteableCommandLine commandLine =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,408,"//            OptionTestCase.commandLine(option, args);"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,410,"//        assertTrue(commandLine.looksLikeOption(""-D""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,411,"//        assertFalse(commandLine.looksLikeOption(""--help""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,412,"//        assertFalse(commandLine.looksLikeOption(""+display""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,413,"//        assertFalse(commandLine.looksLikeOption(""myprefix""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,414,"//        assertFalse(commandLine.looksLikeOption(""myprefix2""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,415,"//        assertFalse(commandLine.looksLikeOption(""myprefference""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,416,"//        assertFalse(commandLine.looksLikeOption(""/SCANDISK""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,417,"//        assertFalse(commandLine.looksLikeOption(""update""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,419,public final void testGetOptions_Order()
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,420,throws OptionException {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,421,final Option help = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,422,final Option login = CommandTest.buildLoginCommand();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,423,final Option targets = ArgumentTest.buildTargetsArgument();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,425,final Group group =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,426,new GroupBuilder().withOption(help).withOption(login).withOption(targets).create();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,428,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,429,parser.setGroup(group);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,431,final CommandLine cl =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,432,"parser.parse(new String[] { ""login"", ""rob"", ""--help"", ""target1"", ""target2"" });"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,434,final Iterator i = cl.getOptions().iterator();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,436,"assertSame(login, i.next());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,437,"assertSame(help, i.next());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,438,"assertSame(targets, i.next());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,439,"assertSame(targets, i.next());"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,440,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,443,public final void testGetOptionCount()
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,444,throws OptionException {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,445,final Option help = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,446,final Option login = CommandTest.buildLoginCommand();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,447,final Option targets = ArgumentTest.buildTargetsArgument();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,448,final Option display = SwitchTest.buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,450,final Group group =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,451,new GroupBuilder().withOption(help).withOption(login).withOption(targets)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,452,.withOption(display).create();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,454,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,455,parser.setGroup(group);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,457,final CommandLine cl =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,458,parser.parse(new String[] {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,459,"""--help"", ""login"", ""rob"", ""+display"", ""--help"", ""--help"", ""target1"","
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,460,"""target2"""
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,463,"assertEquals(1, cl.getOptionCount(login));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,464,"assertEquals(3, cl.getOptionCount(help));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,465,"assertEquals(2, cl.getOptionCount(targets));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,466,"assertEquals(1, cl.getOptionCount(display));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,469,public final void testGetOptionCount_Strings()
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,470,throws OptionException {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,471,final Option help = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,472,final Option login = CommandTest.buildLoginCommand();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,473,final Option targets = ArgumentTest.buildTargetsArgument();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,474,final Option display = SwitchTest.buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,476,final Group group =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,477,new GroupBuilder().withOption(help).withOption(login).withOption(targets)
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,478,.withOption(display).create();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,480,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,481,parser.setGroup(group);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,483,final CommandLine cl =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,484,parser.parse(new String[] {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,485,"""--help"", ""login"", ""rob"", ""+display"", ""--help"", ""--help"", ""target1"","
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,486,"""target2"""
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,489,"assertEquals(1, cl.getOptionCount(""login""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,490,"assertEquals(3, cl.getOptionCount(""-?""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,491,"assertEquals(1, cl.getOptionCount(""+display""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,494,public final void testOptionAsArgument()
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,495,throws OptionException {
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,496,"final Option p = new DefaultOptionBuilder().withShortName(""p"").create();"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,497,final Argument argument = new ArgumentBuilder().create();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,498,final Option withArgument =
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,499,"new DefaultOptionBuilder().withShortName(""attr"").withArgument(argument).create();"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,501,final Group group = new GroupBuilder().withOption(p).withOption(withArgument).create();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,503,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,504,parser.setGroup(group);
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,506,"final CommandLine cl = parser.parse(new String[] { ""-p"", ""-attr"", ""p"" });"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,508,"assertEquals(1, cl.getOptionCount(""-p""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,509,"assertTrue(cl.hasOption(""-p""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,510,"assertTrue(cl.hasOption(""-attr""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,511,"assertTrue(cl.getValue(""-attr"").equals(""p""));"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.io.IOException;import java.io.PrintWriter;import java.io.StringWriter;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.option.PropertyOption;import org.apache.commons.cli2.util.HelpFormatter;/** * @author Rob */public class DocumentationTest extends TestCase {    public void testBasicUsage() throws IOException, OptionException {        HelpFormatter helpFormatter = new HelpFormatter();        //ignore all printed        helpFormatter.setPrintWriter(new PrintWriter(new StringWriter()));        /*         * --version -? -h --help -log file -s|-q|-v|-d Bursting File/Num/Date         * validation Switches Commands Auto help Auto exception help         *         */        DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        Option version =            obuilder                .withLongName(""version"")                .withDescription(""Displays version information and then exits"")                .create();        Option help =            obuilder                .withShortName(""h"")                .withShortName(""?"")                .withLongName(""help"")                .withDescription(""Displays help on usage and then exits"")                .create();        ArgumentBuilder abuilder = new ArgumentBuilder();        Argument logFile =            abuilder                .withDescription(""The log file to write to"")                .withName(""file"")                .withMinimum(1)                .withMaximum(1)                .create();        Option log =            obuilder                .withArgument(logFile)                .withShortName(""log"")                .withDescription(""Log progress information to a file"")                .create();        GroupBuilder gbuilder = new GroupBuilder();        Group outputQuality =            gbuilder                .withName(""quality"")                .withDescription(""Controls the quality of console output"")                .withMaximum(1)                .withOption(                    obuilder                        .withShortName(""s"")                        .withDescription(""Silent"")                        .create())                .withOption(                    obuilder                        .withShortName(""q"")                        .withDescription(""Quiet"")                        .create())                .withOption(                    obuilder                        .withShortName(""n"")                        .withDescription(""Normal"")                        .create())                .withOption(                    obuilder                        .withShortName(""v"")                        .withDescription(""Verbose"")                        .create())                .withOption(                    obuilder                        .withShortName(""d"")                        .withDescription(""Debug"")                        .create())                .create();        Group options =            new GroupBuilder()                .withName(""options"")                .withOption(version)                .withOption(help)                .withOption(log)                .withOption(outputQuality)                .create();        final String[] args = new String[] { ""--bad-option"" };        Parser parser = new Parser();        parser.setHelpFormatter(helpFormatter);        parser.setGroup(options);        parser.setHelpOption(help);        CommandLine commandLine = parser.parseAndHelp(args);        if (commandLine != null) {            if (commandLine.hasOption(version)) {                System.out.println(""MyApp ver 1.0"");                return;            }            if (commandLine.hasOption(""-log"")) {                String filename = (String)commandLine.getValue(""-log"");                //...            }        }        try {            commandLine = parser.parse(args);            fail(""Unexpected Option!"");        }        catch (OptionException uoe) {            assertEquals(                ""Unexpected --bad-option while processing options"",                uoe.getMessage());        }    }    public void testManualIntroduction() {        DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        ArgumentBuilder aBuilder = new ArgumentBuilder();        GroupBuilder gBuilder = new GroupBuilder();        DefaultOption xmlOption =            oBuilder                .withLongName(""xml"")                .withDescription(""Output using xml format"")                .create();        Argument pathArgument =            aBuilder                .withName(""path"")                .withMinimum(1)                .withMaximum(1)                .create();        Group outputChildren =            gBuilder                .withOption(xmlOption)                .create();        Option outputOption =            oBuilder                .withLongName(""output"")                .withDescription(""Outputs to a file"")                .withArgument(pathArgument)                .withChildren(outputChildren)                .create();        ///////////////////////////////////////////////////        Group options = outputChildren;        HelpFormatter hf = new HelpFormatter();        Parser p = new Parser();        p.setGroup(options);        p.setHelpFormatter(hf);        p.setHelpTrigger(""--help"");        CommandLine cl = p.parseAndHelp(new String[]{});        if(cl==null) {            System.exit(-1);        }        //////////////////////////////////////////////////        cl = new WriteableCommandLineImpl(outputChildren,new ArrayList());        // if we have --output option        if(cl.hasOption(""--output"")) {            // grab the path            String path = (String)cl.getValue(""--output"");            // grab the format            boolean xml = cl.hasOption(""--xml"");            // configure the application's output            configureOutput(path,xml);        }    }    private void configureOutput(String path, boolean xml) {        // TODO Auto-generated method stub    }    public void testExampleAnt() throws IOException, OptionException {        // Apache Ant version 1.6.1 compiled on February 12 2004        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        Option help =            obuilder                .withShortName(""help"")                .withShortName(""h"")                .withDescription(""print this message"")                .create();        Option projecthelp =            obuilder                .withShortName(""projecthelp"")                .withShortName(""p"")                .withDescription(""print project help information"")                .create();        Option version =            obuilder                .withShortName(""version"")                .withDescription(""print the version information and exit"")                .create();        Option diagnostics =            obuilder                .withShortName(""diagnostics"")                .withDescription(""print information that might be helpful to diagnose or report problems."")                .create();        Option quiet =            obuilder                .withShortName(""quiet"")                .withShortName(""q"")                .withDescription(""be extra quiet"")                .create();        Option verbose =            obuilder                .withShortName(""verbose"")                .withShortName(""v"")                .withDescription(""be extra verbose"")                .create();        Option debug =            obuilder                .withShortName(""debug"")                .withShortName(""d"")                .withDescription(""print debugging information"")                .create();        Option emacs =            obuilder                .withShortName(""emacs"")                .withShortName(""e"")                .withDescription(""produce logging information without adornments"")                .create();        Option lib =            obuilder                .withShortName(""lib"")                .withDescription(""specifies a path to search for jars and classes"")                .withArgument(                    abuilder                        .withName(""path"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option logfile =            obuilder                .withShortName(""logfile"")                .withShortName(""l"")                .withDescription(""use given file for log"")                .withArgument(                    abuilder                        .withName(""file"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option logger =            obuilder                .withShortName(""logger"")                .withDescription(""the class which is to perform logging"")                .withArgument(                    abuilder                        .withName(""classname"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option listener =            obuilder                .withShortName(""listener"")                .withDescription(""add an instance of class as a project listener"")                .withArgument(                    abuilder                        .withName(""classname"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option noinput =            obuilder                .withShortName(""noinput"")                .withDescription(""do not allow interactive input"")                .create();        Option buildfile =            obuilder                .withShortName(""buildfile"")                .withShortName(""file"")                .withShortName(""f"")                .withDescription(""use given buildfile"")                .withArgument(                    abuilder                        .withName(""file"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option property = new PropertyOption();        Option propertyfile =            obuilder                .withShortName(""propertyfile"")                .withDescription(""load all properties from file with -D properties taking precedence"")                .withArgument(                    abuilder                        .withName(""name"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option inputhandler =            obuilder                .withShortName(""inputhandler"")                .withDescription(""the class which will handle input requests"")                .withArgument(                    abuilder                        .withName(""class"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option find =            obuilder                .withShortName(""find"")                .withShortName(""s"")                .withDescription(""search for buildfile towards the root of the filesystem and use it"")                .withArgument(                    abuilder                        .withName(""file"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option targets = abuilder.withName(""target"").create();        Group options =            gbuilder                .withName(""options"")                .withOption(help)                .withOption(projecthelp)                .withOption(version)                .withOption(diagnostics)                .withOption(quiet)                .withOption(verbose)                .withOption(debug)                .withOption(emacs)                .withOption(lib)                .withOption(logfile)                .withOption(logger)                .withOption(listener)                .withOption(noinput)                .withOption(buildfile)                .withOption(property)                .withOption(propertyfile)                .withOption(inputhandler)                .withOption(find)                .withOption(targets)                .create();        /////////////////////////////////////        String[] args = new String[]{};        Parser parser = new Parser();        parser.setGroup(options);        CommandLine cl = parser.parse(args);        if(cl.hasOption(help)) {            //displayHelp();            return;        }        if(cl.hasOption(""-version"")) {            //displayVersion();            return;        }        if(cl.hasOption(logfile)) {            String file = (String)cl.getValue(logfile);            //setLogFile();        }        List targetList = cl.getValues(targets);        for (Iterator i = targetList.iterator(); i.hasNext();) {            String target = (String) i.next();            //doTarget(target);        }        /////////////////////////////////////        HelpFormatter hf = new HelpFormatter();        hf.setShellCommand(""ant"");        hf.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_NAME);        hf.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        hf.getFullUsageSettings().remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);        hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PROPERTY_OPTION);        hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);        hf.getDisplaySettings().remove(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        hf.setGroup(options);        // redirect printed stuff to a string        hf.setPrintWriter(new PrintWriter(new StringWriter()));        hf.print();    }}"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,18,package org.apache.commons.cli2;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,20,import java.io.IOException;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,21,import java.io.PrintWriter;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,22,import java.io.StringWriter;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,23,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,24,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,25,import java.util.List;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,29,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,30,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,31,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,32,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,33,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,34,import org.apache.commons.cli2.option.DefaultOption;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,35,import org.apache.commons.cli2.option.PropertyOption;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,36,import org.apache.commons.cli2.util.HelpFormatter;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,39,* @author Rob
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,41,public class DocumentationTest extends TestCase {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,43,"public void testBasicUsage() throws IOException, OptionException {"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,44,HelpFormatter helpFormatter = new HelpFormatter();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,45,//ignore all printed
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,46,helpFormatter.setPrintWriter(new PrintWriter(new StringWriter()));
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,49,* --version -? -h --help -log file -s|-q|-v|-d Bursting File/Num/Date
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,50,* validation Switches Commands Auto help Auto exception help
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,53,DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,54,Option version =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,55,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,56,".withLongName(""version"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,57,".withDescription(""Displays version information and then exits"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,58,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,60,Option help =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,61,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,62,".withShortName(""h"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,63,".withShortName(""?"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,64,".withLongName(""help"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,65,".withDescription(""Displays help on usage and then exits"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,66,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,68,ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,69,Argument logFile =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,70,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,71,".withDescription(""The log file to write to"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,72,".withName(""file"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,73,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,74,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,75,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,76,Option log =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,77,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,78,.withArgument(logFile)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,79,".withShortName(""log"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,80,".withDescription(""Log progress information to a file"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,81,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,83,GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,84,Group outputQuality =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,85,gbuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,86,".withName(""quality"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,87,".withDescription(""Controls the quality of console output"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,88,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,89,.withOption(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,90,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,91,".withShortName(""s"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,92,".withDescription(""Silent"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,93,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,94,.withOption(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,95,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,96,".withShortName(""q"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,97,".withDescription(""Quiet"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,98,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,99,.withOption(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,100,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,101,".withShortName(""n"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,102,".withDescription(""Normal"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,103,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,104,.withOption(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,105,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,106,".withShortName(""v"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,107,".withDescription(""Verbose"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,108,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,109,.withOption(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,110,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,111,".withShortName(""d"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,112,".withDescription(""Debug"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,113,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,114,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,116,Group options =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,117,new GroupBuilder()
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,118,".withName(""options"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,119,.withOption(version)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,120,.withOption(help)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,121,.withOption(log)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,122,.withOption(outputQuality)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,123,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,125,"final String[] args = new String[] { ""--bad-option"" };"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,127,Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,128,parser.setHelpFormatter(helpFormatter);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,129,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,130,parser.setHelpOption(help);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,131,CommandLine commandLine = parser.parseAndHelp(args);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,132,if (commandLine != null) {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,133,if (commandLine.hasOption(version)) {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,134,"System.out.println(""MyApp ver 1.0"");"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,135,return;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,137,"if (commandLine.hasOption(""-log"")) {"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,138,"String filename = (String)commandLine.getValue(""-log"");"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,143,try {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,144,commandLine = parser.parse(args);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,145,"fail(""Unexpected Option!"");"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,147,catch (OptionException uoe) {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,148,assertEquals(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,149,"""Unexpected --bad-option while processing options"","
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,150,uoe.getMessage());
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,154,public void testManualIntroduction() {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,156,DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,157,ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,158,GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,160,DefaultOption xmlOption =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,161,oBuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,162,".withLongName(""xml"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,163,".withDescription(""Output using xml format"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,164,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,166,Argument pathArgument =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,167,aBuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,168,".withName(""path"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,169,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,170,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,171,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,173,Group outputChildren =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,174,gBuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,175,.withOption(xmlOption)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,176,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,178,Option outputOption =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,179,oBuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,180,".withLongName(""output"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,181,".withDescription(""Outputs to a file"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,182,.withArgument(pathArgument)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,183,.withChildren(outputChildren)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,184,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,188,Group options = outputChildren;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,189,HelpFormatter hf = new HelpFormatter();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,191,Parser p = new Parser();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,192,p.setGroup(options);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,193,p.setHelpFormatter(hf);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,194,"p.setHelpTrigger(""--help"");"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,195,CommandLine cl = p.parseAndHelp(new String[]{});
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,196,if(cl==null) {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,197,System.exit(-1);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,202,"cl = new WriteableCommandLineImpl(outputChildren,new ArrayList());"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,204,// if we have --output option
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,205,"if(cl.hasOption(""--output"")) {"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,206,// grab the path
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,207,"String path = (String)cl.getValue(""--output"");"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,208,// grab the format
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,209,"boolean xml = cl.hasOption(""--xml"");"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,210,// configure the application's output
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,211,"configureOutput(path,xml);"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,219,"private void configureOutput(String path, boolean xml) {"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,220,// TODO Auto-generated method stub
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,224,"public void testExampleAnt() throws IOException, OptionException {"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,225,// Apache Ant version 1.6.1 compiled on February 12 2004
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,227,final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,228,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,229,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,231,Option help =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,232,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,233,".withShortName(""help"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,234,".withShortName(""h"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,235,".withDescription(""print this message"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,236,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,237,Option projecthelp =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,238,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,239,".withShortName(""projecthelp"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,240,".withShortName(""p"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,241,".withDescription(""print project help information"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,242,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,243,Option version =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,244,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,245,".withShortName(""version"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,246,".withDescription(""print the version information and exit"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,247,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,248,Option diagnostics =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,249,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,250,".withShortName(""diagnostics"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,251,".withDescription(""print information that might be helpful to diagnose or report problems."")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,252,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,253,Option quiet =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,254,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,255,".withShortName(""quiet"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,256,".withShortName(""q"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,257,".withDescription(""be extra quiet"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,258,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,259,Option verbose =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,260,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,261,".withShortName(""verbose"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,262,".withShortName(""v"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,263,".withDescription(""be extra verbose"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,264,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,265,Option debug =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,266,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,267,".withShortName(""debug"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,268,".withShortName(""d"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,269,".withDescription(""print debugging information"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,270,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,271,Option emacs =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,272,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,273,".withShortName(""emacs"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,274,".withShortName(""e"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,275,".withDescription(""produce logging information without adornments"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,276,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,277,Option lib =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,278,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,279,".withShortName(""lib"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,280,".withDescription(""specifies a path to search for jars and classes"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,281,.withArgument(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,282,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,283,".withName(""path"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,284,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,285,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,286,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,287,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,288,Option logfile =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,289,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,290,".withShortName(""logfile"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,291,".withShortName(""l"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,292,".withDescription(""use given file for log"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,293,.withArgument(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,294,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,295,".withName(""file"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,296,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,297,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,298,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,299,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,300,Option logger =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,301,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,302,".withShortName(""logger"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,303,".withDescription(""the class which is to perform logging"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,304,.withArgument(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,305,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,306,".withName(""classname"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,307,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,308,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,309,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,310,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,311,Option listener =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,312,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,313,".withShortName(""listener"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,314,".withDescription(""add an instance of class as a project listener"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,315,.withArgument(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,316,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,317,".withName(""classname"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,318,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,319,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,320,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,321,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,322,Option noinput =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,323,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,324,".withShortName(""noinput"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,325,".withDescription(""do not allow interactive input"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,326,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,327,Option buildfile =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,328,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,329,".withShortName(""buildfile"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,330,".withShortName(""file"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,331,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,332,".withDescription(""use given buildfile"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,333,.withArgument(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,334,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,335,".withName(""file"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,336,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,337,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,338,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,339,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,340,Option property = new PropertyOption();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,341,Option propertyfile =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,342,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,343,".withShortName(""propertyfile"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,344,".withDescription(""load all properties from file with -D properties taking precedence"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,345,.withArgument(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,346,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,347,".withName(""name"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,348,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,349,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,350,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,351,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,352,Option inputhandler =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,353,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,354,".withShortName(""inputhandler"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,355,".withDescription(""the class which will handle input requests"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,356,.withArgument(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,357,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,358,".withName(""class"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,359,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,360,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,361,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,362,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,363,Option find =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,364,obuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,365,".withShortName(""find"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,366,".withShortName(""s"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,367,".withDescription(""search for buildfile towards the root of the filesystem and use it"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,368,.withArgument(
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,369,abuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,370,".withName(""file"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,371,.withMinimum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,372,.withMaximum(1)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,373,.create())
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,374,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,375,"Option targets = abuilder.withName(""target"").create();"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,377,Group options =
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,378,gbuilder
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,379,".withName(""options"")"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,380,.withOption(help)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,381,.withOption(projecthelp)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,382,.withOption(version)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,383,.withOption(diagnostics)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,384,.withOption(quiet)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,385,.withOption(verbose)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,386,.withOption(debug)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,387,.withOption(emacs)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,388,.withOption(lib)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,389,.withOption(logfile)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,390,.withOption(logger)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,391,.withOption(listener)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,392,.withOption(noinput)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,393,.withOption(buildfile)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,394,.withOption(property)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,395,.withOption(propertyfile)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,396,.withOption(inputhandler)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,397,.withOption(find)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,398,.withOption(targets)
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,399,.create();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,402,String[] args = new String[]{};
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,404,Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,405,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,406,CommandLine cl = parser.parse(args);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,408,if(cl.hasOption(help)) {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,409,//displayHelp();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,410,return;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,412,"if(cl.hasOption(""-version"")) {"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,413,//displayVersion();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,414,return;
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,416,if(cl.hasOption(logfile)) {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,417,String file = (String)cl.getValue(logfile);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,418,//setLogFile();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,420,List targetList = cl.getValues(targets);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,421,for (Iterator i = targetList.iterator(); i.hasNext();) {
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,422,String target = (String) i.next();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,423,//doTarget(target);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,428,HelpFormatter hf = new HelpFormatter();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,429,"hf.setShellCommand(""ant"");"
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,430,hf.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_NAME);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,431,hf.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,432,hf.getFullUsageSettings().remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,434,hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PROPERTY_OPTION);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,435,hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,436,hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,438,hf.getDisplaySettings().remove(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,440,hf.setGroup(options);
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,441,// redirect printed stuff to a string
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,442,hf.setPrintWriter(new PrintWriter(new StringWriter()));
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,443,hf.print();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Arrays;import java.util.List;import java.util.Set;import junit.framework.TestCase;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author Rob Oxspring */public class PrecedenceTest extends TestCase {    private final String[] args = new String[] { ""-file"" };    public void testSimple() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final Group options =            new GroupBuilder()                .withOption(oBuilder.withShortName(""file"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-file"" }, cl);    }    public void testArgument() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group options =            new GroupBuilder()                .withOption(                    oBuilder                        .withShortName(""f"")                        .withArgument(aBuilder.create())                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void testBurst() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""f"").create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);    }    public void testChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group children =            gBuilder                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);    }    public void XtestSimpleVsArgument() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withArgument(aBuilder.create())                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void XtestSimpleVsBurst() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(oBuilder.withShortName(""f"").create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);    }    public void XtestSimpleVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(            new String[] { ""-f"", ""-i"", ""--ci"", ""-l"", ""--cl"", ""-e"", ""--ce"" },            cl);    }    public void testArgumentVsBurst() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withArgument(aBuilder.create())                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void testArgumentVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group children =            gBuilder                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .withArgument(aBuilder.create())                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void testBurstVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .create())                .withOption(                    oBuilder.withShortName(""i"").withLongName(""bi"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""bl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""be"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(            new String[] { ""-f"", ""-i"", ""--ci"", ""-l"", ""--cl"", ""-e"", ""--ce"" },            cl);    }    public void XtestSimpleVsArgumentVsBurst() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withArgument(aBuilder.create())                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void XtestSimpleVsArgumentVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .withArgument(aBuilder.create())                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void XtestSimpleVsBurstVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);    }    public void testArgumentVsBurstVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .withArgument(aBuilder.create())                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void XtestSimpleVsArgumentVsBurstVsChildren()        throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .withArgument(aBuilder.create())                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public CommandLine buildCommandLine(final Group group, final String[] arguments)        throws OptionException {        Parser p = new Parser();        p.setGroup(group);        return p.parse(arguments);    }    public void assertEquals(final String options[], final CommandLine line) {        final List expected = Arrays.asList(options);        final Set actual = line.getOptionTriggers();        assertTrue(expected.containsAll(actual));        assertTrue(actual.containsAll(expected));    }}"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,18,package org.apache.commons.cli2;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,21,import java.util.List;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,22,import java.util.Set;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,26,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,27,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,28,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,29,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,32,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,34,public class PrecedenceTest extends TestCase {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,35,"private final String[] args = new String[] { ""-file"" };"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,37,public void testSimple() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,38,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,40,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,41,new GroupBuilder()
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,42,".withOption(oBuilder.withShortName(""file"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,43,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,45,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,46,"assertEquals(new String[] { ""-file"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,49,public void testArgument() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,50,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,51,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,53,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,54,new GroupBuilder()
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,55,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,56,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,57,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,58,.withArgument(aBuilder.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,59,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,60,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,62,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,63,"assertEquals(new String[] { ""-f"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,66,public void testBurst() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,67,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,68,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,69,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,70,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,71,".withOption(oBuilder.withShortName(""f"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,72,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,73,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,74,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,75,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,77,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,78,"assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,81,public void testChildren() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,82,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,83,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,85,final Group children =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,86,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,87,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,88,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,89,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,90,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,91,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,92,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,93,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,94,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,95,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,96,.withChildren(children)
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,97,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,98,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,100,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,101,"assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,104,public void XtestSimpleVsArgument() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,105,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,106,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,107,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,109,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,110,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,111,".withOption(oBuilder.withShortName(""file"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,112,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,113,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,114,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,115,.withArgument(aBuilder.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,116,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,117,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,119,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,120,"assertEquals(new String[] { ""-f"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,123,public void XtestSimpleVsBurst() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,124,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,125,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,126,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,127,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,128,".withOption(oBuilder.withShortName(""file"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,129,".withOption(oBuilder.withShortName(""f"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,130,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,131,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,132,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,133,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,135,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,136,"assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,139,public void XtestSimpleVsChildren() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,140,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,141,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,143,final Group children =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,144,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,145,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,146,"oBuilder.withShortName(""i"").withLongName(""ci"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,147,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,148,"oBuilder.withShortName(""l"").withLongName(""cl"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,149,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,150,"oBuilder.withShortName(""e"").withLongName(""ce"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,151,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,153,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,154,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,155,".withOption(oBuilder.withShortName(""file"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,156,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,157,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,158,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,159,.withChildren(children)
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,160,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,161,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,163,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,164,assertEquals(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,165,"new String[] { ""-f"", ""-i"", ""--ci"", ""-l"", ""--cl"", ""-e"", ""--ce"" },"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,166,cl);
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,169,public void testArgumentVsBurst() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,170,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,171,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,172,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,174,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,175,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,176,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,177,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,178,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,179,.withArgument(aBuilder.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,180,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,181,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,182,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,183,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,184,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,186,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,187,"assertEquals(new String[] { ""-f"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,190,public void testArgumentVsChildren() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,191,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,192,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,193,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,195,final Group children =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,196,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,197,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,198,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,199,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,200,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,201,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,202,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,203,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,204,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,205,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,206,.withChildren(children)
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,207,.withArgument(aBuilder.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,208,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,209,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,211,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,212,"assertEquals(new String[] { ""-f"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,215,public void testBurstVsChildren() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,216,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,217,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,219,final Group children =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,220,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,221,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,222,"oBuilder.withShortName(""i"").withLongName(""ci"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,223,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,224,"oBuilder.withShortName(""l"").withLongName(""cl"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,225,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,226,"oBuilder.withShortName(""e"").withLongName(""ce"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,227,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,229,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,230,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,231,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,232,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,233,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,234,.withChildren(children)
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,235,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,236,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,237,"oBuilder.withShortName(""i"").withLongName(""bi"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,238,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,239,"oBuilder.withShortName(""l"").withLongName(""bl"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,240,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,241,"oBuilder.withShortName(""e"").withLongName(""be"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,242,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,244,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,245,assertEquals(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,246,"new String[] { ""-f"", ""-i"", ""--ci"", ""-l"", ""--cl"", ""-e"", ""--ce"" },"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,247,cl);
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,250,public void XtestSimpleVsArgumentVsBurst() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,251,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,252,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,253,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,255,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,256,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,257,".withOption(oBuilder.withShortName(""file"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,258,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,259,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,260,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,261,.withArgument(aBuilder.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,262,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,263,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,264,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,265,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,266,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,268,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,269,"assertEquals(new String[] { ""-f"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,272,public void XtestSimpleVsArgumentVsChildren() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,273,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,274,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,275,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,277,final Group children =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,278,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,279,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,280,"oBuilder.withShortName(""i"").withLongName(""ci"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,281,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,282,"oBuilder.withShortName(""l"").withLongName(""cl"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,283,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,284,"oBuilder.withShortName(""e"").withLongName(""ce"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,285,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,287,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,288,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,289,".withOption(oBuilder.withShortName(""file"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,290,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,291,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,292,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,293,.withChildren(children)
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,294,.withArgument(aBuilder.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,295,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,296,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,298,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,299,"assertEquals(new String[] { ""-f"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,302,public void XtestSimpleVsBurstVsChildren() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,303,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,304,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,306,final Group children =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,307,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,308,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,309,"oBuilder.withShortName(""i"").withLongName(""ci"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,310,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,311,"oBuilder.withShortName(""l"").withLongName(""cl"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,312,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,313,"oBuilder.withShortName(""e"").withLongName(""ce"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,314,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,316,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,317,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,318,".withOption(oBuilder.withShortName(""file"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,319,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,320,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,321,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,322,.withChildren(children)
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,323,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,324,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,325,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,326,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,327,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,329,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,330,"assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,333,public void testArgumentVsBurstVsChildren() throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,334,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,335,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,336,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,338,final Group children =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,339,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,340,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,341,"oBuilder.withShortName(""i"").withLongName(""ci"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,342,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,343,"oBuilder.withShortName(""l"").withLongName(""cl"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,344,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,345,"oBuilder.withShortName(""e"").withLongName(""ce"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,346,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,348,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,349,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,350,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,351,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,352,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,353,.withChildren(children)
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,354,.withArgument(aBuilder.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,355,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,356,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,357,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,358,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,359,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,361,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,362,"assertEquals(new String[] { ""-f"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,365,public void XtestSimpleVsArgumentVsBurstVsChildren()
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,366,throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,367,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,368,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,369,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,371,final Group children =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,372,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,373,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,374,"oBuilder.withShortName(""i"").withLongName(""ci"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,375,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,376,"oBuilder.withShortName(""l"").withLongName(""cl"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,377,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,378,"oBuilder.withShortName(""e"").withLongName(""ce"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,379,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,381,final Group options =
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,382,gBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,383,".withOption(oBuilder.withShortName(""file"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,384,.withOption(
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,385,oBuilder
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,386,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,387,.withChildren(children)
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,388,.withArgument(aBuilder.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,389,.create())
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,390,".withOption(oBuilder.withShortName(""i"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,391,".withOption(oBuilder.withShortName(""l"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,392,".withOption(oBuilder.withShortName(""e"").create())"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,393,.create();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,395,"final CommandLine cl = buildCommandLine(options, args);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,396,"assertEquals(new String[] { ""-f"" }, cl);"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,399,"public CommandLine buildCommandLine(final Group group, final String[] arguments)"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,400,throws OptionException {
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,401,Parser p = new Parser();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,402,p.setGroup(group);
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,403,return p.parse(arguments);
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,406,"public void assertEquals(final String options[], final CommandLine line) {"
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,407,final List expected = Arrays.asList(options);
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,408,final Set actual = line.getOptionTriggers();
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,410,assertTrue(expected.containsAll(actual));
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,411,assertTrue(actual.containsAll(expected));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import org.apache.commons.cli2.option.ArgumentTest;/** * @author Rob Oxspring */public abstract class WriteableCommandLineTestCase extends CommandLineTestCase {	private WriteableCommandLine writeable;	protected abstract WriteableCommandLine createWriteableCommandLine();	/* (non-Javadoc)	 * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()	 */	protected final CommandLine createCommandLine() {		final WriteableCommandLine cl = createWriteableCommandLine();		cl.addOption(present);		cl.addProperty(""present"",""present property"");		cl.addSwitch(bool,true);		cl.addValue(present,""present value"");		cl.addOption(multiple);		cl.addValue(multiple,""value 1"");		cl.addValue(multiple,""value 2"");		cl.addValue(multiple,""value 3"");		return cl;	}	/*	 * @see CommandLineTest#setUp()	 */	public void setUp() throws Exception {		super.setUp();		writeable = createWriteableCommandLine();	}	public final void testAddOption() {		assertFalse(writeable.hasOption(present));		writeable.addOption(present);		assertTrue(writeable.hasOption(present));	}	public final void testAddValue() {		assertFalse(writeable.hasOption(present));		assertTrue(writeable.getValues(present).isEmpty());		writeable.addValue(present,""value"");		assertContentsEqual(list(""value""),writeable.getValues(present));		// most options shouldn't appear due to adding values		assertFalse(writeable.hasOption(present));		final Argument arg = ArgumentTest.buildHostArgument();		assertFalse(writeable.hasOption(arg));		assertTrue(writeable.getValues(arg).isEmpty());		writeable.addValue(arg,""value"");		assertContentsEqual(list(""value""),writeable.getValues(arg));		// Arguments should force the option present		assertTrue(writeable.hasOption(arg));	}	public final void testAddSwitch() {		assertFalse(writeable.hasOption(present));		assertNull(writeable.getSwitch(present));		writeable.addSwitch(present,true);		assertEquals(Boolean.TRUE,writeable.getSwitch(present));		assertTrue(writeable.hasOption(present));	}	public final void testAddProperty() {		assertNull(writeable.getProperty(""present""));		writeable.addProperty(""present"",""present value"");		assertEquals(""present value"",writeable.getProperty(""present""));	}	public final void testLooksLikeOption() {		//TODO Implement looksLikeOption().	}}"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,18,package org.apache.commons.cli2;
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,20,import org.apache.commons.cli2.option.ArgumentTest;
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,23,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,25,public abstract class WriteableCommandLineTestCase extends CommandLineTestCase {
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,27,private WriteableCommandLine writeable;
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,29,protected abstract WriteableCommandLine createWriteableCommandLine();
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,31,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,32,* @see org.apache.commons.cli2.CommandLineTest#createCommandLine()
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,34,protected final CommandLine createCommandLine() {
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,35,final WriteableCommandLine cl = createWriteableCommandLine();
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,36,cl.addOption(present);
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,37,"cl.addProperty(""present"",""present property"");"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,38,"cl.addSwitch(bool,true);"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,39,"cl.addValue(present,""present value"");"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,40,cl.addOption(multiple);
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,41,"cl.addValue(multiple,""value 1"");"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,42,"cl.addValue(multiple,""value 2"");"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,43,"cl.addValue(multiple,""value 3"");"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,44,return cl;
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,48,* @see CommandLineTest#setUp()
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,50,public void setUp() throws Exception {
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,51,super.setUp();
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,52,writeable = createWriteableCommandLine();
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,54,public final void testAddOption() {
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,55,assertFalse(writeable.hasOption(present));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,56,writeable.addOption(present);
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,57,assertTrue(writeable.hasOption(present));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,59,public final void testAddValue() {
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,60,assertFalse(writeable.hasOption(present));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,61,assertTrue(writeable.getValues(present).isEmpty());
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,62,"writeable.addValue(present,""value"");"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,63,"assertContentsEqual(list(""value""),writeable.getValues(present));"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,65,// most options shouldn't appear due to adding values
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,66,assertFalse(writeable.hasOption(present));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,68,final Argument arg = ArgumentTest.buildHostArgument();
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,70,assertFalse(writeable.hasOption(arg));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,71,assertTrue(writeable.getValues(arg).isEmpty());
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,72,"writeable.addValue(arg,""value"");"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,73,"assertContentsEqual(list(""value""),writeable.getValues(arg));"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,75,// Arguments should force the option present
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,76,assertTrue(writeable.hasOption(arg));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,78,public final void testAddSwitch() {
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,79,assertFalse(writeable.hasOption(present));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,80,assertNull(writeable.getSwitch(present));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,81,"writeable.addSwitch(present,true);"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,82,"assertEquals(Boolean.TRUE,writeable.getSwitch(present));"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,83,assertTrue(writeable.hasOption(present));
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,85,public final void testAddProperty() {
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,86,"assertNull(writeable.getProperty(""present""));"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,87,"writeable.addProperty(""present"",""present value"");"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,88,"assertEquals(""present value"",writeable.getProperty(""present""));"
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,90,public final void testLooksLikeOption() {
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,91,//TODO Implement looksLikeOption().
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.application;import java.util.ArrayList;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.PropertyOption;//TODO Build up AntTest like CpTestpublic class AntTest extends TestCase {    public void testAnt() throws OptionException {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Group options =            gbuilder                .withName(""ant"")                .withOption(                    obuilder                        .withShortName(""help"")                        .withDescription(""print this message"")                        .create())                .withOption(                    obuilder                        .withShortName(""projecthelp"")                        .withDescription(""print project help information"")                        .create())                .withOption(                    obuilder                        .withShortName(""version"")                        .withDescription(""print the version information and exit"")                        .create())                .withOption(                    obuilder                        .withShortName(""diagnostics"")                        .withDescription(""print information that might be helpful to diagnose or report problems."")                        .create())                .withOption(                    obuilder                        .withShortName(""quiet"")                        .withShortName(""q"")                        .withDescription(""be extra quiet"")                        .create())                .withOption(                    obuilder                        .withShortName(""verbose"")                        .withShortName(""v"")                        .withDescription(""be extra verbose"")                        .create())                .withOption(                    obuilder                        .withShortName(""debug"")                        .withDescription(""print debugging information"")                        .create())                .withOption(                    obuilder                        .withShortName(""emacs"")                        .withDescription(""produce logging information without adornments"")                        .create())                .withOption(                    obuilder                        .withShortName(""logfile"")                        .withShortName(""l"")                        .withDescription(""use given file for log"")                        .withArgument(                            abuilder                                .withName(""file"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""logger"")                        .withDescription(""the class which is to perform logging"")                        .withArgument(                            abuilder                                .withName(""classname"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""listener"")                        .withDescription(""add an instance of class as a project listener"")                        .withArgument(                            abuilder                                .withName(""classname"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""buildfile"")                        .withShortName(""file"")                        .withShortName(""f"")                        .withDescription(""use given buildfile"")                        .withArgument(                            abuilder                                .withName(""file"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(PropertyOption.INSTANCE)                .withOption(                    obuilder                        .withShortName(""propertyfile"")                        .withDescription(""load all properties from file with -D properties taking precedence"")                        .withArgument(                            abuilder                                .withName(""name"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""inputhandler"")                        .withDescription(""the class which will handle input requests"")                        .withArgument(                            abuilder                                .withName(""class"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""find"")                        .withDescription(""search for buildfile towards the root of the filesystem and use it"")                        .withArgument(                            abuilder                                .withName(""file"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(abuilder.withName(""target"").create())                .create();        Parser parser = new Parser();        parser.setGroup(options);        CommandLine line =            parser.parse(                new String[] {                    ""-buildfile"",                    ""mybuild.xml"",                    ""-Dproperty=value"",                    ""-Dproperty1=value1"",                    ""-projecthelp"",                    ""compile"",                    ""docs"" });        // check properties        assertEquals(2, line.getProperties().size());        assertEquals(""value"", line.getProperty(""property""));        assertEquals(""value1"", line.getProperty(""property1""));        // check single values        assertEquals(""mybuild.xml"", line.getValue(""-buildfile""));        assertTrue(line.hasOption(""-projecthelp""));        assertFalse(line.hasOption(""-help""));        assertTrue(line.hasOption(""target""));        final List targets = new ArrayList();        targets.add(""compile"");        targets.add(""docs"");        assertEquals(targets, line.getValues(""target""));    }}"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,18,package org.apache.commons.cli2.application;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,21,import java.util.List;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,25,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,26,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,27,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,28,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,29,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,30,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,31,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,32,import org.apache.commons.cli2.option.PropertyOption;
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,34,//TODO Build up AntTest like CpTest
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,35,public class AntTest extends TestCase {
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,36,public void testAnt() throws OptionException {
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,37,final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,38,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,39,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,41,final Group options =
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,42,gbuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,43,".withName(""ant"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,44,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,45,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,46,".withShortName(""help"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,47,".withDescription(""print this message"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,48,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,49,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,50,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,51,".withShortName(""projecthelp"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,52,".withDescription(""print project help information"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,53,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,54,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,55,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,56,".withShortName(""version"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,57,".withDescription(""print the version information and exit"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,58,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,59,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,60,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,61,".withShortName(""diagnostics"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,62,".withDescription(""print information that might be helpful to diagnose or report problems."")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,63,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,64,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,65,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,66,".withShortName(""quiet"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,67,".withShortName(""q"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,68,".withDescription(""be extra quiet"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,69,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,70,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,71,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,72,".withShortName(""verbose"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,73,".withShortName(""v"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,74,".withDescription(""be extra verbose"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,75,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,76,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,77,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,78,".withShortName(""debug"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,79,".withDescription(""print debugging information"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,80,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,81,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,82,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,83,".withShortName(""emacs"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,84,".withDescription(""produce logging information without adornments"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,85,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,86,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,87,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,88,".withShortName(""logfile"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,89,".withShortName(""l"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,90,".withDescription(""use given file for log"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,91,.withArgument(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,92,abuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,93,".withName(""file"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,94,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,95,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,96,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,97,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,98,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,99,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,100,".withShortName(""logger"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,101,".withDescription(""the class which is to perform logging"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,102,.withArgument(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,103,abuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,104,".withName(""classname"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,105,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,106,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,107,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,108,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,109,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,110,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,111,".withShortName(""listener"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,112,".withDescription(""add an instance of class as a project listener"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,113,.withArgument(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,114,abuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,115,".withName(""classname"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,116,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,117,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,118,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,119,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,120,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,121,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,122,".withShortName(""buildfile"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,123,".withShortName(""file"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,124,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,125,".withDescription(""use given buildfile"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,126,.withArgument(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,127,abuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,128,".withName(""file"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,129,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,130,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,131,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,132,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,133,.withOption(PropertyOption.INSTANCE)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,134,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,135,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,136,".withShortName(""propertyfile"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,137,".withDescription(""load all properties from file with -D properties taking precedence"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,138,.withArgument(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,139,abuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,140,".withName(""name"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,141,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,142,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,143,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,144,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,145,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,146,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,147,".withShortName(""inputhandler"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,148,".withDescription(""the class which will handle input requests"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,149,.withArgument(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,150,abuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,151,".withName(""class"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,152,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,153,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,154,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,155,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,156,.withOption(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,157,obuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,158,".withShortName(""find"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,159,".withDescription(""search for buildfile towards the root of the filesystem and use it"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,160,.withArgument(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,161,abuilder
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,162,".withName(""file"")"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,163,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,164,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,165,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,166,.create())
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,167,".withOption(abuilder.withName(""target"").create())"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,168,.create();
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,170,Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,171,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,172,CommandLine line =
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,173,parser.parse(
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,174,new String[] {
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,175,"""-buildfile"","
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,176,"""mybuild.xml"","
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,177,"""-Dproperty=value"","
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,178,"""-Dproperty1=value1"","
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,179,"""-projecthelp"","
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,180,"""compile"","
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,181,"""docs"" });"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,183,// check properties
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,184,"assertEquals(2, line.getProperties().size());"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,185,"assertEquals(""value"", line.getProperty(""property""));"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,186,"assertEquals(""value1"", line.getProperty(""property1""));"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,188,// check single values
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,189,"assertEquals(""mybuild.xml"", line.getValue(""-buildfile""));"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,190,"assertTrue(line.hasOption(""-projecthelp""));"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,191,"assertFalse(line.hasOption(""-help""));"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,193,"assertTrue(line.hasOption(""target""));"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,194,final List targets = new ArrayList();
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,195,"targets.add(""compile"");"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,196,"targets.add(""docs"");"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,197,"assertEquals(targets, line.getValues(""target""));"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.application;import java.io.BufferedReader;import java.io.IOException;import java.io.PrintWriter;import java.io.StringReader;import java.io.StringWriter;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.ArgumentImpl;import org.apache.commons.cli2.option.SourceDestArgument;import org.apache.commons.cli2.util.HelpFormatter;/** * <p>Test the <code>cp</code> command. Duplicated Option types are not * tested e.g. -a and -d are the same Option type.</p> * * <p>The following is the man output for 'cp'. See * <a href=""http://www.rt.com/man/cp.1.html"">http://www.rt.com/man/cp.1.html</a>.</p> * * <pre> *  CP(1) FSF CP(1) * *  NAME cp - copy files and directories * *  SYNOPSIS cp [OPTION]... SOURCE DEST cp [OPTION]... SOURCE... DIRECTORY * *  DESCRIPTION Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY. * *  -a, --archive same as -dpR * *  -b, --backup make backup before removal * *  -d, --no-dereference preserve links * *  -f, --force remove existing destinations, never prompt * *  -i, --interactive prompt before overwrite * *  -l, --link link files instead of copying * *  -p, --preserve preserve file attributes if possible * *  -P, --parents append source path to DIRECTORY * -r copy recursively, non-directories as files * *  --sparse=WHEN control creation of sparse files * *  -R, --recursive copy directories recursively * *  -s, --symbolic-link make symbolic links instead of copying * *  -S, --suffix=SUFFIX override the usual backup suffix * *  -u, --update copy only when the SOURCE file is newer than the destination file or when the destination file is missing * *  -v, --verbose explain what is being done * *  -V, --version-control=WORD override the usual version control * *  -x, --one-file-system stay on this file system * *  --help display this help and exit * *  --version output version information and exit * *  By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well. That is the behavior selected by --sparse=auto. Specify --sparse=always to create a sparse DEST file when- ever the SOURCE file contains a long enough sequence of zero bytes. Use --sparse=never to inhibit creation of sparse files. * *  The backup suffix is ~, unless set with SIMPLE_BACKUP_SUF- FIX. The version control may be set with VERSION_CONTROL, values are: * t, numbered make numbered backups * *  nil, existing numbered if numbered backups exist, simple other- wise * *  never, simple always make simple backups * *  As a special case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the same name for an existing, regular file. * </pre> * </pre> * * @author Rob Oxspring * @author John Keyes */public class CpTest extends TestCase {    /** Option Builder */    private static final DefaultOptionBuilder oBuilder =        new DefaultOptionBuilder();    /** Argument Builder */    private static final ArgumentBuilder aBuilder = new ArgumentBuilder();    /** Group Builder */    private static final GroupBuilder gBuilder = new GroupBuilder();    private Group options;    public static Test suite() {        return new TestSuite(CpTest.class);    }    private ArgumentImpl source;    private ArgumentImpl dest;    private Argument targets;    private Option archive;    private Option backup;    private Option noDereference;    private Option force;    private Option interactive;    private Option link;    private Option preserve;    private Option parents;    private Option recursive1;    private Option sparse;    private Option recursive2;    private Option symbolicLink;    private Option suffix;    private Option update;    private Option verbose;    private Option versionControl;    private Option oneFileSystem;    private Option help;    private Option version;    public void setUp() {        source =            (ArgumentImpl)aBuilder.withName(""SOURCE"").withMinimum(1).create();        dest =            (ArgumentImpl)aBuilder                .withName(""DEST"")                .withMinimum(1)                .withMaximum(1)                .create();        targets = new SourceDestArgument(source, dest);        archive =            oBuilder                .withShortName(""a"")                .withLongName(""archive"")                .withDescription(""same as -dpR"")                .create();        backup =            oBuilder                .withShortName(""b"")                .withLongName(""backup"")                .withDescription(""make backup before removal"")                .create();        noDereference =            oBuilder                .withShortName(""d"")                .withLongName(""no-dereference"")                .withDescription(""preserve links"")                .create();        force =            oBuilder                .withShortName(""f"")                .withLongName(""force"")                .withDescription(""remove existing destinations, never prompt"")                .create();        interactive =            oBuilder                .withShortName(""i"")                .withLongName(""interactive"")                .withDescription(""prompt before overwrite"")                .create();        link =            oBuilder                .withShortName(""l"")                .withLongName(""link"")                .withDescription(""link files instead of copying"")                .create();        preserve =            oBuilder                .withShortName(""p"")                .withLongName(""preserve"")                .withDescription(""preserve file attributes if possible"")                .create();        parents =            oBuilder                .withShortName(""P"")                .withLongName(""parents"")                .withDescription(""append source path to DIRECTORY"")                .create();        recursive1 =            oBuilder                .withShortName(""r"")                .withDescription(""copy recursively, non-directories as files"")                .create();        sparse =            oBuilder                .withLongName(""sparse"")                .withDescription(""control creation of sparse files"")                .withArgument(                    aBuilder                        .withName(""WHEN"")                        .withMinimum(1)                        .withMaximum(1)                        .withInitialSeparator('=')                        .create())                .create();        recursive2 =            oBuilder                .withShortName(""R"")                .withLongName(""recursive"")                .withDescription(""copy directories recursively"")                .create();        symbolicLink =            oBuilder                .withShortName(""s"")                .withLongName(""symbolic-link"")                .withDescription(""make symbolic links instead of copying"")                .create();        suffix =            oBuilder                .withShortName(""S"")                .withLongName(""suffix"")                .withDescription(""override the usual backup suffix"")                .withArgument(                    aBuilder                        .withName(""SUFFIX"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        update =            oBuilder                .withShortName(""u"")                .withLongName(""update"")                .withDescription(""copy only when the SOURCE file is newer than the destination file or when the destination file is missing"")                .create();        verbose =            oBuilder                .withShortName(""v"")                .withLongName(""verbose"")                .withDescription(""explain what is being done"")                .create();        versionControl =            oBuilder                .withShortName(""V"")                .withLongName(""version-contol"")                .withDescription(""explain what is being done"")                .withArgument(                    aBuilder                        .withName(""WORD"")                        .withInitialSeparator('=')                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        oneFileSystem =            oBuilder                .withShortName(""x"")                .withLongName(""one-file-system"")                .withDescription(""stay on this file system"")                .create();        help =            oBuilder                .withLongName(""help"")                .withDescription(""display this help and exit"")                .create();        version =            oBuilder                .withLongName(""version"")                .withDescription(""output version information and exit"")                .create();        options =            gBuilder                .withOption(archive)                .withOption(backup)                .withOption(noDereference)                .withOption(force)                .withOption(interactive)                .withOption(link)                .withOption(preserve)                .withOption(parents)                .withOption(recursive1)                .withOption(sparse)                .withOption(recursive2)                .withOption(symbolicLink)                .withOption(suffix)                .withOption(update)                .withOption(verbose)                .withOption(versionControl)                .withOption(oneFileSystem)                .withOption(help)                .withOption(version)                .withOption(targets)                .withName(""OPTIONS"")                .create();    }    public void testNoSource() {        Parser parser = new Parser();        parser.setGroup(options);        try {            parser.parse(new String[0]);        }        catch (OptionException mve) {            assertEquals(                ""Missing value(s) SOURCE [SOURCE ...]"",                mve.getMessage());        }    }    public void testOneSource() throws OptionException {        final String[] args = new String[] { ""source1"", ""dest1"" };        final Parser parser = new Parser();        parser.setGroup(options);        final CommandLine commandLine = parser.parse(args);        assertTrue(commandLine.getValues(source).contains(""source1""));        assertEquals(1, commandLine.getValues(source).size());        assertTrue(commandLine.getValues(dest).contains(""dest1""));        assertEquals(1, commandLine.getValues(dest).size());    }    public void testMultiSource() throws OptionException {        final String[] args =            new String[] { ""source1"", ""source2"", ""source3"", ""dest1"" };        final Parser parser = new Parser();        parser.setGroup(options);        final CommandLine commandLine = parser.parse(args);        assertTrue(commandLine.getValues(source).contains(""source1""));        assertTrue(commandLine.getValues(source).contains(""source2""));        assertTrue(commandLine.getValues(source).contains(""source3""));        assertEquals(3, commandLine.getValues(source).size());        assertTrue(commandLine.getValues(dest).contains(""dest1""));        assertEquals(1, commandLine.getValues(dest).size());    }    public void testHelp() throws IOException {        final StringWriter out = new StringWriter();        final HelpFormatter helpFormatter = new HelpFormatter();        helpFormatter.setGroup(options);        helpFormatter.setPrintWriter(new PrintWriter(out));        helpFormatter.print();        final BufferedReader in =            new BufferedReader(new StringReader(out.toString()));        assertEquals(            ""Usage:                                                                          "",            in.readLine());        assertEquals(            "" [-a -b -d -f -i -l -p -P -r --sparse <WHEN> -R -s -S <SUFFIX> -u -v -V <WORD>  "",            in.readLine());        assertEquals(            ""-x --help --version] <SOURCE1> [<SOURCE2> ...] <DEST>                           "",            in.readLine());        assertEquals(            ""OPTIONS                                                                         "",            in.readLine());        assertEquals(            ""  -a (--archive)                same as -dpR                                    "",            in.readLine());        assertEquals(            ""  -b (--backup)                 make backup before removal                      "",            in.readLine());        assertEquals(            ""  -d (--no-dereference)         preserve links                                  "",            in.readLine());        assertEquals(            ""  -f (--force)                  remove existing destinations, never prompt      "",            in.readLine());        assertEquals(            ""  -i (--interactive)            prompt before overwrite                         "",            in.readLine());        assertEquals(            ""  -l (--link)                   link files instead of copying                   "",            in.readLine());        assertEquals(            ""  -p (--preserve)               preserve file attributes if possible            "",            in.readLine());        assertEquals(            ""  -P (--parents)                append source path to DIRECTORY                 "",            in.readLine());        assertEquals(            ""  -r                            copy recursively, non-directories as files      "",            in.readLine());        assertEquals(            ""  --sparse WHEN                 control creation of sparse files                "",            in.readLine());        assertEquals(            ""  -R (--recursive)              copy directories recursively                    "",            in.readLine());        assertEquals(            ""  -s (--symbolic-link)          make symbolic links instead of copying          "",            in.readLine());        assertEquals(            ""  -S (--suffix) SUFFIX          override the usual backup suffix                "",            in.readLine());        assertEquals(            ""  -u (--update)                 copy only when the SOURCE file is newer than    "",            in.readLine());        assertEquals(            ""                                the destination file or when the destination    "",            in.readLine());        assertEquals(            ""                                file is missing                                 "",            in.readLine());        assertEquals(            ""  -v (--verbose)                explain what is being done                      "",            in.readLine());        assertEquals(            ""  -V (--version-contol) WORD    explain what is being done                      "",            in.readLine());        assertEquals(            ""  -x (--one-file-system)        stay on this file system                        "",            in.readLine());        assertEquals(            ""  --help                        display this help and exit                      "",            in.readLine());        assertEquals(            ""  --version                     output version information and exit             "",            in.readLine());        assertEquals(            ""  SOURCE [SOURCE ...]                                                           "",            in.readLine());        assertEquals(            ""  DEST                                                                          "",            in.readLine());        assertNull(in.readLine());    }}"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,18,package org.apache.commons.cli2.application;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,20,import java.io.BufferedReader;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,21,import java.io.IOException;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,22,import java.io.PrintWriter;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,23,import java.io.StringReader;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,24,import java.io.StringWriter;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,26,import junit.framework.Test;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,28,import junit.framework.TestSuite;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,30,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,31,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,32,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,33,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,34,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,35,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,36,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,37,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,38,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,39,import org.apache.commons.cli2.option.ArgumentImpl;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,40,import org.apache.commons.cli2.option.SourceDestArgument;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,41,import org.apache.commons.cli2.util.HelpFormatter;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,44,* <p>Test the <code>cp</code> command. Duplicated Option types are not
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,45,* tested e.g. -a and -d are the same Option type.</p>
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,47,* <p>The following is the man output for 'cp'. See
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,48,"* <a href=""http://www.rt.com/man/cp.1.html"">http://www.rt.com/man/cp.1.html</a>.</p>"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,50,* <pre>
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,51,*  CP(1) FSF CP(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,53,*  NAME cp - copy files and directories
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,55,*  SYNOPSIS cp [OPTION]... SOURCE DEST cp [OPTION]... SOURCE... DIRECTORY
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,57,"*  DESCRIPTION Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY."
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,59,"*  -a, --archive same as -dpR"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,61,"*  -b, --backup make backup before removal"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,63,"*  -d, --no-dereference preserve links"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,65,"*  -f, --force remove existing destinations, never prompt"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,67,"*  -i, --interactive prompt before overwrite"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,69,"*  -l, --link link files instead of copying"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,71,"*  -p, --preserve preserve file attributes if possible"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,73,"*  -P, --parents append source path to DIRECTORY"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,74,"* -r copy recursively, non-directories as files"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,76,*  --sparse=WHEN control creation of sparse files
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,78,"*  -R, --recursive copy directories recursively"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,80,"*  -s, --symbolic-link make symbolic links instead of copying"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,82,"*  -S, --suffix=SUFFIX override the usual backup suffix"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,84,"*  -u, --update copy only when the SOURCE file is newer than the destination file or when the destination file is missing"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,86,"*  -v, --verbose explain what is being done"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,88,"*  -V, --version-control=WORD override the usual version control"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,90,"*  -x, --one-file-system stay on this file system"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,92,*  --help display this help and exit
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,94,*  --version output version information and exit
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,96,"*  By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well. That is the behavior selected by --sparse=auto. Specify --sparse=always to create a sparse DEST file when- ever the SOURCE file contains a long enough sequence of zero bytes. Use --sparse=never to inhibit creation of sparse files."
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,98,"*  The backup suffix is ~, unless set with SIMPLE_BACKUP_SUF- FIX. The version control may be set with VERSION_CONTROL, values are:"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,99,"* t, numbered make numbered backups"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,101,"*  nil, existing numbered if numbered backups exist, simple other- wise"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,103,"*  never, simple always make simple backups"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,105,"*  As a special case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the same name for an existing, regular file. * </pre>"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,106,* </pre>
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,108,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,109,* @author John Keyes
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,111,public class CpTest extends TestCase {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,113,/** Option Builder */
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,114,private static final DefaultOptionBuilder oBuilder =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,115,new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,117,/** Argument Builder */
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,118,private static final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,120,/** Group Builder */
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,121,private static final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,123,private Group options;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,125,public static Test suite() {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,126,return new TestSuite(CpTest.class);
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,129,private ArgumentImpl source;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,130,private ArgumentImpl dest;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,131,private Argument targets;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,133,private Option archive;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,134,private Option backup;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,135,private Option noDereference;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,136,private Option force;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,137,private Option interactive;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,138,private Option link;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,139,private Option preserve;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,140,private Option parents;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,141,private Option recursive1;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,142,private Option sparse;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,143,private Option recursive2;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,144,private Option symbolicLink;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,145,private Option suffix;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,146,private Option update;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,147,private Option verbose;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,148,private Option versionControl;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,149,private Option oneFileSystem;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,150,private Option help;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,151,private Option version;
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,153,public void setUp() {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,154,source =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,155,"(ArgumentImpl)aBuilder.withName(""SOURCE"").withMinimum(1).create();"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,156,dest =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,157,(ArgumentImpl)aBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,158,".withName(""DEST"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,159,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,160,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,161,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,162,"targets = new SourceDestArgument(source, dest);"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,164,archive =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,165,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,166,".withShortName(""a"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,167,".withLongName(""archive"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,168,".withDescription(""same as -dpR"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,169,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,171,backup =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,172,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,173,".withShortName(""b"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,174,".withLongName(""backup"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,175,".withDescription(""make backup before removal"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,176,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,178,noDereference =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,179,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,180,".withShortName(""d"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,181,".withLongName(""no-dereference"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,182,".withDescription(""preserve links"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,183,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,185,force =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,186,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,187,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,188,".withLongName(""force"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,189,".withDescription(""remove existing destinations, never prompt"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,190,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,192,interactive =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,193,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,194,".withShortName(""i"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,195,".withLongName(""interactive"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,196,".withDescription(""prompt before overwrite"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,197,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,199,link =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,200,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,201,".withShortName(""l"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,202,".withLongName(""link"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,203,".withDescription(""link files instead of copying"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,204,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,206,preserve =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,207,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,208,".withShortName(""p"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,209,".withLongName(""preserve"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,210,".withDescription(""preserve file attributes if possible"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,211,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,213,parents =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,214,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,215,".withShortName(""P"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,216,".withLongName(""parents"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,217,".withDescription(""append source path to DIRECTORY"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,218,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,220,recursive1 =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,221,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,222,".withShortName(""r"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,223,".withDescription(""copy recursively, non-directories as files"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,224,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,226,sparse =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,227,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,228,".withLongName(""sparse"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,229,".withDescription(""control creation of sparse files"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,230,.withArgument(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,231,aBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,232,".withName(""WHEN"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,233,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,234,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,235,.withInitialSeparator('=')
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,236,.create())
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,237,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,239,recursive2 =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,240,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,241,".withShortName(""R"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,242,".withLongName(""recursive"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,243,".withDescription(""copy directories recursively"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,244,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,246,symbolicLink =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,247,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,248,".withShortName(""s"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,249,".withLongName(""symbolic-link"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,250,".withDescription(""make symbolic links instead of copying"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,251,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,253,suffix =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,254,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,255,".withShortName(""S"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,256,".withLongName(""suffix"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,257,".withDescription(""override the usual backup suffix"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,258,.withArgument(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,259,aBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,260,".withName(""SUFFIX"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,261,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,262,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,263,.create())
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,264,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,266,update =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,267,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,268,".withShortName(""u"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,269,".withLongName(""update"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,270,".withDescription(""copy only when the SOURCE file is newer than the destination file or when the destination file is missing"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,271,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,273,verbose =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,274,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,275,".withShortName(""v"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,276,".withLongName(""verbose"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,277,".withDescription(""explain what is being done"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,278,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,280,versionControl =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,281,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,282,".withShortName(""V"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,283,".withLongName(""version-contol"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,284,".withDescription(""explain what is being done"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,285,.withArgument(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,286,aBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,287,".withName(""WORD"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,288,.withInitialSeparator('=')
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,289,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,290,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,291,.create())
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,292,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,294,oneFileSystem =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,295,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,296,".withShortName(""x"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,297,".withLongName(""one-file-system"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,298,".withDescription(""stay on this file system"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,299,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,301,help =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,302,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,303,".withLongName(""help"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,304,".withDescription(""display this help and exit"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,305,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,307,version =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,308,oBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,309,".withLongName(""version"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,310,".withDescription(""output version information and exit"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,311,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,313,options =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,314,gBuilder
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,315,.withOption(archive)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,316,.withOption(backup)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,317,.withOption(noDereference)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,318,.withOption(force)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,319,.withOption(interactive)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,320,.withOption(link)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,321,.withOption(preserve)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,322,.withOption(parents)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,323,.withOption(recursive1)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,324,.withOption(sparse)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,325,.withOption(recursive2)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,326,.withOption(symbolicLink)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,327,.withOption(suffix)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,328,.withOption(update)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,329,.withOption(verbose)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,330,.withOption(versionControl)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,331,.withOption(oneFileSystem)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,332,.withOption(help)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,333,.withOption(version)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,334,.withOption(targets)
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,335,".withName(""OPTIONS"")"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,336,.create();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,339,public void testNoSource() {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,340,Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,341,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,342,try {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,343,parser.parse(new String[0]);
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,345,catch (OptionException mve) {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,346,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,347,"""Missing value(s) SOURCE [SOURCE ...]"","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,348,mve.getMessage());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,352,public void testOneSource() throws OptionException {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,353,"final String[] args = new String[] { ""source1"", ""dest1"" };"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,354,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,355,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,356,final CommandLine commandLine = parser.parse(args);
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,358,"assertTrue(commandLine.getValues(source).contains(""source1""));"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,359,"assertEquals(1, commandLine.getValues(source).size());"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,360,"assertTrue(commandLine.getValues(dest).contains(""dest1""));"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,361,"assertEquals(1, commandLine.getValues(dest).size());"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,364,public void testMultiSource() throws OptionException {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,365,final String[] args =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,366,"new String[] { ""source1"", ""source2"", ""source3"", ""dest1"" };"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,367,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,368,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,369,final CommandLine commandLine = parser.parse(args);
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,371,"assertTrue(commandLine.getValues(source).contains(""source1""));"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,372,"assertTrue(commandLine.getValues(source).contains(""source2""));"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,373,"assertTrue(commandLine.getValues(source).contains(""source3""));"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,374,"assertEquals(3, commandLine.getValues(source).size());"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,376,"assertTrue(commandLine.getValues(dest).contains(""dest1""));"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,377,"assertEquals(1, commandLine.getValues(dest).size());"
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,380,public void testHelp() throws IOException {
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,381,final StringWriter out = new StringWriter();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,382,final HelpFormatter helpFormatter = new HelpFormatter();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,383,helpFormatter.setGroup(options);
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,384,helpFormatter.setPrintWriter(new PrintWriter(out));
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,385,helpFormatter.print();
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,387,final BufferedReader in =
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,388,new BufferedReader(new StringReader(out.toString()));
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,389,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,390,"""Usage:                                                                          "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,391,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,392,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,393,""" [-a -b -d -f -i -l -p -P -r --sparse <WHEN> -R -s -S <SUFFIX> -u -v -V <WORD>  "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,394,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,395,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,396,"""-x --help --version] <SOURCE1> [<SOURCE2> ...] <DEST>                           "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,397,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,398,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,399,"""OPTIONS                                                                         "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,400,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,401,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,402,"""  -a (--archive)                same as -dpR                                    "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,403,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,404,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,405,"""  -b (--backup)                 make backup before removal                      "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,406,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,407,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,408,"""  -d (--no-dereference)         preserve links                                  "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,409,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,410,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,411,"""  -f (--force)                  remove existing destinations, never prompt      "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,412,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,413,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,414,"""  -i (--interactive)            prompt before overwrite                         "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,415,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,416,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,417,"""  -l (--link)                   link files instead of copying                   "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,418,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,419,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,420,"""  -p (--preserve)               preserve file attributes if possible            "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,421,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,422,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,423,"""  -P (--parents)                append source path to DIRECTORY                 "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,424,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,425,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,426,"""  -r                            copy recursively, non-directories as files      "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,427,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,428,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,429,"""  --sparse WHEN                 control creation of sparse files                "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,430,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,431,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,432,"""  -R (--recursive)              copy directories recursively                    "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,433,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,434,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,435,"""  -s (--symbolic-link)          make symbolic links instead of copying          "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,436,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,437,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,438,"""  -S (--suffix) SUFFIX          override the usual backup suffix                "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,439,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,440,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,441,"""  -u (--update)                 copy only when the SOURCE file is newer than    "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,442,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,443,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,444,"""                                the destination file or when the destination    "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,445,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,446,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,447,"""                                file is missing                                 "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,448,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,449,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,450,"""  -v (--verbose)                explain what is being done                      "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,451,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,452,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,453,"""  -V (--version-contol) WORD    explain what is being done                      "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,454,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,455,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,456,"""  -x (--one-file-system)        stay on this file system                        "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,457,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,458,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,459,"""  --help                        display this help and exit                      "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,460,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,461,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,462,"""  --version                     output version information and exit             "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,463,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,464,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,465,"""  SOURCE [SOURCE ...]                                                           "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,466,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,467,assertEquals(
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,468,"""  DEST                                                                          "","
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,469,in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,470,assertNull(in.readLine());
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.application;import junit.framework.TestCase;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.CommandBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.option.ArgumentTest;//TODO Build up CvsTest like CpTestpublic class CvsTest extends TestCase {    public void testCVS() {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final CommandBuilder cbuilder = new CommandBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Group commands =            gbuilder                .withName(""commands"")                .withOption(                    cbuilder                        .withName(""add"")                        .withName(""ad"")                        .withName(""new"")                        .withDescription(""Add a new file/directory to the repository"")                        .create())                .withOption(                    cbuilder                        .withName(""admin"")                        .withName(""adm"")                        .withName(""rcs"")                        .withDescription(""Administration front end for rcs"")                        .create())                .withOption(                    cbuilder                        .withName(""annotate"")                        .withName(""ann"")                        .withDescription(""Show last revision where each line was modified"")                        .create())                .withOption(                    cbuilder                        .withName(""checkout"")                        .withName(""co"")                        .withName(""get"")                        .withDescription(""Checkout sources for editing"")                        .create())                .withOption(                    cbuilder                        .withName(""commit"")                        .withName(""ci"")                        .withName(""com"")                        .withDescription(""Check files into the repository"")                        .create())                .withOption(                    cbuilder                        .withName(""diff"")                        .withName(""di"")                        .withName(""dif"")                        .withDescription(""Show differences between revisions"")                        .create())                .withOption(                    cbuilder                        .withName(""edit"")                        .withDescription(""Get ready to edit a watched file"")                        .create())                .withOption(                    cbuilder                        .withName(""editors"")                        .withDescription(""See who is editing a watched file"")                        .create())                .withOption(                    cbuilder                        .withName(""export"")                        .withName(""exp"")                        .withName(""ex"")                        .withDescription(""Export sources from CVS, similar to checkout"")                        .create())                .withOption(                    cbuilder                        .withName(""history"")                        .withName(""hi"")                        .withName(""his"")                        .withDescription(""Show repository access history"")                        .create())                .withOption(                    cbuilder                        .withName(""import"")                        .withName(""im"")                        .withName(""imp"")                        .withDescription(""Import sources into CVS, using vendor branches"")                        .create())                .withOption(                    cbuilder                        .withName(""init"")                        .withDescription(""Create a CVS repository if it doesn't exist"")                        .create())                .withOption(                    cbuilder                        .withName(""log"")                        .withName(""lo"")                        .withName(""rlog"")                        .withDescription(""Print out history information for files"")                        .create())                .withOption(                    cbuilder                        .withName(""login"")                        .withName(""logon"")                        .withName(""lgn"")                        .withDescription(""Prompt for password for authenticating server"")                        .create())                .withOption(                    cbuilder                        .withName(""logout"")                        .withDescription(""Removes entry in .cvspass for remote repository"")                        .create())                .withOption(                    cbuilder                        .withName(""rdiff"")                        .withName(""patch"")                        .withName(""pa"")                        .withDescription(""Create 'patch' format diffs between releases"")                        .create())                .withOption(                    cbuilder                        .withName(""release"")                        .withName(""re"")                        .withName(""rel"")                        .withDescription(""Indicate that a Module is no longer in use"")                        .create())                .withOption(                    cbuilder                        .withName(""remove"")                        .withName(""rm"")                        .withName(""delete"")                        .withDescription(""Remove an entry from the repository"")                        .create())                .withOption(                    cbuilder                        .withName(""rtag"")                        .withName(""rt"")                        .withName(""rfreeze"")                        .withDescription(""Add a symbolic tag to a module"")                        .create())                .withOption(                    cbuilder                        .withName(""status"")                        .withName(""st"")                        .withName(""stat"")                        .withDescription(""Display status information on checked out files"")                        .create())                .withOption(                    cbuilder                        .withName(""tag"")                        .withName(""ta"")                        .withName(""freeze"")                        .withDescription(""Add a symbolic tag to checked out version of files"")                        .create())                .withOption(                    cbuilder                        .withName(""unedit"")                        .withDescription(""Undo an edit command"")                        .create())                .withOption(                    cbuilder                        .withName(""update"")                        .withName(""up"")                        .withName(""upd"")                        .withDescription(""Bring work tree in sync with repository"")                        .create())                .withOption(                    cbuilder                        .withName(""watch"")                        .withDescription(""Set watches"")                        .create())                .withOption(                    cbuilder                        .withName(""watchers"")                        .withDescription(""See who is watching a file"")                        .create())                .withOption(                    cbuilder                        .withName(""version"")                        .withName(""ve"")                        .withName(""ver"")                        .withDescription(""????"")                        .create())                .withOption(ArgumentTest.buildTargetsArgument())                .create();        final Group cvsOptions =            new GroupBuilder()                .withName(""cvs-options"")                .withOption(                    obuilder                        .withShortName(""H"")                        .withDescription(""Displays usage information for command."")                        .create())                .withOption(                    obuilder                        .withShortName(""Q"")                        .withDescription(""Cause CVS to be really quiet."")                        .create())                .withOption(                    obuilder                        .withShortName(""q"")                        .withDescription(""Cause CVS to be somewhat quiet."")                        .create())                .withOption(                    obuilder                        .withShortName(""r"")                        .withDescription(""Make checked-out files read-only."")                        .create())                .withOption(                    obuilder                        .withShortName(""w"")                        .withDescription(""Make checked-out files read-write (default)."")                        .create())                .withOption(                    obuilder                        .withShortName(""l"")                        .withDescription(""Turn history logging off."")                        .create())                .withOption(                    obuilder                        .withShortName(""n"")                        .withDescription(""Do not execute anything that will change the disk."")                        .create())                .withOption(                    obuilder                        .withShortName(""t"")                        .withDescription(""Show trace of program execution -- try with -n."")                        .create())                .withOption(                    obuilder                        .withShortName(""v"")                        .withDescription(""CVS version and copyright."")                        .create())                .withOption(                    obuilder                        .withLongName(""crlf"")                        .withDescription(""Use the Dos line feed for text files (default)."")                        .create())                .withOption(                    obuilder                        .withLongName(""lf"")                        .withDescription(""Use the Unix line feed for text files."")                        .create())                .withOption(                    obuilder                        .withShortName(""T"")                        .withDescription(""Use 'tmpdir' for temporary files."")                        .withArgument(abuilder.withName(""tmpdir"").create())                        .create())                .withOption(                    obuilder                        .withShortName(""e"")                        .withDescription(""Use 'editor' for editing log information."")                        .withArgument(abuilder.withName(""editor"").create())                        .create())                .withOption(                    obuilder                        .withShortName(""d"")                        .withDescription(""Overrides $CVSROOT as the root of the CVS tree."")                        .withArgument(abuilder.withName(""CVS_root"").create())                        .create())                .withOption(                    obuilder                        .withShortName(""f"")                        .withDescription(""Do not use the ~/.cvsrc file."")                        .create())                .withOption(                    obuilder                        .withShortName(""z"")                        .withDescription(""Use compression level '#' for net traffic."")                        .withArgument(abuilder.withName(""#"").create())                        .create())                .withOption(                    obuilder                        .withShortName(""a"")                        .withDescription(""Authenticate all net traffic."")                        .create())                .withOption(                    obuilder                        .withShortName(""s"")                        .withDescription(""Set CVS user variable."")                        .withArgument(abuilder.withName(""VAR=VAL"").create())                        .create())                .withOption(commands)                .create();        assertNotNull(cvsOptions);    }}"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,18,package org.apache.commons.cli2.application;
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,22,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,23,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,24,import org.apache.commons.cli2.builder.CommandBuilder;
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,25,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,26,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,27,import org.apache.commons.cli2.option.ArgumentTest;
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,29,//TODO Build up CvsTest like CpTest
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,30,public class CvsTest extends TestCase {
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,31,public void testCVS() {
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,32,final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,33,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,34,final CommandBuilder cbuilder = new CommandBuilder();
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,35,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,37,final Group commands =
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,38,gbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,39,".withName(""commands"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,40,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,41,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,42,".withName(""add"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,43,".withName(""ad"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,44,".withName(""new"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,45,".withDescription(""Add a new file/directory to the repository"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,46,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,47,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,48,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,49,".withName(""admin"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,50,".withName(""adm"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,51,".withName(""rcs"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,52,".withDescription(""Administration front end for rcs"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,53,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,54,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,55,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,56,".withName(""annotate"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,57,".withName(""ann"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,58,".withDescription(""Show last revision where each line was modified"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,59,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,60,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,61,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,62,".withName(""checkout"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,63,".withName(""co"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,64,".withName(""get"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,65,".withDescription(""Checkout sources for editing"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,66,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,67,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,68,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,69,".withName(""commit"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,70,".withName(""ci"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,71,".withName(""com"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,72,".withDescription(""Check files into the repository"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,73,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,74,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,75,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,76,".withName(""diff"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,77,".withName(""di"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,78,".withName(""dif"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,79,".withDescription(""Show differences between revisions"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,80,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,81,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,82,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,83,".withName(""edit"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,84,".withDescription(""Get ready to edit a watched file"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,85,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,86,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,87,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,88,".withName(""editors"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,89,".withDescription(""See who is editing a watched file"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,90,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,91,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,92,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,93,".withName(""export"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,94,".withName(""exp"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,95,".withName(""ex"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,96,".withDescription(""Export sources from CVS, similar to checkout"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,97,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,98,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,99,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,100,".withName(""history"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,101,".withName(""hi"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,102,".withName(""his"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,103,".withDescription(""Show repository access history"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,104,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,105,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,106,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,107,".withName(""import"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,108,".withName(""im"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,109,".withName(""imp"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,110,".withDescription(""Import sources into CVS, using vendor branches"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,111,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,112,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,113,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,114,".withName(""init"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,115,".withDescription(""Create a CVS repository if it doesn't exist"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,116,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,117,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,118,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,119,".withName(""log"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,120,".withName(""lo"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,121,".withName(""rlog"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,122,".withDescription(""Print out history information for files"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,123,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,124,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,125,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,126,".withName(""login"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,127,".withName(""logon"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,128,".withName(""lgn"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,129,".withDescription(""Prompt for password for authenticating server"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,130,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,131,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,132,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,133,".withName(""logout"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,134,".withDescription(""Removes entry in .cvspass for remote repository"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,135,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,136,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,137,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,138,".withName(""rdiff"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,139,".withName(""patch"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,140,".withName(""pa"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,141,".withDescription(""Create 'patch' format diffs between releases"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,142,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,143,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,144,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,145,".withName(""release"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,146,".withName(""re"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,147,".withName(""rel"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,148,".withDescription(""Indicate that a Module is no longer in use"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,149,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,150,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,151,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,152,".withName(""remove"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,153,".withName(""rm"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,154,".withName(""delete"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,155,".withDescription(""Remove an entry from the repository"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,156,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,157,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,158,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,159,".withName(""rtag"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,160,".withName(""rt"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,161,".withName(""rfreeze"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,162,".withDescription(""Add a symbolic tag to a module"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,163,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,164,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,165,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,166,".withName(""status"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,167,".withName(""st"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,168,".withName(""stat"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,169,".withDescription(""Display status information on checked out files"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,170,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,171,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,172,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,173,".withName(""tag"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,174,".withName(""ta"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,175,".withName(""freeze"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,176,".withDescription(""Add a symbolic tag to checked out version of files"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,177,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,178,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,179,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,180,".withName(""unedit"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,181,".withDescription(""Undo an edit command"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,182,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,183,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,184,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,185,".withName(""update"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,186,".withName(""up"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,187,".withName(""upd"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,188,".withDescription(""Bring work tree in sync with repository"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,189,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,190,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,191,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,192,".withName(""watch"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,193,".withDescription(""Set watches"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,194,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,195,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,196,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,197,".withName(""watchers"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,198,".withDescription(""See who is watching a file"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,199,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,200,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,201,cbuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,202,".withName(""version"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,203,".withName(""ve"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,204,".withName(""ver"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,205,".withDescription(""????"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,206,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,207,.withOption(ArgumentTest.buildTargetsArgument())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,208,.create();
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,210,final Group cvsOptions =
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,211,new GroupBuilder()
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,212,".withName(""cvs-options"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,213,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,214,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,215,".withShortName(""H"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,216,".withDescription(""Displays usage information for command."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,217,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,218,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,219,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,220,".withShortName(""Q"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,221,".withDescription(""Cause CVS to be really quiet."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,222,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,223,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,224,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,225,".withShortName(""q"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,226,".withDescription(""Cause CVS to be somewhat quiet."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,227,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,228,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,229,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,230,".withShortName(""r"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,231,".withDescription(""Make checked-out files read-only."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,232,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,233,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,234,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,235,".withShortName(""w"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,236,".withDescription(""Make checked-out files read-write (default)."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,237,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,238,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,239,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,240,".withShortName(""l"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,241,".withDescription(""Turn history logging off."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,242,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,243,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,244,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,245,".withShortName(""n"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,246,".withDescription(""Do not execute anything that will change the disk."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,247,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,248,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,249,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,250,".withShortName(""t"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,251,".withDescription(""Show trace of program execution -- try with -n."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,252,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,253,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,254,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,255,".withShortName(""v"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,256,".withDescription(""CVS version and copyright."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,257,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,258,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,259,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,260,".withLongName(""crlf"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,261,".withDescription(""Use the Dos line feed for text files (default)."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,262,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,263,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,264,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,265,".withLongName(""lf"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,266,".withDescription(""Use the Unix line feed for text files."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,267,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,268,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,269,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,270,".withShortName(""T"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,271,".withDescription(""Use 'tmpdir' for temporary files."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,272,".withArgument(abuilder.withName(""tmpdir"").create())"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,273,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,274,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,275,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,276,".withShortName(""e"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,277,".withDescription(""Use 'editor' for editing log information."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,278,".withArgument(abuilder.withName(""editor"").create())"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,279,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,280,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,281,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,282,".withShortName(""d"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,283,".withDescription(""Overrides $CVSROOT as the root of the CVS tree."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,284,".withArgument(abuilder.withName(""CVS_root"").create())"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,285,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,286,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,287,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,288,".withShortName(""f"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,289,".withDescription(""Do not use the ~/.cvsrc file."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,290,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,291,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,292,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,293,".withShortName(""z"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,294,".withDescription(""Use compression level '#' for net traffic."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,295,".withArgument(abuilder.withName(""#"").create())"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,296,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,297,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,298,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,299,".withShortName(""a"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,300,".withDescription(""Authenticate all net traffic."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,301,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,302,.withOption(
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,303,obuilder
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,304,".withShortName(""s"")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,305,".withDescription(""Set CVS user variable."")"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,306,".withArgument(abuilder.withName(""VAR=VAL"").create())"
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,307,.create())
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,308,.withOption(commands)
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,309,.create();
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,311,assertNotNull(cvsOptions);
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.application;import java.util.HashSet;import java.util.Set;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.validation.EnumValidator;/** * <p>Test the <code>ls</code> command. Duplicated Option types are not * tested e.g. -a and -d are the same Option type.</p> * * <p>The following is the man output for 'ls'. See * <a href=""http://www.rt.com/man/ls.1.html"">http://www.rt.com/man/ls.1.html</a>.</p> * * <pre> *  LS(1) FSF LS(1) * *  NAME ls - list directory contents * *  SYNOPSIS ls [OPTION]... [FILE]... * *  DESCRIPTION List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuSUX nor --sort. * *  -a, --all do not hide entries starting with . * *  -A, --almost-all do not list implied . and .. * *  -b, --escape print octal escapes for nongraphic characters * *  --block-size=SIZE use SIZE-byte blocks * *  -B, --ignore-backups do not list implied entries ending with ~ -c sort by change time; with -l: show ctime -C list entries by columns * *  --color[=WHEN] control whether color is used to distinguish file types. WHEN may be `never', `always', or `auto' * *  -d, --directory list directory entries instead of contents * *  -D, --dired generate output designed for Emacs' dired mode -f do not sort, enable -aU, disable -lst * *  -F, --classify append indicator (one of /=@|*) to entries * *  --format=WORD across -x, commas -m, horizontal -x, long -l, sin- gle-column -1, verbose -l, vertical -C * *  --full-time list both full date and full time -g (ignored) * *  -G, --no-group inhibit display of group information * *  -h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G) * *  -H, --si likewise, but use powers of 1000 not 1024 * *  --indicator-style=WORD append indicator with style WORD to entry names: none (default), classify (-F), file-type (-p) * *  -i, --inode print index number of each file * *  -I, --ignore=PATTERN do not list implied entries matching shell PATTERN * *  -k, --kilobytes like --block-size=1024 -l use a long listing format * *  -L, --dereference list entries pointed to by symbolic links -m fill width with a comma separated list of entries * *  -n, --numeric-uid-gid list numeric UIDs and GIDs instead of names * *  -N, --literal print raw entry names (don't treat e.g. control characters specially) -o use long listing format without group info * *  -p, --file-type append indicator (one of /=@|) to entries * *  -q, --hide-control-chars print ? instead of non graphic characters * *  --show-control-chars show non graphic characters as-is (default) * *  -Q, --quote-name enclose entry names in double quotes * *  --quoting-style=WORD use quoting style WORD for entry names: literal, shell, shell-always, c, escape * *  -r, --reverse reverse order while sorting * *  -R, --recursive list subdirectories recursively * *  -s, --size print size of each file, in blocks -S sort by file size * *  --sort=WORD extension -X, none -U, size -S, time -t, version -v status -c, time -t, atime -u, access -u, use -u * *  --time=WORD show time as WORD instead of modification time: atime, access, use, ctime or status; use specified time as sort key if --sort=time -t sort by modification time * *  -T, --tabsize=COLS assume tab stops at each COLS instead of 8 -u sort by last access time; with -l: show atime -U do not sort; list entries in directory order -v sort by version * *  -w, --width=COLS assume screen width instead of current value -x list entries by lines instead of by columns -X sort alphabetically by entry extension -1 list one file per line * *  --help display this help and exit * *  --version output version information and exit * *  By default, color is not used to distinguish types of files. That is equivalent to using --color=none. Using the --color option without the optional WHEN argument is equivalent to using --color=always. With --color=auto, color codes are output only if standard output is con- nected to a terminal (tty). * </pre> * * @author Rob Oxspring * @author John Keyes */public class LsTest extends TestCase {    /** Option Builder */    private static final DefaultOptionBuilder oBuilder =        new DefaultOptionBuilder();    /** Argument Builder */    private static final ArgumentBuilder aBuilder = new ArgumentBuilder();    /** Group Builder */    private static final GroupBuilder gBuilder = new GroupBuilder();    private static Group options;    public static Test suite() {        return new TestSuite(LsTest.class);    }    /**     * Required ctor.     *     * @param name     *            the name of the TestCase     */    public LsTest(final String name) {        super(name);    }    public void setUp() {        if (LsTest.options == null) {            final Option a =                oBuilder                    .withShortName(""a"")                    .withLongName(""all"")                    .withDescription(""do not hide entries starting with ."")                    .create();            final Option blockSize =                oBuilder                    .withLongName(""block-size"")                    .withRequired(false)                    .withDescription(""use SIZE-byte blocks"")                    .withArgument(                        aBuilder                            .withMaximum(1)                            .withMinimum(1)                            .withInitialSeparator('=')                            .create())                    .create();            final Option c =                oBuilder                    .withShortName(""c"")                    .withRequired(false)                    .withDescription(""with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime"")                    .create();            final Set colors = new HashSet();            colors.add(""never"");            colors.add(""always"");            colors.add(""auto"");            final Option color =                oBuilder                    .withLongName(""color"")                    .withRequired(false)                    .withDescription(""control  whether  color is used to distinguish file types.  WHEN may be `never', `always', or `auto'"")                    .withArgument(                        aBuilder                            .withMaximum(1)                            .withMinimum(1)                            .withInitialSeparator('=')                            .withValidator(new EnumValidator(colors))                            .create())                    .create();            LsTest.options =                gBuilder                    .withOption(a)                    .withOption(blockSize)                    .withOption(c)                    .withOption(color)                    .create();        }    }    public void testLs() throws OptionException {        // create the command line parser        Parser parser = new Parser();        parser.setGroup(options);        CommandLine line =            parser.parse(new String[] { ""--block-size=10"", ""--color=never"" });        assertTrue(line.hasOption(""--block-size""));        assertEquals(line.getValue(""--block-size""), ""10"");        assertFalse(line.hasOption(""--ignore-backups""));    }}"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,18,package org.apache.commons.cli2.application;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,20,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,21,import java.util.Set;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,23,import junit.framework.Test;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,25,import junit.framework.TestSuite;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,27,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,28,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,29,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,30,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,31,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,32,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,33,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,34,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,35,import org.apache.commons.cli2.validation.EnumValidator;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,38,* <p>Test the <code>ls</code> command. Duplicated Option types are not
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,39,* tested e.g. -a and -d are the same Option type.</p>
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,41,* <p>The following is the man output for 'ls'. See
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,42,"* <a href=""http://www.rt.com/man/ls.1.html"">http://www.rt.com/man/ls.1.html</a>.</p>"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,44,* <pre>
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,45,*  LS(1) FSF LS(1)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,47,*  NAME ls - list directory contents
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,49,*  SYNOPSIS ls [OPTION]... [FILE]...
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,51,*  DESCRIPTION List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuSUX nor --sort.
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,53,"*  -a, --all do not hide entries starting with ."
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,55,"*  -A, --almost-all do not list implied . and .."
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,57,"*  -b, --escape print octal escapes for nongraphic characters"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,59,*  --block-size=SIZE use SIZE-byte blocks
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,61,"*  -B, --ignore-backups do not list implied entries ending with ~ -c sort by change time; with -l: show ctime -C list entries by columns"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,63,"*  --color[=WHEN] control whether color is used to distinguish file types. WHEN may be `never', `always', or `auto'"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,65,"*  -d, --directory list directory entries instead of contents"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,67,"*  -D, --dired generate output designed for Emacs' dired mode -f do not sort, enable -aU, disable -lst"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,69,"*  -F, --classify append indicator (one of /=@|*) to entries"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,71,"*  --format=WORD across -x, commas -m, horizontal -x, long -l, sin- gle-column -1, verbose -l, vertical -C"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,73,*  --full-time list both full date and full time -g (ignored)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,75,"*  -G, --no-group inhibit display of group information"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,77,"*  -h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G)"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,79,"*  -H, --si likewise, but use powers of 1000 not 1024"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,81,"*  --indicator-style=WORD append indicator with style WORD to entry names: none (default), classify (-F), file-type (-p)"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,83,"*  -i, --inode print index number of each file"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,85,"*  -I, --ignore=PATTERN do not list implied entries matching shell PATTERN"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,87,"*  -k, --kilobytes like --block-size=1024 -l use a long listing format"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,89,"*  -L, --dereference list entries pointed to by symbolic links -m fill width with a comma separated list of entries"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,91,"*  -n, --numeric-uid-gid list numeric UIDs and GIDs instead of names"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,93,"*  -N, --literal print raw entry names (don't treat e.g. control characters specially) -o use long listing format without group info"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,95,"*  -p, --file-type append indicator (one of /=@|) to entries"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,97,"*  -q, --hide-control-chars print ? instead of non graphic characters"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,99,*  --show-control-chars show non graphic characters as-is (default)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,101,"*  -Q, --quote-name enclose entry names in double quotes"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,103,"*  --quoting-style=WORD use quoting style WORD for entry names: literal, shell, shell-always, c, escape"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,105,"*  -r, --reverse reverse order while sorting"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,107,"*  -R, --recursive list subdirectories recursively"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,109,"*  -s, --size print size of each file, in blocks -S sort by file size"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,111,"*  --sort=WORD extension -X, none -U, size -S, time -t, version -v status -c, time -t, atime -u, access -u, use -u"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,113,"*  --time=WORD show time as WORD instead of modification time: atime, access, use, ctime or status; use specified time as sort key if --sort=time -t sort by modification time"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,115,"*  -T, --tabsize=COLS assume tab stops at each COLS instead of 8 -u sort by last access time; with -l: show atime -U do not sort; list entries in directory order -v sort by version"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,117,"*  -w, --width=COLS assume screen width instead of current value -x list entries by lines instead of by columns -X sort alphabetically by entry extension -1 list one file per line"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,119,*  --help display this help and exit
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,121,*  --version output version information and exit
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,123,"*  By default, color is not used to distinguish types of files. That is equivalent to using --color=none. Using the --color option without the optional WHEN argument is equivalent to using --color=always. With --color=auto, color codes are output only if standard output is con- nected to a terminal (tty)."
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,124,* </pre>
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,126,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,127,* @author John Keyes
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,129,public class LsTest extends TestCase {
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,131,/** Option Builder */
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,132,private static final DefaultOptionBuilder oBuilder =
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,133,new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,135,/** Argument Builder */
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,136,private static final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,138,/** Group Builder */
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,139,private static final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,141,private static Group options;
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,143,public static Test suite() {
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,144,return new TestSuite(LsTest.class);
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,148,* Required ctor.
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,150,* @param name
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,151,*            the name of the TestCase
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,153,public LsTest(final String name) {
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,154,super(name);
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,157,public void setUp() {
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,158,if (LsTest.options == null) {
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,159,final Option a =
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,160,oBuilder
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,161,".withShortName(""a"")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,162,".withLongName(""all"")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,163,".withDescription(""do not hide entries starting with ."")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,164,.create();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,166,final Option blockSize =
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,167,oBuilder
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,168,".withLongName(""block-size"")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,169,.withRequired(false)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,170,".withDescription(""use SIZE-byte blocks"")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,171,.withArgument(
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,172,aBuilder
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,173,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,174,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,175,.withInitialSeparator('=')
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,176,.create())
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,177,.create();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,179,final Option c =
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,180,oBuilder
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,181,".withShortName(""c"")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,182,.withRequired(false)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,183,".withDescription(""with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime"")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,184,.create();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,186,final Set colors = new HashSet();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,187,"colors.add(""never"");"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,188,"colors.add(""always"");"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,189,"colors.add(""auto"");"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,190,final Option color =
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,191,oBuilder
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,192,".withLongName(""color"")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,193,.withRequired(false)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,194,".withDescription(""control  whether  color is used to distinguish file types.  WHEN may be `never', `always', or `auto'"")"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,195,.withArgument(
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,196,aBuilder
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,197,.withMaximum(1)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,198,.withMinimum(1)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,199,.withInitialSeparator('=')
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,200,.withValidator(new EnumValidator(colors))
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,201,.create())
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,202,.create();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,204,LsTest.options =
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,205,gBuilder
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,206,.withOption(a)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,207,.withOption(blockSize)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,208,.withOption(c)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,209,.withOption(color)
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,210,.create();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,214,public void testLs() throws OptionException {
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,215,// create the command line parser
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,216,Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,217,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,218,CommandLine line =
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,219,"parser.parse(new String[] { ""--block-size=10"", ""--color=never"" });"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,221,"assertTrue(line.hasOption(""--block-size""));"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,222,"assertEquals(line.getValue(""--block-size""), ""10"");"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,223,"assertFalse(line.hasOption(""--ignore-backups""));"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author John Keyes */public class Bug13886Test extends TestCase {    public Bug13886Test(final String name) {        super(name);    }    public void testMandatoryGroup() throws Exception {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Option a = obuilder.withShortName(""a"").create();        final Option b = obuilder.withShortName(""b"").create();        final Group options =            gbuilder                .withOption(a)                .withOption(b)                .withMaximum(1)                .withMinimum(1)                .create();        final Parser parser = new Parser();        parser.setGroup(options);        try {            parser.parse(new String[] {            });            fail(""Expected MissingOptionException not caught"");        }        catch (final OptionException exp) {            assertEquals(""Missing option -a|-b"", exp.getMessage());        }        try {            parser.parse(new String[] { ""-a"" });        }        catch (final OptionException exp) {            fail(""Unexpected MissingOptionException caught"");        }        try {            parser.parse(new String[] { ""-b"" });        }        catch (final OptionException exp) {            fail(""Unexpected MissingOptionException caught"");        }        try {            parser.parse(new String[] { ""-a"", ""-b"" });            fail(""Expected UnexpectedOptionException not caught"");        }        catch (final OptionException exp) {            assertEquals(                ""Unexpected -b while processing -a|-b"",                exp.getMessage());        }    }}"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,22,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,23,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,24,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,25,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,26,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,27,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,30,* @author John Keyes
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,32,public class Bug13886Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,34,public Bug13886Test(final String name) {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,35,super(name);
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,38,public void testMandatoryGroup() throws Exception {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,39,final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,40,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,42,"final Option a = obuilder.withShortName(""a"").create();"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,44,"final Option b = obuilder.withShortName(""b"").create();"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,46,final Group options =
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,47,gbuilder
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,48,.withOption(a)
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,49,.withOption(b)
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,50,.withMaximum(1)
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,51,.withMinimum(1)
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,52,.create();
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,54,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,55,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,57,try {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,58,parser.parse(new String[] {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,60,"fail(""Expected MissingOptionException not caught"");"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,62,catch (final OptionException exp) {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,63,"assertEquals(""Missing option -a|-b"", exp.getMessage());"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,66,try {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,67,"parser.parse(new String[] { ""-a"" });"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,69,catch (final OptionException exp) {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,70,"fail(""Unexpected MissingOptionException caught"");"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,73,try {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,74,"parser.parse(new String[] { ""-b"" });"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,76,catch (final OptionException exp) {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,77,"fail(""Unexpected MissingOptionException caught"");"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,80,try {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,81,"parser.parse(new String[] { ""-a"", ""-b"" });"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,82,"fail(""Expected UnexpectedOptionException not caught"");"
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,84,catch (final OptionException exp) {
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,85,assertEquals(
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,86,"""Unexpected -b while processing -a|-b"","
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,87,exp.getMessage());
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author John Keyes */public class Bug13935Test extends TestCase {    public Bug13935Test(final String name) {        super(name);    }    public void testRequiredGroup() throws Exception {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Option testOption =            obuilder                .withShortName(""a"")                .withArgument(abuilder.withName(""quoted string"").create())                .create();        final Group options = gbuilder.withOption(testOption).create();        final Parser parser = new Parser();        parser.setGroup(options);        final CommandLine cmdLine =            parser.parse(new String[] { ""-a"", ""\""two tokens\"""" });        assertTrue(cmdLine.hasOption(""-a""));        assertEquals(""two tokens"", cmdLine.getValue(""-a""));    }}"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,22,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,23,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,24,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,25,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,26,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,27,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,28,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,31,* @author John Keyes
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,33,public class Bug13935Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,35,public Bug13935Test(final String name) {
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,36,super(name);
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,39,public void testRequiredGroup() throws Exception {
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,40,final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,41,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,42,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,44,final Option testOption =
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,45,obuilder
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,46,".withShortName(""a"")"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,47,".withArgument(abuilder.withName(""quoted string"").create())"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,48,.create();
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,50,final Group options = gbuilder.withOption(testOption).create();
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,52,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,53,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,55,final CommandLine cmdLine =
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,56,"parser.parse(new String[] { ""-a"", ""\""two tokens\"""" });"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,58,"assertTrue(cmdLine.hasOption(""-a""));"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,59,"assertEquals(""two tokens"", cmdLine.getValue(""-a""));"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author John Keyes */public class Bug15046Test extends TestCase {    public Bug15046Test(String name) {        super(name);    }    public void testParamNamedAsOption() throws Exception {        final String[] CLI_ARGS = new String[] { ""-z"", ""c"" };        DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        ArgumentBuilder abuilder = new ArgumentBuilder();        Option option =            obuilder                .withShortName(""z"")                .withLongName(""timezone"")                .withDescription(""affected option"")                .withArgument(abuilder.withName(""timezone"").create())                .create();        GroupBuilder gbuilder = new GroupBuilder();        Group options =            gbuilder.withName(""bug15046"").withOption(option).create();        Parser parser = new Parser();        parser.setGroup(options);        CommandLine line = parser.parse(CLI_ARGS);        assertEquals(""c"", line.getValue(""-z""));        Option c =            obuilder                .withShortName(""c"")                .withLongName(""conflict"")                .withDescription(""conflicting option"")                .withArgument(abuilder.withName(""conflict"").create())                .create();        options =            gbuilder                .withName(""bug15046"")                .withOption(option)                .withOption(c)                .create();        parser.setGroup(options);        line = parser.parse(CLI_ARGS);        assertEquals(""c"", line.getValue(""-z""));    }}"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,22,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,23,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,24,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,25,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,26,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,27,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,28,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,31,* @author John Keyes
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,33,public class Bug15046Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,35,public Bug15046Test(String name) {
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,36,super(name);
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,39,public void testParamNamedAsOption() throws Exception {
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,40,"final String[] CLI_ARGS = new String[] { ""-z"", ""c"" };"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,42,DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,43,ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,45,Option option =
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,46,obuilder
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,47,".withShortName(""z"")"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,48,".withLongName(""timezone"")"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,49,".withDescription(""affected option"")"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,50,".withArgument(abuilder.withName(""timezone"").create())"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,51,.create();
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,53,GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,54,Group options =
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,55,"gbuilder.withName(""bug15046"").withOption(option).create();"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,57,Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,58,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,59,CommandLine line = parser.parse(CLI_ARGS);
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,61,"assertEquals(""c"", line.getValue(""-z""));"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,63,Option c =
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,64,obuilder
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,65,".withShortName(""c"")"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,66,".withLongName(""conflict"")"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,67,".withDescription(""conflicting option"")"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,68,".withArgument(abuilder.withName(""conflict"").create())"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,69,.create();
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,71,options =
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,72,gbuilder
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,73,".withName(""bug15046"")"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,74,.withOption(option)
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,75,.withOption(c)
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,76,.create();
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,78,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,79,line = parser.parse(CLI_ARGS);
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,81,"assertEquals(""c"", line.getValue(""-z""));"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author John Keyes */public class Bug15648Test extends TestCase {    public Bug15648Test(final String name) {        super(name);    }    public void testQuotedArgumentValue() throws Exception {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Option testOption =            obuilder                .withShortName(""a"")                .withArgument(abuilder.withName(""quoted string"").create())                .create();        final Group options = gbuilder.withOption(testOption).create();        final Parser parser = new Parser();        parser.setGroup(options);        final CommandLine cmdLine =            parser.parse(new String[] { ""-a"", ""\""two tokens\"""" });        assertTrue(cmdLine.hasOption(""-a""));        assertEquals(""two tokens"", cmdLine.getValue(""-a""));    }}"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,22,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,23,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,24,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,25,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,26,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,27,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,28,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,31,* @author John Keyes
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,33,public class Bug15648Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,35,public Bug15648Test(final String name) {
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,36,super(name);
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,39,public void testQuotedArgumentValue() throws Exception {
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,40,final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,41,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,42,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,44,final Option testOption =
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,45,obuilder
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,46,".withShortName(""a"")"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,47,".withArgument(abuilder.withName(""quoted string"").create())"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,48,.create();
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,50,final Group options = gbuilder.withOption(testOption).create();
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,52,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,53,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,55,final CommandLine cmdLine =
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,56,"parser.parse(new String[] { ""-a"", ""\""two tokens\"""" });"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,58,"assertTrue(cmdLine.hasOption(""-a""));"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,59,"assertEquals(""two tokens"", cmdLine.getValue(""-a""));"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import java.util.Iterator;import junit.framework.TestCase;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.PatternBuilder;import org.apache.commons.cli2.option.GroupImpl;public class Bug27575Test extends TestCase {	public void testRequiredOptions(){		PatternBuilder builder = new PatternBuilder();		builder.withPattern(""hc!<"");		Option option = builder.create();		assertTrue(option instanceof GroupImpl);		GroupImpl group = (GroupImpl)option;		Iterator i = group.getOptions().iterator();		assertEquals(""[-h]"",i.next().toString());		assertEquals(""-c <arg>"",i.next().toString());		assertFalse(i.hasNext());	}}"
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,20,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,24,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,25,import org.apache.commons.cli2.builder.PatternBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,26,import org.apache.commons.cli2.option.GroupImpl;
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,28,public class Bug27575Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,30,public void testRequiredOptions(){
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,31,PatternBuilder builder = new PatternBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,32,"builder.withPattern(""hc!<"");"
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,33,Option option = builder.create();
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,34,assertTrue(option instanceof GroupImpl);
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,36,GroupImpl group = (GroupImpl)option;
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,37,Iterator i = group.getOptions().iterator();
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,38,"assertEquals(""[-h]"",i.next().toString());"
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,39,"assertEquals(""-c <arg>"",i.next().toString());"
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,40,assertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.CommandBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import junit.framework.TestCase;public class Bug28005Test extends TestCase {    public void testInfiniteLoop() {        final DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();        final ArgumentBuilder argumentBuilder = new ArgumentBuilder();        final GroupBuilder groupBuilder = new GroupBuilder();        final CommandBuilder commandBuilder = new CommandBuilder();        final Option inputFormatOption =            optionBuilder                .withLongName(""input-format"")                //.withArgument(argumentBuilder.create())                .create();        final Argument argument =            argumentBuilder                .withName(""file"")                .create();        final Group children =            groupBuilder                .withName(""options"")                .withOption(inputFormatOption)                .create();        final Option command =            commandBuilder                .withName(""convert"")                .withChildren(children)                .withArgument(argument)                .create();        final Group root =            groupBuilder                .withName(""commands"")                .withOption(command)                .create();        final Parser parser = new Parser();        parser.setGroup(root);        final String[] args = new String[]{""convert"", ""test.txt"",                ""--input-format"", ""a""};        try {            parser.parse(args);            fail(""a isn't valid!!"");        } catch (OptionException e) {            assertEquals(""Unexpected a while processing commands"",e.getMessage());        }    }}"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,20,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,21,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,22,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,23,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,24,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,25,import org.apache.commons.cli2.builder.CommandBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,26,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,27,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,28,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,29,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,31,public class Bug28005Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,32,public void testInfiniteLoop() {
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,33,final DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,34,final ArgumentBuilder argumentBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,35,final GroupBuilder groupBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,36,final CommandBuilder commandBuilder = new CommandBuilder();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,38,final Option inputFormatOption =
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,39,optionBuilder
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,40,".withLongName(""input-format"")"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,41,//.withArgument(argumentBuilder.create())
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,42,.create();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,44,final Argument argument =
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,45,argumentBuilder
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,46,".withName(""file"")"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,47,.create();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,49,final Group children =
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,50,groupBuilder
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,51,".withName(""options"")"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,52,.withOption(inputFormatOption)
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,53,.create();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,55,final Option command =
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,56,commandBuilder
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,57,".withName(""convert"")"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,58,.withChildren(children)
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,59,.withArgument(argument)
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,60,.create();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,62,final Group root =
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,63,groupBuilder
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,64,".withName(""commands"")"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,65,.withOption(command)
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,66,.create();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,68,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,69,parser.setGroup(root);
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,70,"final String[] args = new String[]{""convert"", ""test.txt"","
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,71,"""--input-format"", ""a""};"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,73,try {
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,74,parser.parse(args);
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,75,"fail(""a isn't valid!!"");"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,76,} catch (OptionException e) {
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,77,"assertEquals(""Unexpected a while processing commands"",e.getMessage());"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import junit.framework.TestCase;/** * @author roxspring */public class Bug32533Test extends TestCase {    public void testBlah() throws OptionException {        Option a1 = new DefaultOptionBuilder().withLongName(""a1"").create();        Option b1 = new DefaultOptionBuilder().withLongName(""b1"").create();        Option c1 = new DefaultOptionBuilder().withLongName(""c1"").create();        Group b = new GroupBuilder().withOption(b1).create();        Group c = new GroupBuilder().withOption(c1).create();        Group a = new GroupBuilder().withOption(a1).withOption(b).withOption(c).create();        Parser parser = new Parser();        parser.setGroup(a);        parser.parse(new String[]{""--a1"",""--b1""});    }}"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,20,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,21,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,22,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,23,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,24,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,25,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,30,* @author roxspring
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,32,public class Bug32533Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,34,public void testBlah() throws OptionException {
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,36,"Option a1 = new DefaultOptionBuilder().withLongName(""a1"").create();"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,37,"Option b1 = new DefaultOptionBuilder().withLongName(""b1"").create();"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,38,"Option c1 = new DefaultOptionBuilder().withLongName(""c1"").create();"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,40,Group b = new GroupBuilder().withOption(b1).create();
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,41,Group c = new GroupBuilder().withOption(c1).create();
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,42,Group a = new GroupBuilder().withOption(a1).withOption(b).withOption(c).create();
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,44,Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,45,parser.setGroup(a);
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,46,"parser.parse(new String[]{""--a1"",""--b1""});"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,1,"ackage org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.*;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.validation.FileValidator;/** * @author brianegge */public class BugCLI122Test extends TestCase {    public void testArgumentWhichStartsWithDash() throws OptionException {        Argument wdArg = new ArgumentBuilder()                .withName(""anything"")                .withMaximum(1)                .withMinimum(1)                .withInitialSeparator('=')                .create();        Option wdOpt = new DefaultOptionBuilder().withArgument(wdArg)                .withDescription(""anything, foo or -foo"")                .withLongName(""argument"")                .withShortName(""a"")                .create();        Group group = new GroupBuilder().withOption(wdOpt).create();        Parser p = new Parser();        p.setGroup(group);        CommandLine normal = p.parse (new String[]{""-a"", ""foo""});        assertNotNull(normal);        assertEquals(normal.getValue(wdOpt), ""foo"");        CommandLine withDash = p.parse (new String[]{""--argument"", ""\""-foo\""""});        assertNotNull(withDash);        assertEquals(""-foo"", withDash.getValue(wdOpt));        CommandLine withDashAndEquals = p.parse (new String[]{""--argument=-foo""});        assertNotNull(withDashAndEquals);        assertEquals(""-foo"", withDashAndEquals.getValue(wdOpt));    }}"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,2,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,4,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,5,import org.apache.commons.cli2.*;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,6,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,7,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,8,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,9,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,10,import org.apache.commons.cli2.validation.FileValidator;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,13,* @author brianegge
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,15,public class BugCLI122Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,16,public void testArgumentWhichStartsWithDash() throws OptionException {
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,17,Argument wdArg = new ArgumentBuilder()
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,18,".withName(""anything"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,19,.withMaximum(1)
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,20,.withMinimum(1)
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,21,.withInitialSeparator('=')
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,22,.create();
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,24,Option wdOpt = new DefaultOptionBuilder().withArgument(wdArg)
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,25,".withDescription(""anything, foo or -foo"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,26,".withLongName(""argument"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,27,".withShortName(""a"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,28,.create();
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,30,Group group = new GroupBuilder().withOption(wdOpt).create();
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,32,Parser p = new Parser();
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,33,p.setGroup(group);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,34,"CommandLine normal = p.parse (new String[]{""-a"", ""foo""});"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,35,assertNotNull(normal);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,36,"assertEquals(normal.getValue(wdOpt), ""foo"");"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,38,"CommandLine withDash = p.parse (new String[]{""--argument"", ""\""-foo\""""});"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,39,assertNotNull(withDash);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,40,"assertEquals(""-foo"", withDash.getValue(wdOpt));"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,42,"CommandLine withDashAndEquals = p.parse (new String[]{""--argument=-foo""});"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,43,assertNotNull(withDashAndEquals);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,44,"assertEquals(""-foo"", withDashAndEquals.getValue(wdOpt));"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.PropertyOption;/** * http://issues.apache.org/jira/browse/CLI-12 */public class BugCLI12Test extends TestCase {  public void testBug() {    Argument arg = new ArgumentBuilder().withName(""file"").create();    Option option = new PropertyOption();    Group group = new GroupBuilder().withOption(option).withOption(arg).create();    Parser p = new Parser();    p.setGroup(group);    CommandLine cl = p.parseAndHelp( new String[] { ""-Dmyprop1=myval1"", ""-Dmyprop2=myval2"", ""myfile"" } );    if(cl == null) {      assertTrue(""Couldn't parse valid commandLine"", false);    }    assertEquals( ""myval1"", cl.getProperty(""myprop1""));    assertEquals( ""myval2"", cl.getProperty(""myprop2""));    String extraArgs = (String) cl.getValue(arg);    assertEquals( ""myfile"", extraArgs);  }}"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,22,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,23,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,24,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,25,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,26,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,27,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,28,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,29,import org.apache.commons.cli2.option.PropertyOption;
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,32,* http://issues.apache.org/jira/browse/CLI-12
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,34,public class BugCLI12Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,36,public void testBug() {
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,37,"Argument arg = new ArgumentBuilder().withName(""file"").create();"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,39,Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,41,Group group = new GroupBuilder().withOption(option).withOption(arg).create();
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,43,Parser p = new Parser();
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,44,p.setGroup(group);
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,46,"CommandLine cl = p.parseAndHelp( new String[] { ""-Dmyprop1=myval1"", ""-Dmyprop2=myval2"", ""myfile"" } );"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,47,if(cl == null) {
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,48,"assertTrue(""Couldn't parse valid commandLine"", false);"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,51,"assertEquals( ""myval1"", cl.getProperty(""myprop1""));"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,52,"assertEquals( ""myval2"", cl.getProperty(""myprop2""));"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,54,String extraArgs = (String) cl.getValue(arg);
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,55,"assertEquals( ""myfile"", extraArgs);"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import java.io.PrintWriter;import java.io.StringWriter;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.util.HelpFormatter;import junit.framework.TestCase;/** * http://issues.apache.org/jira/browse/CLI-18 */public class BugCLI18Test extends TestCase {  public BugCLI18Test() {    super();  }  public void testBug() {    Option a = new DefaultOptionBuilder().withLongName(""aaa"").withShortName(""a"").withDescription(""aaaaaaa"").create();    Option b = new DefaultOptionBuilder().withLongName(""bbb"").withDescription(""bbbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f"").create();    Option c = new DefaultOptionBuilder().withLongName(""ccc"").withShortName(""c"").withDescription(""ccccccc"").create();    Group g = new GroupBuilder().withOption(a).withOption(b).withOption(c).create();    HelpFormatter formatter = new HelpFormatter();    StringWriter out = new StringWriter();    formatter.setPrintWriter(new PrintWriter(out));    formatter.setHeader(""dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s"");    formatter.setFooter(""blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh"" + '\r' + '\n' + ""rarrr"");    formatter.setGroup(g);    formatter.setShellCommand(""foobar"");    formatter.print();  }}"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,20,import java.io.PrintWriter;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,21,import java.io.StringWriter;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,23,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,24,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,25,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,26,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,27,import org.apache.commons.cli2.util.HelpFormatter;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,29,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,32,* http://issues.apache.org/jira/browse/CLI-18
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,34,public class BugCLI18Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,36,public BugCLI18Test() {
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,37,super();
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,41,public void testBug() {
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,42,"Option a = new DefaultOptionBuilder().withLongName(""aaa"").withShortName(""a"").withDescription(""aaaaaaa"").create();"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,43,"Option b = new DefaultOptionBuilder().withLongName(""bbb"").withDescription(""bbbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f"").create();"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,44,"Option c = new DefaultOptionBuilder().withLongName(""ccc"").withShortName(""c"").withDescription(""ccccccc"").create();"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,46,Group g = new GroupBuilder().withOption(a).withOption(b).withOption(c).create();
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,48,HelpFormatter formatter = new HelpFormatter();
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,49,StringWriter out = new StringWriter();
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,51,formatter.setPrintWriter(new PrintWriter(out));
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,52,"formatter.setHeader(""dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s"");"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,53,"formatter.setFooter(""blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh"" + '\r' + '\n' + ""rarrr"");"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,54,formatter.setGroup(g);
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,55,"formatter.setShellCommand(""foobar"");"
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,57,formatter.print();
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import junit.framework.TestCase;/** * http://issues.apache.org/jira/browse/CLI-80 */public class BugCLI80Test extends TestCase {    public void testBug() {        final String optName = ""option"";        Argument arg = new ArgumentBuilder().withName(optName)                                            .withMaximum(1)                                            .create();        Option option = new DefaultOptionBuilder().withArgument(arg)                                                  .withDescription(""singular option"")                                                  .withLongName(optName)                                                  .withShortName(""o"")                                                  .create();        Group group = new GroupBuilder().withOption(option).create();        Parser p = new Parser();        p.setGroup(group);        CommandLine cl = p.parseAndHelp( new String[] { ""-o"", ""yes"" } );        assertNotNull(""Couldn't parse valid commandLine"", cl);        assertEquals(""Couldn't look up value by short name"", ""yes"", cl.getValue(""-o"") );        try {            cl = p.parse( new String[] { ""-o"", ""yes"", ""-o"", ""jam"" } );            fail(""Parsed invalid commandLine"");        } catch(OptionException e) {          // ok        }    }}"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,18,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,20,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,21,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,22,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,23,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,24,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,25,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,26,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,27,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,28,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,30,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,33,* http://issues.apache.org/jira/browse/CLI-80
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,35,public class BugCLI80Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,37,public void testBug() {
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,38,"final String optName = ""option"";"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,40,Argument arg = new ArgumentBuilder().withName(optName)
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,41,.withMaximum(1)
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,42,.create();
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,44,Option option = new DefaultOptionBuilder().withArgument(arg)
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,45,".withDescription(""singular option"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,46,.withLongName(optName)
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,47,".withShortName(""o"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,48,.create();
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,50,Group group = new GroupBuilder().withOption(option).create();
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,52,Parser p = new Parser();
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,53,p.setGroup(group);
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,55,"CommandLine cl = p.parseAndHelp( new String[] { ""-o"", ""yes"" } );"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,56,"assertNotNull(""Couldn't parse valid commandLine"", cl);"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,58,"assertEquals(""Couldn't look up value by short name"", ""yes"", cl.getValue(""-o"") );"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,60,try {
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,61,"cl = p.parse( new String[] { ""-o"", ""yes"", ""-o"", ""jam"" } );"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,62,"fail(""Parsed invalid commandLine"");"
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,63,} catch(OptionException e) {
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,64,// ok
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.SourceDestArgument;/** * The first is a loop in Parser.parse() if I set a non-declared option. This * code goes into a loop in Parser.java method parse this while loop runs * endless * * @author Steve Alberty */public class BugLoopingOptionLookAlikeTest extends TestCase {    public void testLoopingOptionLookAlike() {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Group options = gbuilder            .withName(""ant"")            .withOption(obuilder.withShortName(""help"").withDescription(""print this message"").create())            .withOption(obuilder.withShortName(""projecthelp"").withDescription(""print project help information"").create())            .withOption(abuilder.withName(""target"").create())            .create();        final Parser parser = new Parser();        parser.setGroup(options);        try {            parser.parse(new String[] { ""-abcdef"",                    ""testfile.txt "", });            fail(""OptionException"");        } catch (OptionException e) {            assertEquals(""Unexpected -abcdef while processing ant"",e.getMessage());        }    }    public void testLoopingOptionLookAlike2() {        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Argument inputfile_opt = abuilder.withName(""input"").withMinimum(1).withMaximum(1).create();        final Argument outputfile_opt = abuilder.withName(""output"").withMinimum(1).withMaximum(1).create();        final Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);        final Group options = gbuilder.withOption(targets).create();        final Parser parser = new Parser();        parser.setGroup(options);        try {            parser.parse(new String[] { ""testfile.txt"", ""testfile.txt"", ""testfile.txt"", ""testfile.txt"" });            fail(""OptionException"");        } catch (OptionException e) {            assertEquals(""Unexpected testfile.txt while processing "", e.getMessage());        }    }}"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,4,* or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,5,* distributed with this work for additional information
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,6,* regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,7,"* to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,8,"* ""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,9,* with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,11,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,13,"* Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,14,* software distributed under the License is distributed on an
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,15,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,16,"* KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,17,* specific language governing permissions and limitations
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,18,* under the License.
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,20,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,24,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,25,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,26,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,27,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,28,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,29,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,30,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,31,import org.apache.commons.cli2.option.SourceDestArgument;
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,34,* The first is a loop in Parser.parse() if I set a non-declared option. This
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,35,* code goes into a loop in Parser.java method parse this while loop runs
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,36,* endless
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,38,* @author Steve Alberty
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,40,public class BugLoopingOptionLookAlikeTest extends TestCase {
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,42,public void testLoopingOptionLookAlike() {
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,43,final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,44,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,45,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,46,final Group options = gbuilder
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,47,".withName(""ant"")"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,48,".withOption(obuilder.withShortName(""help"").withDescription(""print this message"").create())"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,49,".withOption(obuilder.withShortName(""projecthelp"").withDescription(""print project help information"").create())"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,50,".withOption(abuilder.withName(""target"").create())"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,51,.create();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,53,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,54,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,55,try {
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,56,"parser.parse(new String[] { ""-abcdef"","
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,57,"""testfile.txt "", });"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,58,"fail(""OptionException"");"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,59,} catch (OptionException e) {
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,60,"assertEquals(""Unexpected -abcdef while processing ant"",e.getMessage());"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,64,public void testLoopingOptionLookAlike2() {
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,65,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,66,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,67,"final Argument inputfile_opt = abuilder.withName(""input"").withMinimum(1).withMaximum(1).create();"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,68,"final Argument outputfile_opt = abuilder.withName(""output"").withMinimum(1).withMaximum(1).create();"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,69,"final Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,70,final Group options = gbuilder.withOption(targets).create();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,71,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,72,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,73,try {
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,74,"parser.parse(new String[] { ""testfile.txt"", ""testfile.txt"", ""testfile.txt"", ""testfile.txt"" });"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,75,"fail(""OptionException"");"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,76,} catch (OptionException e) {
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,77,"assertEquals(""Unexpected testfile.txt while processing "", e.getMessage());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.builder;import java.util.ArrayList;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.option.ArgumentImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;import org.apache.commons.cli2.validation.DateValidator;import org.apache.commons.cli2.validation.Validator;public class ArgumentBuilderTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    private ArgumentBuilder argumentBuilder;    /*     * @see TestCase#setUp()     */    protected void setUp()        throws Exception {        this.argumentBuilder = new ArgumentBuilder();    }    public void testConsumeRemaining() {        this.argumentBuilder.withConsumeRemaining(""--"");        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect consume remaining token"", ""--"", arg.getConsumeRemaining());    }    public void testNullConsumeRemaining() {        try {            this.argumentBuilder.withConsumeRemaining(null);            fail(""cannot use null consume remaining token"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING),                         exp.getMessage());        }    }    public void testEmptyConsumeRemaining() {        try {            this.argumentBuilder.withConsumeRemaining("""");            fail(""cannot use empty string consume remaining token"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING),                         exp.getMessage());        }    }    public void testDefault() {        this.argumentBuilder.withDefault(""defaultString"");        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect number of default values"", 1, arg.getDefaultValues().size());        assertEquals(""incorrect default value"", ""defaultString"", arg.getDefaultValues().get(0));    }    public void testDefaultX2() {        this.argumentBuilder.withDefault(""defaultString1"");        this.argumentBuilder.withDefault(""defaultString2"");        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());        assertEquals(""incorrect default value-1"", ""defaultString1"", arg.getDefaultValues().get(0));        assertEquals(""incorrect default value-2"", ""defaultString2"", arg.getDefaultValues().get(1));    }    public void testNullDefault() {        try {            this.argumentBuilder.withDefault(null);            fail(""cannot use null default"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT),                         exp.getMessage());        }    }    public void testDefaults() {        final List defaults = new ArrayList();        defaults.add(""one"");        defaults.add(""two"");        this.argumentBuilder.withDefaults(defaults);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());        assertEquals(""incorrect default value-1"", ""one"", arg.getDefaultValues().get(0));        assertEquals(""incorrect default value-2"", ""two"", arg.getDefaultValues().get(1));        assertEquals(""incorrect default values list"", defaults, arg.getDefaultValues());    }    public void testNullDefaults() {        try {            this.argumentBuilder.withDefaults(null);            fail(""cannot use null defaults"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS),                         exp.getMessage());        }    }    public void testId() {        this.argumentBuilder.withId(1);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect id"", 1, arg.getId());    }    public void testInitialSeparator() {        this.argumentBuilder.withInitialSeparator(',');        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect initial separator"", ',', arg.getInitialSeparator());    }    public void testMaximum() {        this.argumentBuilder.withMaximum(1);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect maximum"", 1, arg.getMaximum());    }    public void testNegativeMaximum() {        try {            this.argumentBuilder.withMaximum(-1);            fail(""cannot use negative maximum"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM),                         exp.getMessage());        }    }    public void testMinimum() {        this.argumentBuilder.withMinimum(1);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect maximum"", 1, arg.getMinimum());    }    public void testNegativeMinimum() {        try {            this.argumentBuilder.withMinimum(-1);            fail(""cannot use negative minimum"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM),                         exp.getMessage());        }    }    public void testName() {        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect preferred name"", ""arg"", arg.getPreferredName());    }    public void testNullName() {        try {            this.argumentBuilder.withName(null);            fail(""cannot use null name"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME),                         exp.getMessage());        }    }    public void testEmptyName() {        try {            this.argumentBuilder.withName("""");            fail(""cannot use empty name"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME),                         exp.getMessage());        }    }    public void testSubsequentSeparator() {        this.argumentBuilder.withSubsequentSeparator(':');        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect subsequent separator"", ':', arg.getSubsequentSeparator());    }    public void testValidator() {        Validator validator = DateValidator.getDateInstance();        this.argumentBuilder.withValidator(validator);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect validator"", validator, arg.getValidator());    }    public void testNullValidator() {        try {            this.argumentBuilder.withValidator(null);            fail(""cannot use null validator"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR),                         exp.getMessage());        }    }}"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,4,* or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,5,* distributed with this work for additional information
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,6,* regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,7,"* to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,8,"* ""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,9,* with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,11,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,13,"* Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,14,* software distributed under the License is distributed on an
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,15,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,16,"* KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,17,* specific language governing permissions and limitations
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,18,* under the License.
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,20,package org.apache.commons.cli2.builder;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,22,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,23,import java.util.List;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,25,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,27,import org.apache.commons.cli2.option.ArgumentImpl;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,28,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,29,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,30,import org.apache.commons.cli2.validation.DateValidator;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,31,import org.apache.commons.cli2.validation.Validator;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,33,public class ArgumentBuilderTest
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,34,extends TestCase {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,35,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,36,private ArgumentBuilder argumentBuilder;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,39,* @see TestCase#setUp()
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,41,protected void setUp()
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,42,throws Exception {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,43,this.argumentBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,46,public void testConsumeRemaining() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,47,"this.argumentBuilder.withConsumeRemaining(""--"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,48,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,50,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,52,"assertEquals(""incorrect consume remaining token"", ""--"", arg.getConsumeRemaining());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,55,public void testNullConsumeRemaining() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,56,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,57,this.argumentBuilder.withConsumeRemaining(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,58,"fail(""cannot use null consume remaining token"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,59,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,60,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,61,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,62,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,66,public void testEmptyConsumeRemaining() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,67,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,68,"this.argumentBuilder.withConsumeRemaining("""");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,69,"fail(""cannot use empty string consume remaining token"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,70,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,71,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,72,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,73,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,77,public void testDefault() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,78,"this.argumentBuilder.withDefault(""defaultString"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,79,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,81,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,83,"assertEquals(""incorrect number of default values"", 1, arg.getDefaultValues().size());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,84,"assertEquals(""incorrect default value"", ""defaultString"", arg.getDefaultValues().get(0));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,87,public void testDefaultX2() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,88,"this.argumentBuilder.withDefault(""defaultString1"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,89,"this.argumentBuilder.withDefault(""defaultString2"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,90,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,92,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,94,"assertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,95,"assertEquals(""incorrect default value-1"", ""defaultString1"", arg.getDefaultValues().get(0));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,96,"assertEquals(""incorrect default value-2"", ""defaultString2"", arg.getDefaultValues().get(1));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,99,public void testNullDefault() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,100,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,101,this.argumentBuilder.withDefault(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,102,"fail(""cannot use null default"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,103,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,104,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,105,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,106,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,110,public void testDefaults() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,111,final List defaults = new ArrayList();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,112,"defaults.add(""one"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,113,"defaults.add(""two"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,115,this.argumentBuilder.withDefaults(defaults);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,116,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,118,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,120,"assertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,121,"assertEquals(""incorrect default value-1"", ""one"", arg.getDefaultValues().get(0));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,122,"assertEquals(""incorrect default value-2"", ""two"", arg.getDefaultValues().get(1));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,123,"assertEquals(""incorrect default values list"", defaults, arg.getDefaultValues());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,127,public void testNullDefaults() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,128,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,129,this.argumentBuilder.withDefaults(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,130,"fail(""cannot use null defaults"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,131,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,132,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,133,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,134,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,138,public void testId() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,139,this.argumentBuilder.withId(1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,140,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,142,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,144,"assertEquals(""incorrect id"", 1, arg.getId());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,147,public void testInitialSeparator() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,148,"this.argumentBuilder.withInitialSeparator(',');"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,149,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,151,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,153,"assertEquals(""incorrect initial separator"", ',', arg.getInitialSeparator());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,156,public void testMaximum() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,157,this.argumentBuilder.withMaximum(1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,158,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,160,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,162,"assertEquals(""incorrect maximum"", 1, arg.getMaximum());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,165,public void testNegativeMaximum() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,166,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,167,this.argumentBuilder.withMaximum(-1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,168,"fail(""cannot use negative maximum"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,169,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,170,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,171,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,172,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,176,public void testMinimum() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,177,this.argumentBuilder.withMinimum(1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,178,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,180,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,182,"assertEquals(""incorrect maximum"", 1, arg.getMinimum());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,185,public void testNegativeMinimum() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,186,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,187,this.argumentBuilder.withMinimum(-1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,188,"fail(""cannot use negative minimum"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,189,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,190,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,191,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,192,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,196,public void testName() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,197,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,199,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,201,"assertEquals(""incorrect preferred name"", ""arg"", arg.getPreferredName());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,204,public void testNullName() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,205,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,206,this.argumentBuilder.withName(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,207,"fail(""cannot use null name"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,208,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,209,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,210,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,211,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,215,public void testEmptyName() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,216,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,217,"this.argumentBuilder.withName("""");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,218,"fail(""cannot use empty name"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,219,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,220,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,221,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,222,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,226,public void testSubsequentSeparator() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,227,this.argumentBuilder.withSubsequentSeparator(':');
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,228,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,230,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,232,"assertEquals(""incorrect subsequent separator"", ':', arg.getSubsequentSeparator());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,235,public void testValidator() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,236,Validator validator = DateValidator.getDateInstance();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,237,this.argumentBuilder.withValidator(validator);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,238,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,240,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,242,"assertEquals(""incorrect validator"", validator, arg.getValidator());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,245,public void testNullValidator() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,246,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,247,this.argumentBuilder.withValidator(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,248,"fail(""cannot use null validator"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,249,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,250,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,251,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,252,exp.getMessage());
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import junit.framework.TestCase;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public class DefaultOptionBuilderTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    private DefaultOptionBuilder defaultOptionBuilder;    /*     * @see TestCase#setUp()     */    protected void setUp()        throws Exception {        this.defaultOptionBuilder = new DefaultOptionBuilder();    }    /*     * Class to test for void DefaultOptionBuilder(String, String, boolean)     */    public void testNew_NullShortPrefix() {        try {            new DefaultOptionBuilder(null, null, false);            fail(""null short prefix is not permitted"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX),                         e.getMessage());        }    }    /*     * Class to test for void DefaultOptionBuilder(String, String, boolean)     */    public void testNew_EmptyShortPrefix() {        try {            new DefaultOptionBuilder("""", null, false);            fail(""empty short prefix is not permitted"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX),                         e.getMessage());        }    }    /*     * Class to test for void DefaultOptionBuilder(String, String, boolean)     */    public void testNew_NullLongPrefix() {        try {            new DefaultOptionBuilder(""-"", null, false);            fail(""null long prefix is not permitted"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX),                         e.getMessage());        }    }    /*     * Class to test for void DefaultOptionBuilder(String, String, boolean)     */    public void testNew_EmptyLongPrefix() {        try {            new DefaultOptionBuilder(""-"", """", false);            fail(""empty long prefix is not permitted"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX),                         e.getMessage());        }    }    public void testCreate() {        try {            this.defaultOptionBuilder.create();            fail(""options must have a name"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_NO_NAME), e.getMessage());        }        this.defaultOptionBuilder.withShortName(""j"");        this.defaultOptionBuilder.create();        this.defaultOptionBuilder.withLongName(""jkeyes"");        this.defaultOptionBuilder.create();        {            DefaultOptionBuilder builder = new DefaultOptionBuilder(""-"", ""--"", true);            builder.withShortName(""mx"");        }    }    public void testName() {        // withLongName && this.preferred != null        {            this.defaultOptionBuilder.withShortName(""a"");            this.defaultOptionBuilder.withLongName(""apples"");        }        // withShortName && this.preferred != null        {            this.defaultOptionBuilder.withLongName(""apples"");            this.defaultOptionBuilder.withShortName(""a"");        }        // withShortName && this.preferred != null        {            this.defaultOptionBuilder.withLongName(""apples"");            this.defaultOptionBuilder.withShortName(""a"");        }    }    public void testWithDescription() {        String description = ""desc"";        this.defaultOptionBuilder.withShortName(""a"");        this.defaultOptionBuilder.withDescription(description);        DefaultOption opt = this.defaultOptionBuilder.create();        assertEquals(""wrong description found"", description, opt.getDescription());    }    public void testWithRequired() {        {            boolean required = false;            this.defaultOptionBuilder.withShortName(""a"");            this.defaultOptionBuilder.withRequired(required);            DefaultOption opt = this.defaultOptionBuilder.create();            assertEquals(""wrong required found"", required, opt.isRequired());        }        {            boolean required = true;            this.defaultOptionBuilder.withShortName(""a"");            this.defaultOptionBuilder.withRequired(required);            DefaultOption opt = this.defaultOptionBuilder.create();            assertEquals(""wrong required found"", required, opt.isRequired());        }    }    public void testWithChildren() {        GroupBuilder gbuilder = new GroupBuilder();        this.defaultOptionBuilder.withShortName(""a"");        this.defaultOptionBuilder.withRequired(true);        DefaultOption opt = this.defaultOptionBuilder.create();        Group group = gbuilder.withName(""withchildren"").withOption(opt).create();        {            this.defaultOptionBuilder.withShortName(""b"");            this.defaultOptionBuilder.withChildren(group);            DefaultOption option = this.defaultOptionBuilder.create();            assertEquals(""wrong children found"", group, option.getChildren());        }    }    public void testWithArgument() {        ArgumentBuilder abuilder = new ArgumentBuilder();        abuilder.withName(""myarg"");        Argument arg = abuilder.create();        this.defaultOptionBuilder.withShortName(""a"");        this.defaultOptionBuilder.withRequired(true);        this.defaultOptionBuilder.withArgument(arg);        DefaultOption opt = this.defaultOptionBuilder.create();        assertEquals(""wrong argument found"", arg, opt.getArgument());    }    public void testWithId() {        this.defaultOptionBuilder.withShortName(""a"");        this.defaultOptionBuilder.withId(0);        DefaultOption opt = this.defaultOptionBuilder.create();        assertEquals(""wrong id found"", 0, opt.getId());    }}"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,18,package org.apache.commons.cli2.builder;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,22,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,23,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,24,import org.apache.commons.cli2.option.DefaultOption;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,25,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,26,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,28,public class DefaultOptionBuilderTest
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,29,extends TestCase {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,30,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,31,private DefaultOptionBuilder defaultOptionBuilder;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,34,* @see TestCase#setUp()
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,36,protected void setUp()
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,37,throws Exception {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,38,this.defaultOptionBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,42,"* Class to test for void DefaultOptionBuilder(String, String, boolean)"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,44,public void testNew_NullShortPrefix() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,45,try {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,46,"new DefaultOptionBuilder(null, null, false);"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,47,"fail(""null short prefix is not permitted"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,48,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,49,"assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX),"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,50,e.getMessage());
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,55,"* Class to test for void DefaultOptionBuilder(String, String, boolean)"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,57,public void testNew_EmptyShortPrefix() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,58,try {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,59,"new DefaultOptionBuilder("""", null, false);"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,60,"fail(""empty short prefix is not permitted"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,61,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,62,"assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX),"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,63,e.getMessage());
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,68,"* Class to test for void DefaultOptionBuilder(String, String, boolean)"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,70,public void testNew_NullLongPrefix() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,71,try {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,72,"new DefaultOptionBuilder(""-"", null, false);"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,73,"fail(""null long prefix is not permitted"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,74,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,75,"assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX),"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,76,e.getMessage());
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,81,"* Class to test for void DefaultOptionBuilder(String, String, boolean)"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,83,public void testNew_EmptyLongPrefix() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,84,try {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,85,"new DefaultOptionBuilder(""-"", """", false);"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,86,"fail(""empty long prefix is not permitted"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,87,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,88,"assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX),"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,89,e.getMessage());
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,93,public void testCreate() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,94,try {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,95,this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,96,"fail(""options must have a name"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,97,} catch (IllegalStateException e) {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,98,"assertEquals(resources.getMessage(ResourceConstants.OPTION_NO_NAME), e.getMessage());"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,101,"this.defaultOptionBuilder.withShortName(""j"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,102,this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,103,"this.defaultOptionBuilder.withLongName(""jkeyes"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,104,this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,107,"DefaultOptionBuilder builder = new DefaultOptionBuilder(""-"", ""--"", true);"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,108,"builder.withShortName(""mx"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,112,public void testName() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,113,// withLongName && this.preferred != null
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,115,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,116,"this.defaultOptionBuilder.withLongName(""apples"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,118,// withShortName && this.preferred != null
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,120,"this.defaultOptionBuilder.withLongName(""apples"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,121,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,123,// withShortName && this.preferred != null
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,125,"this.defaultOptionBuilder.withLongName(""apples"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,126,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,130,public void testWithDescription() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,131,"String description = ""desc"";"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,132,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,133,this.defaultOptionBuilder.withDescription(description);
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,135,DefaultOption opt = this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,136,"assertEquals(""wrong description found"", description, opt.getDescription());"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,139,public void testWithRequired() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,141,boolean required = false;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,142,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,143,this.defaultOptionBuilder.withRequired(required);
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,145,DefaultOption opt = this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,146,"assertEquals(""wrong required found"", required, opt.isRequired());"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,150,boolean required = true;
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,151,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,152,this.defaultOptionBuilder.withRequired(required);
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,154,DefaultOption opt = this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,155,"assertEquals(""wrong required found"", required, opt.isRequired());"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,159,public void testWithChildren() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,160,GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,162,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,163,this.defaultOptionBuilder.withRequired(true);
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,165,DefaultOption opt = this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,167,"Group group = gbuilder.withName(""withchildren"").withOption(opt).create();"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,170,"this.defaultOptionBuilder.withShortName(""b"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,171,this.defaultOptionBuilder.withChildren(group);
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,173,DefaultOption option = this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,174,"assertEquals(""wrong children found"", group, option.getChildren());"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,178,public void testWithArgument() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,179,ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,180,"abuilder.withName(""myarg"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,182,Argument arg = abuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,184,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,185,this.defaultOptionBuilder.withRequired(true);
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,186,this.defaultOptionBuilder.withArgument(arg);
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,188,DefaultOption opt = this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,190,"assertEquals(""wrong argument found"", arg, opt.getArgument());"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,193,public void testWithId() {
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,194,"this.defaultOptionBuilder.withShortName(""a"");"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,195,this.defaultOptionBuilder.withId(0);
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,197,DefaultOption opt = this.defaultOptionBuilder.create();
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,199,"assertEquals(""wrong id found"", 0, opt.getId());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Collections;import java.util.Iterator;import java.util.Set;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.CommandLineTestCase;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.builder.DefaultOptionBuilder;/** * @author Rob Oxspring */public class DefaultingCommandLineTest    extends CommandLineTestCase {    private CommandLine first;    private CommandLine second;    private Option inFirst = new DefaultOptionBuilder().withLongName(""infirst"").create();    private Option inBoth = new DefaultOptionBuilder().withLongName(""inboth"").create();    private Option inSecond = new DefaultOptionBuilder().withLongName(""insecond"").create();    /* (non-Javadoc)     * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()     */    protected final CommandLine createCommandLine() {        final WriteableCommandLine writeable = new WriteableCommandLineImpl(root, new ArrayList());        writeable.addOption(present);        writeable.addProperty(""present"", ""present property"");        writeable.addSwitch(bool, true);        writeable.addValue(present, ""present value"");        writeable.addOption(multiple);        writeable.addValue(multiple, ""value 1"");        writeable.addValue(multiple, ""value 2"");        writeable.addValue(multiple, ""value 3"");        final DefaultingCommandLine defaults = new DefaultingCommandLine();        defaults.appendCommandLine(writeable);        return defaults;    }    public void setUp()        throws Exception {        super.setUp();        WriteableCommandLine writeable;        writeable = new WriteableCommandLineImpl(root, new ArrayList());        writeable.addOption(inFirst);        writeable.addOption(inBoth);        writeable.addProperty(""infirst"", ""infirst first value"");        writeable.addProperty(""inboth"", ""inboth first value"");        writeable.addSwitch(inFirst, true);        writeable.addSwitch(inBoth, true);        writeable.addValue(inFirst, ""infirst first value 1"");        writeable.addValue(inFirst, ""infirst first value 2"");        writeable.addValue(inBoth, ""inboth first value 1"");        writeable.addValue(inBoth, ""inboth first value 2"");        first = writeable;        writeable = new WriteableCommandLineImpl(root, new ArrayList());        writeable.addOption(inSecond);        writeable.addOption(inBoth);        writeable.addProperty(""insecond"", ""insecond second value"");        writeable.addProperty(""inboth"", ""inboth second value"");        writeable.addSwitch(inSecond, true);        writeable.addSwitch(inBoth, true);        writeable.addValue(inSecond, ""insecond second value 1"");        writeable.addValue(inSecond, ""insecond second value 2"");        writeable.addValue(inBoth, ""inboth second value 1"");        writeable.addValue(inBoth, ""inboth second value 2"");        second = writeable;    }    public final void testAppendCommandLine() {        final DefaultingCommandLine defaults = new DefaultingCommandLine();        Iterator i;        i = defaults.commandLines();        assertFalse(i.hasNext());        defaults.appendCommandLine(first);        i = defaults.commandLines();        assertSame(first, i.next());        assertFalse(i.hasNext());        defaults.appendCommandLine(second);        i = defaults.commandLines();        assertSame(first, i.next());        assertSame(second, i.next());        assertFalse(i.hasNext());    }    public final void testInsertCommandLine() {        final DefaultingCommandLine defaults = new DefaultingCommandLine();        Iterator i;        i = defaults.commandLines();        assertFalse(i.hasNext());        defaults.insertCommandLine(0, first);        i = defaults.commandLines();        assertSame(first, i.next());        assertFalse(i.hasNext());        defaults.insertCommandLine(0, second);        i = defaults.commandLines();        assertSame(second, i.next());        assertSame(first, i.next());        assertFalse(i.hasNext());    }    public void testTriggers() {        final DefaultingCommandLine defaults = new DefaultingCommandLine();        defaults.appendCommandLine(first);        defaults.appendCommandLine(second);        Set set = defaults.getOptionTriggers();        Iterator iter = set.iterator();        assertEquals(""wrong # of triggers"", 3, set.size());        assertTrue(""cannot find trigger"", set.contains(""--insecond""));        assertTrue(""cannot find trigger"", set.contains(""--inboth""));        assertTrue(""cannot find trigger"", set.contains(""--infirst""));    }    public void testDefaults() {        final DefaultingCommandLine defaults = new DefaultingCommandLine();        assertEquals(""wrong # of defaults"", 0, defaults.getValues(""--insecond"").size());        assertEquals(""wrong Set of defaults"", Collections.EMPTY_LIST, defaults.getValues(""--insecond"", null));    }}"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,18,package org.apache.commons.cli2.commandline;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,21,import java.util.Collections;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,22,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,23,import java.util.Set;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,25,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,26,import org.apache.commons.cli2.CommandLineTestCase;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,27,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,28,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,29,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,32,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,34,public class DefaultingCommandLineTest
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,35,extends CommandLineTestCase {
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,36,private CommandLine first;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,37,private CommandLine second;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,38,"private Option inFirst = new DefaultOptionBuilder().withLongName(""infirst"").create();"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,39,"private Option inBoth = new DefaultOptionBuilder().withLongName(""inboth"").create();"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,40,"private Option inSecond = new DefaultOptionBuilder().withLongName(""insecond"").create();"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,42,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,43,* @see org.apache.commons.cli2.CommandLineTest#createCommandLine()
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,45,protected final CommandLine createCommandLine() {
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,46,"final WriteableCommandLine writeable = new WriteableCommandLineImpl(root, new ArrayList());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,47,writeable.addOption(present);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,48,"writeable.addProperty(""present"", ""present property"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,49,"writeable.addSwitch(bool, true);"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,50,"writeable.addValue(present, ""present value"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,51,writeable.addOption(multiple);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,52,"writeable.addValue(multiple, ""value 1"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,53,"writeable.addValue(multiple, ""value 2"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,54,"writeable.addValue(multiple, ""value 3"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,56,final DefaultingCommandLine defaults = new DefaultingCommandLine();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,57,defaults.appendCommandLine(writeable);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,59,return defaults;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,62,public void setUp()
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,63,throws Exception {
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,64,super.setUp();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,66,WriteableCommandLine writeable;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,68,"writeable = new WriteableCommandLineImpl(root, new ArrayList());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,69,writeable.addOption(inFirst);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,70,writeable.addOption(inBoth);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,71,"writeable.addProperty(""infirst"", ""infirst first value"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,72,"writeable.addProperty(""inboth"", ""inboth first value"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,73,"writeable.addSwitch(inFirst, true);"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,74,"writeable.addSwitch(inBoth, true);"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,75,"writeable.addValue(inFirst, ""infirst first value 1"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,76,"writeable.addValue(inFirst, ""infirst first value 2"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,77,"writeable.addValue(inBoth, ""inboth first value 1"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,78,"writeable.addValue(inBoth, ""inboth first value 2"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,79,first = writeable;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,81,"writeable = new WriteableCommandLineImpl(root, new ArrayList());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,82,writeable.addOption(inSecond);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,83,writeable.addOption(inBoth);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,84,"writeable.addProperty(""insecond"", ""insecond second value"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,85,"writeable.addProperty(""inboth"", ""inboth second value"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,86,"writeable.addSwitch(inSecond, true);"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,87,"writeable.addSwitch(inBoth, true);"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,88,"writeable.addValue(inSecond, ""insecond second value 1"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,89,"writeable.addValue(inSecond, ""insecond second value 2"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,90,"writeable.addValue(inBoth, ""inboth second value 1"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,91,"writeable.addValue(inBoth, ""inboth second value 2"");"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,92,second = writeable;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,95,public final void testAppendCommandLine() {
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,96,final DefaultingCommandLine defaults = new DefaultingCommandLine();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,97,Iterator i;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,99,i = defaults.commandLines();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,100,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,102,defaults.appendCommandLine(first);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,103,i = defaults.commandLines();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,104,"assertSame(first, i.next());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,105,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,107,defaults.appendCommandLine(second);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,108,i = defaults.commandLines();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,109,"assertSame(first, i.next());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,110,"assertSame(second, i.next());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,111,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,114,public final void testInsertCommandLine() {
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,115,final DefaultingCommandLine defaults = new DefaultingCommandLine();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,116,Iterator i;
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,118,i = defaults.commandLines();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,119,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,121,"defaults.insertCommandLine(0, first);"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,122,i = defaults.commandLines();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,123,"assertSame(first, i.next());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,124,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,126,"defaults.insertCommandLine(0, second);"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,127,i = defaults.commandLines();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,128,"assertSame(second, i.next());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,129,"assertSame(first, i.next());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,130,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,133,public void testTriggers() {
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,134,final DefaultingCommandLine defaults = new DefaultingCommandLine();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,135,defaults.appendCommandLine(first);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,136,defaults.appendCommandLine(second);
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,138,Set set = defaults.getOptionTriggers();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,139,Iterator iter = set.iterator();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,140,"assertEquals(""wrong # of triggers"", 3, set.size());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,141,"assertTrue(""cannot find trigger"", set.contains(""--insecond""));"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,142,"assertTrue(""cannot find trigger"", set.contains(""--inboth""));"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,143,"assertTrue(""cannot find trigger"", set.contains(""--infirst""));"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,146,public void testDefaults() {
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,147,final DefaultingCommandLine defaults = new DefaultingCommandLine();
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,149,"assertEquals(""wrong # of defaults"", 0, defaults.getValues(""--insecond"").size());"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,150,"assertEquals(""wrong Set of defaults"", Collections.EMPTY_LIST, defaults.getValues(""--insecond"", null));"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.io.BufferedReader;import java.io.IOException;import java.io.PrintWriter;import java.io.StringReader;import java.io.StringWriter;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.util.HelpFormatter;import junit.framework.TestCase;public class ParserTest extends TestCase {    private Parser parser;    private DefaultOption verboseOption;    private DefaultOption helpOption;    private Group options;    private HelpFormatter helpFormatter;    private StringWriter out;    private BufferedReader in;    public void setUp() {        parser = new Parser();        final GroupBuilder gBuilder = new GroupBuilder();        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        helpOption = oBuilder.withLongName(""help"").withShortName(""h"").create();        verboseOption = oBuilder.withLongName(""verbose"").withShortName(""v"").create();        options = gBuilder.withOption(helpOption).withOption(verboseOption).create();        parser.setGroup(options);        helpFormatter = new HelpFormatter();        out = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(out));        parser.setHelpFormatter(helpFormatter);    }    public void testParse_Successful() throws OptionException {        final CommandLine cl = parser.parse(new String[]{""-hv""});        assertTrue(cl.hasOption(helpOption));        assertTrue(cl.hasOption(verboseOption));        assertEquals(""--help --verbose"",cl.toString());        final WriteableCommandLineImpl wcli = (WriteableCommandLineImpl)cl;        assertEquals(""[--help, --verbose]"",wcli.getNormalised().toString());    }    public void testParse_WithUnexpectedOption() {        try {            parser.parse(new String[]{""--unexpected""});            fail(""OptionException"");        }        catch(OptionException e) {            assertEquals(options,e.getOption());            assertEquals(""Unexpected --unexpected while processing --help|--verbose"",e.getMessage());        }    }    public void testParseAndHelp_Successful() throws IOException {        final CommandLine cl = parser.parseAndHelp(new String[]{""-v""});        assertTrue(cl.hasOption(verboseOption));        assertEquals("""",out.getBuffer().toString());    }    public void testParseAndHelp_ByHelpOption() throws IOException {        parser.setHelpOption(helpOption);        assertNull(parser.parseAndHelp(new String[]{""-hv""}));        inReader();        assertInReaderUsage();        assertInReaderEOF();    }    public void testParseAndHelp_ByHelpTrigger() throws IOException {        parser.setHelpTrigger(""--help"");        assertNull(parser.parseAndHelp(new String[]{""-hv""}));        inReader();        assertInReaderUsage();        assertInReaderEOF();    }    public void testParseAndHelp_WithUnexpectedOption() throws IOException {        assertNull(parser.parseAndHelp(new String[]{""--unexpected""}));        inReader();        assertInReaderLine(""Unexpected --unexpected while processing --help|--verbose"");        assertInReaderUsage();        assertInReaderEOF();    }    private void assertInReaderUsage() throws IOException {        assertInReaderLine(""Usage:"");        assertInReaderLine(""[--help --verbose]"");        assertInReaderLine(""--help|--verbose"");        assertInReaderLine(""--help (-h)"");        assertInReaderLine(""--verbose (-v)"");    }    private void assertInReaderLine(final String string) throws IOException {        assertEquals(string,in.readLine().trim());    }    private void assertInReaderEOF() throws IOException {        assertNull(in.readLine());    }    private void inReader() {        in = new BufferedReader(new StringReader(out.getBuffer().toString()));    }}"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,18,package org.apache.commons.cli2.commandline;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,20,import java.io.BufferedReader;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,21,import java.io.IOException;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,22,import java.io.PrintWriter;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,23,import java.io.StringReader;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,24,import java.io.StringWriter;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,26,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,27,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,28,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,29,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,30,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,31,import org.apache.commons.cli2.option.DefaultOption;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,32,import org.apache.commons.cli2.util.HelpFormatter;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,34,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,36,public class ParserTest extends TestCase {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,38,private Parser parser;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,39,private DefaultOption verboseOption;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,40,private DefaultOption helpOption;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,41,private Group options;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,42,private HelpFormatter helpFormatter;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,43,private StringWriter out;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,44,private BufferedReader in;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,46,public void setUp() {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,47,parser = new Parser();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,49,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,50,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,52,"helpOption = oBuilder.withLongName(""help"").withShortName(""h"").create();"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,53,"verboseOption = oBuilder.withLongName(""verbose"").withShortName(""v"").create();"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,54,options = gBuilder.withOption(helpOption).withOption(verboseOption).create();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,55,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,57,helpFormatter = new HelpFormatter();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,58,out = new StringWriter();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,59,helpFormatter.setPrintWriter(new PrintWriter(out));
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,60,parser.setHelpFormatter(helpFormatter);
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,63,public void testParse_Successful() throws OptionException {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,64,"final CommandLine cl = parser.parse(new String[]{""-hv""});"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,66,assertTrue(cl.hasOption(helpOption));
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,67,assertTrue(cl.hasOption(verboseOption));
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,69,"assertEquals(""--help --verbose"",cl.toString());"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,71,final WriteableCommandLineImpl wcli = (WriteableCommandLineImpl)cl;
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,72,"assertEquals(""[--help, --verbose]"",wcli.getNormalised().toString());"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,75,public void testParse_WithUnexpectedOption() {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,76,try {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,77,"parser.parse(new String[]{""--unexpected""});"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,78,"fail(""OptionException"");"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,80,catch(OptionException e) {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,81,"assertEquals(options,e.getOption());"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,82,"assertEquals(""Unexpected --unexpected while processing --help|--verbose"",e.getMessage());"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,86,public void testParseAndHelp_Successful() throws IOException {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,87,"final CommandLine cl = parser.parseAndHelp(new String[]{""-v""});"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,89,assertTrue(cl.hasOption(verboseOption));
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,90,"assertEquals("""",out.getBuffer().toString());"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,93,public void testParseAndHelp_ByHelpOption() throws IOException {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,94,parser.setHelpOption(helpOption);
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,96,"assertNull(parser.parseAndHelp(new String[]{""-hv""}));"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,98,inReader();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,99,assertInReaderUsage();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,100,assertInReaderEOF();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,103,public void testParseAndHelp_ByHelpTrigger() throws IOException {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,104,"parser.setHelpTrigger(""--help"");"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,106,"assertNull(parser.parseAndHelp(new String[]{""-hv""}));"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,108,inReader();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,109,assertInReaderUsage();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,110,assertInReaderEOF();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,113,public void testParseAndHelp_WithUnexpectedOption() throws IOException {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,114,"assertNull(parser.parseAndHelp(new String[]{""--unexpected""}));"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,116,inReader();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,117,"assertInReaderLine(""Unexpected --unexpected while processing --help|--verbose"");"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,118,assertInReaderUsage();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,119,assertInReaderEOF();
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,122,private void assertInReaderUsage() throws IOException {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,123,"assertInReaderLine(""Usage:"");"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,124,"assertInReaderLine(""[--help --verbose]"");"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,125,"assertInReaderLine(""--help|--verbose"");"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,126,"assertInReaderLine(""--help (-h)"");"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,127,"assertInReaderLine(""--verbose (-v)"");"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,130,private void assertInReaderLine(final String string) throws IOException {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,131,"assertEquals(string,in.readLine().trim());"
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,134,private void assertInReaderEOF() throws IOException {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,135,assertNull(in.readLine());
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,138,private void inReader() {
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,139,in = new BufferedReader(new StringReader(out.getBuffer().toString()));
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.Iterator;import java.util.Set;import java.util.prefs.Preferences;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.CommandLineTestCase;/** * @author Rob Oxspring */public class PreferencesCommandLineTest extends CommandLineTestCase {	/* (non-Javadoc)	 * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()	 */	protected CommandLine createCommandLine() {		// TODO Auto-generated method stub		final Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);		props.put(""--present"",""present value"");		props.put(""--alsopresent"","""");		props.put(""--multiple"",""value 1|value 2|value 3"");		props.put(""--bool"",""true"");		props.put(""present"",""present property"");		return new PreferencesCommandLine(root,props,'|');	}	protected CommandLine createCommandLineNoSep() {		// TODO Auto-generated method stub		final Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);		props.put(""--present"",""present value"");		props.put(""--alsopresent"","""");		props.put(""--multiple"",""value 1|value 2|value 3"");		props.put(""--bool"",""false"");		props.put(""present"",""present property"");		return new PreferencesCommandLine(root,props);	}    public void testPropertyValues() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));    	assertEquals(""wrong # of values"", 3, cmdline.getValues(""--multiple"").size());    	assertEquals(""wrong value 1"", ""value 1"", cmdline.getValues(""--multiple"").get(0));    	assertEquals(""wrong value 2"", ""value 2"", cmdline.getValues(""--multiple"").get(1));    	assertEquals(""wrong value 3"", ""value 3"", cmdline.getValues(""--multiple"").get(2));    }    public void testNoSeparator() {        // nothing to test    	CommandLine cmdline = createCommandLineNoSep();    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));    	assertEquals(""wrong # of values"", 1, cmdline.getValues(""--multiple"").size());    	assertEquals(""wrong value"", ""value 1|value 2|value 3"", cmdline.getValue(""--multiple""));    	assertFalse(""expected a false"", cmdline.getSwitch(""--bool"").booleanValue());    }    public void testNullOption() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	assertFalse(""should not find null option"", cmdline.hasOption((String) null));    	assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());    }    public void testPreferenceTriggers() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	Set triggers = cmdline.getOptionTriggers();        Iterator iter = triggers.iterator();        assertEquals(""wrong # of triggers"", 4, triggers.size());        assertTrue(""cannot find trigger"", triggers.contains(""--bool""));        assertTrue(""cannot find trigger"", triggers.contains(""--present""));        assertTrue(""cannot find trigger"", triggers.contains(""--multiple""));        assertTrue(""cannot find trigger"", triggers.contains(""--alsopresent""));    	assertFalse(""should not find null option"", cmdline.hasOption((String) null));    	assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());    }}"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,18,package org.apache.commons.cli2.commandline;
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,20,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,21,import java.util.Set;
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,22,import java.util.prefs.Preferences;
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,24,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,25,import org.apache.commons.cli2.CommandLineTestCase;
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,28,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,30,public class PreferencesCommandLineTest extends CommandLineTestCase {
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,32,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,33,* @see org.apache.commons.cli2.CommandLineTest#createCommandLine()
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,35,protected CommandLine createCommandLine() {
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,36,// TODO Auto-generated method stub
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,37,final Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,38,"props.put(""--present"",""present value"");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,39,"props.put(""--alsopresent"","""");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,40,"props.put(""--multiple"",""value 1|value 2|value 3"");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,41,"props.put(""--bool"",""true"");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,43,"props.put(""present"",""present property"");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,45,"return new PreferencesCommandLine(root,props,'|');"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,48,protected CommandLine createCommandLineNoSep() {
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,49,// TODO Auto-generated method stub
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,50,final Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,51,"props.put(""--present"",""present value"");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,52,"props.put(""--alsopresent"","""");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,53,"props.put(""--multiple"",""value 1|value 2|value 3"");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,54,"props.put(""--bool"",""false"");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,56,"props.put(""present"",""present property"");"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,58,"return new PreferencesCommandLine(root,props);"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,61,public void testPropertyValues() {
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,62,// nothing to test
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,63,CommandLine cmdline = createCommandLine();
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,65,"assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,66,"assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,67,"assertEquals(""wrong # of values"", 3, cmdline.getValues(""--multiple"").size());"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,68,"assertEquals(""wrong value 1"", ""value 1"", cmdline.getValues(""--multiple"").get(0));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,69,"assertEquals(""wrong value 2"", ""value 2"", cmdline.getValues(""--multiple"").get(1));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,70,"assertEquals(""wrong value 3"", ""value 3"", cmdline.getValues(""--multiple"").get(2));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,73,public void testNoSeparator() {
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,74,// nothing to test
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,75,CommandLine cmdline = createCommandLineNoSep();
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,77,"assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,78,"assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,79,"assertEquals(""wrong # of values"", 1, cmdline.getValues(""--multiple"").size());"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,80,"assertEquals(""wrong value"", ""value 1|value 2|value 3"", cmdline.getValue(""--multiple""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,81,"assertFalse(""expected a false"", cmdline.getSwitch(""--bool"").booleanValue());"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,84,public void testNullOption() {
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,85,// nothing to test
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,86,CommandLine cmdline = createCommandLine();
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,88,"assertFalse(""should not find null option"", cmdline.hasOption((String) null));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,89,"assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,92,public void testPreferenceTriggers() {
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,93,// nothing to test
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,94,CommandLine cmdline = createCommandLine();
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,96,Set triggers = cmdline.getOptionTriggers();
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,97,Iterator iter = triggers.iterator();
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,98,"assertEquals(""wrong # of triggers"", 4, triggers.size());"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,99,"assertTrue(""cannot find trigger"", triggers.contains(""--bool""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,100,"assertTrue(""cannot find trigger"", triggers.contains(""--present""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,101,"assertTrue(""cannot find trigger"", triggers.contains(""--multiple""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,102,"assertTrue(""cannot find trigger"", triggers.contains(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,104,"assertFalse(""should not find null option"", cmdline.hasOption((String) null));"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,105,"assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.Iterator;import java.util.Properties;import java.util.Set;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.CommandLineTestCase;/** * @author Rob Oxspring */public class PropertiesCommandLineTest    extends CommandLineTestCase {    private Properties props = null;    protected CommandLine createCommandLine() {        props = new Properties();        props.setProperty(""--present"", ""present value"");        props.setProperty(""--alsopresent"", """");        props.setProperty(""--multiple"", ""value 1|value 2|value 3"");        props.setProperty(""--bool"", ""true"");        props.setProperty(""present"", ""present property"");    	return new PropertiesCommandLine(root, props, '|');    }    protected CommandLine createCommandLineNoSep() {        props = new Properties();        props.setProperty(""--present"", ""present value"");        props.setProperty(""--alsopresent"", """");        props.setProperty(""--multiple"", ""value 1|value 2|value 3"");        props.setProperty(""--bool"", ""false"");        props.setProperty(""present"", ""present property"");    	return new PropertiesCommandLine(root, props);    }    public void testPropertyValues() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));    	assertEquals(""wrong # of values"", 3, cmdline.getValues(""--multiple"").size());    	assertEquals(""wrong value 1"", ""value 1"", cmdline.getValues(""--multiple"").get(0));    	assertEquals(""wrong value 2"", ""value 2"", cmdline.getValues(""--multiple"").get(1));    	assertEquals(""wrong value 3"", ""value 3"", cmdline.getValues(""--multiple"").get(2));    }    public void testNoSeparator() {        // nothing to test    	CommandLine cmdline = createCommandLineNoSep();    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));    	assertEquals(""wrong # of values"", 1, cmdline.getValues(""--multiple"").size());    	assertEquals(""wrong value"", ""value 1|value 2|value 3"", cmdline.getValue(""--multiple""));    	assertFalse(""expected a false"", cmdline.getSwitch(""--bool"").booleanValue());    }    public void testNullOption() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	assertFalse(""should not find null option"", cmdline.hasOption((String) null));    	assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());    }    public void testPropertyTriggers() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	Set triggers = cmdline.getOptionTriggers();        Iterator iter = triggers.iterator();        assertEquals(""wrong # of triggers"", 4, triggers.size());        assertTrue(""cannot find trigger"", triggers.contains(""--bool""));        assertTrue(""cannot find trigger"", triggers.contains(""--present""));        assertTrue(""cannot find trigger"", triggers.contains(""--multiple""));        assertTrue(""cannot find trigger"", triggers.contains(""--alsopresent""));    	assertFalse(""should not find null option"", cmdline.hasOption((String) null));    	assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());    }}"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,18,package org.apache.commons.cli2.commandline;
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,20,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,21,import java.util.Properties;
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,22,import java.util.Set;
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,24,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,25,import org.apache.commons.cli2.CommandLineTestCase;
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,28,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,30,public class PropertiesCommandLineTest
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,31,extends CommandLineTestCase {
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,32,private Properties props = null;
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,34,protected CommandLine createCommandLine() {
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,35,props = new Properties();
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,36,"props.setProperty(""--present"", ""present value"");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,37,"props.setProperty(""--alsopresent"", """");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,38,"props.setProperty(""--multiple"", ""value 1|value 2|value 3"");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,39,"props.setProperty(""--bool"", ""true"");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,41,"props.setProperty(""present"", ""present property"");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,42,"return new PropertiesCommandLine(root, props, '|');"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,45,protected CommandLine createCommandLineNoSep() {
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,46,props = new Properties();
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,47,"props.setProperty(""--present"", ""present value"");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,48,"props.setProperty(""--alsopresent"", """");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,49,"props.setProperty(""--multiple"", ""value 1|value 2|value 3"");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,50,"props.setProperty(""--bool"", ""false"");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,52,"props.setProperty(""present"", ""present property"");"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,53,"return new PropertiesCommandLine(root, props);"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,56,public void testPropertyValues() {
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,57,// nothing to test
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,58,CommandLine cmdline = createCommandLine();
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,60,"assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,61,"assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,62,"assertEquals(""wrong # of values"", 3, cmdline.getValues(""--multiple"").size());"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,63,"assertEquals(""wrong value 1"", ""value 1"", cmdline.getValues(""--multiple"").get(0));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,64,"assertEquals(""wrong value 2"", ""value 2"", cmdline.getValues(""--multiple"").get(1));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,65,"assertEquals(""wrong value 3"", ""value 3"", cmdline.getValues(""--multiple"").get(2));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,68,public void testNoSeparator() {
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,69,// nothing to test
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,70,CommandLine cmdline = createCommandLineNoSep();
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,72,"assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,73,"assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,74,"assertEquals(""wrong # of values"", 1, cmdline.getValues(""--multiple"").size());"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,75,"assertEquals(""wrong value"", ""value 1|value 2|value 3"", cmdline.getValue(""--multiple""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,76,"assertFalse(""expected a false"", cmdline.getSwitch(""--bool"").booleanValue());"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,79,public void testNullOption() {
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,80,// nothing to test
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,81,CommandLine cmdline = createCommandLine();
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,83,"assertFalse(""should not find null option"", cmdline.hasOption((String) null));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,84,"assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,87,public void testPropertyTriggers() {
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,88,// nothing to test
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,89,CommandLine cmdline = createCommandLine();
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,91,Set triggers = cmdline.getOptionTriggers();
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,92,Iterator iter = triggers.iterator();
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,93,"assertEquals(""wrong # of triggers"", 4, triggers.size());"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,94,"assertTrue(""cannot find trigger"", triggers.contains(""--bool""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,95,"assertTrue(""cannot find trigger"", triggers.contains(""--present""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,96,"assertTrue(""cannot find trigger"", triggers.contains(""--multiple""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,97,"assertTrue(""cannot find trigger"", triggers.contains(""--alsopresent""));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,99,"assertFalse(""should not find null option"", cmdline.hasOption((String) null));"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,100,"assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());"
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.WriteableCommandLineTestCase;public class WriteableCommandLineImplTest    extends WriteableCommandLineTestCase {    /* (non-Javadoc)     * @see org.apache.commons.cli2.WriteableCommandLineTest#createWriteableCommandLine()     */    protected WriteableCommandLine createWriteableCommandLine() {        return new WriteableCommandLineImpl(root, new ArrayList());    }    public void testToMakeEclipseSpotTheTestCase() {        // nothing to test    }}"
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,18,package org.apache.commons.cli2.commandline;
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,22,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,23,import org.apache.commons.cli2.WriteableCommandLineTestCase;
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,25,public class WriteableCommandLineImplTest
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,26,extends WriteableCommandLineTestCase {
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,27,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,28,* @see org.apache.commons.cli2.WriteableCommandLineTest#createWriteableCommandLine()
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,30,protected WriteableCommandLine createWriteableCommandLine() {
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,31,"return new WriteableCommandLineImpl(root, new ArrayList());"
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,34,public void testToMakeEclipseSpotTheTestCase() {
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,35,// nothing to test
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.jdepend;import java.io.IOException;import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;import jdepend.framework.JDepend;import jdepend.framework.JavaPackage;import junit.framework.TestCase;/** * @author Rob Oxspring */public class JDependTest extends TestCase {    private JDepend dependancies = null;    public void setUp() throws IOException {        dependancies = new JDepend();        dependancies.addDirectory(""target/classes"");        dependancies.analyze();    }    public void testJUnitNotPresent() {        // if junit dependancy is found then jdepend has been poluted        // with test classes and all tests are meaningless        assertNull(            ""JUnit dependancy found"",            dependancies.getPackage(""junit.framework""));        // the same applies to jdepend        assertNull(            ""JDepend dependancy found"",            dependancies.getPackage(""jdepend.framework""));    }    public void testAcceptableDistance() {        Collection packages = dependancies.getPackages();        // only interested in cli2        packages = cli2Packages(packages);        // resources is well off the line        packages =            namedPackages(packages, ""org.apache.commons.cli2.resource"", false);        for (final Iterator i = packages.iterator(); i.hasNext();) {            final JavaPackage pkg = (JavaPackage)i.next();            final float distance = pkg.distance();            final String message = pkg.getName() + "" too far from line: "" + distance;            assertTrue(                message,                distance < 0.21d);        }    }    public void testNoCyclesPresent() {        assertEquals(""Cycles exist"", false, dependancies.containsCycles());    }    public void testApiIndependance() {        dependancies.analyze();        final JavaPackage apiPackage =            dependancies.getPackage(""org.apache.commons.cli2"");        final Collection dependsUpon = cli2Packages(apiPackage.getEfferents());        assertEquals(""Api should depend on one package"", 1, dependsUpon.size());        JavaPackage pkg = (JavaPackage) dependsUpon.iterator().next();        assertEquals(                ""Wrong package name"",                ""org.apache.commons.cli2.resource"",                pkg.getName());    }    private Collection cli2Packages(final Collection incoming) {        return namedPackages(incoming, ""org.apache.commons.cli2"", true);    }    private Collection namedPackages(        final Collection incoming,        final String name,        final boolean include) {        final Collection outgoing = new ArrayList();        for (final Iterator i = incoming.iterator(); i.hasNext();) {            final JavaPackage pkg = (JavaPackage)i.next();            if (include ^ !pkg.getName().startsWith(name)) {                outgoing.add(pkg);            }        }        return outgoing;    }}"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,18,package org.apache.commons.cli2.jdepend;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,20,import java.io.IOException;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,21,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,22,import java.util.Collection;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,23,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,25,import jdepend.framework.JDepend;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,26,import jdepend.framework.JavaPackage;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,30,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,32,public class JDependTest extends TestCase {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,34,private JDepend dependancies = null;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,36,public void setUp() throws IOException {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,37,dependancies = new JDepend();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,38,"dependancies.addDirectory(""target/classes"");"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,39,dependancies.analyze();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,42,public void testJUnitNotPresent() {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,43,// if junit dependancy is found then jdepend has been poluted
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,44,// with test classes and all tests are meaningless
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,45,assertNull(
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,46,"""JUnit dependancy found"","
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,47,"dependancies.getPackage(""junit.framework""));"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,49,// the same applies to jdepend
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,50,assertNull(
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,51,"""JDepend dependancy found"","
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,52,"dependancies.getPackage(""jdepend.framework""));"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,55,public void testAcceptableDistance() {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,56,Collection packages = dependancies.getPackages();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,57,// only interested in cli2
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,58,packages = cli2Packages(packages);
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,59,// resources is well off the line
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,60,packages =
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,61,"namedPackages(packages, ""org.apache.commons.cli2.resource"", false);"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,63,for (final Iterator i = packages.iterator(); i.hasNext();) {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,64,final JavaPackage pkg = (JavaPackage)i.next();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,65,final float distance = pkg.distance();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,66,"final String message = pkg.getName() + "" too far from line: "" + distance;"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,67,assertTrue(
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,68,"message,"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,69,distance < 0.21d);
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,73,public void testNoCyclesPresent() {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,74,"assertEquals(""Cycles exist"", false, dependancies.containsCycles());"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,77,public void testApiIndependance() {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,78,dependancies.analyze();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,80,final JavaPackage apiPackage =
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,81,"dependancies.getPackage(""org.apache.commons.cli2"");"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,82,final Collection dependsUpon = cli2Packages(apiPackage.getEfferents());
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,84,"assertEquals(""Api should depend on one package"", 1, dependsUpon.size());"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,86,JavaPackage pkg = (JavaPackage) dependsUpon.iterator().next();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,87,assertEquals(
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,88,"""Wrong package name"","
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,89,"""org.apache.commons.cli2.resource"","
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,90,pkg.getName());
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,93,private Collection cli2Packages(final Collection incoming) {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,94,"return namedPackages(incoming, ""org.apache.commons.cli2"", true);"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,97,private Collection namedPackages(
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,98,"final Collection incoming,"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,99,"final String name,"
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,100,final boolean include) {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,101,final Collection outgoing = new ArrayList();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,102,for (final Iterator i = incoming.iterator(); i.hasNext();) {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,103,final JavaPackage pkg = (JavaPackage)i.next();
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,104,if (include ^ !pkg.getName().startsWith(name)) {
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,105,outgoing.add(pkg);
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,108,return outgoing;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.text.ParseException;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;import org.apache.commons.cli2.validation.DateValidator;import org.apache.commons.cli2.validation.DateValidatorTest;/** * @author Rob Oxspring */public class ArgumentTest    extends ArgumentTestCase {    private ResourceHelper resources = ResourceHelper.getResourceHelper();    public static Argument buildUsernameArgument() {        return new ArgumentImpl(""username"", ""The user to connect as"", 1, 1, '\0', '\0', null,                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);    }    public static Argument buildHostArgument() {        return new ArgumentImpl(""host"", ""The host name"", 2, 3, '\0', ',', null, null, null, 0);    }    public static Argument buildPathArgument() {        return new ArgumentImpl(""path"", ""The place to look for files"", 1, Integer.MAX_VALUE, '=',                                ';', null, ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);    }    public static Argument buildDateLimitArgument() {        return new ArgumentImpl(""limit"", ""the last acceptable date"", 0, 1, '=', '\0',                                new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);    }    public static Argument buildTargetsArgument() {        return new ArgumentImpl(""target"", ""The targets ant should build"", 0, Integer.MAX_VALUE,                                '\0', ',', null, null, null, 0);    }    public static Argument buildSizeArgument() {        List defaults = new ArrayList();        defaults.add(""10"");        return new ArgumentImpl(""size"", ""The number of units"", 1, 1, '\0', '\0', null,                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);    }    public static Argument buildBoundsArgument() {        List defaults = new ArrayList();        defaults.add(""5"");        defaults.add(""10"");        return new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);    }    public void testNew() {        try {            new ArgumentImpl(""limit"", ""the last acceptable date"", 10, 5, '=', '\0',                             new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(""Argument.minimum.exceeds.maximum""), e.getMessage());        }        {            ArgumentImpl arg =                new ArgumentImpl(null, ""the last acceptable date"", 5, 5, '=', '\0',                                 new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);            assertEquals(""wrong arg name"", ""arg"", arg.getPreferredName());        }        {            List defaults = new ArrayList();            try {                new ArgumentImpl(null, ""the last acceptable date"", 1, 1, '=', '\0',                                 new DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);            } catch (IllegalArgumentException exp) {                assertEquals(resources.getMessage(""Argument.too.few.defaults""), exp.getMessage());            }        }        try {            List defaults = new ArrayList();            defaults.add(""1"");            defaults.add(""2"");            new ArgumentImpl(null, ""the last acceptable date"", 1, 1, '=', '\0',                             new DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);        } catch (IllegalArgumentException exp) {            assertEquals(resources.getMessage(""Argument.too.many.defaults""), exp.getMessage());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.ArgumentTestCase#testProcessValues()     */    public void testProcessValues()        throws OptionException {        final Argument option = buildUsernameArgument();        final List args = list(""rob"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""username""));        assertEquals(""rob"", commandLine.getValue(option));    }    public void testProcessValues_BoundaryQuotes()        throws OptionException {        final Argument option = buildUsernameArgument();        final List args = list(""\""rob\"""");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""username""));        assertEquals(""rob"", commandLine.getValue(option));    }    public void testProcessValues_SpareValues()        throws OptionException {        final Argument option = buildUsernameArgument();        final List args = list(""rob"", ""secret"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertTrue(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""username""));        assertEquals(""rob"", commandLine.getValue(option));    }    public void testProcessValues_Optional() {        final Argument option = buildTargetsArgument();        final List args = list();        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.processValues(commandLine, iterator, option);        } catch (final OptionException mve) {            assertEquals(option, mve.getOption());            assertEquals(""Missing value(s) target [target ...]"", mve.getMessage());        }        assertFalse(iterator.hasNext());        assertFalse(commandLine.hasOption(option));        assertFalse(commandLine.hasOption(""username""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcessValues_Multiple()        throws OptionException {        final Argument option = buildTargetsArgument();        final List args = list(""compile"", ""test"", ""docs"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""target""));        assertFalse(commandLine.getValues(option).isEmpty());        assertListContentsEqual(args, commandLine.getValues(option));    }    public void testProcessValues_Contracted()        throws OptionException {        final Argument option = buildTargetsArgument();        final List args = list(""compile,test,javadoc"", ""checkstyle,jdepend"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""target""));        assertListContentsEqual(list(""compile"", ""test"", ""javadoc"", ""checkstyle"", ""jdepend""),                                commandLine.getValues(option));    }    public void testProcessValues_ContractedTooFew() {        final Argument option = buildHostArgument();        final List args = list(""box1"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.processValues(commandLine, iterator, option);            option.validate(commandLine);            fail(""Expected MissingValueException"");        } catch (OptionException mve) {            assertSame(option, mve.getOption());        }    }    public void testProcessValues_ContractedTooMany() {        final Argument option = buildHostArgument();        final List args = list(""box1,box2,box3,box4"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.processValues(commandLine, iterator, option);            option.validate(commandLine);            fail(""Expected MissingValueException"");        } catch (OptionException mve) {            assertSame(option, mve.getOption());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Argument option = buildTargetsArgument();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""any value""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Argument option = buildTargetsArgument();        assertTrue(option.getPrefixes().isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess()        throws OptionException {        final Argument option = buildPathArgument();        final List args = list(""-path=/lib;/usr/lib;/usr/local/lib"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""path""));        assertListContentsEqual(list(""-path=/lib"", ""/usr/lib"", ""/usr/local/lib""),                                commandLine.getValues(option));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Argument option = buildTargetsArgument();        assertTrue(option.getTriggers().isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate()        throws OptionException {        final Argument option = buildUsernameArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addValue(option, ""rob"");        option.validate(commandLine);    }    public void testValidate_Minimum() {        final Argument option = buildUsernameArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""UnexpectedValue"");        } catch (OptionException mve) {            assertEquals(option, mve.getOption());        }    }    public void testRequired() {        {            final Argument arg = buildBoundsArgument();            assertTrue(""not required"", arg.isRequired());        }        {            final Argument arg = buildTargetsArgument();            assertFalse(""should not be required"", arg.isRequired());        }    }    public void testValidate_Maximum() {        final Argument option = buildUsernameArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addValue(option, ""rob"");        commandLine.addValue(option, ""oxspring"");        try {            option.validate(commandLine);            fail(""UnexpectedValue"");        } catch (OptionException uve) {            assertEquals(option, uve.getOption());        }    }    public void testValidate_Validator()        throws OptionException, ParseException {        final Argument option = buildDateLimitArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addValue(option, ""2004-01-01"");        option.validate(commandLine, option);        assertContentsEqual(Arrays.asList(new Object[] {                                              DateValidatorTest.YYYY_MM_DD.parse(""2004-01-01"")                                          }), commandLine.getValues(option));    }    public void testValidate_ValidatorInvalidDate()        throws OptionException, ParseException {        final Argument option = buildDateLimitArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addValue(option, ""12-12-2004"");        try {            option.validate(commandLine, option);        } catch (OptionException exp) {            OptionException e =                new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,                                    ""12-12-2004"");            assertEquals(""wrong exception message"", e.getMessage(), exp.getMessage());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildUsernameArgument();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""<username>"", buffer.toString());    }    public void testAppendUsage_Infinite() {        final Option option = buildTargetsArgument();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""[<target1> [<target2> ...]]"", buffer.toString());    }    public void testAppendUsage_InfiniteNoOptional() {        final Option option = buildTargetsArgument();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_OPTIONAL);        option.appendUsage(buffer, settings, null);        assertEquals(""<target1> [<target2> ...]"", buffer.toString());    }    public void testAppendUsage_InfiniteNoNumbering() {        final Option option = buildTargetsArgument();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);        option.appendUsage(buffer, settings, null);        assertEquals(""[<target> [<target> ...]]"", buffer.toString());    }    public void testAppendUsage_Minimum() {        final Option option = buildHostArgument();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""<host1> <host2> [<host3>]"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildPathArgument();        assertEquals(""path"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildHostArgument();        assertEquals(""The host name"", option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        final Option option = buildHostArgument();        final List lines = option.helpLines(0, DisplaySetting.ALL, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        assertFalse(i.hasNext());    }    public void testCanProcess_ConsumeRemaining() {        final Option option = buildUsernameArgument();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""--""));    }    public void testProcess_ConsumeRemaining()        throws OptionException {        final Option option = buildPathArgument();        final List args = list(""options"", ""--"", ""--ignored"", ""-Dprop=val"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        final List values = commandLine.getValues(option);        assertTrue(values.contains(""options""));        assertTrue(values.contains(""--ignored""));        assertTrue(values.contains(""-Dprop=val""));        assertEquals(3, values.size());        assertFalse(iterator.hasNext());    }    public void testProcess_ConsumeNothing() {        final Option option = buildPathArgument();        final List args = list(""--"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.process(commandLine, iterator);            option.validate(commandLine);            fail(""Missing Value!"");        } catch (OptionException mve) {            assertEquals(option, mve.getOption());            assertEquals(""Missing value(s) path [path ...]"", mve.getMessage());        }        assertTrue(commandLine.getValues(option).isEmpty());        assertFalse(iterator.hasNext());    }    //    public void testProcess_DefinedDefaultValue() throws OptionException {    //        final Option size = buildSizeArgument();    //        final List args = list();    //        final WriteableCommandLine commandLine = commandLine(size, args);    //        final ListIterator iterator = args.listIterator();    //    //        size.process(commandLine, iterator);    //    //        assertEquals(""10"", commandLine.getValue(size));    //    }    //    //    public void testProcess_DefinedDefaultValues() throws OptionException {    //        final Option bounds = buildBoundsArgument();    //        final List args = list();    //        final WriteableCommandLine commandLine = commandLine(bounds, args);    //        final ListIterator iterator = args.listIterator();    //    //        bounds.process(commandLine, iterator);    //    //        List values = new ArrayList();    //        values.add(""5"");    //        values.add(""10"");    //        assertEquals(values, commandLine.getValues(bounds));    //    }    public void testProcess_InterrogatedDefaultValue()        throws OptionException {        final Option size = buildSizeArgument();        final List args = list();        final WriteableCommandLine commandLine = commandLine(size, args);        final ListIterator iterator = args.listIterator();        size.process(commandLine, iterator);        assertEquals(new Integer(20), commandLine.getValue(size, new Integer(20)));    }    public void testTooFewDefaults() {        List defaults = new ArrayList();        defaults.add(""5"");        try {            new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,                             ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS),                         exp.getMessage());        }    }    public void testTooManyDefaults() {        List defaults = new ArrayList();        defaults.add(""5"");        defaults.add(""10"");        defaults.add(""15"");        try {            new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,                             ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS),                         exp.getMessage());        }    }    public void testProcess_InterrogatedDefaultValues()        throws OptionException {        final Option bounds = buildBoundsArgument();        final List args = list();        final WriteableCommandLine commandLine = commandLine(bounds, args);        final ListIterator iterator = args.listIterator();        bounds.process(commandLine, iterator);        // test with values        List values = new ArrayList();        values.add(""50"");        values.add(""100"");        assertEquals(values, commandLine.getValues(bounds, values));        // test without values        assertEquals(Collections.EMPTY_LIST, commandLine.getValues(bounds, null));    }    public void testProcess_StripBoundaryQuotes()        throws OptionException {        final Option bounds = buildBoundsArgument();        final List args = list();        final WriteableCommandLine commandLine = commandLine(bounds, args);        final ListIterator iterator = args.listIterator();        bounds.process(commandLine, iterator);        List values = new ArrayList();        values.add(""50\"""");        values.add(""\""100"");        assertEquals(values, commandLine.getValues(bounds, values));    }    public void testSourceDestArgument() {        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Argument inputfiles =            abuilder.withName(""input"").withMinimum(0).withMaximum(0).create();        final Argument bad_outputfile =            abuilder.withName(""output"").withMinimum(1).withMaximum(2).create();        try {            final Argument targets = new SourceDestArgument(inputfiles, bad_outputfile);        } catch (final IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES),                         exp.getMessage());        }        final Argument outputfile =            abuilder.withName(""output"").withMinimum(1).withMaximum(1).create();        final Argument targets = new SourceDestArgument(inputfiles, outputfile);        final StringBuffer buffer = new StringBuffer(""test content"");        targets.appendUsage(buffer, Collections.EMPTY_SET, null);        assertTrue(""buffer not added"", buffer.toString().startsWith(""test content""));        assertFalse(""space added"", buffer.charAt(12) == ' ');    }}"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,20,import java.text.ParseException;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,22,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,23,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,24,import java.util.Collections;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,25,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,26,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,27,import java.util.List;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,28,import java.util.ListIterator;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,29,import java.util.Set;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,31,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,32,import org.apache.commons.cli2.DisplaySetting;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,33,import org.apache.commons.cli2.HelpLine;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,34,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,35,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,36,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,37,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,38,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,39,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,40,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,41,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,42,import org.apache.commons.cli2.validation.DateValidator;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,43,import org.apache.commons.cli2.validation.DateValidatorTest;
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,46,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,48,public class ArgumentTest
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,49,extends ArgumentTestCase {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,50,private ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,52,public static Argument buildUsernameArgument() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,53,"return new ArgumentImpl(""username"", ""The user to connect as"", 1, 1, '\0', '\0', null,"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,54,"ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,57,public static Argument buildHostArgument() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,58,"return new ArgumentImpl(""host"", ""The host name"", 2, 3, '\0', ',', null, null, null, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,61,public static Argument buildPathArgument() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,62,"return new ArgumentImpl(""path"", ""The place to look for files"", 1, Integer.MAX_VALUE, '=',"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,63,"';', null, ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,66,public static Argument buildDateLimitArgument() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,67,"return new ArgumentImpl(""limit"", ""the last acceptable date"", 0, 1, '=', '\0',"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,68,"new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,71,public static Argument buildTargetsArgument() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,72,"return new ArgumentImpl(""target"", ""The targets ant should build"", 0, Integer.MAX_VALUE,"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,73,"'\0', ',', null, null, null, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,76,public static Argument buildSizeArgument() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,77,List defaults = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,78,"defaults.add(""10"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,80,"return new ArgumentImpl(""size"", ""The number of units"", 1, 1, '\0', '\0', null,"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,81,"ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,84,public static Argument buildBoundsArgument() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,85,List defaults = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,86,"defaults.add(""5"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,87,"defaults.add(""10"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,89,"return new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,90,"ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,93,public void testNew() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,94,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,95,"new ArgumentImpl(""limit"", ""the last acceptable date"", 10, 5, '=', '\0',"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,96,"new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,97,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,98,"assertEquals(resources.getMessage(""Argument.minimum.exceeds.maximum""), e.getMessage());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,102,ArgumentImpl arg =
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,103,"new ArgumentImpl(null, ""the last acceptable date"", 5, 5, '=', '\0',"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,104,"new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,105,"assertEquals(""wrong arg name"", ""arg"", arg.getPreferredName());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,109,List defaults = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,111,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,112,"new ArgumentImpl(null, ""the last acceptable date"", 1, 1, '=', '\0',"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,113,"new DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,114,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,115,"assertEquals(resources.getMessage(""Argument.too.few.defaults""), exp.getMessage());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,119,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,120,List defaults = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,121,"defaults.add(""1"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,122,"defaults.add(""2"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,124,"new ArgumentImpl(null, ""the last acceptable date"", 1, 1, '=', '\0',"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,125,"new DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,126,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,127,"assertEquals(resources.getMessage(""Argument.too.many.defaults""), exp.getMessage());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,132,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,134,* @see org.apache.commons.cli2.ArgumentTestCase#testProcessValues()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,136,public void testProcessValues()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,137,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,138,final Argument option = buildUsernameArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,139,"final List args = list(""rob"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,140,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,141,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,142,"option.processValues(commandLine, iterator, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,144,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,145,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,146,"assertTrue(commandLine.hasOption(""username""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,147,"assertEquals(""rob"", commandLine.getValue(option));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,150,public void testProcessValues_BoundaryQuotes()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,151,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,152,final Argument option = buildUsernameArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,153,"final List args = list(""\""rob\"""");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,154,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,155,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,156,"option.processValues(commandLine, iterator, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,158,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,159,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,160,"assertTrue(commandLine.hasOption(""username""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,161,"assertEquals(""rob"", commandLine.getValue(option));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,164,public void testProcessValues_SpareValues()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,165,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,166,final Argument option = buildUsernameArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,167,"final List args = list(""rob"", ""secret"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,168,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,169,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,170,"option.processValues(commandLine, iterator, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,172,assertTrue(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,173,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,174,"assertTrue(commandLine.hasOption(""username""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,175,"assertEquals(""rob"", commandLine.getValue(option));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,178,public void testProcessValues_Optional() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,179,final Argument option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,180,final List args = list();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,181,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,182,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,184,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,185,"option.processValues(commandLine, iterator, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,186,} catch (final OptionException mve) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,187,"assertEquals(option, mve.getOption());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,188,"assertEquals(""Missing value(s) target [target ...]"", mve.getMessage());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,191,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,192,assertFalse(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,193,"assertFalse(commandLine.hasOption(""username""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,194,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,197,public void testProcessValues_Multiple()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,198,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,199,final Argument option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,200,"final List args = list(""compile"", ""test"", ""docs"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,201,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,202,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,203,"option.processValues(commandLine, iterator, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,205,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,206,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,207,"assertTrue(commandLine.hasOption(""target""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,208,assertFalse(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,209,"assertListContentsEqual(args, commandLine.getValues(option));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,212,public void testProcessValues_Contracted()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,213,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,214,final Argument option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,215,"final List args = list(""compile,test,javadoc"", ""checkstyle,jdepend"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,216,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,217,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,218,"option.processValues(commandLine, iterator, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,220,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,221,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,222,"assertTrue(commandLine.hasOption(""target""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,223,"assertListContentsEqual(list(""compile"", ""test"", ""javadoc"", ""checkstyle"", ""jdepend""),"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,224,commandLine.getValues(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,227,public void testProcessValues_ContractedTooFew() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,228,final Argument option = buildHostArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,229,"final List args = list(""box1"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,230,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,231,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,233,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,234,"option.processValues(commandLine, iterator, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,235,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,236,"fail(""Expected MissingValueException"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,237,} catch (OptionException mve) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,238,"assertSame(option, mve.getOption());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,242,public void testProcessValues_ContractedTooMany() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,243,final Argument option = buildHostArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,244,"final List args = list(""box1,box2,box3,box4"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,245,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,246,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,248,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,249,"option.processValues(commandLine, iterator, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,250,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,251,"fail(""Expected MissingValueException"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,252,} catch (OptionException mve) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,253,"assertSame(option, mve.getOption());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,258,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,260,* @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,262,public void testCanProcess() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,263,final Argument option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,264,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""any value""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,268,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,270,* @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,272,public void testPrefixes() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,273,final Argument option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,274,assertTrue(option.getPrefixes().isEmpty());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,278,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,280,* @see org.apache.commons.cli2.OptionTestCase#testProcess()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,282,public void testProcess()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,283,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,284,final Argument option = buildPathArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,285,"final List args = list(""-path=/lib;/usr/lib;/usr/local/lib"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,286,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,287,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,288,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,290,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,291,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,292,"assertTrue(commandLine.hasOption(""path""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,293,"assertListContentsEqual(list(""-path=/lib"", ""/usr/lib"", ""/usr/local/lib""),"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,294,commandLine.getValues(option));
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,298,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,300,* @see org.apache.commons.cli2.OptionTestCase#testTriggers()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,302,public void testTriggers() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,303,final Argument option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,304,assertTrue(option.getTriggers().isEmpty());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,308,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,310,* @see org.apache.commons.cli2.OptionTestCase#testValidate()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,312,public void testValidate()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,313,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,314,final Argument option = buildUsernameArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,315,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,317,"commandLine.addValue(option, ""rob"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,319,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,322,public void testValidate_Minimum() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,323,final Argument option = buildUsernameArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,324,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,326,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,327,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,328,"fail(""UnexpectedValue"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,329,} catch (OptionException mve) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,330,"assertEquals(option, mve.getOption());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,334,public void testRequired() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,336,final Argument arg = buildBoundsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,338,"assertTrue(""not required"", arg.isRequired());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,342,final Argument arg = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,344,"assertFalse(""should not be required"", arg.isRequired());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,348,public void testValidate_Maximum() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,349,final Argument option = buildUsernameArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,350,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,352,"commandLine.addValue(option, ""rob"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,353,"commandLine.addValue(option, ""oxspring"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,355,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,356,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,357,"fail(""UnexpectedValue"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,358,} catch (OptionException uve) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,359,"assertEquals(option, uve.getOption());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,363,public void testValidate_Validator()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,364,"throws OptionException, ParseException {"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,365,final Argument option = buildDateLimitArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,366,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,368,"commandLine.addValue(option, ""2004-01-01"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,370,"option.validate(commandLine, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,371,assertContentsEqual(Arrays.asList(new Object[] {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,372,"DateValidatorTest.YYYY_MM_DD.parse(""2004-01-01"")"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,373,"}), commandLine.getValues(option));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,376,public void testValidate_ValidatorInvalidDate()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,377,"throws OptionException, ParseException {"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,378,final Argument option = buildDateLimitArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,379,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,381,"commandLine.addValue(option, ""12-12-2004"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,383,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,384,"option.validate(commandLine, option);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,385,} catch (OptionException exp) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,386,OptionException e =
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,387,"new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,388,"""12-12-2004"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,389,"assertEquals(""wrong exception message"", e.getMessage(), exp.getMessage());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,394,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,396,* @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,398,public void testAppendUsage() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,399,final Option option = buildUsernameArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,400,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,401,"option.appendUsage(buffer, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,403,"assertEquals(""<username>"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,406,public void testAppendUsage_Infinite() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,407,final Option option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,408,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,409,"option.appendUsage(buffer, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,411,"assertEquals(""[<target1> [<target2> ...]]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,414,public void testAppendUsage_InfiniteNoOptional() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,415,final Option option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,416,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,417,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,418,settings.remove(DisplaySetting.DISPLAY_OPTIONAL);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,419,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,421,"assertEquals(""<target1> [<target2> ...]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,424,public void testAppendUsage_InfiniteNoNumbering() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,425,final Option option = buildTargetsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,426,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,427,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,428,settings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,429,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,431,"assertEquals(""[<target> [<target> ...]]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,434,public void testAppendUsage_Minimum() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,435,final Option option = buildHostArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,436,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,437,"option.appendUsage(buffer, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,439,"assertEquals(""<host1> <host2> [<host3>]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,443,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,445,* @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,447,public void testGetPreferredName() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,448,final Option option = buildPathArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,449,"assertEquals(""path"", option.getPreferredName());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,453,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,455,* @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,457,public void testGetDescription() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,458,final Option option = buildHostArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,459,"assertEquals(""The host name"", option.getDescription());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,463,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,465,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,467,public void testHelpLines() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,468,final Option option = buildHostArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,469,"final List lines = option.helpLines(0, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,470,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,472,final HelpLine line1 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,473,"assertEquals(0, line1.getIndent());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,474,"assertEquals(option, line1.getOption());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,476,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,479,public void testCanProcess_ConsumeRemaining() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,480,final Option option = buildUsernameArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,482,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""--""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,485,public void testProcess_ConsumeRemaining()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,486,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,487,final Option option = buildPathArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,488,"final List args = list(""options"", ""--"", ""--ignored"", ""-Dprop=val"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,489,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,490,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,492,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,494,final List values = commandLine.getValues(option);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,495,"assertTrue(values.contains(""options""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,496,"assertTrue(values.contains(""--ignored""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,497,"assertTrue(values.contains(""-Dprop=val""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,498,"assertEquals(3, values.size());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,499,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,502,public void testProcess_ConsumeNothing() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,503,final Option option = buildPathArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,504,"final List args = list(""--"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,505,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,506,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,508,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,509,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,510,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,511,"fail(""Missing Value!"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,512,} catch (OptionException mve) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,513,"assertEquals(option, mve.getOption());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,514,"assertEquals(""Missing value(s) path [path ...]"", mve.getMessage());"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,517,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,518,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,521,//    public void testProcess_DefinedDefaultValue() throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,522,//        final Option size = buildSizeArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,523,//        final List args = list();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,524,"//        final WriteableCommandLine commandLine = commandLine(size, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,525,//        final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,527,"//        size.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,529,"//        assertEquals(""10"", commandLine.getValue(size));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,532,//    public void testProcess_DefinedDefaultValues() throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,533,//        final Option bounds = buildBoundsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,534,//        final List args = list();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,535,"//        final WriteableCommandLine commandLine = commandLine(bounds, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,536,//        final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,538,"//        bounds.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,540,//        List values = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,541,"//        values.add(""5"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,542,"//        values.add(""10"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,543,"//        assertEquals(values, commandLine.getValues(bounds));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,545,public void testProcess_InterrogatedDefaultValue()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,546,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,547,final Option size = buildSizeArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,548,final List args = list();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,549,"final WriteableCommandLine commandLine = commandLine(size, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,550,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,552,"size.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,554,"assertEquals(new Integer(20), commandLine.getValue(size, new Integer(20)));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,557,public void testTooFewDefaults() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,558,List defaults = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,559,"defaults.add(""5"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,561,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,562,"new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,563,"ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,564,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,565,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,566,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS),"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,567,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,571,public void testTooManyDefaults() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,572,List defaults = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,573,"defaults.add(""5"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,574,"defaults.add(""10"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,575,"defaults.add(""15"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,577,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,578,"new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,579,"ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,580,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,581,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,582,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS),"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,583,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,587,public void testProcess_InterrogatedDefaultValues()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,588,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,589,final Option bounds = buildBoundsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,590,final List args = list();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,591,"final WriteableCommandLine commandLine = commandLine(bounds, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,592,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,594,"bounds.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,596,// test with values
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,597,List values = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,598,"values.add(""50"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,599,"values.add(""100"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,600,"assertEquals(values, commandLine.getValues(bounds, values));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,602,// test without values
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,603,"assertEquals(Collections.EMPTY_LIST, commandLine.getValues(bounds, null));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,606,public void testProcess_StripBoundaryQuotes()
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,607,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,608,final Option bounds = buildBoundsArgument();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,609,final List args = list();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,610,"final WriteableCommandLine commandLine = commandLine(bounds, args);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,611,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,613,"bounds.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,615,List values = new ArrayList();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,616,"values.add(""50\"""");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,617,"values.add(""\""100"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,618,"assertEquals(values, commandLine.getValues(bounds, values));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,621,public void testSourceDestArgument() {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,622,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,623,final GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,624,final Argument inputfiles =
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,625,"abuilder.withName(""input"").withMinimum(0).withMaximum(0).create();"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,626,final Argument bad_outputfile =
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,627,"abuilder.withName(""output"").withMinimum(1).withMaximum(2).create();"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,629,try {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,630,"final Argument targets = new SourceDestArgument(inputfiles, bad_outputfile);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,631,} catch (final IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,632,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,633,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES),"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,634,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,637,final Argument outputfile =
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,638,"abuilder.withName(""output"").withMinimum(1).withMaximum(1).create();"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,640,"final Argument targets = new SourceDestArgument(inputfiles, outputfile);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,641,"final StringBuffer buffer = new StringBuffer(""test content"");"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,642,"targets.appendUsage(buffer, Collections.EMPTY_SET, null);"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,644,"assertTrue(""buffer not added"", buffer.toString().startsWith(""test content""));"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,645,"assertFalse(""space added"", buffer.charAt(12) == ' ');"
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import org.apache.commons.cli2.OptionException;/** * @author Rob Oxspring */public abstract class ArgumentTestCase extends OptionTestCase {    public abstract void testProcessValues() throws OptionException;}"
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,20,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,23,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,25,public abstract class ArgumentTestCase extends OptionTestCase {
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,27,public abstract void testProcessValues() throws OptionException;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Collections;import java.util.HashSet;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * @author Rob Oxspring * * To change the template for this generated type comment go to * Window>Preferences>Java>Code Generation>Code and Comments */public class CommandTest    extends ParentTestCase {    public static Command buildStartCommand() {        return new Command(""start"", ""Begins the process"", Collections.singleton(""go""), false, null,                           null, 0);    }    public static Command buildCommitCommand() {        return new Command(""commit"", ""Commit the changes to the database"", null, true, null, null, 0);    }    public static Command buildLoginCommand() {        return new Command(""login"", ""Initiates a session for the user"", null, false,                           ArgumentTest.buildUsernameArgument(), null, 0);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()     */    public void testProcessParent()        throws OptionException {        final Command option = buildStartCommand();        final List args = list(""go"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""start""));        assertTrue(commandLine.hasOption(""go""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcessParent_Spare()        throws OptionException {        final Command option = buildLoginCommand();        final List args = list(""login"", ""rob"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertEquals(""rob"", iterator.next());        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""login""));        assertTrue(commandLine.getValues(option).isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Command option = buildStartCommand();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""start""));    }    public void testCanProcess_BadMatch() {        final Command option = buildStartCommand();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""stop""));    }    public void testCanProcess_Alias() {        final Command option = buildStartCommand();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""go""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Command option = buildStartCommand();        assertTrue(option.getPrefixes().isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess()        throws OptionException {        final Command option = buildLoginCommand();        final List args = list(""login"", ""rob"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""login""));        assertEquals(""rob"", commandLine.getValue(option));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Command option = buildStartCommand();        final Set triggers = option.getTriggers();        assertContentsEqual(list(""start"", ""go""), triggers);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate() {        final Parent option = buildCommitCommand();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""Missing an option"");        } catch (OptionException moe) {            assertSame(option, moe.getOption());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildStartCommand();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""[start (go)]"", buffer.toString());    }    public void testNullPreferredName() {        try {            new Command(null, """", Collections.singleton(""go""), false, null, null, 0);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception name"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testEmotyPreferredName() {        try {            new Command("""", """", Collections.singleton(""go""), false, null, null, 0);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception name"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testAppendUsage_NoOptional() {        final Option option = buildStartCommand();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_OPTIONAL);        option.appendUsage(buffer, settings, null);        assertEquals(""start (go)"", buffer.toString());    }    public void testAppendUsage_NoAlias() {        final Option option = buildStartCommand();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_ALIASES);        option.appendUsage(buffer, settings, null);        assertEquals(""[start]"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildStartCommand();        assertEquals(""start"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildLoginCommand();        assertEquals(""Initiates a session for the user"", option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        // TODO Auto-generated method stub    }}"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,20,import java.util.Collections;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,21,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,22,import java.util.List;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,23,import java.util.ListIterator;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,24,import java.util.Set;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,26,import org.apache.commons.cli2.DisplaySetting;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,27,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,28,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,29,import org.apache.commons.cli2.Parent;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,30,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,31,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,32,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,33,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,36,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,38,* To change the template for this generated type comment go to
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,39,* Window>Preferences>Java>Code Generation>Code and Comments
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,41,public class CommandTest
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,42,extends ParentTestCase {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,43,public static Command buildStartCommand() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,44,"return new Command(""start"", ""Begins the process"", Collections.singleton(""go""), false, null,"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,45,"null, 0);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,48,public static Command buildCommitCommand() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,49,"return new Command(""commit"", ""Commit the changes to the database"", null, true, null, null, 0);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,52,public static Command buildLoginCommand() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,53,"return new Command(""login"", ""Initiates a session for the user"", null, false,"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,54,"ArgumentTest.buildUsernameArgument(), null, 0);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,58,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,60,* @see org.apache.commons.cli2.ParentTestCase#testProcessParent()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,62,public void testProcessParent()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,63,throws OptionException {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,64,final Command option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,65,"final List args = list(""go"");"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,66,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,67,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,68,"option.processParent(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,70,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,71,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,72,"assertTrue(commandLine.hasOption(""start""));"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,73,"assertTrue(commandLine.hasOption(""go""));"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,74,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,77,public void testProcessParent_Spare()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,78,throws OptionException {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,79,final Command option = buildLoginCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,80,"final List args = list(""login"", ""rob"");"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,81,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,82,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,83,"option.processParent(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,85,"assertEquals(""rob"", iterator.next());"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,86,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,87,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,88,"assertTrue(commandLine.hasOption(""login""));"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,89,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,93,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,95,* @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,97,public void testCanProcess() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,98,final Command option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,99,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""start""));"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,102,public void testCanProcess_BadMatch() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,103,final Command option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,104,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""stop""));"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,107,public void testCanProcess_Alias() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,108,final Command option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,109,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""go""));"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,113,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,115,* @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,117,public void testPrefixes() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,118,final Command option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,119,assertTrue(option.getPrefixes().isEmpty());
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,123,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,125,* @see org.apache.commons.cli2.OptionTestCase#testProcess()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,127,public void testProcess()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,128,throws OptionException {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,129,final Command option = buildLoginCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,130,"final List args = list(""login"", ""rob"");"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,131,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,132,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,133,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,135,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,136,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,137,"assertTrue(commandLine.hasOption(""login""));"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,138,"assertEquals(""rob"", commandLine.getValue(option));"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,142,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,144,* @see org.apache.commons.cli2.OptionTestCase#testTriggers()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,146,public void testTriggers() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,147,final Command option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,148,final Set triggers = option.getTriggers();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,149,"assertContentsEqual(list(""start"", ""go""), triggers);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,153,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,155,* @see org.apache.commons.cli2.OptionTestCase#testValidate()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,157,public void testValidate() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,158,final Parent option = buildCommitCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,159,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,161,try {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,162,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,163,"fail(""Missing an option"");"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,164,} catch (OptionException moe) {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,165,"assertSame(option, moe.getOption());"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,170,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,172,* @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,174,public void testAppendUsage() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,175,final Option option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,176,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,177,"option.appendUsage(buffer, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,179,"assertEquals(""[start (go)]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,182,public void testNullPreferredName() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,183,try {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,184,"new Command(null, """", Collections.singleton(""go""), false, null, null, 0);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,185,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,186,"assertEquals(""wrong exception name"","
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,187,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,188,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,192,public void testEmotyPreferredName() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,193,try {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,194,"new Command("""", """", Collections.singleton(""go""), false, null, null, 0);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,195,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,196,"assertEquals(""wrong exception name"","
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,197,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,198,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,202,public void testAppendUsage_NoOptional() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,203,final Option option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,204,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,205,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,206,settings.remove(DisplaySetting.DISPLAY_OPTIONAL);
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,207,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,209,"assertEquals(""start (go)"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,212,public void testAppendUsage_NoAlias() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,213,final Option option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,214,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,215,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,216,settings.remove(DisplaySetting.DISPLAY_ALIASES);
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,217,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,219,"assertEquals(""[start]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,223,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,225,* @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,227,public void testGetPreferredName() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,228,final Option option = buildStartCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,229,"assertEquals(""start"", option.getPreferredName());"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,233,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,235,* @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,237,public void testGetDescription() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,238,final Option option = buildLoginCommand();
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,239,"assertEquals(""Initiates a session for the user"", option.getDescription());"
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,243,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,245,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,247,public void testHelpLines() {
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,248,// TODO Auto-generated method stub
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.HashSet;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * @author roberto * * To change the template for this generated type comment go to * Window>Preferences>Java>Code Generation>Code and Comments */public class DefaultOptionTest extends ParentTestCase {    public static DefaultOption buildHelpOption() {        final Set aliases = new HashSet(list(""-h"", ""-?""));        return new DefaultOption(            ""-"",            ""--"",            true,            ""--help"",            ""Displays the help"",            aliases,            aliases,            false,            null,            null,            'h');    }    public static DefaultOption buildXOption() {        return new DefaultOption(            ""-"",            ""--"",            true,            ""-X"",            ""This is needed"",            null,            null,            true,            null,            null,            'X');    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()     */    public void testProcessParent() throws OptionException {        final DefaultOption option = buildHelpOption();        final List args = list(""--help"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""--help""));        assertTrue(commandLine.hasOption(""-?""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcessParent_Burst() throws OptionException {        final DefaultOption option = buildHelpOption();        final List args = list(""-help"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertEquals(""-elp"", iterator.next());        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""--help""));        assertTrue(commandLine.hasOption(""-?""));        assertTrue(commandLine.getValues(option).isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final DefaultOption option = buildHelpOption();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), ""-?""));    }    public void testCanProcess_BadMatch() {        final DefaultOption option = buildHelpOption();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), ""-H""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final DefaultOption option = buildHelpOption();        assertContentsEqual(list(""-"", ""--""), option.getPrefixes());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess() {        // TODO Auto-generated method stub    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final DefaultOption option = buildHelpOption();        assertContentsEqual(list(""-?"", ""-h"", ""--help""), option.getTriggers());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate() {        final Parent option = buildXOption();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""Missing an option"");        }        catch (OptionException moe) {            assertSame(option, moe.getOption());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildHelpOption();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""[--help (-?,-h)]"", buffer.toString());    }    public void testAppendUsage_NoOptional() {        final Option option = buildHelpOption();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_OPTIONAL);        option.appendUsage(buffer, settings, null);        assertEquals(""--help (-?,-h)"", buffer.toString());    }    public void testAppendUsage_NoAlias() {        final Option option = buildHelpOption();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_ALIASES);        option.appendUsage(buffer, settings, null);        assertEquals(""[--help]"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildHelpOption();        assertEquals(""--help"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildHelpOption();        assertEquals(""Displays the help"", option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        // TODO Auto-generated method stub    }}"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,20,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,21,import java.util.List;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,22,import java.util.ListIterator;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,23,import java.util.Set;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,25,import org.apache.commons.cli2.DisplaySetting;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,26,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,27,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,28,import org.apache.commons.cli2.Parent;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,29,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,30,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,33,* @author roberto
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,35,* To change the template for this generated type comment go to
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,36,* Window>Preferences>Java>Code Generation>Code and Comments
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,38,public class DefaultOptionTest extends ParentTestCase {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,40,public static DefaultOption buildHelpOption() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,41,"final Set aliases = new HashSet(list(""-h"", ""-?""));"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,42,return new DefaultOption(
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,45,"true,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,46,"""--help"","
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,47,"""Displays the help"","
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,48,"aliases,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,49,"aliases,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,50,"false,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,51,"null,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,52,"null,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,53,'h');
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,56,public static DefaultOption buildXOption() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,57,return new DefaultOption(
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,60,"true,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,61,"""-X"","
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,62,"""This is needed"","
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,63,"null,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,64,"null,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,65,"true,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,66,"null,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,67,"null,"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,68,'X');
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,72,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,74,* @see org.apache.commons.cli2.ParentTestCase#testProcessParent()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,76,public void testProcessParent() throws OptionException {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,77,final DefaultOption option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,78,"final List args = list(""--help"");"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,79,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,80,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,81,"option.processParent(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,83,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,84,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,85,"assertTrue(commandLine.hasOption(""--help""));"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,86,"assertTrue(commandLine.hasOption(""-?""));"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,87,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,90,public void testProcessParent_Burst() throws OptionException {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,91,final DefaultOption option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,92,"final List args = list(""-help"");"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,93,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,94,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,95,"option.processParent(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,97,"assertEquals(""-elp"", iterator.next());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,98,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,99,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,100,"assertTrue(commandLine.hasOption(""--help""));"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,101,"assertTrue(commandLine.hasOption(""-?""));"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,102,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,106,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,108,* @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,110,public void testCanProcess() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,111,final DefaultOption option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,112,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), ""-?""));"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,115,public void testCanProcess_BadMatch() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,116,final DefaultOption option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,117,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), ""-H""));"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,121,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,123,* @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,125,public void testPrefixes() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,126,final DefaultOption option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,127,"assertContentsEqual(list(""-"", ""--""), option.getPrefixes());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,131,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,133,* @see org.apache.commons.cli2.OptionTestCase#testProcess()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,135,public void testProcess() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,136,// TODO Auto-generated method stub
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,141,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,143,* @see org.apache.commons.cli2.OptionTestCase#testTriggers()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,145,public void testTriggers() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,146,final DefaultOption option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,147,"assertContentsEqual(list(""-?"", ""-h"", ""--help""), option.getTriggers());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,151,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,153,* @see org.apache.commons.cli2.OptionTestCase#testValidate()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,155,public void testValidate() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,156,final Parent option = buildXOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,157,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,159,try {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,160,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,161,"fail(""Missing an option"");"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,163,catch (OptionException moe) {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,164,"assertSame(option, moe.getOption());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,169,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,171,* @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,173,public void testAppendUsage() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,174,final Option option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,175,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,176,"option.appendUsage(buffer, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,178,"assertEquals(""[--help (-?,-h)]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,181,public void testAppendUsage_NoOptional() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,182,final Option option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,183,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,184,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,185,settings.remove(DisplaySetting.DISPLAY_OPTIONAL);
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,186,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,188,"assertEquals(""--help (-?,-h)"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,191,public void testAppendUsage_NoAlias() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,192,final Option option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,193,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,194,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,195,settings.remove(DisplaySetting.DISPLAY_ALIASES);
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,196,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,198,"assertEquals(""[--help]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,202,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,204,* @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,206,public void testGetPreferredName() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,207,final Option option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,208,"assertEquals(""--help"", option.getPreferredName());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,212,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,214,* @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,216,public void testGetDescription() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,217,final Option option = buildHelpOption();
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,218,"assertEquals(""Displays the help"", option.getDescription());"
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,221,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,223,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,225,public void testHelpLines() {
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,226,// TODO Auto-generated method stub
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * @author Rob Oxspring */public class GroupTest    extends GroupTestCase {    public static final Command COMMAND_START =        new Command(""start"", ""Starts the server"", null, false, null, null, 0);    public static final Command COMMAND_STOP =        new Command(""stop"", ""Stops the server"", null, false, null, null, 0);    public static final Command COMMAND_RESTART =        new Command(""restart"", ""Stops and starts the server"", null, false, null, null, 0);    public static final Command COMMAND_GRACEFUL =        new Command(""graceful"", ""Restarts the server without interruption"", null, false, null,                    null, 0);    public static Group buildApacheCommandGroup() {        final List options = new ArrayList();        options.add(COMMAND_GRACEFUL);        options.add(COMMAND_RESTART);        options.add(COMMAND_START);        options.add(COMMAND_STOP);        return new GroupImpl(options, ""httpd-cmds"", ""The command to pass to the server"", 1, 1);    }    public static Group buildApachectlGroup() {        final List options = new ArrayList();        options.add(DefaultOptionTest.buildHelpOption());        options.add(ParentTest.buildKParent());        return new GroupImpl(options, ""apachectl"", ""Controls the apache http deamon"", 0,                             Integer.MAX_VALUE);    }    public static Group buildAntGroup() {        final List options = new ArrayList();        options.add(DefaultOptionTest.buildHelpOption());        options.add(ArgumentTest.buildTargetsArgument());        return new GroupImpl(options, ""ant"", ""The options for ant"", 0, Integer.MAX_VALUE);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.GroupTestCase#testProcessAnonymousArguments()     */    public void testProcessAnonymousArguments()        throws OptionException {        final Group option = buildAntGroup();        final List args = list(""compile,test"", ""dist"");        final ListIterator iterator = args.listIterator();        final WriteableCommandLine commandLine = commandLine(option, args);        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(""target""));        assertListContentsEqual(commandLine.getValues(""target""), args);        assertListContentsEqual(list(""compile"", ""test"", ""dist""), args);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.GroupTestCase#testProcessOptions()     */    public void testProcessOptions()        throws OptionException {        final Group option = buildApachectlGroup();        final List args = list(""-?"", ""-k"");        final ListIterator iterator = args.listIterator();        final WriteableCommandLine commandLine = commandLine(option, args);        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(""--help""));        assertTrue(commandLine.hasOption(""-k""));        assertFalse(commandLine.hasOption(""start""));        assertListContentsEqual(list(""--help"", ""-k""), args);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Group option = buildApacheCommandGroup();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""start""));    }    public void testCanProcess_BadMatch() {        final Group option = buildApacheCommandGroup();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""begin""));    }    public void testCanProcess_NullMatch() {        final Group option = buildApacheCommandGroup();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), (String) null));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Group option = buildApachectlGroup();        assertContentsEqual(list(""-"", ""--""), option.getPrefixes());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess()        throws OptionException {        final Group option = buildAntGroup();        final List args = list(""--help"", ""compile,test"", ""dist"");        final ListIterator iterator = args.listIterator();        final WriteableCommandLine commandLine = commandLine(option, args);        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(""-?""));        assertListContentsEqual(list(""compile"", ""test"", ""dist""), commandLine.getValues(""target""));    }    public void testProcess_Nested()        throws OptionException {        final Group option = buildApachectlGroup();        final List args = list(""-h"", ""-k"", ""graceful"");        final ListIterator iterator = args.listIterator();        final WriteableCommandLine commandLine = commandLine(option, args);        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(""-?""));        assertTrue(commandLine.hasOption(""-k""));        assertTrue(commandLine.hasOption(""graceful""));        assertFalse(commandLine.hasOption(""stop""));        assertTrue(commandLine.getValues(""start"").isEmpty());        assertListContentsEqual(list(""--help"", ""-k"", ""graceful""), args);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Group option = buildApachectlGroup();        assertContentsEqual(list(""--help"", ""-?"", ""-h"", ""-k""), option.getTriggers());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate()        throws OptionException {        final Group option = buildApacheCommandGroup();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addOption(COMMAND_RESTART);        option.validate(commandLine);    }    public void testValidate_UnexpectedOption() {        final Group option = buildApacheCommandGroup();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addOption(COMMAND_RESTART);        commandLine.addOption(COMMAND_GRACEFUL);        try {            option.validate(commandLine);            fail(""Too many options"");        } catch (OptionException uoe) {            assertEquals(option, uoe.getOption());        }    }    public void testValidate_MissingOption() {        final Group option = buildApacheCommandGroup();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""Missing an option"");        } catch (OptionException moe) {            assertEquals(option, moe.getOption());        }    }    public void testValidate_RequiredChild()        throws OptionException {        final Option required =            new DefaultOptionBuilder().withLongName(""required"").withRequired(true).create();        final Option optional =            new DefaultOptionBuilder().withLongName(""optional"").withRequired(false).create();        final Group group =            new GroupBuilder().withOption(required).withOption(optional).withMinimum(1).create();        WriteableCommandLine commandLine;        commandLine = commandLine(group, list());        try {            group.validate(commandLine);            fail(""Missing option 'required'"");        } catch (OptionException moe) {            assertEquals(required, moe.getOption());        }        commandLine = commandLine(group, list());        commandLine.addOption(optional);        try {            group.validate(commandLine);            fail(""Missing option 'required'"");        } catch (OptionException moe) {            assertEquals(required, moe.getOption());        }        commandLine = commandLine(group, list());        commandLine.addOption(required);        group.validate(commandLine);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        //settings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);        option.appendUsage(buffer, settings, null);        assertEquals(""httpd-cmds (graceful|restart|start|stop)"", buffer.toString());    }    public void testAppendUsage_NoOptional() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_OPTIONAL);        option.appendUsage(buffer, settings, null);        assertEquals(""httpd-cmds (graceful|restart|start|stop)"", buffer.toString());    }    public void testAppendUsage_NoExpand() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);        option.appendUsage(buffer, settings, null);        assertEquals(""httpd-cmds"", buffer.toString());    }    public void testAppendUsage_NoExpandOrName() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);        settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);        option.appendUsage(buffer, settings, null);        assertEquals(""httpd-cmds"", buffer.toString());    }    public void testAppendUsage_NoName() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);        option.appendUsage(buffer, settings, null);        assertEquals(""graceful|restart|start|stop"", buffer.toString());    }    public void testAppendUsage_WithArgs() {        final Option option = buildAntGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);        option.appendUsage(buffer, settings, null);        assertEquals(""[ant (--help (-?,-h)) [<target1> [<target2> ...]]]"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildAntGroup();        assertEquals(""ant"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildApachectlGroup();        assertEquals(""Controls the apache http deamon"", option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        final Option option = buildApacheCommandGroup();        final List lines = option.helpLines(0, DisplaySetting.ALL, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        final HelpLine line2 = (HelpLine) i.next();        assertEquals(1, line2.getIndent());        assertEquals(COMMAND_GRACEFUL, line2.getOption());        final HelpLine line3 = (HelpLine) i.next();        assertEquals(1, line3.getIndent());        assertEquals(COMMAND_RESTART, line3.getOption());        final HelpLine line4 = (HelpLine) i.next();        assertEquals(1, line4.getIndent());        assertEquals(COMMAND_START, line4.getOption());        final HelpLine line5 = (HelpLine) i.next();        assertEquals(1, line5.getIndent());        assertEquals(COMMAND_STOP, line5.getOption());        assertFalse(i.hasNext());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines_NoExpanded() {        final Option option = buildApacheCommandGroup();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        assertFalse(i.hasNext());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines_NoName() {        final Option option = buildApacheCommandGroup();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        final HelpLine line2 = (HelpLine) i.next();        assertEquals(1, line2.getIndent());        assertEquals(COMMAND_GRACEFUL, line2.getOption());        final HelpLine line3 = (HelpLine) i.next();        assertEquals(1, line3.getIndent());        assertEquals(COMMAND_RESTART, line3.getOption());        final HelpLine line4 = (HelpLine) i.next();        assertEquals(1, line4.getIndent());        assertEquals(COMMAND_START, line4.getOption());        final HelpLine line5 = (HelpLine) i.next();        assertEquals(1, line5.getIndent());        assertEquals(COMMAND_STOP, line5.getOption());        assertFalse(i.hasNext());    }}"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,20,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,21,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,22,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,23,import java.util.List;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,24,import java.util.ListIterator;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,25,import java.util.Set;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,27,import org.apache.commons.cli2.DisplaySetting;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,28,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,29,import org.apache.commons.cli2.HelpLine;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,30,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,31,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,32,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,33,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,34,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,35,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,38,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,40,public class GroupTest
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,41,extends GroupTestCase {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,42,public static final Command COMMAND_START =
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,43,"new Command(""start"", ""Starts the server"", null, false, null, null, 0);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,44,public static final Command COMMAND_STOP =
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,45,"new Command(""stop"", ""Stops the server"", null, false, null, null, 0);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,46,public static final Command COMMAND_RESTART =
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,47,"new Command(""restart"", ""Stops and starts the server"", null, false, null, null, 0);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,48,public static final Command COMMAND_GRACEFUL =
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,49,"new Command(""graceful"", ""Restarts the server without interruption"", null, false, null,"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,50,"null, 0);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,52,public static Group buildApacheCommandGroup() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,53,final List options = new ArrayList();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,54,options.add(COMMAND_GRACEFUL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,55,options.add(COMMAND_RESTART);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,56,options.add(COMMAND_START);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,57,options.add(COMMAND_STOP);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,59,"return new GroupImpl(options, ""httpd-cmds"", ""The command to pass to the server"", 1, 1);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,62,public static Group buildApachectlGroup() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,63,final List options = new ArrayList();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,64,options.add(DefaultOptionTest.buildHelpOption());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,65,options.add(ParentTest.buildKParent());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,67,"return new GroupImpl(options, ""apachectl"", ""Controls the apache http deamon"", 0,"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,68,Integer.MAX_VALUE);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,71,public static Group buildAntGroup() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,72,final List options = new ArrayList();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,73,options.add(DefaultOptionTest.buildHelpOption());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,74,options.add(ArgumentTest.buildTargetsArgument());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,76,"return new GroupImpl(options, ""ant"", ""The options for ant"", 0, Integer.MAX_VALUE);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,80,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,82,* @see org.apache.commons.cli2.GroupTestCase#testProcessAnonymousArguments()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,84,public void testProcessAnonymousArguments()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,85,throws OptionException {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,86,final Group option = buildAntGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,87,"final List args = list(""compile,test"", ""dist"");"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,88,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,89,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,90,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,92,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,93,"assertTrue(commandLine.hasOption(""target""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,94,"assertListContentsEqual(commandLine.getValues(""target""), args);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,95,"assertListContentsEqual(list(""compile"", ""test"", ""dist""), args);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,99,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,101,* @see org.apache.commons.cli2.GroupTestCase#testProcessOptions()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,103,public void testProcessOptions()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,104,throws OptionException {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,105,final Group option = buildApachectlGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,106,"final List args = list(""-?"", ""-k"");"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,107,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,108,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,109,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,111,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,112,"assertTrue(commandLine.hasOption(""--help""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,113,"assertTrue(commandLine.hasOption(""-k""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,114,"assertFalse(commandLine.hasOption(""start""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,115,"assertListContentsEqual(list(""--help"", ""-k""), args);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,119,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,121,* @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,123,public void testCanProcess() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,124,final Group option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,125,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""start""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,128,public void testCanProcess_BadMatch() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,129,final Group option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,130,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""begin""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,133,public void testCanProcess_NullMatch() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,134,final Group option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,135,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), (String) null));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,139,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,141,* @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,143,public void testPrefixes() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,144,final Group option = buildApachectlGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,145,"assertContentsEqual(list(""-"", ""--""), option.getPrefixes());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,149,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,151,* @see org.apache.commons.cli2.OptionTestCase#testProcess()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,153,public void testProcess()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,154,throws OptionException {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,155,final Group option = buildAntGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,156,"final List args = list(""--help"", ""compile,test"", ""dist"");"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,157,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,158,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,159,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,161,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,162,"assertTrue(commandLine.hasOption(""-?""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,163,"assertListContentsEqual(list(""compile"", ""test"", ""dist""), commandLine.getValues(""target""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,166,public void testProcess_Nested()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,167,throws OptionException {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,168,final Group option = buildApachectlGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,169,"final List args = list(""-h"", ""-k"", ""graceful"");"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,170,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,171,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,172,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,174,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,175,"assertTrue(commandLine.hasOption(""-?""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,176,"assertTrue(commandLine.hasOption(""-k""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,177,"assertTrue(commandLine.hasOption(""graceful""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,178,"assertFalse(commandLine.hasOption(""stop""));"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,179,"assertTrue(commandLine.getValues(""start"").isEmpty());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,180,"assertListContentsEqual(list(""--help"", ""-k"", ""graceful""), args);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,184,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,186,* @see org.apache.commons.cli2.OptionTestCase#testTriggers()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,188,public void testTriggers() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,189,final Group option = buildApachectlGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,190,"assertContentsEqual(list(""--help"", ""-?"", ""-h"", ""-k""), option.getTriggers());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,194,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,196,* @see org.apache.commons.cli2.OptionTestCase#testValidate()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,198,public void testValidate()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,199,throws OptionException {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,200,final Group option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,201,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,203,commandLine.addOption(COMMAND_RESTART);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,205,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,208,public void testValidate_UnexpectedOption() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,209,final Group option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,210,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,212,commandLine.addOption(COMMAND_RESTART);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,213,commandLine.addOption(COMMAND_GRACEFUL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,215,try {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,216,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,217,"fail(""Too many options"");"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,218,} catch (OptionException uoe) {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,219,"assertEquals(option, uoe.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,223,public void testValidate_MissingOption() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,224,final Group option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,225,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,227,try {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,228,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,229,"fail(""Missing an option"");"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,230,} catch (OptionException moe) {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,231,"assertEquals(option, moe.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,235,public void testValidate_RequiredChild()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,236,throws OptionException {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,237,final Option required =
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,238,"new DefaultOptionBuilder().withLongName(""required"").withRequired(true).create();"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,239,final Option optional =
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,240,"new DefaultOptionBuilder().withLongName(""optional"").withRequired(false).create();"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,241,final Group group =
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,242,new GroupBuilder().withOption(required).withOption(optional).withMinimum(1).create();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,244,WriteableCommandLine commandLine;
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,246,"commandLine = commandLine(group, list());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,248,try {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,249,group.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,250,"fail(""Missing option 'required'"");"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,251,} catch (OptionException moe) {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,252,"assertEquals(required, moe.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,255,"commandLine = commandLine(group, list());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,256,commandLine.addOption(optional);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,258,try {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,259,group.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,260,"fail(""Missing option 'required'"");"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,261,} catch (OptionException moe) {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,262,"assertEquals(required, moe.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,265,"commandLine = commandLine(group, list());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,266,commandLine.addOption(required);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,267,group.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,271,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,273,* @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,275,public void testAppendUsage() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,276,final Option option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,277,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,278,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,280,//settings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,281,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,283,"assertEquals(""httpd-cmds (graceful|restart|start|stop)"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,286,public void testAppendUsage_NoOptional() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,287,final Option option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,288,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,289,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,290,settings.remove(DisplaySetting.DISPLAY_OPTIONAL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,291,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,293,"assertEquals(""httpd-cmds (graceful|restart|start|stop)"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,296,public void testAppendUsage_NoExpand() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,297,final Option option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,298,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,299,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,300,settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,301,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,303,"assertEquals(""httpd-cmds"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,306,public void testAppendUsage_NoExpandOrName() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,307,final Option option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,308,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,309,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,310,settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,311,settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,312,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,314,"assertEquals(""httpd-cmds"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,317,public void testAppendUsage_NoName() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,318,final Option option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,319,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,320,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,321,settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,322,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,324,"assertEquals(""graceful|restart|start|stop"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,327,public void testAppendUsage_WithArgs() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,328,final Option option = buildAntGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,329,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,330,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,331,settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,332,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,334,"assertEquals(""[ant (--help (-?,-h)) [<target1> [<target2> ...]]]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,338,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,340,* @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,342,public void testGetPreferredName() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,343,final Option option = buildAntGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,344,"assertEquals(""ant"", option.getPreferredName());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,348,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,350,* @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,352,public void testGetDescription() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,353,final Option option = buildApachectlGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,354,"assertEquals(""Controls the apache http deamon"", option.getDescription());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,358,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,360,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,362,public void testHelpLines() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,363,final Option option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,364,"final List lines = option.helpLines(0, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,365,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,367,final HelpLine line1 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,368,"assertEquals(0, line1.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,369,"assertEquals(option, line1.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,371,final HelpLine line2 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,372,"assertEquals(1, line2.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,373,"assertEquals(COMMAND_GRACEFUL, line2.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,375,final HelpLine line3 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,376,"assertEquals(1, line3.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,377,"assertEquals(COMMAND_RESTART, line3.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,379,final HelpLine line4 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,380,"assertEquals(1, line4.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,381,"assertEquals(COMMAND_START, line4.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,383,final HelpLine line5 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,384,"assertEquals(1, line5.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,385,"assertEquals(COMMAND_STOP, line5.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,387,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,391,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,393,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,395,public void testHelpLines_NoExpanded() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,396,final Option option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,397,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,398,settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,400,"final List lines = option.helpLines(0, settings, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,401,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,403,final HelpLine line1 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,404,"assertEquals(0, line1.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,405,"assertEquals(option, line1.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,407,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,411,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,413,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,415,public void testHelpLines_NoName() {
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,416,final Option option = buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,417,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,418,settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,420,"final List lines = option.helpLines(0, settings, null);"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,421,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,423,final HelpLine line2 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,424,"assertEquals(1, line2.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,425,"assertEquals(COMMAND_GRACEFUL, line2.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,427,final HelpLine line3 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,428,"assertEquals(1, line3.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,429,"assertEquals(COMMAND_RESTART, line3.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,431,final HelpLine line4 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,432,"assertEquals(1, line4.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,433,"assertEquals(COMMAND_START, line4.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,435,final HelpLine line5 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,436,"assertEquals(1, line5.getIndent());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,437,"assertEquals(COMMAND_STOP, line5.getOption());"
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,439,assertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import org.apache.commons.cli2.OptionException;/** * @author Rob Oxspring */public abstract class GroupTestCase    extends OptionTestCase {    public abstract void testProcessOptions()        throws OptionException;    public abstract void testProcessAnonymousArguments()        throws OptionException;}"
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,20,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,23,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,25,public abstract class GroupTestCase
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,26,extends OptionTestCase {
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,27,public abstract void testProcessOptions()
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,28,throws OptionException;
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,30,public abstract void testProcessAnonymousArguments()
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,31,throws OptionException;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import org.apache.commons.cli2.CLITestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.util.HelpFormatter;import java.io.BufferedReader;import java.io.IOException;import java.io.PrintWriter;import java.io.StringReader;import java.io.StringWriter;import java.util.ArrayList;import java.util.List;/** * Test to exercise nested groups developed to demonstrate bug 32533 */public class NestedGroupTest extends CLITestCase {    final static DefaultOptionBuilder obuilder = new DefaultOptionBuilder();    final static ArgumentBuilder abuilder = new ArgumentBuilder();    final static GroupBuilder gbuilder = new GroupBuilder();    static Group buildActionGroup() {        return gbuilder.withName(""Action"").withDescription(""Action"")                       .withMinimum(1).withMaximum(1)                       .withOption(obuilder.withId(5).withShortName(""e"")                                           .withLongName(""encrypt"")                                           .withDescription(""Encrypt input"")                                           .create())                       .withOption(obuilder.withId(6).withShortName(""d"")                                           .withLongName(""decrypt"")                                           .withDescription(""Decrypt input"")                                           .create()).create();    }    static Group buildAlgorithmGroup() {        return gbuilder.withName(""Algorithm"")                       .withDescription(""Encryption Algorithm"").withMaximum(1)                       .withOption(obuilder.withId(0).withShortName(""b"")                                           .withLongName(""blowfish"")                                           .withDescription(""Blowfish"").create())                       .withOption(obuilder.withId(1).withShortName(""3"")                                           .withLongName(""3DES"")                                           .withDescription(""Triple DES"")                                           .create()).create();    }    static Group buildInputGroup() {        return gbuilder.withName(""Input"").withDescription(""Input"").withMinimum(1)                       .withMaximum(1)                       .withOption(obuilder.withId(2).withShortName(""f"")                                           .withLongName(""file"")                                           .withDescription(""Input file"")                                           .withArgument(abuilder.withName(                    ""file"").withMinimum(1).withMaximum(1).create()).create())                       .withOption(obuilder.withId(3).withShortName(""s"")                                           .withLongName(""string"")                                           .withDescription(""Input string"")                                           .withArgument(abuilder.withName(                    ""string"").withMinimum(1).withMaximum(1).create()).create())                       .create();    }    static Group buildEncryptionServiceGroup(Group[] nestedGroups) {        gbuilder.withName(""encryptionService"")                .withOption(obuilder.withId(4).withShortName(""h"")                                    .withLongName(""help"")                                    .withDescription(""Print this message"")                                    .create()).withOption(obuilder.withShortName(                ""k"").withLongName(""key"").withDescription(""Encryption key"")                                                                  .create());        for (int i = 0; i < nestedGroups.length; i++) {            gbuilder.withOption(nestedGroups[i]);        }        return gbuilder.create();    }    public void testNestedGroup()        throws OptionException {        final String[] args = {                ""-eb"",                ""--file"",                ""/tmp/filename.txt""            };        Group[] nestedGroups = {                buildActionGroup(),                buildAlgorithmGroup(),                buildInputGroup()            };        Parser parser = new Parser();        parser.setGroup(buildEncryptionServiceGroup(nestedGroups));        CommandLine commandLine = parser.parse(args);        assertTrue(""/tmp/filename.txt"".equals(commandLine.getValue(""-f"")));        assertTrue(commandLine.hasOption(""-e""));        assertTrue(commandLine.hasOption(""-b""));        assertFalse(commandLine.hasOption(""-d""));    }    public void testNestedGroupHelp() {        Group[] nestedGroups = {                buildActionGroup(),                buildAlgorithmGroup(),                buildInputGroup()            };        HelpFormatter helpFormatter = new HelpFormatter();        helpFormatter.setGroup(buildEncryptionServiceGroup(nestedGroups));        final StringWriter out = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(out));        try {            helpFormatter.print();            final BufferedReader bufferedReader = new BufferedReader(new StringReader(                        out.toString()));            final String[] expected = new String[] {                    ""Usage:                                                                          "",                    "" [-h -k -e|-d -b|-3 -f <file>|-s <string>]                                      "",                    ""encryptionService                                                               "",                    ""  -h (--help)               Print this message                                  "",                    ""  -k (--key)                Encryption key                                      "",                    ""  Action                    Action                                              "",                    ""    -e (--encrypt)          Encrypt input                                       "",                    ""    -d (--decrypt)          Decrypt input                                       "",                    ""  Algorithm                 Encryption Algorithm                                "",                    ""    -b (--blowfish)         Blowfish                                            "",                    ""    -3 (--3DES)             Triple DES                                          "",                    ""  Input                     Input                                               "",                    ""    -f (--file) file        Input file                                          "",                    ""    -s (--string) string    Input string                                        ""                };            List actual = new ArrayList(expected.length);            String input;            while ((input = bufferedReader.readLine()) != null) {                actual.add(input);            }            // Show they are the same number of lines            assertEquals(""Help text lines should be "" + expected.length,                actual.size(), expected.length);            for (int i = 0; i < expected.length; i++) {                if (!expected[i].equals(actual.get(i))) {                    for (int x = 0; x < expected.length; i++) {                        System.out.println(""   "" + expected[i]);                        System.out.println((expected[i].equals(actual.get(i))                            ? ""== ""                            : ""!= "") + actual.get(i));                    }                }                assertEquals(expected[i], actual.get(i));            }        }        catch (IOException e) {            fail(e.getLocalizedMessage());        }    }}"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,20,import org.apache.commons.cli2.CLITestCase;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,21,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,22,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,23,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,24,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,25,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,26,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,27,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,28,import org.apache.commons.cli2.util.HelpFormatter;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,30,import java.io.BufferedReader;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,31,import java.io.IOException;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,32,import java.io.PrintWriter;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,33,import java.io.StringReader;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,34,import java.io.StringWriter;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,36,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,37,import java.util.List;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,41,* Test to exercise nested groups developed to demonstrate bug 32533
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,43,public class NestedGroupTest extends CLITestCase {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,44,final static DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,45,final static ArgumentBuilder abuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,46,final static GroupBuilder gbuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,48,static Group buildActionGroup() {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,49,"return gbuilder.withName(""Action"").withDescription(""Action"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,50,.withMinimum(1).withMaximum(1)
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,51,".withOption(obuilder.withId(5).withShortName(""e"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,52,".withLongName(""encrypt"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,53,".withDescription(""Encrypt input"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,54,.create())
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,55,".withOption(obuilder.withId(6).withShortName(""d"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,56,".withLongName(""decrypt"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,57,".withDescription(""Decrypt input"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,58,.create()).create();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,61,static Group buildAlgorithmGroup() {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,62,"return gbuilder.withName(""Algorithm"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,63,".withDescription(""Encryption Algorithm"").withMaximum(1)"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,64,".withOption(obuilder.withId(0).withShortName(""b"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,65,".withLongName(""blowfish"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,66,".withDescription(""Blowfish"").create())"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,67,".withOption(obuilder.withId(1).withShortName(""3"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,68,".withLongName(""3DES"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,69,".withDescription(""Triple DES"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,70,.create()).create();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,73,static Group buildInputGroup() {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,74,"return gbuilder.withName(""Input"").withDescription(""Input"").withMinimum(1)"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,75,.withMaximum(1)
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,76,".withOption(obuilder.withId(2).withShortName(""f"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,77,".withLongName(""file"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,78,".withDescription(""Input file"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,79,.withArgument(abuilder.withName(
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,80,"""file"").withMinimum(1).withMaximum(1).create()).create())"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,81,".withOption(obuilder.withId(3).withShortName(""s"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,82,".withLongName(""string"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,83,".withDescription(""Input string"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,84,.withArgument(abuilder.withName(
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,85,"""string"").withMinimum(1).withMaximum(1).create()).create())"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,86,.create();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,89,static Group buildEncryptionServiceGroup(Group[] nestedGroups) {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,90,"gbuilder.withName(""encryptionService"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,91,".withOption(obuilder.withId(4).withShortName(""h"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,92,".withLongName(""help"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,93,".withDescription(""Print this message"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,94,.create()).withOption(obuilder.withShortName(
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,95,"""k"").withLongName(""key"").withDescription(""Encryption key"")"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,96,.create());
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,98,for (int i = 0; i < nestedGroups.length; i++) {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,99,gbuilder.withOption(nestedGroups[i]);
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,102,return gbuilder.create();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,105,public void testNestedGroup()
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,106,throws OptionException {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,107,final String[] args = {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,108,"""-eb"","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,109,"""--file"","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,110,"""/tmp/filename.txt"""
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,113,Group[] nestedGroups = {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,114,"buildActionGroup(),"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,115,"buildAlgorithmGroup(),"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,116,buildInputGroup()
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,119,Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,120,parser.setGroup(buildEncryptionServiceGroup(nestedGroups));
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,122,CommandLine commandLine = parser.parse(args);
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,124,"assertTrue(""/tmp/filename.txt"".equals(commandLine.getValue(""-f"")));"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,125,"assertTrue(commandLine.hasOption(""-e""));"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,126,"assertTrue(commandLine.hasOption(""-b""));"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,127,"assertFalse(commandLine.hasOption(""-d""));"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,130,public void testNestedGroupHelp() {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,131,Group[] nestedGroups = {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,132,"buildActionGroup(),"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,133,"buildAlgorithmGroup(),"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,134,buildInputGroup()
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,137,HelpFormatter helpFormatter = new HelpFormatter();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,138,helpFormatter.setGroup(buildEncryptionServiceGroup(nestedGroups));
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,140,final StringWriter out = new StringWriter();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,141,helpFormatter.setPrintWriter(new PrintWriter(out));
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,143,try {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,144,helpFormatter.print();
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,146,final BufferedReader bufferedReader = new BufferedReader(new StringReader(
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,147,out.toString()));
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,148,final String[] expected = new String[] {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,149,"""Usage:                                                                          "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,150,""" [-h -k -e|-d -b|-3 -f <file>|-s <string>]                                      "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,151,"""encryptionService                                                               "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,152,"""  -h (--help)               Print this message                                  "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,153,"""  -k (--key)                Encryption key                                      "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,154,"""  Action                    Action                                              "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,155,"""    -e (--encrypt)          Encrypt input                                       "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,156,"""    -d (--decrypt)          Decrypt input                                       "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,157,"""  Algorithm                 Encryption Algorithm                                "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,158,"""    -b (--blowfish)         Blowfish                                            "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,159,"""    -3 (--3DES)             Triple DES                                          "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,160,"""  Input                     Input                                               "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,161,"""    -f (--file) file        Input file                                          "","
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,162,"""    -s (--string) string    Input string                                        """
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,165,List actual = new ArrayList(expected.length);
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,166,String input;
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,168,while ((input = bufferedReader.readLine()) != null) {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,169,actual.add(input);
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,172,// Show they are the same number of lines
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,173,"assertEquals(""Help text lines should be "" + expected.length,"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,174,"actual.size(), expected.length);"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,176,for (int i = 0; i < expected.length; i++) {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,177,if (!expected[i].equals(actual.get(i))) {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,178,for (int x = 0; x < expected.length; i++) {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,179,"System.out.println(""   "" + expected[i]);"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,180,System.out.println((expected[i].equals(actual.get(i))
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,182,": ""!= "") + actual.get(i));"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,186,"assertEquals(expected[i], actual.get(i));"
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,189,catch (IOException e) {
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,190,fail(e.getLocalizedMessage());
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.List;import org.apache.commons.cli2.CLITestCase;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * @author Rob Oxspring */public abstract class OptionTestCase extends CLITestCase {    public static WriteableCommandLine commandLine(        final Option option,        final List args) {        return new WriteableCommandLineImpl(option, args);    }    public abstract void testTriggers();    public abstract void testPrefixes();    public abstract void testCanProcess();    public abstract void testProcess() throws OptionException;    public abstract void testValidate() throws OptionException;    public abstract void testAppendUsage() throws OptionException;    public abstract void testGetPreferredName();    public abstract void testGetDescription();    public abstract void testHelpLines();}"
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,20,import java.util.List;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,22,import org.apache.commons.cli2.CLITestCase;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,23,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,24,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,25,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,26,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,29,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,31,public abstract class OptionTestCase extends CLITestCase {
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,33,public static WriteableCommandLine commandLine(
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,34,"final Option option,"
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,35,final List args) {
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,36,"return new WriteableCommandLineImpl(option, args);"
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,39,public abstract void testTriggers();
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,41,public abstract void testPrefixes();
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,43,public abstract void testCanProcess();
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,45,public abstract void testProcess() throws OptionException;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,47,public abstract void testValidate() throws OptionException;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,49,public abstract void testAppendUsage() throws OptionException;
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,51,public abstract void testGetPreferredName();
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,53,public abstract void testGetDescription();
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,55,public abstract void testHelpLines();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.CommandBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * @author Rob Oxspring */public class ParentTest    extends ParentTestCase {    public static final Argument COMPLEX_ARGUMENT =        new ArgumentBuilder().withName(""username"").withMinimum(1).withMaximum(1).create();    public static final Option COMPLEX_CHILD_SSL =        new DefaultOptionBuilder().withLongName(""ssl"").withShortName(""s"").create();    public static final Option COMPLEX_CHILD_BASIC =        new DefaultOptionBuilder().withLongName(""basic"").withShortName(""b"").create();    public static final Option COMPLEX_CHILD_DIGEST =        new DefaultOptionBuilder().withLongName(""digest"").withShortName(""d"").create();    public static final Group COMPLEX_CHILDREN =        new GroupBuilder().withName(""login-opts"").withOption(COMPLEX_CHILD_BASIC)                          .withOption(COMPLEX_CHILD_DIGEST).withOption(COMPLEX_CHILD_SSL).create();    public static Parent buildLibParent() {        final Argument argument = ArgumentTest.buildPathArgument();        return new DefaultOption(""-"", ""--"", false, ""--lib"", ""Specifies library search path"", null,                                 null, false, argument, null, 'l');    }    public static Parent buildKParent() {        final Group children = GroupTest.buildApacheCommandGroup();        return new DefaultOption(""-"", ""--"", false, ""-k"", ""desc"", null, null, false, null, children,                                 'k');    }    public static Parent buildComplexParent() {        return new CommandBuilder().withName(""login"").withName(""lo"").withName(""l"")                                   .withArgument(COMPLEX_ARGUMENT).withChildren(COMPLEX_CHILDREN)                                   .create();    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()     */    public void testProcessParent()        throws OptionException {        final Parent option = buildKParent();        final List args = list(""-k"", ""start"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertEquals(""start"", iterator.next());        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""-k""));        assertTrue(commandLine.getValues(option).isEmpty());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Parent option = buildKParent();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""-k""));    }    public void testCanProcess_BadMatch() {        final Parent option = buildKParent();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""-K""));    }    public void testCanProcess_ContractedArgument() {        final Parent option = buildLibParent();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""--lib=/usr/lib""));    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Parent option = buildKParent();        assertContentsEqual(list(""-"", ""--""), option.getPrefixes());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess()        throws OptionException {        final Parent option = CommandTest.buildStartCommand();        final List args = list(""start"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""start""));        assertFalse(commandLine.hasOption(""stop""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcess_NoMatch()        throws OptionException {        final Parent option = CommandTest.buildStartCommand();        final List args = list(""whatever"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.process(commandLine, iterator);            fail(""unexpected token not thrown"");        } catch (OptionException exp) {            OptionException e =                new OptionException(option, ResourceConstants.UNEXPECTED_TOKEN, ""whatever"");            assertEquals(""wrong exception message"", e.getMessage(), exp.getMessage());        }    }    public void testProcess_Children()        throws OptionException {        final Parent option = buildKParent();        final List args = list(""-k"", ""start"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertNull(option.findOption(""whatever""));        assertNotNull(option.findOption(""start""));        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""-k""));        assertTrue(commandLine.hasOption(""start""));        assertFalse(commandLine.hasOption(""stop""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcess_Argument()        throws OptionException {        final Parent option = buildLibParent();        final List args = list(""--lib=C:\\WINDOWS;C:\\WINNT;C:\\"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""--lib""));        assertContentsEqual(list(""C:\\WINDOWS"", ""C:\\WINNT"", ""C:\\""), commandLine.getValues(option));    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Parent option = buildKParent();        assertContentsEqual(list(""-k""), option.getTriggers());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate()        throws OptionException {        final Parent option = CommandTest.buildStartCommand();        final WriteableCommandLine commandLine = commandLine(option, list());        option.validate(commandLine);        commandLine.addOption(option);        option.validate(commandLine);    }    public void testValidate_Children()        throws OptionException {        final Parent option = buildKParent();        final WriteableCommandLine commandLine = commandLine(option, list());        option.validate(commandLine);        commandLine.addOption(option);        try {            option.validate(commandLine);            fail(""Missing a command"");        } catch (OptionException moe) {            assertNotNull(moe.getOption());            assertNotSame(option, moe.getOption());        }    }    public void testValidate_Argument()        throws OptionException {        final Command option = CommandTest.buildLoginCommand();        final WriteableCommandLine commandLine = commandLine(option, list());        option.validate(commandLine);        commandLine.addOption(option);        try {            option.validate(commandLine);            fail(""Missing a value"");        } catch (OptionException moe) {            assertSame(option, moe.getOption());        }    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildComplexParent();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);        option.appendUsage(buffer, settings, null);        assertEquals(""[login (l,lo) <username> [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]"",                     buffer.toString());    }    public void testAppendUsage_NoArguments() {        final Option option = buildComplexParent();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);        option.appendUsage(buffer, settings, null);        assertEquals(""[login (l,lo) [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]"",                     buffer.toString());    }    public void testAppendUsage_NoChildren() {        final Option option = buildComplexParent();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);        option.appendUsage(buffer, settings, null);        assertEquals(""[login (l,lo) <username>]"", buffer.toString());    }    public void testAppendUsage_NoArgumentsOrChildren() {        final Option option = buildComplexParent();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        option.appendUsage(buffer, settings, null);        assertEquals(""[login (l,lo)]"", buffer.toString());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildLibParent();        assertEquals(""--lib"", option.getPreferredName());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildLibParent();        assertEquals(""Specifies library search path"", option.getDescription());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        final Option option = buildComplexParent();        final List lines = option.helpLines(0, DisplaySetting.ALL, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        final HelpLine line2 = (HelpLine) i.next();        assertEquals(1, line2.getIndent());        assertEquals(COMPLEX_ARGUMENT, line2.getOption());        final HelpLine line3 = (HelpLine) i.next();        assertEquals(1, line3.getIndent());        assertEquals(COMPLEX_CHILDREN, line3.getOption());        final HelpLine line4 = (HelpLine) i.next();        assertEquals(2, line4.getIndent());        assertEquals(COMPLEX_CHILD_BASIC, line4.getOption());        final HelpLine line5 = (HelpLine) i.next();        assertEquals(2, line5.getIndent());        assertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());        final HelpLine line6 = (HelpLine) i.next();        assertEquals(2, line6.getIndent());        assertEquals(COMPLEX_CHILD_SSL, line6.getOption());        assertFalse(i.hasNext());    }    public void testHelpLines_NoArgument() {        final Option option = buildComplexParent();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        final HelpLine line3 = (HelpLine) i.next();        assertEquals(1, line3.getIndent());        assertEquals(COMPLEX_CHILDREN, line3.getOption());        final HelpLine line4 = (HelpLine) i.next();        assertEquals(2, line4.getIndent());        assertEquals(COMPLEX_CHILD_BASIC, line4.getOption());        final HelpLine line5 = (HelpLine) i.next();        assertEquals(2, line5.getIndent());        assertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());        final HelpLine line6 = (HelpLine) i.next();        assertEquals(2, line6.getIndent());        assertEquals(COMPLEX_CHILD_SSL, line6.getOption());        assertFalse(i.hasNext());    }    public void testHelpLines_NoChildren() {        final Option option = buildComplexParent();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        final HelpLine line2 = (HelpLine) i.next();        assertEquals(1, line2.getIndent());        assertEquals(COMPLEX_ARGUMENT, line2.getOption());        assertFalse(i.hasNext());    }    public void testNullPreferredName() {        try {        	new CommandBuilder().create();        } catch (IllegalStateException exp) {        	assertEquals(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME), exp.getMessage());        }    }    public void testRequired() {    	Command cmd = new CommandBuilder().withRequired(true).withName(""blah"").create();    	assertTrue(""cmd is not required"", cmd.isRequired());    	assertEquals(""id is incorrect"", 0, cmd.getId());    }    public void testID() {    	Command cmd = new CommandBuilder().withId('c').withName(""blah"").create();    	assertEquals(""id is incorrect"", 'c', cmd.getId());    }    public void testGetId() {        assertEquals('h', DefaultOptionTest.buildHelpOption().getId());        assertEquals('X', DefaultOptionTest.buildXOption().getId());        assertEquals(0, CommandTest.buildStartCommand().getId());    }}"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,20,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,21,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,22,import java.util.List;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,23,import java.util.ListIterator;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,24,import java.util.Set;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,26,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,27,import org.apache.commons.cli2.DisplaySetting;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,28,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,29,import org.apache.commons.cli2.HelpLine;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,30,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,31,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,32,import org.apache.commons.cli2.Parent;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,33,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,34,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,35,import org.apache.commons.cli2.builder.CommandBuilder;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,36,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,37,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,38,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,39,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,40,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,43,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,45,public class ParentTest
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,46,extends ParentTestCase {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,47,public static final Argument COMPLEX_ARGUMENT =
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,48,"new ArgumentBuilder().withName(""username"").withMinimum(1).withMaximum(1).create();"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,49,public static final Option COMPLEX_CHILD_SSL =
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,50,"new DefaultOptionBuilder().withLongName(""ssl"").withShortName(""s"").create();"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,51,public static final Option COMPLEX_CHILD_BASIC =
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,52,"new DefaultOptionBuilder().withLongName(""basic"").withShortName(""b"").create();"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,53,public static final Option COMPLEX_CHILD_DIGEST =
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,54,"new DefaultOptionBuilder().withLongName(""digest"").withShortName(""d"").create();"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,55,public static final Group COMPLEX_CHILDREN =
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,56,"new GroupBuilder().withName(""login-opts"").withOption(COMPLEX_CHILD_BASIC)"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,57,.withOption(COMPLEX_CHILD_DIGEST).withOption(COMPLEX_CHILD_SSL).create();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,59,public static Parent buildLibParent() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,60,final Argument argument = ArgumentTest.buildPathArgument();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,62,"return new DefaultOption(""-"", ""--"", false, ""--lib"", ""Specifies library search path"", null,"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,63,"null, false, argument, null, 'l');"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,66,public static Parent buildKParent() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,67,final Group children = GroupTest.buildApacheCommandGroup();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,69,"return new DefaultOption(""-"", ""--"", false, ""-k"", ""desc"", null, null, false, null, children,"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,70,'k');
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,73,public static Parent buildComplexParent() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,74,"return new CommandBuilder().withName(""login"").withName(""lo"").withName(""l"")"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,75,.withArgument(COMPLEX_ARGUMENT).withChildren(COMPLEX_CHILDREN)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,76,.create();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,79,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,80,* @see org.apache.commons.cli2.ParentTestCase#testProcessParent()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,82,public void testProcessParent()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,83,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,84,final Parent option = buildKParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,85,"final List args = list(""-k"", ""start"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,86,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,87,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,88,"option.processParent(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,90,"assertEquals(""start"", iterator.next());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,91,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,92,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,93,"assertTrue(commandLine.hasOption(""-k""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,94,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,97,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,98,* @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,100,public void testCanProcess() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,101,final Parent option = buildKParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,102,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""-k""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,105,public void testCanProcess_BadMatch() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,106,final Parent option = buildKParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,107,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""-K""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,110,public void testCanProcess_ContractedArgument() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,111,final Parent option = buildLibParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,112,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""--lib=/usr/lib""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,115,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,116,* @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,118,public void testPrefixes() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,119,final Parent option = buildKParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,120,"assertContentsEqual(list(""-"", ""--""), option.getPrefixes());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,123,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,124,* @see org.apache.commons.cli2.OptionTestCase#testProcess()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,126,public void testProcess()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,127,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,128,final Parent option = CommandTest.buildStartCommand();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,129,"final List args = list(""start"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,130,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,131,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,132,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,134,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,135,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,136,"assertTrue(commandLine.hasOption(""start""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,137,"assertFalse(commandLine.hasOption(""stop""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,138,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,141,public void testProcess_NoMatch()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,142,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,143,final Parent option = CommandTest.buildStartCommand();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,144,"final List args = list(""whatever"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,145,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,146,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,148,try {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,149,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,150,"fail(""unexpected token not thrown"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,151,} catch (OptionException exp) {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,152,OptionException e =
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,153,"new OptionException(option, ResourceConstants.UNEXPECTED_TOKEN, ""whatever"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,154,"assertEquals(""wrong exception message"", e.getMessage(), exp.getMessage());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,158,public void testProcess_Children()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,159,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,160,final Parent option = buildKParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,161,"final List args = list(""-k"", ""start"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,162,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,163,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,164,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,166,"assertNull(option.findOption(""whatever""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,167,"assertNotNull(option.findOption(""start""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,169,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,170,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,171,"assertTrue(commandLine.hasOption(""-k""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,172,"assertTrue(commandLine.hasOption(""start""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,173,"assertFalse(commandLine.hasOption(""stop""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,174,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,177,public void testProcess_Argument()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,178,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,179,final Parent option = buildLibParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,180,"final List args = list(""--lib=C:\\WINDOWS;C:\\WINNT;C:\\"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,181,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,182,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,183,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,185,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,186,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,187,"assertTrue(commandLine.hasOption(""--lib""));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,188,"assertContentsEqual(list(""C:\\WINDOWS"", ""C:\\WINNT"", ""C:\\""), commandLine.getValues(option));"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,191,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,192,* @see org.apache.commons.cli2.OptionTestCase#testTriggers()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,194,public void testTriggers() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,195,final Parent option = buildKParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,196,"assertContentsEqual(list(""-k""), option.getTriggers());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,199,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,200,* @see org.apache.commons.cli2.OptionTestCase#testValidate()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,202,public void testValidate()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,203,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,204,final Parent option = CommandTest.buildStartCommand();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,205,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,207,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,209,commandLine.addOption(option);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,211,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,214,public void testValidate_Children()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,215,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,216,final Parent option = buildKParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,217,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,219,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,220,commandLine.addOption(option);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,222,try {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,223,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,224,"fail(""Missing a command"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,225,} catch (OptionException moe) {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,226,assertNotNull(moe.getOption());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,227,"assertNotSame(option, moe.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,231,public void testValidate_Argument()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,232,throws OptionException {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,233,final Command option = CommandTest.buildLoginCommand();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,234,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,236,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,238,commandLine.addOption(option);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,240,try {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,241,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,242,"fail(""Missing a value"");"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,243,} catch (OptionException moe) {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,244,"assertSame(option, moe.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,248,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,249,* @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,251,public void testAppendUsage() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,252,final Option option = buildComplexParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,253,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,254,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,255,settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,256,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,258,"assertEquals(""[login (l,lo) <username> [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]"","
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,259,buffer.toString());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,262,public void testAppendUsage_NoArguments() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,263,final Option option = buildComplexParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,264,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,265,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,266,settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,267,settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,268,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,270,"assertEquals(""[login (l,lo) [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]"","
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,271,buffer.toString());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,274,public void testAppendUsage_NoChildren() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,275,final Option option = buildComplexParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,276,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,277,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,278,settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,279,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,281,"assertEquals(""[login (l,lo) <username>]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,284,public void testAppendUsage_NoArgumentsOrChildren() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,285,final Option option = buildComplexParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,286,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,287,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,288,settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,289,settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,290,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,292,"assertEquals(""[login (l,lo)]"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,295,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,296,* @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,298,public void testGetPreferredName() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,299,final Option option = buildLibParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,300,"assertEquals(""--lib"", option.getPreferredName());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,303,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,304,* @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,306,public void testGetDescription() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,307,final Option option = buildLibParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,308,"assertEquals(""Specifies library search path"", option.getDescription());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,311,/* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,312,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,314,public void testHelpLines() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,315,final Option option = buildComplexParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,316,"final List lines = option.helpLines(0, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,317,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,319,final HelpLine line1 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,320,"assertEquals(0, line1.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,321,"assertEquals(option, line1.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,323,final HelpLine line2 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,324,"assertEquals(1, line2.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,325,"assertEquals(COMPLEX_ARGUMENT, line2.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,327,final HelpLine line3 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,328,"assertEquals(1, line3.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,329,"assertEquals(COMPLEX_CHILDREN, line3.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,331,final HelpLine line4 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,332,"assertEquals(2, line4.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,333,"assertEquals(COMPLEX_CHILD_BASIC, line4.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,335,final HelpLine line5 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,336,"assertEquals(2, line5.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,337,"assertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,339,final HelpLine line6 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,340,"assertEquals(2, line6.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,341,"assertEquals(COMPLEX_CHILD_SSL, line6.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,343,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,346,public void testHelpLines_NoArgument() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,347,final Option option = buildComplexParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,348,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,349,settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,351,"final List lines = option.helpLines(0, settings, null);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,352,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,354,final HelpLine line1 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,355,"assertEquals(0, line1.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,356,"assertEquals(option, line1.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,358,final HelpLine line3 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,359,"assertEquals(1, line3.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,360,"assertEquals(COMPLEX_CHILDREN, line3.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,362,final HelpLine line4 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,363,"assertEquals(2, line4.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,364,"assertEquals(COMPLEX_CHILD_BASIC, line4.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,366,final HelpLine line5 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,367,"assertEquals(2, line5.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,368,"assertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,370,final HelpLine line6 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,371,"assertEquals(2, line6.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,372,"assertEquals(COMPLEX_CHILD_SSL, line6.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,374,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,377,public void testHelpLines_NoChildren() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,378,final Option option = buildComplexParent();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,379,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,380,settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,382,"final List lines = option.helpLines(0, settings, null);"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,383,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,385,final HelpLine line1 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,386,"assertEquals(0, line1.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,387,"assertEquals(option, line1.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,389,final HelpLine line2 = (HelpLine) i.next();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,390,"assertEquals(1, line2.getIndent());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,391,"assertEquals(COMPLEX_ARGUMENT, line2.getOption());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,393,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,396,public void testNullPreferredName() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,397,try {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,398,new CommandBuilder().create();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,399,} catch (IllegalStateException exp) {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,400,"assertEquals(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME), exp.getMessage());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,404,public void testRequired() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,405,"Command cmd = new CommandBuilder().withRequired(true).withName(""blah"").create();"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,406,"assertTrue(""cmd is not required"", cmd.isRequired());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,407,"assertEquals(""id is incorrect"", 0, cmd.getId());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,410,public void testID() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,411,"Command cmd = new CommandBuilder().withId('c').withName(""blah"").create();"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,412,"assertEquals(""id is incorrect"", 'c', cmd.getId());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,415,public void testGetId() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,416,"assertEquals('h', DefaultOptionTest.buildHelpOption().getId());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,417,"assertEquals('X', DefaultOptionTest.buildXOption().getId());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,418,"assertEquals(0, CommandTest.buildStartCommand().getId());"
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import org.apache.commons.cli2.OptionException;/** * @author Rob Oxspring */public abstract class ParentTestCase extends OptionTestCase {    public abstract void testProcessParent() throws OptionException;}"
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,20,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,23,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,25,public abstract class ParentTestCase extends OptionTestCase {
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,26,public abstract void testProcessParent() throws OptionException;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * @author Rob Oxspring */public class PropertyOptionTest extends OptionTestCase {    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Option option = new PropertyOption();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), ""-Dmyprop=myval""));    }    public void testCanProcess_Null() {        final Option option = new PropertyOption();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), (String) null));    }    public void testCanProcess_TooShort() {        final Option option = new PropertyOption();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), ""-D""));    }    public void testCanProcess_BadMatch() {        final Option option = new PropertyOption();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null),""-dump""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Option option = new PropertyOption();        assertContentsEqual(list(""-D""), option.getPrefixes());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess() throws OptionException {        final Option option = new PropertyOption();        final List args = list(""-Dmyprop=myvalue"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertEquals(""myvalue"", commandLine.getProperty(""myprop""));        assertFalse(iterator.hasNext());        assertEquals(1, commandLine.getProperties().size());    }    public void testProcess_UnexpectedOptionException() {        final Option option = new PropertyOption();        final List args = list(""--help"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.process(commandLine, iterator);            fail(""UnexpectedOption"");        }        catch (final OptionException uoe) {            assertEquals(option, uoe.getOption());            assertEquals(                ""Unexpected --help while processing -Dproperty=value"",                uoe.getMessage());        }    }    public void testProcess_BadPropertyException() throws OptionException {        final Option option = new PropertyOption();        final List args = list(""-Dmyprop"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertEquals(""true"", commandLine.getProperty(""myprop""));    }    public void testProcess_SetToEmpty() throws OptionException {        final Option option = new PropertyOption();        final List args = list(""-Dmyprop="");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertEquals("""", commandLine.getProperty(""myprop""));        assertFalse(iterator.hasNext());        assertEquals(1, commandLine.getProperties().size());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Option option = new PropertyOption();        assertContentsEqual(list(""-D""), option.getTriggers());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate() throws OptionException {        final Option option = new PropertyOption();        final List args = list(""-Dproperty=value"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        option.validate(commandLine);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = new PropertyOption();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""-D<property>=<value>"", buffer.toString());    }    public void testAppendUsage_Hidden() {        final Option option = new PropertyOption();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PROPERTY_OPTION);        option.appendUsage(buffer, settings, null);        assertEquals("""", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = new PropertyOption();        assertEquals(""-D"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = new PropertyOption();        assertEquals(            ""Passes properties and values to the application"",            option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        final Option option = new PropertyOption();        final List lines = option.helpLines(0, DisplaySetting.ALL, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine)i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        assertFalse(i.hasNext());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines_NoDisplay() {        final Option option = new PropertyOption();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PROPERTY_OPTION);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        assertFalse(i.hasNext());    }}"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,20,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,21,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,22,import java.util.List;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,23,import java.util.ListIterator;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,24,import java.util.Set;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,26,import org.apache.commons.cli2.DisplaySetting;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,27,import org.apache.commons.cli2.HelpLine;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,28,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,29,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,30,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,31,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,34,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,36,public class PropertyOptionTest extends OptionTestCase {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,39,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,41,* @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,43,public void testCanProcess() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,44,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,45,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), ""-Dmyprop=myval""));"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,48,public void testCanProcess_Null() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,49,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,50,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), (String) null));"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,53,public void testCanProcess_TooShort() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,54,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,55,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), ""-D""));"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,58,public void testCanProcess_BadMatch() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,59,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,60,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null),""-dump""));"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,64,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,66,* @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,68,public void testPrefixes() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,69,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,70,"assertContentsEqual(list(""-D""), option.getPrefixes());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,74,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,76,* @see org.apache.commons.cli2.OptionTestCase#testProcess()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,78,public void testProcess() throws OptionException {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,79,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,80,"final List args = list(""-Dmyprop=myvalue"");"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,81,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,82,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,84,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,85,"assertEquals(""myvalue"", commandLine.getProperty(""myprop""));"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,86,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,87,"assertEquals(1, commandLine.getProperties().size());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,90,public void testProcess_UnexpectedOptionException() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,91,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,92,"final List args = list(""--help"");"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,93,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,94,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,96,try {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,97,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,98,"fail(""UnexpectedOption"");"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,100,catch (final OptionException uoe) {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,101,"assertEquals(option, uoe.getOption());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,102,assertEquals(
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,103,"""Unexpected --help while processing -Dproperty=value"","
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,104,uoe.getMessage());
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,108,public void testProcess_BadPropertyException() throws OptionException {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,109,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,110,"final List args = list(""-Dmyprop"");"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,111,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,112,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,114,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,116,"assertEquals(""true"", commandLine.getProperty(""myprop""));"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,119,public void testProcess_SetToEmpty() throws OptionException {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,120,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,121,"final List args = list(""-Dmyprop="");"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,122,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,123,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,125,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,126,"assertEquals("""", commandLine.getProperty(""myprop""));"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,127,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,128,"assertEquals(1, commandLine.getProperties().size());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,132,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,134,* @see org.apache.commons.cli2.OptionTestCase#testTriggers()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,136,public void testTriggers() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,137,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,139,"assertContentsEqual(list(""-D""), option.getTriggers());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,143,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,145,* @see org.apache.commons.cli2.OptionTestCase#testValidate()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,147,public void testValidate() throws OptionException {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,148,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,149,"final List args = list(""-Dproperty=value"");"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,150,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,151,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,153,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,155,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,159,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,161,* @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,163,public void testAppendUsage() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,164,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,165,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,166,"option.appendUsage(buffer, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,168,"assertEquals(""-D<property>=<value>"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,171,public void testAppendUsage_Hidden() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,172,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,173,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,174,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,175,settings.remove(DisplaySetting.DISPLAY_PROPERTY_OPTION);
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,176,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,178,"assertEquals("""", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,182,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,184,* @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,186,public void testGetPreferredName() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,187,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,188,"assertEquals(""-D"", option.getPreferredName());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,192,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,194,* @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,196,public void testGetDescription() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,197,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,198,assertEquals(
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,199,"""Passes properties and values to the application"","
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,200,option.getDescription());
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,204,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,206,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,208,public void testHelpLines() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,209,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,210,"final List lines = option.helpLines(0, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,211,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,213,final HelpLine line1 = (HelpLine)i.next();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,214,"assertEquals(0, line1.getIndent());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,215,"assertEquals(option, line1.getOption());"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,217,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,221,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,223,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,225,public void testHelpLines_NoDisplay() {
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,226,final Option option = new PropertyOption();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,227,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,228,settings.remove(DisplaySetting.DISPLAY_PROPERTY_OPTION);
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,229,"final List lines = option.helpLines(0, settings, null);"
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,230,final Iterator i = lines.iterator();
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,232,assertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.HashSet;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * @author Rob Oxspring * * To change the template for this generated type comment go to * Window>Preferences>Java>Code Generation>Code and Comments */public class SwitchTest    extends ParentTestCase {    public static Switch buildDisplaySwitch() {        final Set aliases = new HashSet();        aliases.add(""d"");        aliases.add(""disp"");        return new Switch(""+"", ""-"", ""display"", aliases, ""Sets whether to display to screen"", true,                          null, null, 'd', null);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()     */    public void testProcessParent()        throws OptionException {        final Switch option = buildDisplaySwitch();        final List args = list(""+d"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""+d""));        assertTrue(commandLine.hasOption(""-display""));        assertEquals(Boolean.TRUE, commandLine.getSwitch(""-d""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcessParent_Disabled()        throws OptionException {        final Switch option = buildDisplaySwitch();        final List args = list(""-disp"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""+d""));        assertTrue(commandLine.hasOption(""-display""));        assertEquals(Boolean.FALSE, commandLine.getSwitch(""-d""));        assertTrue(commandLine.getValues(option).isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Switch option = buildDisplaySwitch();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""+d""));    }    public void testCanProcess_BadMatch() {        final Switch option = buildDisplaySwitch();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""-dont""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Switch option = buildDisplaySwitch();        assertContentsEqual(list(""-"", ""+""), option.getPrefixes());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess() {        // TODO Auto-generated method stub    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Switch option = buildDisplaySwitch();        assertContentsEqual(list(""-d"", ""+d"", ""-disp"", ""+disp"", ""+display"", ""-display""),                            option.getTriggers());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate() {        final Parent option = buildDisplaySwitch();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""Missing an option"");        } catch (OptionException moe) {            assertSame(option, moe.getOption());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""+display|-display (+d|-d,+disp|-disp)"", buffer.toString());    }    public void testAppendUsage_NoAlias() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_ALIASES);        option.appendUsage(buffer, settings, null);        assertEquals(""+display|-display"", buffer.toString());    }    public void testAppendUsage_NoDisabled() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_SWITCH_DISABLED);        option.appendUsage(buffer, settings, null);        assertEquals(""+display (+d,+disp)"", buffer.toString());    }    public void testAppendUsage_NoEnabled() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_SWITCH_ENABLED);        option.appendUsage(buffer, settings, null);        assertEquals(""-display (-d,-disp)"", buffer.toString());    }    public void testAppendUsage_NoDisabledOrEnabled() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_SWITCH_DISABLED);        settings.remove(DisplaySetting.DISPLAY_SWITCH_ENABLED);        option.appendUsage(buffer, settings, null);        assertEquals(""+display (+d,+disp)"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildDisplaySwitch();        assertEquals(""+display"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildDisplaySwitch();        assertEquals(""Sets whether to display to screen"", option.getDescription());    }    public void testNullPreferredName() {        try {            new Switch(""+"", ""-"", null, null, ""Sets whether to display to screen"", true, null, null,                       'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testEmptyPreferredName() {        try {            new Switch(""+"", ""-"", """", null, ""Sets whether to display to screen"", true, null, null,                       'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testNullAliases() {        try {            new Switch(""+"", ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testNullEnablePrefix() {        try {            new Switch(null, ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX),                         exp.getMessage());        }    }    public void testNullDisablePrefix() {        try {            new Switch(""+"", null, ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX),                         exp.getMessage());        }    }    public void testEnabledPrefixStartsWithDisabledPrefix() {        try {            new Switch(""-"", ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED),                         exp.getMessage());        }    }    public void testDisabledPrefixStartsWithEnabledPrefix() {        try {            new Switch(""o"", ""on"", ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED),                         exp.getMessage());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        // TODO Auto-generated method stub    }}"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,18,package org.apache.commons.cli2.option;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,20,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,21,import java.util.List;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,22,import java.util.ListIterator;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,23,import java.util.Set;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,25,import org.apache.commons.cli2.DisplaySetting;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,26,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,27,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,28,import org.apache.commons.cli2.Parent;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,29,import org.apache.commons.cli2.WriteableCommandLine;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,30,import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,31,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,32,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,35,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,37,* To change the template for this generated type comment go to
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,38,* Window>Preferences>Java>Code Generation>Code and Comments
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,40,public class SwitchTest
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,41,extends ParentTestCase {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,42,public static Switch buildDisplaySwitch() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,43,final Set aliases = new HashSet();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,44,"aliases.add(""d"");"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,45,"aliases.add(""disp"");"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,47,"return new Switch(""+"", ""-"", ""display"", aliases, ""Sets whether to display to screen"", true,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,48,"null, null, 'd', null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,52,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,54,* @see org.apache.commons.cli2.ParentTestCase#testProcessParent()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,56,public void testProcessParent()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,57,throws OptionException {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,58,final Switch option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,59,"final List args = list(""+d"");"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,60,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,61,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,62,"option.processParent(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,64,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,65,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,66,"assertTrue(commandLine.hasOption(""+d""));"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,67,"assertTrue(commandLine.hasOption(""-display""));"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,68,"assertEquals(Boolean.TRUE, commandLine.getSwitch(""-d""));"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,69,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,72,public void testProcessParent_Disabled()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,73,throws OptionException {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,74,final Switch option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,75,"final List args = list(""-disp"");"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,76,"final WriteableCommandLine commandLine = commandLine(option, args);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,77,final ListIterator iterator = args.listIterator();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,78,"option.process(commandLine, iterator);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,80,assertFalse(iterator.hasNext());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,81,assertTrue(commandLine.hasOption(option));
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,82,"assertTrue(commandLine.hasOption(""+d""));"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,83,"assertTrue(commandLine.hasOption(""-display""));"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,84,"assertEquals(Boolean.FALSE, commandLine.getSwitch(""-d""));"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,85,assertTrue(commandLine.getValues(option).isEmpty());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,89,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,91,* @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,93,public void testCanProcess() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,94,final Switch option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,95,"assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""+d""));"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,98,public void testCanProcess_BadMatch() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,99,final Switch option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,100,"assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""-dont""));"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,104,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,106,* @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,108,public void testPrefixes() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,109,final Switch option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,110,"assertContentsEqual(list(""-"", ""+""), option.getPrefixes());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,114,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,116,* @see org.apache.commons.cli2.OptionTestCase#testProcess()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,118,public void testProcess() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,119,// TODO Auto-generated method stub
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,123,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,125,* @see org.apache.commons.cli2.OptionTestCase#testTriggers()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,127,public void testTriggers() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,128,final Switch option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,129,"assertContentsEqual(list(""-d"", ""+d"", ""-disp"", ""+disp"", ""+display"", ""-display""),"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,130,option.getTriggers());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,134,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,136,* @see org.apache.commons.cli2.OptionTestCase#testValidate()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,138,public void testValidate() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,139,final Parent option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,140,"final WriteableCommandLine commandLine = commandLine(option, list());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,142,try {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,143,option.validate(commandLine);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,144,"fail(""Missing an option"");"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,145,} catch (OptionException moe) {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,146,"assertSame(option, moe.getOption());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,151,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,153,* @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,155,public void testAppendUsage() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,156,final Option option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,157,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,158,"option.appendUsage(buffer, DisplaySetting.ALL, null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,160,"assertEquals(""+display|-display (+d|-d,+disp|-disp)"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,163,public void testAppendUsage_NoAlias() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,164,final Option option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,165,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,166,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,167,settings.remove(DisplaySetting.DISPLAY_ALIASES);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,168,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,170,"assertEquals(""+display|-display"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,173,public void testAppendUsage_NoDisabled() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,174,final Option option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,175,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,176,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,177,settings.remove(DisplaySetting.DISPLAY_SWITCH_DISABLED);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,178,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,180,"assertEquals(""+display (+d,+disp)"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,183,public void testAppendUsage_NoEnabled() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,184,final Option option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,185,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,186,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,187,settings.remove(DisplaySetting.DISPLAY_SWITCH_ENABLED);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,188,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,190,"assertEquals(""-display (-d,-disp)"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,193,public void testAppendUsage_NoDisabledOrEnabled() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,194,final Option option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,195,final StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,196,final Set settings = new HashSet(DisplaySetting.ALL);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,197,settings.remove(DisplaySetting.DISPLAY_SWITCH_DISABLED);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,198,settings.remove(DisplaySetting.DISPLAY_SWITCH_ENABLED);
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,199,"option.appendUsage(buffer, settings, null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,201,"assertEquals(""+display (+d,+disp)"", buffer.toString());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,205,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,207,* @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,209,public void testGetPreferredName() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,210,final Option option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,211,"assertEquals(""+display"", option.getPreferredName());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,215,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,217,* @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,219,public void testGetDescription() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,220,final Option option = buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,221,"assertEquals(""Sets whether to display to screen"", option.getDescription());"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,224,public void testNullPreferredName() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,225,try {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,226,"new Switch(""+"", ""-"", null, null, ""Sets whether to display to screen"", true, null, null,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,227,"'d', null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,228,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,229,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,230,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,231,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,235,public void testEmptyPreferredName() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,236,try {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,237,"new Switch(""+"", ""-"", """", null, ""Sets whether to display to screen"", true, null, null,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,238,"'d', null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,239,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,240,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,241,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,242,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,246,public void testNullAliases() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,247,try {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,248,"new Switch(""+"", ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,249,"null, 'd', null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,250,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,251,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,252,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,253,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,257,public void testNullEnablePrefix() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,258,try {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,259,"new Switch(null, ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,260,"null, 'd', null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,261,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,262,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,263,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX),"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,264,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,268,public void testNullDisablePrefix() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,269,try {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,270,"new Switch(""+"", null, ""display"", null, ""Sets whether to display to screen"", true, null,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,271,"null, 'd', null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,272,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,273,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,274,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX),"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,275,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,279,public void testEnabledPrefixStartsWithDisabledPrefix() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,280,try {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,281,"new Switch(""-"", ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,282,"null, 'd', null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,283,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,284,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,285,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED),"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,286,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,290,public void testDisabledPrefixStartsWithEnabledPrefix() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,291,try {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,292,"new Switch(""o"", ""on"", ""display"", null, ""Sets whether to display to screen"", true, null,"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,293,"null, 'd', null);"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,294,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,295,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,296,"ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED),"
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,297,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,302,* (non-Javadoc)
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,304,* @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,306,public void testHelpLines() {
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,307,// TODO Auto-generated method stub
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.resource;import java.util.Locale;import java.util.MissingResourceException;import java.util.ResourceBundle;import junit.framework.TestCase;/** * A utility class used to provide internationalisation support. * * @author John Keyes */public class ResourceHelperTest extends TestCase {    /** system property */    private static final String PROP_LOCALE = ""org.apache.commons.cli2.resource.bundle"";    private static ResourceHelper helper;    /** resource bundle */    private ResourceBundle bundle;    public void setUp() {    	System.setProperty(PROP_LOCALE, ""org.apache.commons.cli2.resource.TestBundle"");    	helper = ResourceHelper.getResourceHelper();    }    public void tearDown() {    	System.setProperty(PROP_LOCALE, ""org.apache.commons.cli2.resource.CLIMessageBundle_en_US.properties"");    }    /**     * Create a new ResourceHelper for the specified class.     *     * @param clazz the Class that requires some resources     */    public ResourceHelperTest() {    	super(""ResourceHelperTest"");    }    public void testOverridden() {    	assertEquals(""wrong message"", ""The class name \""ResourceHelper\"" is invalid."", helper.getMessage(""ClassValidator.bad.classname"", ""ResourceHelper""));    }    public void testNewMessage1Param() {    	assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message""));    }    public void testNewMessage2Params() {    	assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some""));    }    public void testNewMessage3Params() {    	assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some"", ""might""));    }    public void testNewMessage4Params() {    	assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some"", ""might"", ""say""));    }    public void testDefaultBundle() {    	System.setProperty(PROP_LOCALE, ""madeupname.properties"");    	helper = ResourceHelper.getResourceHelper();    	assertEquals(""wrong message"", ""The class name \""ResourceHelper\"" is invalid."", helper.getMessage(""ClassValidator.bad.classname"", ""ResourceHelper""));    }}"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,4,* or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,5,* distributed with this work for additional information
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,6,* regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,7,"* to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,8,"* ""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,9,* with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,11,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,13,"* Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,14,* software distributed under the License is distributed on an
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,15,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,16,"* KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,17,* specific language governing permissions and limitations
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,18,* under the License.
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,20,package org.apache.commons.cli2.resource;
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,22,import java.util.Locale;
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,23,import java.util.MissingResourceException;
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,24,import java.util.ResourceBundle;
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,29,* A utility class used to provide internationalisation support.
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,31,* @author John Keyes
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,33,public class ResourceHelperTest extends TestCase {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,34,/** system property */
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,35,"private static final String PROP_LOCALE = ""org.apache.commons.cli2.resource.bundle"";"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,37,private static ResourceHelper helper;
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,39,/** resource bundle */
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,40,private ResourceBundle bundle;
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,42,public void setUp() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,43,"System.setProperty(PROP_LOCALE, ""org.apache.commons.cli2.resource.TestBundle"");"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,44,helper = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,47,public void tearDown() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,48,"System.setProperty(PROP_LOCALE, ""org.apache.commons.cli2.resource.CLIMessageBundle_en_US.properties"");"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,52,* Create a new ResourceHelper for the specified class.
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,54,* @param clazz the Class that requires some resources
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,56,public ResourceHelperTest() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,57,"super(""ResourceHelperTest"");"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,60,public void testOverridden() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,61,"assertEquals(""wrong message"", ""The class name \""ResourceHelper\"" is invalid."", helper.getMessage(""ClassValidator.bad.classname"", ""ResourceHelper""));"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,64,public void testNewMessage1Param() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,65,"assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message""));"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,68,public void testNewMessage2Params() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,69,"assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some""));"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,72,public void testNewMessage3Params() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,73,"assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some"", ""might""));"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,76,public void testNewMessage4Params() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,77,"assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some"", ""might"", ""say""));"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,80,public void testDefaultBundle() {
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,81,"System.setProperty(PROP_LOCALE, ""madeupname.properties"");"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,82,helper = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,83,"assertEquals(""wrong message"", ""The class name \""ResourceHelper\"" is invalid."", helper.getMessage(""ClassValidator.bad.classname"", ""ResourceHelper""));"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.util;import java.util.Collections;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.CLITestCase;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.option.CommandTest;import org.apache.commons.cli2.option.DefaultOptionTest;import org.apache.commons.cli2.option.GroupTest;import org.apache.commons.cli2.option.ParentTest;import org.apache.commons.cli2.option.SwitchTest;/** * @author Rob Oxspring */public class ComparatorsTest extends TestCase {    public void testGroupFirst() {        final Option o1 = GroupTest.buildAntGroup();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.groupFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testGroupLast() {        final Option o1 = GroupTest.buildAntGroup();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.groupLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testSwitchFirst() {        final Option o1 = SwitchTest.buildDisplaySwitch();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.switchFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testSwitchLast() {        final Option o1 = SwitchTest.buildDisplaySwitch();        final Option o2 = ParentTest.buildLibParent();        //final Option o3 = new SwitchBuilder().withName(""hidden"").create();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.switchLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testCommandFirst() {        final Option o1 = CommandTest.buildCommitCommand();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.commandFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testCommandLast() {        final Option o1 = CommandTest.buildCommitCommand();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.commandLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testDefaultOptionFirst() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = CommandTest.buildCommitCommand();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.defaultOptionFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testDefaultOptionLast() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = CommandTest.buildCommitCommand();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.defaultOptionLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testNamedFirst() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.namedFirst(""--help""));        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testNamedLast() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.namedLast(""--help""));        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testPreferredNameFirst() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.preferredNameFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testPreferredNameLast() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.preferredNameLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testRequiredFirst() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = DefaultOptionTest.buildXOption();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.requiredFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testRequiredLast() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = DefaultOptionTest.buildXOption();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.requiredLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testChained() {        final Option o1 = CommandTest.buildCommitCommand();        final Option o2 = SwitchTest.buildDisplaySwitch();        final Option o3 = DefaultOptionTest.buildHelpOption();        final List list = CLITestCase.list(o1, o2, o3);        Collections.sort(            list,            Comparators.chain(                Comparators.namedFirst(""--help""),                Comparators.commandFirst()));        CLITestCase.assertListContentsEqual(            CLITestCase.list(o3, o1, o2),            list);    }}"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,18,package org.apache.commons.cli2.util;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,20,import java.util.Collections;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,21,import java.util.List;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,25,import org.apache.commons.cli2.CLITestCase;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,26,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,27,import org.apache.commons.cli2.option.CommandTest;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,28,import org.apache.commons.cli2.option.DefaultOptionTest;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,29,import org.apache.commons.cli2.option.GroupTest;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,30,import org.apache.commons.cli2.option.ParentTest;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,31,import org.apache.commons.cli2.option.SwitchTest;
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,34,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,36,public class ComparatorsTest extends TestCase {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,37,public void testGroupFirst() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,38,final Option o1 = GroupTest.buildAntGroup();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,39,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,40,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,42,"Collections.sort(list, Comparators.groupFirst());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,44,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,45,"CLITestCase.list(o1, o2),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,46,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,49,public void testGroupLast() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,50,final Option o1 = GroupTest.buildAntGroup();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,51,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,52,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,54,"Collections.sort(list, Comparators.groupLast());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,56,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,57,"CLITestCase.list(o2, o1),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,58,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,61,public void testSwitchFirst() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,62,final Option o1 = SwitchTest.buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,63,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,64,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,66,"Collections.sort(list, Comparators.switchFirst());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,68,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,69,"CLITestCase.list(o1, o2),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,70,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,73,public void testSwitchLast() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,74,final Option o1 = SwitchTest.buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,75,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,76,"//final Option o3 = new SwitchBuilder().withName(""hidden"").create();"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,77,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,79,"Collections.sort(list, Comparators.switchLast());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,81,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,82,"CLITestCase.list(o2, o1),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,83,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,86,public void testCommandFirst() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,87,final Option o1 = CommandTest.buildCommitCommand();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,88,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,89,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,91,"Collections.sort(list, Comparators.commandFirst());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,93,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,94,"CLITestCase.list(o1, o2),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,95,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,98,public void testCommandLast() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,99,final Option o1 = CommandTest.buildCommitCommand();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,100,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,101,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,103,"Collections.sort(list, Comparators.commandLast());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,105,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,106,"CLITestCase.list(o2, o1),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,107,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,110,public void testDefaultOptionFirst() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,111,final Option o1 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,112,final Option o2 = CommandTest.buildCommitCommand();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,113,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,115,"Collections.sort(list, Comparators.defaultOptionFirst());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,117,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,118,"CLITestCase.list(o1, o2),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,119,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,122,public void testDefaultOptionLast() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,123,final Option o1 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,124,final Option o2 = CommandTest.buildCommitCommand();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,125,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,127,"Collections.sort(list, Comparators.defaultOptionLast());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,129,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,130,"CLITestCase.list(o2, o1),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,131,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,134,public void testNamedFirst() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,135,final Option o1 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,136,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,137,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,139,"Collections.sort(list, Comparators.namedFirst(""--help""));"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,141,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,142,"CLITestCase.list(o1, o2),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,143,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,146,public void testNamedLast() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,147,final Option o1 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,148,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,149,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,151,"Collections.sort(list, Comparators.namedLast(""--help""));"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,153,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,154,"CLITestCase.list(o2, o1),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,155,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,158,public void testPreferredNameFirst() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,159,final Option o1 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,160,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,161,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,163,"Collections.sort(list, Comparators.preferredNameFirst());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,165,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,166,"CLITestCase.list(o1, o2),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,167,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,170,public void testPreferredNameLast() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,171,final Option o1 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,172,final Option o2 = ParentTest.buildLibParent();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,173,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,175,"Collections.sort(list, Comparators.preferredNameLast());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,177,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,178,"CLITestCase.list(o2, o1),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,179,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,182,public void testRequiredFirst() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,183,final Option o1 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,184,final Option o2 = DefaultOptionTest.buildXOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,185,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,187,"Collections.sort(list, Comparators.requiredFirst());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,189,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,190,"CLITestCase.list(o2, o1),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,191,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,194,public void testRequiredLast() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,195,final Option o1 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,196,final Option o2 = DefaultOptionTest.buildXOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,197,"final List list = CLITestCase.list(o1, o2);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,199,"Collections.sort(list, Comparators.requiredLast());"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,201,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,202,"CLITestCase.list(o1, o2),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,203,list);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,206,public void testChained() {
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,207,final Option o1 = CommandTest.buildCommitCommand();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,208,final Option o2 = SwitchTest.buildDisplaySwitch();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,209,final Option o3 = DefaultOptionTest.buildHelpOption();
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,210,"final List list = CLITestCase.list(o1, o2, o3);"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,212,Collections.sort(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,213,"list,"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,214,Comparators.chain(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,215,"Comparators.namedFirst(""--help""),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,216,Comparators.commandFirst()));
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,218,CLITestCase.assertListContentsEqual(
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,219,"CLITestCase.list(o3, o1, o2),"
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,220,list);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.util;import java.io.BufferedReader;import java.io.IOException;import java.io.PrintWriter;import java.io.StringReader;import java.io.StringWriter;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import junit.framework.TestCase;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.option.ArgumentTest;import org.apache.commons.cli2.option.DefaultOptionTest;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public class HelpFormatterTest    extends TestCase {    private ResourceHelper resources = ResourceHelper.getResourceHelper();    private HelpFormatter helpFormatter;    private Option verbose;    private Group options;    public void setUp() {        helpFormatter = new HelpFormatter(""|*"", ""*-*"", ""*|"", 80);        helpFormatter.setDivider(""+------------------------------------------------------------------------------+"");        helpFormatter.setHeader(""Apache Commons CLI"");        helpFormatter.setFooter(""Copyright 2003\nApache Software Foundation"");        helpFormatter.setShellCommand(""ant"");        verbose =            new DefaultOptionBuilder().withLongName(""verbose"")                                      .withDescription(""print the version information and exit"")                                      .create();        options =            new GroupBuilder().withName(""options"").withOption(DefaultOptionTest.buildHelpOption())                              .withOption(ArgumentTest.buildTargetsArgument())                              .withOption(new DefaultOptionBuilder().withLongName(""diagnostics"")                                                                    .withDescription(""print information that might be helpful to diagnose or report problems."")                                                                    .create())                              .withOption(new DefaultOptionBuilder().withLongName(""projecthelp"")                                                                    .withDescription(""print project help information"")                                                                    .create()).withOption(verbose)                              .create();        helpFormatter.setGroup(options);    }    public void testPrint()        throws IOException {        final StringWriter writer = new StringWriter();        final PrintWriter pw = new PrintWriter(writer);        helpFormatter.setPrintWriter(pw);        helpFormatter.print();        // test shell        assertEquals(""incorrect shell command"", ""ant"", helpFormatter.getShellCommand());        // test group        assertEquals(""incorrect group"", this.options, helpFormatter.getGroup());        // test pagewidth        assertEquals(""incorrect page width"", 76, helpFormatter.getPageWidth());        // test pw        assertEquals(""incorrect print writer"", pw, helpFormatter.getPrintWriter());        // test divider        assertEquals(""incorrect divider"",                     ""+------------------------------------------------------------------------------+"",                     helpFormatter.getDivider());        // test header        assertEquals(""incorrect header"", ""Apache Commons CLI"", helpFormatter.getHeader());        // test footer        assertEquals(""incorrect footer"", ""Copyright 2003\nApache Software Foundation"",                     helpFormatter.getFooter());        // test gutters        assertEquals(""incorrect left gutter"", ""|*"", helpFormatter.getGutterLeft());        assertEquals(""incorrect right gutter"", ""*|"", helpFormatter.getGutterRight());        assertEquals(""incorrect center gutter"", ""*-*"", helpFormatter.getGutterCenter());        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Apache Commons CLI                                                          *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Usage:                                                                      *|"",                     reader.readLine());        assertEquals(""|*ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2>    *|"",                     reader.readLine());        assertEquals(""|*...]]                                                                       *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*options              *-*                                                    *|"",                     reader.readLine());        assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"",                     reader.readLine());        assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"",                     reader.readLine());        assertEquals(""|*                     *-*or report problems.                                 *|"",                     reader.readLine());        assertEquals(""|*  --projecthelp      *-*print project help information                      *|"",                     reader.readLine());        assertEquals(""|*  --verbose          *-*print the version information and exit              *|"",                     reader.readLine());        assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Copyright 2003                                                              *|"",                     reader.readLine());        assertEquals(""|*Apache Software Foundation                                                  *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testComparator()        throws IOException {        final StringWriter writer = new StringWriter();        final PrintWriter pw = new PrintWriter(writer);        helpFormatter.setPrintWriter(pw);        final Comparator comparator = new OptionComparator();        helpFormatter.setComparator(comparator);        helpFormatter.print();        // test comparator        assertEquals(""invalid comparator"", comparator, helpFormatter.getComparator());        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Apache Commons CLI                                                          *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Usage:                                                                      *|"",                     reader.readLine());        assertEquals(""|*ant [--verbose --projecthelp --help --diagnostics] [<target1> [<target2>    *|"",                     reader.readLine());        assertEquals(""|*...]]                                                                       *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*options              *-*                                                    *|"",                     reader.readLine());        assertEquals(""|*  --verbose          *-*print the version information and exit              *|"",                     reader.readLine());        assertEquals(""|*  --projecthelp      *-*print project help information                      *|"",                     reader.readLine());        assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"",                     reader.readLine());        assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"",                     reader.readLine());        assertEquals(""|*                     *-*or report problems.                                 *|"",                     reader.readLine());        assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Copyright 2003                                                              *|"",                     reader.readLine());        assertEquals(""|*Apache Software Foundation                                                  *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintHelp()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printHelp();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*options              *-*                                                    *|"",                     reader.readLine());        assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"",                     reader.readLine());        assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"",                     reader.readLine());        assertEquals(""|*                     *-*or report problems.                                 *|"",                     reader.readLine());        assertEquals(""|*  --projecthelp      *-*print project help information                      *|"",                     reader.readLine());        assertEquals(""|*  --verbose          *-*print the version information and exit              *|"",                     reader.readLine());        assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintHelp_WithException()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.setException(new OptionException(verbose));        helpFormatter.printHelp();        //System.out.println(writer);        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*--verbose*-*print the version information and exit                          *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintHelp_TooNarrow()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter = new HelpFormatter(""<"", ""="", "">"", 4);        helpFormatter.setGroup(options);        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printHelp();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""<options              = >"", reader.readLine());        assertEquals(""<  --help (-?,-h)     =D>"", reader.readLine());        assertEquals(""<                     =i>"", reader.readLine());        // lots more lines unchecked    }    public void testPrintException()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.setException(new OptionException(verbose, ResourceConstants.MISSING_OPTION));        helpFormatter.printException();        //System.out.println(writer);        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Missing option --verbose                                                    *|"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintUsage()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printUsage();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Usage:                                                                      *|"",                     reader.readLine());        assertEquals(""|*ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2>    *|"",                     reader.readLine());        assertEquals(""|*...]]                                                                       *|"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintHeader()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printHeader();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Apache Commons CLI                                                          *|"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintFooter()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printFooter();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""|*Copyright 2003                                                              *|"",                     reader.readLine());        assertEquals(""|*Apache Software Foundation                                                  *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintDivider()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printDivider();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testWrap() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 30).iterator();        assertEquals(""Apache Software Foundation"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_WrapNeeded() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 20).iterator();        assertEquals(""Apache Software"", i.next());        assertEquals(""Foundation"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_BeforeSpace() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 16).iterator();        assertEquals(""Apache Software"", i.next());        assertEquals(""Foundation"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_AfterSpace() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 17).iterator();        assertEquals(""Apache Software"", i.next());        assertEquals(""Foundation"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_InWord() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 8).iterator();        assertEquals(""Apache"", i.next());        assertEquals(""Software"", i.next());        assertEquals(""Foundati"", i.next());        assertEquals(""on"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_NewLine() {        final Iterator i = HelpFormatter.wrap(""\nApache Software Foundation\n"", 30).iterator();        assertEquals("""", i.next());        assertEquals(""Apache Software Foundation"", i.next());        assertEquals("""", i.next());        assertFalse(i.hasNext());    }    public void testWrap_NewLine2() {        List wrapped =            HelpFormatter.wrap(""A really quite long general description of the option with specific alternatives documented:\n"" +                               ""  Indented special case\n"" + ""  Alternative scenario"", 30);        final Iterator i = wrapped.iterator();        assertEquals(""A really quite long general"", i.next());        assertEquals(""description of the option"", i.next());        assertEquals(""with specific alternatives"", i.next());        assertEquals(""documented:"", i.next());        assertEquals(""  Indented special case"", i.next());        assertEquals(""  Alternative scenario"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_Below1Length() {        try {            HelpFormatter.wrap(""Apache Software Foundation"", -1);            fail(""IllegalArgumentException"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.HELPFORMATTER_WIDTH_TOO_NARROW,                                              new Object[] { new Integer(-1) }), e.getMessage());        }    }    public void testPad()        throws IOException {        final StringWriter writer = new StringWriter();        HelpFormatter.pad(""hello"", 10, new PrintWriter(writer));        assertEquals(""hello     "", writer.toString());    }    public void testPad_Null()        throws IOException {        final StringWriter writer = new StringWriter();        HelpFormatter.pad(null, 10, new PrintWriter(writer));        assertEquals(""          "", writer.toString());    }    public void testPad_TooLong()        throws IOException {        final StringWriter writer = new StringWriter();        HelpFormatter.pad(""hello world"", 10, new PrintWriter(writer));        assertEquals(""hello world"", writer.toString());    }    public void testPad_TooShort()        throws IOException {        final StringWriter writer = new StringWriter();        HelpFormatter.pad(""hello world"", -5, new PrintWriter(writer));        assertEquals(""hello world"", writer.toString());    }    public void testGutters()        throws IOException {        helpFormatter = new HelpFormatter(null, null, null, 80);        helpFormatter.setShellCommand(""ant"");        final Set lusage = new HashSet();        lusage.add(DisplaySetting.DISPLAY_ALIASES);        lusage.add(DisplaySetting.DISPLAY_GROUP_NAME);        helpFormatter.setLineUsageSettings(lusage);        // test line usage        assertEquals(""incorrect line usage"", lusage, helpFormatter.getLineUsageSettings());        final Set fusage = new HashSet();        fusage.add(DisplaySetting.DISPLAY_PARENT_CHILDREN);        fusage.add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        fusage.add(DisplaySetting.DISPLAY_GROUP_OUTER);        fusage.add(DisplaySetting.DISPLAY_GROUP_EXPANDED);        fusage.add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);        fusage.add(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);        fusage.add(DisplaySetting.DISPLAY_SWITCH_ENABLED);        fusage.add(DisplaySetting.DISPLAY_SWITCH_DISABLED);        fusage.add(DisplaySetting.DISPLAY_PROPERTY_OPTION);        fusage.add(DisplaySetting.DISPLAY_PARENT_CHILDREN);        fusage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        fusage.add(DisplaySetting.DISPLAY_OPTIONAL);        helpFormatter.setFullUsageSettings(fusage);        // test line usage        assertEquals(""incorrect full usage"", fusage, helpFormatter.getFullUsageSettings());        final Set dsettings = new HashSet();        dsettings.add(DisplaySetting.DISPLAY_GROUP_NAME);        dsettings.add(DisplaySetting.DISPLAY_GROUP_EXPANDED);        dsettings.add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        helpFormatter.setDisplaySettings(dsettings);        verbose =            new DefaultOptionBuilder().withLongName(""verbose"")                                      .withDescription(""print the version information and exit"")                                      .create();        options =            new GroupBuilder().withName(""options"").withOption(DefaultOptionTest.buildHelpOption())                              .withOption(ArgumentTest.buildTargetsArgument())                              .withOption(new DefaultOptionBuilder().withLongName(""diagnostics"")                                                                    .withDescription(""print information that might be helpful to diagnose or report problems."")                                                                    .create())                              .withOption(new DefaultOptionBuilder().withLongName(""projecthelp"")                                                                    .withDescription(""print project help information"")                                                                    .create()).withOption(verbose)                              .create();        helpFormatter.setGroup(options);        // test default gutters        assertEquals(""incorrect left gutter"", HelpFormatter.DEFAULT_GUTTER_LEFT,                     helpFormatter.getGutterLeft());        assertEquals(""incorrect right gutter"", HelpFormatter.DEFAULT_GUTTER_RIGHT,                     helpFormatter.getGutterRight());        assertEquals(""incorrect center gutter"", HelpFormatter.DEFAULT_GUTTER_CENTER,                     helpFormatter.getGutterCenter());        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.print();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""Usage:                                                                          "",                     reader.readLine());        assertEquals(""ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2> ...]]  "",                     reader.readLine());        assertEquals(""options                                                                         "",                     reader.readLine());        assertEquals(""  --help (-?,-h)         Displays the help                                      "",                     reader.readLine());        assertEquals(""  --diagnostics          print information that might be helpful to diagnose or "",                     reader.readLine());        assertEquals(""                         report problems.                                       "",                     reader.readLine());        assertEquals(""  --projecthelp          print project help information                         "",                     reader.readLine());        assertEquals(""  --verbose              print the version information and exit                 "",                     reader.readLine());        assertEquals(""  target [target ...]    The targets ant should build                           "",                     reader.readLine());        assertNull(reader.readLine());    }}class OptionComparator implements Comparator {    public int compare(Object o1,                       Object o2) {        Option opt1 = (Option) o1;        Option opt2 = (Option) o2;        return -opt1.getPreferredName().compareTo(opt2.getPreferredName());    }}"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,4,* or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,5,* distributed with this work for additional information
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,6,* regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,7,"* to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,8,"* ""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,9,* with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,11,* http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,13,"* Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,14,* software distributed under the License is distributed on an
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,15,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,16,"* KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,17,* specific language governing permissions and limitations
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,18,* under the License.
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,20,package org.apache.commons.cli2.util;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,22,import java.io.BufferedReader;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,23,import java.io.IOException;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,24,import java.io.PrintWriter;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,25,import java.io.StringReader;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,26,import java.io.StringWriter;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,28,import java.util.Collections;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,29,import java.util.Comparator;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,30,import java.util.HashSet;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,31,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,32,import java.util.List;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,33,import java.util.Set;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,35,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,37,import org.apache.commons.cli2.DisplaySetting;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,38,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,39,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,40,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,41,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,42,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,43,import org.apache.commons.cli2.option.ArgumentTest;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,44,import org.apache.commons.cli2.option.DefaultOptionTest;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,45,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,46,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,48,public class HelpFormatterTest
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,49,extends TestCase {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,50,private ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,51,private HelpFormatter helpFormatter;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,52,private Option verbose;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,53,private Group options;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,55,public void setUp() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,56,"helpFormatter = new HelpFormatter(""|*"", ""*-*"", ""*|"", 80);"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,57,"helpFormatter.setDivider(""+------------------------------------------------------------------------------+"");"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,58,"helpFormatter.setHeader(""Apache Commons CLI"");"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,59,"helpFormatter.setFooter(""Copyright 2003\nApache Software Foundation"");"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,60,"helpFormatter.setShellCommand(""ant"");"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,62,verbose =
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,63,"new DefaultOptionBuilder().withLongName(""verbose"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,64,".withDescription(""print the version information and exit"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,65,.create();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,67,options =
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,68,"new GroupBuilder().withName(""options"").withOption(DefaultOptionTest.buildHelpOption())"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,69,.withOption(ArgumentTest.buildTargetsArgument())
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,70,".withOption(new DefaultOptionBuilder().withLongName(""diagnostics"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,71,".withDescription(""print information that might be helpful to diagnose or report problems."")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,72,.create())
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,73,".withOption(new DefaultOptionBuilder().withLongName(""projecthelp"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,74,".withDescription(""print project help information"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,75,.create()).withOption(verbose)
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,76,.create();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,78,helpFormatter.setGroup(options);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,81,public void testPrint()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,82,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,83,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,84,final PrintWriter pw = new PrintWriter(writer);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,85,helpFormatter.setPrintWriter(pw);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,86,helpFormatter.print();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,88,// test shell
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,89,"assertEquals(""incorrect shell command"", ""ant"", helpFormatter.getShellCommand());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,91,// test group
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,92,"assertEquals(""incorrect group"", this.options, helpFormatter.getGroup());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,94,// test pagewidth
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,95,"assertEquals(""incorrect page width"", 76, helpFormatter.getPageWidth());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,97,// test pw
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,98,"assertEquals(""incorrect print writer"", pw, helpFormatter.getPrintWriter());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,100,// test divider
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,101,"assertEquals(""incorrect divider"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,103,helpFormatter.getDivider());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,105,// test header
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,106,"assertEquals(""incorrect header"", ""Apache Commons CLI"", helpFormatter.getHeader());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,108,// test footer
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,109,"assertEquals(""incorrect footer"", ""Copyright 2003\nApache Software Foundation"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,110,helpFormatter.getFooter());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,112,// test gutters
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,113,"assertEquals(""incorrect left gutter"", ""|*"", helpFormatter.getGutterLeft());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,114,"assertEquals(""incorrect right gutter"", ""*|"", helpFormatter.getGutterRight());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,115,"assertEquals(""incorrect center gutter"", ""*-*"", helpFormatter.getGutterCenter());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,117,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,118,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,119,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,120,"assertEquals(""|*Apache Commons CLI                                                          *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,121,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,122,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,123,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,124,"assertEquals(""|*Usage:                                                                      *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,125,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,126,"assertEquals(""|*ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2>    *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,127,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,128,"assertEquals(""|*...]]                                                                       *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,129,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,130,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,131,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,132,"assertEquals(""|*options              *-*                                                    *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,133,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,134,"assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,135,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,136,"assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,137,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,138,"assertEquals(""|*                     *-*or report problems.                                 *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,139,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,140,"assertEquals(""|*  --projecthelp      *-*print project help information                      *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,141,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,142,"assertEquals(""|*  --verbose          *-*print the version information and exit              *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,143,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,144,"assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,145,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,146,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,147,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,148,"assertEquals(""|*Copyright 2003                                                              *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,149,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,150,"assertEquals(""|*Apache Software Foundation                                                  *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,151,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,152,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,153,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,154,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,157,public void testComparator()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,158,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,159,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,160,final PrintWriter pw = new PrintWriter(writer);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,161,helpFormatter.setPrintWriter(pw);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,163,final Comparator comparator = new OptionComparator();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,164,helpFormatter.setComparator(comparator);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,165,helpFormatter.print();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,167,// test comparator
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,168,"assertEquals(""invalid comparator"", comparator, helpFormatter.getComparator());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,170,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,171,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,172,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,173,"assertEquals(""|*Apache Commons CLI                                                          *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,174,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,175,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,176,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,177,"assertEquals(""|*Usage:                                                                      *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,178,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,179,"assertEquals(""|*ant [--verbose --projecthelp --help --diagnostics] [<target1> [<target2>    *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,180,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,181,"assertEquals(""|*...]]                                                                       *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,182,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,183,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,184,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,185,"assertEquals(""|*options              *-*                                                    *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,186,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,187,"assertEquals(""|*  --verbose          *-*print the version information and exit              *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,188,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,189,"assertEquals(""|*  --projecthelp      *-*print project help information                      *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,190,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,191,"assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,192,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,193,"assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,194,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,195,"assertEquals(""|*                     *-*or report problems.                                 *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,196,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,197,"assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,198,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,199,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,200,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,201,"assertEquals(""|*Copyright 2003                                                              *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,202,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,203,"assertEquals(""|*Apache Software Foundation                                                  *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,204,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,205,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,206,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,207,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,210,public void testPrintHelp()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,211,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,212,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,213,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,214,helpFormatter.printHelp();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,216,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,217,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,218,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,219,"assertEquals(""|*options              *-*                                                    *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,220,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,221,"assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,222,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,223,"assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,224,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,225,"assertEquals(""|*                     *-*or report problems.                                 *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,226,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,227,"assertEquals(""|*  --projecthelp      *-*print project help information                      *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,228,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,229,"assertEquals(""|*  --verbose          *-*print the version information and exit              *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,230,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,231,"assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,232,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,233,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,234,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,235,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,238,public void testPrintHelp_WithException()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,239,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,240,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,241,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,242,helpFormatter.setException(new OptionException(verbose));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,243,helpFormatter.printHelp();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,245,//System.out.println(writer);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,246,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,247,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,248,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,249,"assertEquals(""|*--verbose*-*print the version information and exit                          *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,250,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,251,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,252,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,253,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,256,public void testPrintHelp_TooNarrow()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,257,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,258,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,259,"helpFormatter = new HelpFormatter(""<"", ""="", "">"", 4);"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,260,helpFormatter.setGroup(options);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,261,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,262,helpFormatter.printHelp();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,264,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,265,"assertEquals(""<options              = >"", reader.readLine());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,266,"assertEquals(""<  --help (-?,-h)     =D>"", reader.readLine());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,267,"assertEquals(""<                     =i>"", reader.readLine());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,269,// lots more lines unchecked
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,272,public void testPrintException()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,273,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,274,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,275,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,276,"helpFormatter.setException(new OptionException(verbose, ResourceConstants.MISSING_OPTION));"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,277,helpFormatter.printException();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,279,//System.out.println(writer);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,280,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,281,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,282,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,283,"assertEquals(""|*Missing option --verbose                                                    *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,284,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,285,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,288,public void testPrintUsage()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,289,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,290,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,291,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,292,helpFormatter.printUsage();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,294,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,295,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,296,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,297,"assertEquals(""|*Usage:                                                                      *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,298,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,299,"assertEquals(""|*ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2>    *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,300,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,301,"assertEquals(""|*...]]                                                                       *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,302,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,303,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,306,public void testPrintHeader()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,307,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,308,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,309,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,310,helpFormatter.printHeader();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,312,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,313,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,314,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,315,"assertEquals(""|*Apache Commons CLI                                                          *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,316,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,317,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,320,public void testPrintFooter()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,321,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,322,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,323,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,324,helpFormatter.printFooter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,326,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,327,"assertEquals(""|*Copyright 2003                                                              *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,328,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,329,"assertEquals(""|*Apache Software Foundation                                                  *|"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,330,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,331,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,332,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,333,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,336,public void testPrintDivider()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,337,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,338,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,339,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,340,helpFormatter.printDivider();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,342,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,343,"assertEquals(""+------------------------------------------------------------------------------+"","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,344,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,345,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,348,public void testWrap() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,349,"final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 30).iterator();"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,350,"assertEquals(""Apache Software Foundation"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,351,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,354,public void testWrap_WrapNeeded() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,355,"final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 20).iterator();"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,356,"assertEquals(""Apache Software"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,357,"assertEquals(""Foundation"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,358,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,361,public void testWrap_BeforeSpace() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,362,"final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 16).iterator();"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,363,"assertEquals(""Apache Software"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,364,"assertEquals(""Foundation"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,365,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,368,public void testWrap_AfterSpace() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,369,"final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 17).iterator();"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,370,"assertEquals(""Apache Software"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,371,"assertEquals(""Foundation"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,372,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,375,public void testWrap_InWord() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,376,"final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 8).iterator();"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,377,"assertEquals(""Apache"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,378,"assertEquals(""Software"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,379,"assertEquals(""Foundati"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,380,"assertEquals(""on"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,381,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,384,public void testWrap_NewLine() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,385,"final Iterator i = HelpFormatter.wrap(""\nApache Software Foundation\n"", 30).iterator();"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,386,"assertEquals("""", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,387,"assertEquals(""Apache Software Foundation"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,388,"assertEquals("""", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,389,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,392,public void testWrap_NewLine2() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,393,List wrapped =
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,394,"HelpFormatter.wrap(""A really quite long general description of the option with specific alternatives documented:\n"" +"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,395,"""  Indented special case\n"" + ""  Alternative scenario"", 30);"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,397,final Iterator i = wrapped.iterator();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,399,"assertEquals(""A really quite long general"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,400,"assertEquals(""description of the option"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,401,"assertEquals(""with specific alternatives"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,402,"assertEquals(""documented:"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,403,"assertEquals(""  Indented special case"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,404,"assertEquals(""  Alternative scenario"", i.next());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,405,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,408,public void testWrap_Below1Length() {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,409,try {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,410,"HelpFormatter.wrap(""Apache Software Foundation"", -1);"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,411,"fail(""IllegalArgumentException"");"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,412,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,413,"assertEquals(resources.getMessage(ResourceConstants.HELPFORMATTER_WIDTH_TOO_NARROW,"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,414,"new Object[] { new Integer(-1) }), e.getMessage());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,418,public void testPad()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,419,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,420,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,421,"HelpFormatter.pad(""hello"", 10, new PrintWriter(writer));"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,422,"assertEquals(""hello     "", writer.toString());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,425,public void testPad_Null()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,426,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,427,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,428,"HelpFormatter.pad(null, 10, new PrintWriter(writer));"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,429,"assertEquals(""          "", writer.toString());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,432,public void testPad_TooLong()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,433,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,434,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,435,"HelpFormatter.pad(""hello world"", 10, new PrintWriter(writer));"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,436,"assertEquals(""hello world"", writer.toString());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,439,public void testPad_TooShort()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,440,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,441,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,442,"HelpFormatter.pad(""hello world"", -5, new PrintWriter(writer));"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,443,"assertEquals(""hello world"", writer.toString());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,446,public void testGutters()
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,447,throws IOException {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,448,"helpFormatter = new HelpFormatter(null, null, null, 80);"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,449,"helpFormatter.setShellCommand(""ant"");"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,451,final Set lusage = new HashSet();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,452,lusage.add(DisplaySetting.DISPLAY_ALIASES);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,453,lusage.add(DisplaySetting.DISPLAY_GROUP_NAME);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,454,helpFormatter.setLineUsageSettings(lusage);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,456,// test line usage
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,457,"assertEquals(""incorrect line usage"", lusage, helpFormatter.getLineUsageSettings());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,459,final Set fusage = new HashSet();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,460,fusage.add(DisplaySetting.DISPLAY_PARENT_CHILDREN);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,461,fusage.add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,462,fusage.add(DisplaySetting.DISPLAY_GROUP_OUTER);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,463,fusage.add(DisplaySetting.DISPLAY_GROUP_EXPANDED);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,464,fusage.add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,465,fusage.add(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,466,fusage.add(DisplaySetting.DISPLAY_SWITCH_ENABLED);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,467,fusage.add(DisplaySetting.DISPLAY_SWITCH_DISABLED);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,468,fusage.add(DisplaySetting.DISPLAY_PROPERTY_OPTION);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,469,fusage.add(DisplaySetting.DISPLAY_PARENT_CHILDREN);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,470,fusage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,471,fusage.add(DisplaySetting.DISPLAY_OPTIONAL);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,472,helpFormatter.setFullUsageSettings(fusage);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,474,// test line usage
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,475,"assertEquals(""incorrect full usage"", fusage, helpFormatter.getFullUsageSettings());"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,477,final Set dsettings = new HashSet();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,478,dsettings.add(DisplaySetting.DISPLAY_GROUP_NAME);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,479,dsettings.add(DisplaySetting.DISPLAY_GROUP_EXPANDED);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,480,dsettings.add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,482,helpFormatter.setDisplaySettings(dsettings);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,484,verbose =
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,485,"new DefaultOptionBuilder().withLongName(""verbose"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,486,".withDescription(""print the version information and exit"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,487,.create();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,489,options =
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,490,"new GroupBuilder().withName(""options"").withOption(DefaultOptionTest.buildHelpOption())"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,491,.withOption(ArgumentTest.buildTargetsArgument())
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,492,".withOption(new DefaultOptionBuilder().withLongName(""diagnostics"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,493,".withDescription(""print information that might be helpful to diagnose or report problems."")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,494,.create())
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,495,".withOption(new DefaultOptionBuilder().withLongName(""projecthelp"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,496,".withDescription(""print project help information"")"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,497,.create()).withOption(verbose)
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,498,.create();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,500,helpFormatter.setGroup(options);
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,502,// test default gutters
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,503,"assertEquals(""incorrect left gutter"", HelpFormatter.DEFAULT_GUTTER_LEFT,"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,504,helpFormatter.getGutterLeft());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,505,"assertEquals(""incorrect right gutter"", HelpFormatter.DEFAULT_GUTTER_RIGHT,"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,506,helpFormatter.getGutterRight());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,507,"assertEquals(""incorrect center gutter"", HelpFormatter.DEFAULT_GUTTER_CENTER,"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,508,helpFormatter.getGutterCenter());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,510,final StringWriter writer = new StringWriter();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,511,helpFormatter.setPrintWriter(new PrintWriter(writer));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,512,helpFormatter.print();
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,514,final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,515,"assertEquals(""Usage:                                                                          "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,516,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,517,"assertEquals(""ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2> ...]]  "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,518,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,519,"assertEquals(""options                                                                         "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,520,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,521,"assertEquals(""  --help (-?,-h)         Displays the help                                      "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,522,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,523,"assertEquals(""  --diagnostics          print information that might be helpful to diagnose or "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,524,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,525,"assertEquals(""                         report problems.                                       "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,526,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,527,"assertEquals(""  --projecthelp          print project help information                         "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,528,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,529,"assertEquals(""  --verbose              print the version information and exit                 "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,530,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,531,"assertEquals(""  target [target ...]    The targets ant should build                           "","
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,532,reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,533,assertNull(reader.readLine());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,538,class OptionComparator implements Comparator {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,539,"public int compare(Object o1,"
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,540,Object o2) {
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,541,Option opt1 = (Option) o1;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,542,Option opt2 = (Option) o2;
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,544,return -opt1.getPreferredName().compareTo(opt2.getPreferredName());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.net.URL;import java.net.URLClassLoader;import java.util.Arrays;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.resource.ResourceHelper;public class ClassValidatorTest extends TestCase {    private final static ResourceHelper resources =        ResourceHelper.getResourceHelper();    private ClassValidator validator;    protected void setUp() {        validator = new ClassValidator();    }    public void testValidName() throws InvalidArgumentException {        final Object[] array = new Object[] { ""MyApp"", ""org.apache.ant.Main"" };        final List list = Arrays.asList(array);        validator.validate(list);        assertEquals(""Name is incorrect"", ""MyApp"", list.get(0));        assertEquals(""Name is incorrect"", ""org.apache.ant.Main"", list.get(1));    }    public void testNameBadStart() {        final String className = ""1stClass"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        try {            validator.validate(list);            fail(""Class name cannot start with a number."");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.bad.classname"",                    className),                ive.getMessage());        }    }    public void testNameBadEnd() {        final String className = ""My.Class."";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        try {            validator.validate(list);            fail(""Trailing period not permitted."");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.bad.classname"",                    className),                ive.getMessage());        }    }    public void testNameBadMiddle() {        final String className = ""My..Class"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        try {            validator.validate(list);            fail(""Two consecutive periods is not permitted."");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.bad.classname"",                    className),                ive.getMessage());        }    }    public void testIllegalNameChar() {        final String className = ""My?Class"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        try {            validator.validate(list);            fail(""Illegal character not allowed in Class name."");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.bad.classname"",                    className),                ive.getMessage());        }    }    public void testLoadable() {        assertFalse(""Validator is loadable"", validator.isLoadable());        validator.setLoadable(true);        assertTrue(""Validator is NOT loadable"", validator.isLoadable());        validator.setLoadable(false);        assertFalse(""Validator is loadable"", validator.isLoadable());    }    public void testLoadValid() throws InvalidArgumentException {        final Object[] array =            new Object[] {                ""org.apache.commons.cli2.Option"",                ""java.util.Vector"" };        final List list = Arrays.asList(array);        validator.setLoadable(true);        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(            ""org.apache.commons.cli2.Option"",            ((Class) i.next()).getName());        assertEquals(""java.util.Vector"", ((Class) i.next()).getName());        assertFalse(i.hasNext());    }    public void testLoadInvalid() {        final String className = ""org.apache.commons.cli2.NonOption"";        final Object[] array = new Object[] { className, ""java.util.Vectors"" };        final List list = Arrays.asList(array);        validator.setLoadable(true);        try {            validator.validate(list);            fail(""Class Not Found"");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.class.notfound"",                    className),                ive.getMessage());        }    }    public void testInstantiate() {        assertFalse(""Validator creates instances"", validator.isInstance());        validator.setInstance(true);        assertTrue(            ""Validator does NOT create instances"",            validator.isInstance());        validator.setInstance(false);        assertFalse(""Validator creates instances"", validator.isInstance());    }    public void testCreateClassInstance() throws InvalidArgumentException {        final Object[] array = new Object[] { ""java.util.Vector"" };        final List list = Arrays.asList(array);        validator.setInstance(true);        validator.validate(list);        assertTrue(            ""Vector instance NOT found"",            list.get(0) instanceof java.util.Vector);    }    public void testCreateInterfaceInstance() {        final String className = ""java.util.Map"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        validator.setInstance(true);        try {            validator.validate(list);            fail(""It's not possible to create a '"" + className + ""'"");        }        catch (final InvalidArgumentException ive) {            assertEquals(                    resources.getMessage(                            ""ClassValidator.class.create"",                            className),                            ive.getMessage());        }    }    public void testCreateProtectedInstance() {        final String className = ""org.apache.commons.cli2.validation.protect.ProtectedClass"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        validator.setInstance(true);        try {            validator.validate(list);            fail(""It's not possible to create a '"" + className + ""'"");        }        catch (final InvalidArgumentException ive) {            assertEquals(                    resources.getMessage(                            ""ClassValidator.class.access"",                            className,                            ""Class org.apache.commons.cli2.validation.ClassValidator "" +                            ""can not access a member of class "" +                            ""org.apache.commons.cli2.validation.protect.ProtectedClass "" +                            ""with modifiers \""protected\""""),                            ive.getMessage());        }    }    public void testClassloader() {        assertEquals(            ""Wrong classloader found"",            validator.getClass().getClassLoader(),            validator.getClassLoader());        URLClassLoader classloader = new URLClassLoader(new URL[] {        });        validator.setClassLoader(classloader);        assertEquals(            ""Wrong classloader found"",            classloader,            validator.getClassLoader());    }}"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,18,package org.apache.commons.cli2.validation;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,20,import java.net.URL;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,21,import java.net.URLClassLoader;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,22,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,23,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,24,import java.util.List;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,28,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,30,public class ClassValidatorTest extends TestCase {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,32,private final static ResourceHelper resources =
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,33,ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,35,private ClassValidator validator;
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,37,protected void setUp() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,38,validator = new ClassValidator();
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,41,public void testValidName() throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,42,"final Object[] array = new Object[] { ""MyApp"", ""org.apache.ant.Main"" };"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,43,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,45,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,47,"assertEquals(""Name is incorrect"", ""MyApp"", list.get(0));"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,48,"assertEquals(""Name is incorrect"", ""org.apache.ant.Main"", list.get(1));"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,51,public void testNameBadStart() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,52,"final String className = ""1stClass"";"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,53,final Object[] array = new Object[] { className };
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,54,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,56,try {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,57,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,58,"fail(""Class name cannot start with a number."");"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,59,} catch (InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,60,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,61,resources.getMessage(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,62,"""ClassValidator.bad.classname"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,63,"className),"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,64,ive.getMessage());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,68,public void testNameBadEnd() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,69,"final String className = ""My.Class."";"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,71,final Object[] array = new Object[] { className };
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,72,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,74,try {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,75,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,76,"fail(""Trailing period not permitted."");"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,77,} catch (InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,78,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,79,resources.getMessage(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,80,"""ClassValidator.bad.classname"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,81,"className),"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,82,ive.getMessage());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,86,public void testNameBadMiddle() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,87,"final String className = ""My..Class"";"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,89,final Object[] array = new Object[] { className };
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,90,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,92,try {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,93,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,94,"fail(""Two consecutive periods is not permitted."");"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,95,} catch (InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,96,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,97,resources.getMessage(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,98,"""ClassValidator.bad.classname"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,99,"className),"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,100,ive.getMessage());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,104,public void testIllegalNameChar() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,105,"final String className = ""My?Class"";"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,107,final Object[] array = new Object[] { className };
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,108,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,110,try {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,111,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,112,"fail(""Illegal character not allowed in Class name."");"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,113,} catch (InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,114,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,115,resources.getMessage(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,116,"""ClassValidator.bad.classname"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,117,"className),"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,118,ive.getMessage());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,122,public void testLoadable() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,123,"assertFalse(""Validator is loadable"", validator.isLoadable());"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,124,validator.setLoadable(true);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,125,"assertTrue(""Validator is NOT loadable"", validator.isLoadable());"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,126,validator.setLoadable(false);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,127,"assertFalse(""Validator is loadable"", validator.isLoadable());"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,130,public void testLoadValid() throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,131,final Object[] array =
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,132,new Object[] {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,133,"""org.apache.commons.cli2.Option"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,134,"""java.util.Vector"" };"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,135,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,137,validator.setLoadable(true);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,138,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,140,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,141,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,142,"""org.apache.commons.cli2.Option"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,143,((Class) i.next()).getName());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,144,"assertEquals(""java.util.Vector"", ((Class) i.next()).getName());"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,145,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,148,public void testLoadInvalid() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,149,"final String className = ""org.apache.commons.cli2.NonOption"";"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,151,"final Object[] array = new Object[] { className, ""java.util.Vectors"" };"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,152,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,154,validator.setLoadable(true);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,156,try {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,157,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,158,"fail(""Class Not Found"");"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,159,} catch (InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,160,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,161,resources.getMessage(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,162,"""ClassValidator.class.notfound"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,163,"className),"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,164,ive.getMessage());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,168,public void testInstantiate() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,169,"assertFalse(""Validator creates instances"", validator.isInstance());"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,170,validator.setInstance(true);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,171,assertTrue(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,172,"""Validator does NOT create instances"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,173,validator.isInstance());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,174,validator.setInstance(false);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,175,"assertFalse(""Validator creates instances"", validator.isInstance());"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,178,public void testCreateClassInstance() throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,179,"final Object[] array = new Object[] { ""java.util.Vector"" };"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,180,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,182,validator.setInstance(true);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,184,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,185,assertTrue(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,186,"""Vector instance NOT found"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,187,list.get(0) instanceof java.util.Vector);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,190,public void testCreateInterfaceInstance() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,191,"final String className = ""java.util.Map"";"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,192,final Object[] array = new Object[] { className };
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,193,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,195,validator.setInstance(true);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,197,try {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,198,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,199,"fail(""It's not possible to create a '"" + className + ""'"");"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,201,catch (final InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,202,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,203,resources.getMessage(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,204,"""ClassValidator.class.create"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,205,"className),"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,206,ive.getMessage());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,210,public void testCreateProtectedInstance() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,211,"final String className = ""org.apache.commons.cli2.validation.protect.ProtectedClass"";"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,212,final Object[] array = new Object[] { className };
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,213,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,215,validator.setInstance(true);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,217,try {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,218,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,219,"fail(""It's not possible to create a '"" + className + ""'"");"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,221,catch (final InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,222,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,223,resources.getMessage(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,224,"""ClassValidator.class.access"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,225,"className,"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,226,"""Class org.apache.commons.cli2.validation.ClassValidator "" +"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,227,"""can not access a member of class "" +"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,228,"""org.apache.commons.cli2.validation.protect.ProtectedClass "" +"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,229,"""with modifiers \""protected\""""),"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,230,ive.getMessage());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,234,public void testClassloader() {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,235,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,236,"""Wrong classloader found"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,237,"validator.getClass().getClassLoader(),"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,238,validator.getClassLoader());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,240,URLClassLoader classloader = new URLClassLoader(new URL[] {
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,242,validator.setClassLoader(classloader);
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,244,assertEquals(
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,245,"""Wrong classloader found"","
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,246,"classloader,"
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,247,validator.getClassLoader());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.text.DateFormat;import java.text.DateFormatSymbols;import java.text.SimpleDateFormat;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.Iterator;import java.util.List;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * JUnit test case for DateValidator. * * @author Rob Oxspring * @author John Keyes */public class DateValidatorTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    public static final DateFormat D_M_YY = new SimpleDateFormat(""d/M/yy"");    public static final DateFormat YYYY_MM_DD = new SimpleDateFormat(""yyyy-MM-dd"");    private List formats = Arrays.asList(new Object[] { D_M_YY, YYYY_MM_DD });    public void testSingleFormatValidate()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""23/12/03"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator(D_M_YY);        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(""2003-12-23"", YYYY_MM_DD.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testDefaultDateFormatValidate()        throws InvalidArgumentException {        DateFormatSymbols symbols =  new DateFormatSymbols();        final Object[] array = new Object[] { ""23-"" + symbols.getShortMonths()[11] + ""-2003"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator( new SimpleDateFormat(""dd-MMM-yyyy"") );        validator.validate(list);        final Iterator i = list.iterator();        // CLI-40: For some reason, the YYYY_MM_DD object gets quite        // confused here and returns 2003-12-22. If we make a new one        // there is no problem.        assertEquals(""2003-12-23"", new SimpleDateFormat(""yyyy-MM-dd"").format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testDefaultTimeFormatValidate()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""18:00:00"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator( new SimpleDateFormat(""HH:mm:ss"") );        validator.validate(list);        final Iterator i = list.iterator();        final DateFormat df = new SimpleDateFormat(""HH:mm:ss"");        assertEquals(""18:00:00"", df.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testDefaultDateTimeFormatValidate()        throws InvalidArgumentException {        DateFormatSymbols symbols =  new DateFormatSymbols();        final Object[] array = new Object[] { ""23-"" + symbols.getShortMonths()[0] + ""-2003 18:00:00"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator( new SimpleDateFormat(""dd-MMM-yyyy HH:mm:ss"") );        validator.validate(list);        final Iterator i = list.iterator();        final DateFormat df = new SimpleDateFormat(""yyyy/M/dd HH:mm:ss"");        assertEquals(""2003/1/23 18:00:00"", df.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testDefaultValidator()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""23/01/03 18:00"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator(new SimpleDateFormat(""dd/MM/yy HH:mm""));        validator.validate(list);        final Iterator i = list.iterator();        final DateFormat df = new SimpleDateFormat(""yyyy/M/dd HH:mm:ss"");        assertEquals(""2003/1/23 18:00:00"", df.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testValidate()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator(formats);        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(""2003-12-23"", YYYY_MM_DD.format((Date) i.next()));        assertEquals(""2002-10-12"", YYYY_MM_DD.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testMinimumBounds()        throws InvalidArgumentException {        final DateValidator validator = new DateValidator(formats);        final Calendar cal = Calendar.getInstance();        {            final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };            final List list = Arrays.asList(array);            cal.set(2002, 1, 12);            final Date min = cal.getTime();            validator.setMinimum(min);            assertTrue(""maximum bound is set"", validator.getMaximum() == null);            assertEquals(""minimum bound is incorrect"", min, validator.getMinimum());            validator.validate(list);        }        {            final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };            final List list = Arrays.asList(array);            cal.set(2003, 1, 12);            final Date min = cal.getTime();            validator.setMinimum(min);            try {                validator.validate(list);                fail(""minimum out of bounds exception not caught"");            } catch (final InvalidArgumentException exp) {                assertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,                                                  new Object[] { ""2002-10-12"" }), exp.getMessage());            }        }    }    public void testFormats()        throws InvalidArgumentException {        final DateValidator validator = new DateValidator(formats);        assertEquals(""date format is incorrect"", ((SimpleDateFormat) formats.get(0)).toPattern(),                     ((SimpleDateFormat) validator.getFormats()[0]).toPattern());        assertEquals(""date format is incorrect"", ((SimpleDateFormat) formats.get(1)).toPattern(),                     ((SimpleDateFormat) validator.getFormats()[1]).toPattern());    }    public void testMaximumBounds()        throws InvalidArgumentException {        final DateValidator validator = new DateValidator(formats);        final Calendar cal = Calendar.getInstance();        {            final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };            final List list = Arrays.asList(array);            cal.set(2004, 1, 12);            final Date max = cal.getTime();            validator.setMaximum(max);            assertTrue(""minimum bound is set"", validator.getMinimum() == null);            assertEquals(""maximum bound is incorrect"", max, validator.getMaximum());            validator.validate(list);        }        {            final Object[] array = new Object[] { ""23/12/03"", ""2004-10-12"" };            final List list = Arrays.asList(array);            cal.set(2004, 1, 12);            final Date max = cal.getTime();            validator.setMaximum(max);            try {                validator.validate(list);                fail(""maximum out of bounds exception not caught"");            } catch (final InvalidArgumentException exp) {                assertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,                                                  new Object[] { ""2004-10-12"" }), exp.getMessage());            }        }    }    public static Test suite() {        Test result = new TestSuite(DateValidatorTest.class); // default behavior        result = new TimeZoneTestSuite(""EST"", result); // ensure it runs in EST timezone        return result;    }}"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,18,package org.apache.commons.cli2.validation;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,20,import java.text.DateFormat;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,21,import java.text.DateFormatSymbols;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,22,import java.text.SimpleDateFormat;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,23,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,24,import java.util.Calendar;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,25,import java.util.Date;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,26,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,27,import java.util.List;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,29,import junit.framework.Test;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,30,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,31,import junit.framework.TestSuite;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,33,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,34,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,37,* JUnit test case for DateValidator.
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,39,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,40,* @author John Keyes
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,42,public class DateValidatorTest
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,43,extends TestCase {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,44,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,45,"public static final DateFormat D_M_YY = new SimpleDateFormat(""d/M/yy"");"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,46,"public static final DateFormat YYYY_MM_DD = new SimpleDateFormat(""yyyy-MM-dd"");"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,47,"private List formats = Arrays.asList(new Object[] { D_M_YY, YYYY_MM_DD });"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,49,public void testSingleFormatValidate()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,50,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,51,"final Object[] array = new Object[] { ""23/12/03"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,52,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,53,final Validator validator = new DateValidator(D_M_YY);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,55,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,57,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,58,"assertEquals(""2003-12-23"", YYYY_MM_DD.format((Date) i.next()));"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,59,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,62,public void testDefaultDateFormatValidate()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,63,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,64,DateFormatSymbols symbols =  new DateFormatSymbols();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,65,"final Object[] array = new Object[] { ""23-"" + symbols.getShortMonths()[11] + ""-2003"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,66,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,67,"final Validator validator = new DateValidator( new SimpleDateFormat(""dd-MMM-yyyy"") );"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,69,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,71,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,72,"// CLI-40: For some reason, the YYYY_MM_DD object gets quite"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,73,// confused here and returns 2003-12-22. If we make a new one
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,74,// there is no problem.
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,75,"assertEquals(""2003-12-23"", new SimpleDateFormat(""yyyy-MM-dd"").format((Date) i.next()));"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,76,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,79,public void testDefaultTimeFormatValidate()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,80,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,81,"final Object[] array = new Object[] { ""18:00:00"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,82,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,83,"final Validator validator = new DateValidator( new SimpleDateFormat(""HH:mm:ss"") );"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,85,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,87,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,88,"final DateFormat df = new SimpleDateFormat(""HH:mm:ss"");"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,89,"assertEquals(""18:00:00"", df.format((Date) i.next()));"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,90,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,93,public void testDefaultDateTimeFormatValidate()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,94,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,95,DateFormatSymbols symbols =  new DateFormatSymbols();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,96,"final Object[] array = new Object[] { ""23-"" + symbols.getShortMonths()[0] + ""-2003 18:00:00"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,97,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,98,"final Validator validator = new DateValidator( new SimpleDateFormat(""dd-MMM-yyyy HH:mm:ss"") );"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,100,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,102,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,103,"final DateFormat df = new SimpleDateFormat(""yyyy/M/dd HH:mm:ss"");"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,104,"assertEquals(""2003/1/23 18:00:00"", df.format((Date) i.next()));"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,105,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,108,public void testDefaultValidator()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,109,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,110,"final Object[] array = new Object[] { ""23/01/03 18:00"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,111,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,112,"final Validator validator = new DateValidator(new SimpleDateFormat(""dd/MM/yy HH:mm""));"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,114,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,116,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,117,"final DateFormat df = new SimpleDateFormat(""yyyy/M/dd HH:mm:ss"");"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,118,"assertEquals(""2003/1/23 18:00:00"", df.format((Date) i.next()));"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,119,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,122,public void testValidate()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,123,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,124,"final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,125,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,126,final Validator validator = new DateValidator(formats);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,128,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,130,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,131,"assertEquals(""2003-12-23"", YYYY_MM_DD.format((Date) i.next()));"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,132,"assertEquals(""2002-10-12"", YYYY_MM_DD.format((Date) i.next()));"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,133,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,136,public void testMinimumBounds()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,137,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,138,final DateValidator validator = new DateValidator(formats);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,139,final Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,142,"final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,143,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,144,"cal.set(2002, 1, 12);"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,146,final Date min = cal.getTime();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,147,validator.setMinimum(min);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,148,"assertTrue(""maximum bound is set"", validator.getMaximum() == null);"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,149,"assertEquals(""minimum bound is incorrect"", min, validator.getMinimum());"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,150,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,154,"final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,155,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,156,"cal.set(2003, 1, 12);"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,158,final Date min = cal.getTime();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,159,validator.setMinimum(min);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,161,try {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,162,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,163,"fail(""minimum out of bounds exception not caught"");"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,164,} catch (final InvalidArgumentException exp) {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,165,"assertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,166,"new Object[] { ""2002-10-12"" }), exp.getMessage());"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,171,public void testFormats()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,172,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,173,final DateValidator validator = new DateValidator(formats);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,174,"assertEquals(""date format is incorrect"", ((SimpleDateFormat) formats.get(0)).toPattern(),"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,175,((SimpleDateFormat) validator.getFormats()[0]).toPattern());
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,176,"assertEquals(""date format is incorrect"", ((SimpleDateFormat) formats.get(1)).toPattern(),"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,177,((SimpleDateFormat) validator.getFormats()[1]).toPattern());
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,180,public void testMaximumBounds()
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,181,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,182,final DateValidator validator = new DateValidator(formats);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,183,final Calendar cal = Calendar.getInstance();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,186,"final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,187,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,188,"cal.set(2004, 1, 12);"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,190,final Date max = cal.getTime();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,191,validator.setMaximum(max);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,192,"assertTrue(""minimum bound is set"", validator.getMinimum() == null);"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,193,"assertEquals(""maximum bound is incorrect"", max, validator.getMaximum());"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,194,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,198,"final Object[] array = new Object[] { ""23/12/03"", ""2004-10-12"" };"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,199,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,200,"cal.set(2004, 1, 12);"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,202,final Date max = cal.getTime();
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,203,validator.setMaximum(max);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,205,try {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,206,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,207,"fail(""maximum out of bounds exception not caught"");"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,208,} catch (final InvalidArgumentException exp) {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,209,"assertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,210,"new Object[] { ""2004-10-12"" }), exp.getMessage());"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,215,public static Test suite() {
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,216,Test result = new TestSuite(DateValidatorTest.class); // default behavior
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,217,"result = new TimeZoneTestSuite(""EST"", result); // ensure it runs in EST timezone"
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,219,return result;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.Arrays;import java.util.Iterator;import java.util.List;import java.util.Set;import java.util.TreeSet;import junit.framework.TestCase;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public class EnumValidatorTest    extends TestCase {    private final static ResourceHelper resources = ResourceHelper.getResourceHelper();    private final Set enumSet = new TreeSet(Arrays.asList(new Object[] { ""red"", ""green"", ""blue"" }));    public void testValidate()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""red"", ""green"" };        {            final List list = Arrays.asList(array);            final EnumValidator validator = new EnumValidator(enumSet);            assertEquals(""valid values are incorrect"", enumSet, validator.getValidValues());            validator.validate(list);            final Iterator i = list.iterator();            assertEquals(""red"", i.next());            assertEquals(""green"", i.next());            assertFalse(i.hasNext());        }    }    public void testNonMember() {        final Object[] array = new Object[] { ""red"", ""pink"" };        final List list = Arrays.asList(array);        final EnumValidator validator = new EnumValidator(enumSet);        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.ENUM_ILLEGAL_VALUE,                                              new Object[] { ""pink"", validator.getValuesAsString() }),                         e.getMessage());        }    }}"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,18,package org.apache.commons.cli2.validation;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,20,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,21,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,22,import java.util.List;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,23,import java.util.Set;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,24,import java.util.TreeSet;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,28,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,29,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,31,public class EnumValidatorTest
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,32,extends TestCase {
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,33,private final static ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,34,"private final Set enumSet = new TreeSet(Arrays.asList(new Object[] { ""red"", ""green"", ""blue"" }));"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,36,public void testValidate()
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,37,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,38,"final Object[] array = new Object[] { ""red"", ""green"" };"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,41,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,42,final EnumValidator validator = new EnumValidator(enumSet);
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,43,"assertEquals(""valid values are incorrect"", enumSet, validator.getValidValues());"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,44,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,46,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,47,"assertEquals(""red"", i.next());"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,48,"assertEquals(""green"", i.next());"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,49,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,53,public void testNonMember() {
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,54,"final Object[] array = new Object[] { ""red"", ""pink"" };"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,55,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,56,final EnumValidator validator = new EnumValidator(enumSet);
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,58,try {
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,59,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,60,"fail(""InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,61,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,62,"assertEquals(resources.getMessage(ResourceConstants.ENUM_ILLEGAL_VALUE,"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,63,"new Object[] { ""pink"", validator.getValuesAsString() }),"
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,64,e.getMessage());
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.io.File;import java.io.IOException;import java.util.Arrays;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;/** * JUnit test case for the FileValidator. * * @author Rob Oxspring * @author John Keyes */public class FileValidatorTest extends TestCase {    public void testValidate() throws InvalidArgumentException {        final Object[] array = new Object[] { ""src"", ""project.xml"",                ""veryunlikelyfilename"" };        final List list = Arrays.asList(array);        final FileValidator validator = new FileValidator();        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(new File(""src""), i.next());        assertEquals(new File(""project.xml""), i.next());        assertEquals(new File(""veryunlikelyfilename""), i.next());        assertFalse(i.hasNext());    }    public void testValidate_Directory() {        final Object[] array = new Object[] { ""src"", ""project.xml"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator                .getExistingDirectoryInstance();        assertTrue(""is a directory validator"", validator.isDirectory());        assertFalse(""is not a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertFalse(""is not a hidden file validator"", validator.isHidden());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""project.xml"", e.getMessage());        }    }    public void testValidate_ReadableFile() {        // make file readonly        File file = new File(""src/test/data/readable.txt"");        file.setReadOnly();        final Object[] array = new Object[] { ""src/test/data/readable.txt"",                ""src/test/data/notreadable.txt"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator.getExistingFileInstance();        validator.setReadable(true);        assertFalse(""is not a directory validator"", validator.isDirectory());        assertTrue(""is a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertFalse(""is not a hidden file validator"", validator.isHidden());        assertTrue(""is a readable file validator"", validator.isReadable());        assertFalse(""is not a writable file validator"", validator.isWritable());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""src/test/data/notreadable.txt"", e.getMessage());        }    }    public void testValidate_WritableFile() {        // make file readonly        File file = new File(""src/test/data/readable.txt"");        file.setReadOnly();        final Object[] array = new Object[] { ""src/test/data/writable.txt"",                ""src/test/data/readable.txt"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator.getExistingFileInstance();        validator.setWritable(true);        assertFalse(""is not a directory validator"", validator.isDirectory());        assertTrue(""is a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertFalse(""is not a hidden file validator"", validator.isHidden());        assertFalse(""is not a readable file validator"", validator.isReadable());        assertTrue(""is a writable file validator"", validator.isWritable());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""src/test/data/readable.txt"", e.getMessage());        }    }    public void testValidate_HiddenFile() throws InvalidArgumentException {        // make file hidden on Windows        attribute(""H"");        final Object[] array = new Object[] { ""src/test/data/.hidden.txt"", ""src"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator.getExistingFileInstance();        validator.setHidden(true);        assertFalse(""is not a directory validator"", validator.isDirectory());        assertTrue(""is a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertTrue(""is a hidden file validator"", validator.isHidden());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""src"", e.getMessage());        }    }    private void attribute(String attr) {        final String os = System.getProperty(""os.name"").toLowerCase();        // if the test is run on windows, run the attrib program        // to set the hidden attribute        if (os.indexOf(""windows"") != -1) {            // windows            try {                Process proc = Runtime.getRuntime().exec(                        ""attrib.exe +"" + attr + "" src/test/data/.hidden.txt"",                        null, new File("".""));                proc.waitFor();            } catch (InterruptedException e) {                System.out.println(e.getMessage());                e.printStackTrace();            } catch (IOException e) {                System.out.println(e.getMessage());                e.printStackTrace();            }        }    }    public void testValidate_Existing() {        final Object[] array = new Object[] { ""project.xml"",                ""veryunlikelyfilename"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator.getExistingInstance();        assertFalse(""is not a directory validator"", validator.isDirectory());        assertFalse(""is not a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertFalse(""is not a hidden file validator"", validator.isHidden());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""veryunlikelyfilename"", e.getMessage());        }    }    public void testValidate_File() {        final Object[] array = new Object[] { ""project.xml"", ""src"" };        final List list = Arrays.asList(array);        final Validator validator = FileValidator.getExistingFileInstance();        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""src"", e.getMessage());        }    }}"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,18,package org.apache.commons.cli2.validation;
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,20,import java.io.File;
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,21,import java.io.IOException;
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,22,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,23,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,24,import java.util.List;
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,29,* JUnit test case for the FileValidator.
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,31,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,32,* @author John Keyes
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,34,public class FileValidatorTest extends TestCase {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,36,public void testValidate() throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,37,"final Object[] array = new Object[] { ""src"", ""project.xml"","
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,38,"""veryunlikelyfilename"" };"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,39,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,40,final FileValidator validator = new FileValidator();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,42,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,44,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,45,"assertEquals(new File(""src""), i.next());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,46,"assertEquals(new File(""project.xml""), i.next());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,47,"assertEquals(new File(""veryunlikelyfilename""), i.next());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,48,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,51,public void testValidate_Directory() {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,52,"final Object[] array = new Object[] { ""src"", ""project.xml"" };"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,53,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,54,final FileValidator validator = FileValidator
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,55,.getExistingDirectoryInstance();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,57,"assertTrue(""is a directory validator"", validator.isDirectory());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,58,"assertFalse(""is not a file validator"", validator.isFile());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,59,"assertTrue(""is an existing file validator"", validator.isExisting());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,60,"assertFalse(""is not a hidden file validator"", validator.isHidden());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,62,try {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,63,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,64,"fail(""InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,65,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,66,"assertEquals(""project.xml"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,70,public void testValidate_ReadableFile() {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,71,// make file readonly
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,72,"File file = new File(""src/test/data/readable.txt"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,73,file.setReadOnly();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,75,"final Object[] array = new Object[] { ""src/test/data/readable.txt"","
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,76,"""src/test/data/notreadable.txt"" };"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,77,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,78,final FileValidator validator = FileValidator.getExistingFileInstance();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,79,validator.setReadable(true);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,81,"assertFalse(""is not a directory validator"", validator.isDirectory());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,82,"assertTrue(""is a file validator"", validator.isFile());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,83,"assertTrue(""is an existing file validator"", validator.isExisting());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,84,"assertFalse(""is not a hidden file validator"", validator.isHidden());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,85,"assertTrue(""is a readable file validator"", validator.isReadable());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,86,"assertFalse(""is not a writable file validator"", validator.isWritable());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,88,try {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,89,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,90,"fail(""InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,91,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,92,"assertEquals(""src/test/data/notreadable.txt"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,96,public void testValidate_WritableFile() {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,97,// make file readonly
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,98,"File file = new File(""src/test/data/readable.txt"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,99,file.setReadOnly();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,101,"final Object[] array = new Object[] { ""src/test/data/writable.txt"","
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,102,"""src/test/data/readable.txt"" };"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,103,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,104,final FileValidator validator = FileValidator.getExistingFileInstance();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,105,validator.setWritable(true);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,107,"assertFalse(""is not a directory validator"", validator.isDirectory());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,108,"assertTrue(""is a file validator"", validator.isFile());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,109,"assertTrue(""is an existing file validator"", validator.isExisting());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,110,"assertFalse(""is not a hidden file validator"", validator.isHidden());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,111,"assertFalse(""is not a readable file validator"", validator.isReadable());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,112,"assertTrue(""is a writable file validator"", validator.isWritable());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,114,try {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,115,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,116,"fail(""InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,117,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,118,"assertEquals(""src/test/data/readable.txt"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,122,public void testValidate_HiddenFile() throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,123,// make file hidden on Windows
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,124,"attribute(""H"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,126,"final Object[] array = new Object[] { ""src/test/data/.hidden.txt"", ""src"" };"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,127,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,128,final FileValidator validator = FileValidator.getExistingFileInstance();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,129,validator.setHidden(true);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,131,"assertFalse(""is not a directory validator"", validator.isDirectory());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,132,"assertTrue(""is a file validator"", validator.isFile());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,133,"assertTrue(""is an existing file validator"", validator.isExisting());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,134,"assertTrue(""is a hidden file validator"", validator.isHidden());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,136,try {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,137,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,138,"fail(""InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,139,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,140,"assertEquals(""src"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,144,private void attribute(String attr) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,145,"final String os = System.getProperty(""os.name"").toLowerCase();"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,147,"// if the test is run on windows, run the attrib program"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,148,// to set the hidden attribute
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,149,"if (os.indexOf(""windows"") != -1) {"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,150,// windows
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,151,try {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,152,Process proc = Runtime.getRuntime().exec(
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,153,"""attrib.exe +"" + attr + "" src/test/data/.hidden.txt"","
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,154,"null, new File("".""));"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,155,proc.waitFor();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,156,} catch (InterruptedException e) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,157,System.out.println(e.getMessage());
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,158,e.printStackTrace();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,159,} catch (IOException e) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,160,System.out.println(e.getMessage());
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,161,e.printStackTrace();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,166,public void testValidate_Existing() {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,167,"final Object[] array = new Object[] { ""project.xml"","
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,168,"""veryunlikelyfilename"" };"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,169,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,170,final FileValidator validator = FileValidator.getExistingInstance();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,172,"assertFalse(""is not a directory validator"", validator.isDirectory());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,173,"assertFalse(""is not a file validator"", validator.isFile());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,174,"assertTrue(""is an existing file validator"", validator.isExisting());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,175,"assertFalse(""is not a hidden file validator"", validator.isHidden());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,177,try {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,178,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,179,"fail(""InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,180,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,181,"assertEquals(""veryunlikelyfilename"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,185,public void testValidate_File() {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,186,"final Object[] array = new Object[] { ""project.xml"", ""src"" };"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,187,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,188,final Validator validator = FileValidator.getExistingFileInstance();
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,190,try {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,191,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,192,"fail(""InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,193,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,194,"assertEquals(""src"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,1,"* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.text.NumberFormat;import java.util.Arrays;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * JUnit test case for NumberValidator. * * @author Rob Oxspring * @author John Keyes */public class NumberValidatorTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    public void testValidate_Number()        throws InvalidArgumentException {        final NumberFormat format = NumberFormat.getNumberInstance();        final Object[] array =            new Object[] { format.format(1d), format.format(1.07d), format.format(-.45d) };        {            final List list = Arrays.asList(array);            final Validator validator = NumberValidator.getNumberInstance();            validator.validate(list);            final Iterator i = list.iterator();            assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);            assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);            assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);            assertFalse(i.hasNext());        }    }    public void testValidate_Currency()        throws InvalidArgumentException {        NumberFormat format = NumberFormat.getCurrencyInstance();        final Object[] array =            new Object[] { format.format(1d), format.format(1.07), format.format(-0.45) };        final List list = Arrays.asList(array);        final NumberValidator validator = NumberValidator.getCurrencyInstance();        assertEquals(""incorrect currency format"", format, validator.getFormat());        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);        assertFalse(i.hasNext());    }    public void testValidate_Percent()        throws InvalidArgumentException {        final NumberFormat format = NumberFormat.getPercentInstance();        final Object[] array =            new Object[] {                             format.format(.01), format.format(1.07), format.format(-.45),                             format.format(0.001)            };        final List list = Arrays.asList(array);        final Validator validator = NumberValidator.getPercentInstance();        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(0.01d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(0.00001d, ((Number) i.next()).doubleValue(), 0.0001);        assertFalse(i.hasNext());    }    public void testValidate_Integer()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""1"", ""107"", ""-45"" };        final List list = Arrays.asList(array);        final Validator validator = NumberValidator.getIntegerInstance();        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(107d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(-45d, ((Number) i.next()).doubleValue(), 0.0001);        assertFalse(i.hasNext());    }    public void testValidate_ExcessChars() {        final Object[] array = new Object[] { ""10DowningStreet"" };        final List list = Arrays.asList(array);        final Validator validator = NumberValidator.getIntegerInstance();        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""10DowningStreet"", e.getMessage());        }    }    public void testValidate_Maximum() {        final Object[] array = new Object[] { ""1"", ""107"" };        final List list = Arrays.asList(array);        final NumberValidator validator = NumberValidator.getIntegerInstance();        Integer max = new Integer(100);        validator.setMaximum(max);        assertTrue(""no minimum set"", validator.getMinimum() == null);        assertEquals(""incorrect maximum value"", max, validator.getMaximum());        try {            validator.validate(list);            fail(""107 too big"");        } catch (InvalidArgumentException ive) {            assertEquals(resources.getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,                                              ""107""), ive.getMessage());        }    }    public void testValidate_Minimum() {        final Object[] array = new Object[] { ""107"", ""1"" };        final List list = Arrays.asList(array);        final NumberValidator validator = NumberValidator.getIntegerInstance();        Integer min = new Integer(100);        validator.setMinimum(min);        assertTrue(""no maximum set"", validator.getMaximum() == null);        assertEquals(""incorrect minimum value"", min, validator.getMinimum());        try {            validator.validate(list);            fail(""1 too small"");        } catch (InvalidArgumentException ive) {            assertEquals(resources.getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,                                              ""1""), ive.getMessage());        }    }}"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,18,package org.apache.commons.cli2.validation;
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,20,import java.text.NumberFormat;
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,22,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,23,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,24,import java.util.List;
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,28,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,29,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,32,* JUnit test case for NumberValidator.
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,34,* @author Rob Oxspring
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,35,* @author John Keyes
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,37,public class NumberValidatorTest
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,38,extends TestCase {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,39,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,41,public void testValidate_Number()
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,42,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,43,final NumberFormat format = NumberFormat.getNumberInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,45,final Object[] array =
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,46,"new Object[] { format.format(1d), format.format(1.07d), format.format(-.45d) };"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,49,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,50,final Validator validator = NumberValidator.getNumberInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,52,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,54,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,55,"assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,56,"assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,57,"assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,58,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,62,public void testValidate_Currency()
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,63,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,64,NumberFormat format = NumberFormat.getCurrencyInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,65,final Object[] array =
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,66,"new Object[] { format.format(1d), format.format(1.07), format.format(-0.45) };"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,67,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,69,final NumberValidator validator = NumberValidator.getCurrencyInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,70,"assertEquals(""incorrect currency format"", format, validator.getFormat());"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,72,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,74,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,75,"assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,76,"assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,77,"assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,78,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,81,public void testValidate_Percent()
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,82,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,83,final NumberFormat format = NumberFormat.getPercentInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,85,final Object[] array =
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,86,new Object[] {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,87,"format.format(.01), format.format(1.07), format.format(-.45),"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,88,format.format(0.001)
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,90,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,91,final Validator validator = NumberValidator.getPercentInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,93,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,95,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,96,"assertEquals(0.01d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,97,"assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,98,"assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,99,"assertEquals(0.00001d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,100,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,103,public void testValidate_Integer()
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,104,throws InvalidArgumentException {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,105,"final Object[] array = new Object[] { ""1"", ""107"", ""-45"" };"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,106,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,107,final Validator validator = NumberValidator.getIntegerInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,109,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,111,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,112,"assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,113,"assertEquals(107d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,114,"assertEquals(-45d, ((Number) i.next()).doubleValue(), 0.0001);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,115,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,118,public void testValidate_ExcessChars() {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,119,"final Object[] array = new Object[] { ""10DowningStreet"" };"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,120,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,121,final Validator validator = NumberValidator.getIntegerInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,123,try {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,124,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,125,"fail(""InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,126,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,127,"assertEquals(""10DowningStreet"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,131,public void testValidate_Maximum() {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,132,"final Object[] array = new Object[] { ""1"", ""107"" };"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,133,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,134,final NumberValidator validator = NumberValidator.getIntegerInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,135,Integer max = new Integer(100);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,137,validator.setMaximum(max);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,139,"assertTrue(""no minimum set"", validator.getMinimum() == null);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,140,"assertEquals(""incorrect maximum value"", max, validator.getMaximum());"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,142,try {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,143,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,144,"fail(""107 too big"");"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,145,} catch (InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,146,"assertEquals(resources.getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,147,"""107""), ive.getMessage());"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,151,public void testValidate_Minimum() {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,152,"final Object[] array = new Object[] { ""107"", ""1"" };"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,153,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,154,final NumberValidator validator = NumberValidator.getIntegerInstance();
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,155,Integer min = new Integer(100);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,156,validator.setMinimum(min);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,158,"assertTrue(""no maximum set"", validator.getMaximum() == null);"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,159,"assertEquals(""incorrect minimum value"", min, validator.getMinimum());"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,161,try {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,162,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,163,"fail(""1 too small"");"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,164,} catch (InvalidArgumentException ive) {
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,165,"assertEquals(resources.getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,166,"""1""), ive.getMessage());"
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.TimeZone;import junit.extensions.TestDecorator;import junit.framework.Test;import junit.framework.TestResult;public class TimeZoneTestSuite    extends TestDecorator {    private final TimeZone timeZone;    private final TimeZone originalTimeZone;    public TimeZoneTestSuite(String timeZone,                             Test test) {        super(test);        this.timeZone = TimeZone.getTimeZone(timeZone);        this.originalTimeZone = TimeZone.getDefault();    }    public void run(TestResult testResult) {        try {            TimeZone.setDefault(timeZone);            super.run(testResult);        } finally {            TimeZone.setDefault(originalTimeZone); // cleanup        }    }}"
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,18,package org.apache.commons.cli2.validation;
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,20,import java.util.TimeZone;
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,22,import junit.extensions.TestDecorator;
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,24,import junit.framework.Test;
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,25,import junit.framework.TestResult;
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,27,public class TimeZoneTestSuite
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,28,extends TestDecorator {
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,29,private final TimeZone timeZone;
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,30,private final TimeZone originalTimeZone;
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,32,"public TimeZoneTestSuite(String timeZone,"
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,33,Test test) {
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,34,super(test);
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,35,this.timeZone = TimeZone.getTimeZone(timeZone);
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,36,this.originalTimeZone = TimeZone.getDefault();
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,39,public void run(TestResult testResult) {
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,40,try {
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,41,TimeZone.setDefault(timeZone);
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,42,super.run(testResult);
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,43,} finally {
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,44,TimeZone.setDefault(originalTimeZone); // cleanup
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.net.MalformedURLException;import java.net.URL;import java.util.Arrays;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public class UrlValidatorTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    public void testValidate()        throws InvalidArgumentException, MalformedURLException {        final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };        final List list = Arrays.asList(array);        final Validator validator = new UrlValidator();        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(new URL(""http://www.apache.org/""), i.next());        assertEquals(new URL(""file:///etc""), i.next());        assertFalse(i.hasNext());    }    public void testMalformedURL()        throws InvalidArgumentException, MalformedURLException {        final Object[] array = new Object[] { ""www.apache.org"" };        final List list = Arrays.asList(array);        final Validator validator = new UrlValidator();        try {            validator.validate(list);        } catch (InvalidArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.URLVALIDATOR_MALFORMED_URL,                                              new Object[] { ""www.apache.org"" }), e.getMessage());        }    }    public void testBadProtocol() {        {            final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };            final List list = Arrays.asList(array);            final UrlValidator validator = new UrlValidator();            validator.setProtocol(""http"");            assertEquals(""incorrect protocol"", ""http"", validator.getProtocol());            try {                validator.validate(list);                fail(""Expected InvalidArgumentException"");            } catch (InvalidArgumentException e) {                assertEquals(""file:///etc"", e.getMessage());            }        }        {            final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };            final List list = Arrays.asList(array);            final UrlValidator validator = new UrlValidator(""http"");            try {                validator.validate(list);                fail(""Expected InvalidArgumentException"");            } catch (InvalidArgumentException e) {                assertEquals(""file:///etc"", e.getMessage());            }        }    }}"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,18,package org.apache.commons.cli2.validation;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,20,import java.net.MalformedURLException;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,21,import java.net.URL;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,23,import java.util.Arrays;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,24,import java.util.Iterator;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,25,import java.util.List;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,29,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,30,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,32,public class UrlValidatorTest
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,33,extends TestCase {
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,34,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,36,public void testValidate()
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,37,"throws InvalidArgumentException, MalformedURLException {"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,38,"final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,39,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,40,final Validator validator = new UrlValidator();
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,42,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,44,final Iterator i = list.iterator();
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,45,"assertEquals(new URL(""http://www.apache.org/""), i.next());"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,46,"assertEquals(new URL(""file:///etc""), i.next());"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,47,assertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,50,public void testMalformedURL()
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,51,"throws InvalidArgumentException, MalformedURLException {"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,52,"final Object[] array = new Object[] { ""www.apache.org"" };"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,53,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,54,final Validator validator = new UrlValidator();
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,56,try {
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,57,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,58,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,59,"assertEquals(resources.getMessage(ResourceConstants.URLVALIDATOR_MALFORMED_URL,"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,60,"new Object[] { ""www.apache.org"" }), e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,64,public void testBadProtocol() {
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,66,"final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,67,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,68,final UrlValidator validator = new UrlValidator();
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,69,"validator.setProtocol(""http"");"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,71,"assertEquals(""incorrect protocol"", ""http"", validator.getProtocol());"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,73,try {
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,74,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,75,"fail(""Expected InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,76,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,77,"assertEquals(""file:///etc"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,82,"final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,83,final List list = Arrays.asList(array);
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,84,"final UrlValidator validator = new UrlValidator(""http"");"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,86,try {
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,87,validator.validate(list);
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,88,"fail(""Expected InvalidArgumentException"");"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,89,} catch (InvalidArgumentException e) {
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,90,"assertEquals(""file:///etc"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,1,"** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation.protect;class ProtectedClass {    protected ProtectedClass() {        // used to test something???    }}"
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,3,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,4,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,5,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,6,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,7,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,8,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,10,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,12,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,13,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,14,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,15,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,16,* limitations under the License.
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,18,package org.apache.commons.cli2.validation.protect;
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,20,class ProtectedClass {
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,21,protected ProtectedClass() {
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,22,// used to test something???

is_addition,old_file_path,new_file_path,line_num,content
True,CLI2Converter.java,CLI2Converter.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,CLI2Converter.java,CLI2Converter.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,CLI2Converter.java,CLI2Converter.java,4,* this work for additional information regarding copyright ownership.
True,CLI2Converter.java,CLI2Converter.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,CLI2Converter.java,CLI2Converter.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,CLI2Converter.java,CLI2Converter.java,7,* the License.  You may obtain a copy of the License at
True,CLI2Converter.java,CLI2Converter.java,9,*     http://www.apache.org/licenses/LICENSE-2.0
True,CLI2Converter.java,CLI2Converter.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,CLI2Converter.java,CLI2Converter.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,CLI2Converter.java,CLI2Converter.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,CLI2Converter.java,CLI2Converter.java,14,* See the License for the specific language governing permissions and
True,CLI2Converter.java,CLI2Converter.java,15,* limitations under the License.
True,CLI2Converter.java,CLI2Converter.java,17,package org.apache.commons.cli;
True,CLI2Converter.java,CLI2Converter.java,19,import java.util.HashSet;
True,CLI2Converter.java,CLI2Converter.java,20,import java.util.Iterator;
True,CLI2Converter.java,CLI2Converter.java,21,import java.util.List;
True,CLI2Converter.java,CLI2Converter.java,22,import java.util.ListIterator;
True,CLI2Converter.java,CLI2Converter.java,23,import java.util.Set;
True,CLI2Converter.java,CLI2Converter.java,25,import org.apache.commons.cli2.Group;
True,CLI2Converter.java,CLI2Converter.java,26,import org.apache.commons.cli2.Option;
True,CLI2Converter.java,CLI2Converter.java,27,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,CLI2Converter.java,CLI2Converter.java,28,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,CLI2Converter.java,CLI2Converter.java,29,import org.apache.commons.cli2.builder.GroupBuilder;
True,CLI2Converter.java,CLI2Converter.java,30,import org.apache.commons.cli2.validation.InvalidArgumentException;
True,CLI2Converter.java,CLI2Converter.java,31,import org.apache.commons.cli2.validation.Validator;
True,CLI2Converter.java,CLI2Converter.java,34,* A utility class for converting data structures version 1 to
True,CLI2Converter.java,CLI2Converter.java,35,* version 2 Option instances.
True,CLI2Converter.java,CLI2Converter.java,37,public class CLI2Converter {
True,CLI2Converter.java,CLI2Converter.java,39,private CLI2Converter(){
True,CLI2Converter.java,CLI2Converter.java,40,// prevent creation of static utility class
True,CLI2Converter.java,CLI2Converter.java,44,* Creates a version 2 Option instance from a version 1 Option instance.
True,CLI2Converter.java,CLI2Converter.java,46,* @param option1 the version 1 Option to convert
True,CLI2Converter.java,CLI2Converter.java,47,* @return a version 2 Option
True,CLI2Converter.java,CLI2Converter.java,49,public static Option option(final org.apache.commons.cli.Option option1){
True,CLI2Converter.java,CLI2Converter.java,51,final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
True,CLI2Converter.java,CLI2Converter.java,52,obuilder.withRequired(option1.isRequired());
True,CLI2Converter.java,CLI2Converter.java,54,final String shortName = option1.getOpt();
True,CLI2Converter.java,CLI2Converter.java,55,"if(shortName!=null && !"" "".equals(shortName)){"
True,CLI2Converter.java,CLI2Converter.java,56,obuilder.withShortName(shortName);
True,CLI2Converter.java,CLI2Converter.java,59,final String longName = option1.getLongOpt();
True,CLI2Converter.java,CLI2Converter.java,60,if(longName!=null){
True,CLI2Converter.java,CLI2Converter.java,61,obuilder.withLongName(longName);
True,CLI2Converter.java,CLI2Converter.java,63,obuilder.withId(option1.getId());
True,CLI2Converter.java,CLI2Converter.java,65,final String description = option1.getDescription();
True,CLI2Converter.java,CLI2Converter.java,66,if(description!=null){
True,CLI2Converter.java,CLI2Converter.java,67,obuilder.withDescription(description);
True,CLI2Converter.java,CLI2Converter.java,70,if(option1.hasArg()){
True,CLI2Converter.java,CLI2Converter.java,71,final ArgumentBuilder abuilder = new ArgumentBuilder();
True,CLI2Converter.java,CLI2Converter.java,72,final String argName = option1.getArgName();
True,CLI2Converter.java,CLI2Converter.java,73,abuilder.withName(argName);
True,CLI2Converter.java,CLI2Converter.java,74,abuilder.withMaximum(option1.getArgs());
True,CLI2Converter.java,CLI2Converter.java,75,if(option1.hasValueSeparator()){
True,CLI2Converter.java,CLI2Converter.java,76,abuilder.withSubsequentSeparator(option1.getValueSeparator());
True,CLI2Converter.java,CLI2Converter.java,78,if(option1.hasOptionalArg()){
True,CLI2Converter.java,CLI2Converter.java,79,abuilder.withMinimum(0);
True,CLI2Converter.java,CLI2Converter.java,81,else{
True,CLI2Converter.java,CLI2Converter.java,82,//TODO check what non-optional arg means
True,CLI2Converter.java,CLI2Converter.java,83,abuilder.withMinimum(option1.getArgs());
True,CLI2Converter.java,CLI2Converter.java,86,final Object type = option1.getType();
True,CLI2Converter.java,CLI2Converter.java,87,if(type!=null){
True,CLI2Converter.java,CLI2Converter.java,88,abuilder.withValidator(new TypeHandlerValidator(type));
True,CLI2Converter.java,CLI2Converter.java,91,obuilder.withArgument(abuilder.create());
True,CLI2Converter.java,CLI2Converter.java,94,return obuilder.create();
True,CLI2Converter.java,CLI2Converter.java,98,* Creates a version 2 Group instance from a version 1 OptionGroup instance.
True,CLI2Converter.java,CLI2Converter.java,100,* @param optionGroup1 the version 1 OptionGroup to convert
True,CLI2Converter.java,CLI2Converter.java,101,* @return a version 2 Group
True,CLI2Converter.java,CLI2Converter.java,103,public static Group group(final OptionGroup optionGroup1){
True,CLI2Converter.java,CLI2Converter.java,105,final GroupBuilder gbuilder = new GroupBuilder();
True,CLI2Converter.java,CLI2Converter.java,107,for(final Iterator i = optionGroup1.getOptions().iterator();i.hasNext();){
True,CLI2Converter.java,CLI2Converter.java,108,final org.apache.commons.cli.Option option1 = (org.apache.commons.cli.Option)i.next();
True,CLI2Converter.java,CLI2Converter.java,109,final Option option2 = option(option1);
True,CLI2Converter.java,CLI2Converter.java,110,gbuilder.withOption(option2);
True,CLI2Converter.java,CLI2Converter.java,113,gbuilder.withMaximum(1);
True,CLI2Converter.java,CLI2Converter.java,115,if(optionGroup1.isRequired()){
True,CLI2Converter.java,CLI2Converter.java,116,gbuilder.withMinimum(1);
True,CLI2Converter.java,CLI2Converter.java,119,return gbuilder.create();
True,CLI2Converter.java,CLI2Converter.java,123,* Creates a version 2 Group instance from a version 1 Options instance.
True,CLI2Converter.java,CLI2Converter.java,125,* @param options1 the version 1 Options to convert
True,CLI2Converter.java,CLI2Converter.java,126,* @return a version 2 Group
True,CLI2Converter.java,CLI2Converter.java,128,public static Group group(final Options options1){
True,CLI2Converter.java,CLI2Converter.java,130,final GroupBuilder gbuilder = new GroupBuilder();
True,CLI2Converter.java,CLI2Converter.java,132,final Set optionGroups = new HashSet();
True,CLI2Converter.java,CLI2Converter.java,134,for(final Iterator i = options1.getOptionGroups().iterator();i.hasNext();){
True,CLI2Converter.java,CLI2Converter.java,135,final OptionGroup optionGroup1 = (OptionGroup)i.next();
True,CLI2Converter.java,CLI2Converter.java,136,Group group = group(optionGroup1);
True,CLI2Converter.java,CLI2Converter.java,137,gbuilder.withOption(group);
True,CLI2Converter.java,CLI2Converter.java,138,optionGroups.add(optionGroup1);
True,CLI2Converter.java,CLI2Converter.java,141,for(final Iterator i = options1.getOptions().iterator();i.hasNext();){
True,CLI2Converter.java,CLI2Converter.java,142,final org.apache.commons.cli.Option option1 = (org.apache.commons.cli.Option)i.next();
True,CLI2Converter.java,CLI2Converter.java,143,"if(!optionInAGroup(option1,optionGroups)){"
True,CLI2Converter.java,CLI2Converter.java,144,final Option option2 = option(option1);
True,CLI2Converter.java,CLI2Converter.java,145,gbuilder.withOption(option2);
True,CLI2Converter.java,CLI2Converter.java,149,return gbuilder.create();
True,CLI2Converter.java,CLI2Converter.java,152,"private static boolean optionInAGroup(final org.apache.commons.cli.Option option1, final Set optionGroups) {"
True,CLI2Converter.java,CLI2Converter.java,153,for (Iterator i = optionGroups.iterator(); i.hasNext();) {
True,CLI2Converter.java,CLI2Converter.java,154,OptionGroup group = (OptionGroup) i.next();
True,CLI2Converter.java,CLI2Converter.java,155,if(group.getOptions().contains(option1)){
True,CLI2Converter.java,CLI2Converter.java,156,return true;
True,CLI2Converter.java,CLI2Converter.java,159,return false;
True,CLI2Converter.java,CLI2Converter.java,163,class TypeHandlerValidator implements Validator{
True,CLI2Converter.java,CLI2Converter.java,165,private final Object type;
True,CLI2Converter.java,CLI2Converter.java,168,* Creates a new Validator using the TypeHandler class.
True,CLI2Converter.java,CLI2Converter.java,170,* @see TypeHandler
True,CLI2Converter.java,CLI2Converter.java,171,* @param type The required type for valid elements
True,CLI2Converter.java,CLI2Converter.java,173,public TypeHandlerValidator(final Object type){
True,CLI2Converter.java,CLI2Converter.java,174,this.type = type;
True,CLI2Converter.java,CLI2Converter.java,177,/* (non-Javadoc)
True,CLI2Converter.java,CLI2Converter.java,178,* @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
True,CLI2Converter.java,CLI2Converter.java,180,public void validate(final List values) throws InvalidArgumentException {
True,CLI2Converter.java,CLI2Converter.java,181,final ListIterator i = values.listIterator();
True,CLI2Converter.java,CLI2Converter.java,182,while(i.hasNext()){
True,CLI2Converter.java,CLI2Converter.java,183,final String value = (String)i.next();
True,CLI2Converter.java,CLI2Converter.java,184,"final Object converted = TypeHandler.createValue(value,type);"
True,CLI2Converter.java,CLI2Converter.java,185,if(converted==null){
True,CLI2Converter.java,CLI2Converter.java,186,"throw new InvalidArgumentException(""Unable to understand value: "" + value);"
True,CLI2Converter.java,CLI2Converter.java,188,i.set(converted);
True,CLI2ConverterTest.java,CLI2ConverterTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,CLI2ConverterTest.java,CLI2ConverterTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,CLI2ConverterTest.java,CLI2ConverterTest.java,4,* this work for additional information regarding copyright ownership.
True,CLI2ConverterTest.java,CLI2ConverterTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,7,* the License.  You may obtain a copy of the License at
True,CLI2ConverterTest.java,CLI2ConverterTest.java,9,*     http://www.apache.org/licenses/LICENSE-2.0
True,CLI2ConverterTest.java,CLI2ConverterTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,CLI2ConverterTest.java,CLI2ConverterTest.java,14,* See the License for the specific language governing permissions and
True,CLI2ConverterTest.java,CLI2ConverterTest.java,15,* limitations under the License.
True,CLI2ConverterTest.java,CLI2ConverterTest.java,17,package org.apache.commons.cli;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,19,import org.apache.commons.cli2.Group;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,20,import org.apache.commons.cli2.builder.PatternBuilder;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,21,import org.apache.commons.cli2.option.GroupImpl;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,23,import junit.framework.TestCase;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,25,public class CLI2ConverterTest extends TestCase {
True,CLI2ConverterTest.java,CLI2ConverterTest.java,27,private Options aceOptions;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,28,private OptionGroup aceOptionGroup;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,29,private Options abcdeOptions;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,30,private Options pattern;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,32,private Option a;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,33,private Option bbb;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,34,private Option c;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,35,private Option ddd;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,36,private Option e;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,37,private Option f;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,38,private Option g;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,39,private Option h;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,40,private Option i;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,42,public void setUp(){
True,CLI2ConverterTest.java,CLI2ConverterTest.java,43,"a = OptionBuilder.withDescription(""A description"").create('a');"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,44,"bbb = OptionBuilder.create(""bbb"");"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,45,"c = OptionBuilder.withLongOpt(""ccc"").create('c');"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,46,"ddd = OptionBuilder.withLongOpt(""ddd"").create();"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,47,"e = OptionBuilder.isRequired(true).create(""e"");"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,48,"f = OptionBuilder.hasArg().withArgName(""argument"").create('f');"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,49,g = OptionBuilder.hasArgs(5).create('g');
True,CLI2ConverterTest.java,CLI2ConverterTest.java,50,h = OptionBuilder.hasOptionalArg().create('h');
True,CLI2ConverterTest.java,CLI2ConverterTest.java,51,i = OptionBuilder.hasOptionalArgs(5).create('i');
True,CLI2ConverterTest.java,CLI2ConverterTest.java,53,aceOptions = new Options();
True,CLI2ConverterTest.java,CLI2ConverterTest.java,54,aceOptions.addOption(OptionBuilder.create('a'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,55,aceOptions.addOption(OptionBuilder.create('c'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,56,aceOptions.addOption(OptionBuilder.create('e'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,58,aceOptionGroup = new OptionGroup();
True,CLI2ConverterTest.java,CLI2ConverterTest.java,59,aceOptionGroup.addOption(OptionBuilder.create('a'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,60,aceOptionGroup.addOption(OptionBuilder.create('c'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,61,aceOptionGroup.addOption(OptionBuilder.create('e'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,63,abcdeOptions = new Options();
True,CLI2ConverterTest.java,CLI2ConverterTest.java,64,abcdeOptions.addOption(OptionBuilder.create('d'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,65,OptionGroup og = new OptionGroup();
True,CLI2ConverterTest.java,CLI2ConverterTest.java,66,og.addOption(OptionBuilder.create('a'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,67,og.addOption(OptionBuilder.create('c'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,68,og.addOption(OptionBuilder.create('e'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,69,abcdeOptions.addOptionGroup(og);
True,CLI2ConverterTest.java,CLI2ConverterTest.java,70,abcdeOptions.addOption(OptionBuilder.create('b'));
True,CLI2ConverterTest.java,CLI2ConverterTest.java,72,"pattern = PatternOptionBuilder.parsePattern(""a%ce:"");"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,76,* Class to test for Option option(Option)
True,CLI2ConverterTest.java,CLI2ConverterTest.java,78,public void testOption() {
True,CLI2ConverterTest.java,CLI2ConverterTest.java,79,assertTrue(e.isRequired());
True,CLI2ConverterTest.java,CLI2ConverterTest.java,81,"assertEquals(""A description"",a.getDescription());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,82,"assertEquals('a',a.getId());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,83,"assertEquals(""[-a]"",CLI2Converter.option(a).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,84,"assertEquals(""[-bbb]"",CLI2Converter.option(bbb).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,85,"assertEquals(""[-c (--ccc)]"",CLI2Converter.option(c).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,86,"assertEquals(""[--ddd]"",CLI2Converter.option(ddd).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,87,"assertEquals(""-e"",CLI2Converter.option(e).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,88,"assertEquals(""[-f <argument>]"",CLI2Converter.option(f).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,89,"assertEquals(""[-g <arg1> <arg2> <arg3> <arg4> <arg5>]"",CLI2Converter.option(g).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,90,"assertEquals(""[-h [<arg>]]"",CLI2Converter.option(h).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,91,"assertEquals(""[-i [<arg1> [<arg2> [<arg3> [<arg4> [<arg5>]]]]]]"",CLI2Converter.option(i).toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,94,* Class to test for Group group(OptionGroup)
True,CLI2ConverterTest.java,CLI2ConverterTest.java,96,public void testGroupOptionGroup() {
True,CLI2ConverterTest.java,CLI2ConverterTest.java,97,GroupImpl group;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,99,group = (GroupImpl)CLI2Converter.group(aceOptionGroup);
True,CLI2ConverterTest.java,CLI2ConverterTest.java,100,"assertEquals(""[-a|-c|-e]"",group.toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,101,"assertEquals(0,group.getMinimum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,102,"assertEquals(1,group.getMaximum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,104,aceOptionGroup.setRequired(true);
True,CLI2ConverterTest.java,CLI2ConverterTest.java,105,group = (GroupImpl)CLI2Converter.group(aceOptionGroup);
True,CLI2ConverterTest.java,CLI2ConverterTest.java,106,"assertEquals(""-a|-c|-e"",group.toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,107,"assertEquals(1,group.getMinimum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,108,"assertEquals(1,group.getMaximum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,111,* Class to test for Group group(Options)
True,CLI2ConverterTest.java,CLI2ConverterTest.java,113,public void testGroupOptions() {
True,CLI2ConverterTest.java,CLI2ConverterTest.java,115,GroupImpl group;
True,CLI2ConverterTest.java,CLI2ConverterTest.java,117,group = (GroupImpl)CLI2Converter.group(aceOptions);
True,CLI2ConverterTest.java,CLI2ConverterTest.java,118,"assertEquals(""[-a|-c|-e]"",group.toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,119,"assertEquals(0,group.getMinimum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,120,"assertEquals(Integer.MAX_VALUE,group.getMaximum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,122,group = (GroupImpl)CLI2Converter.group(abcdeOptions);
True,CLI2ConverterTest.java,CLI2ConverterTest.java,124,"assertEquals(""[-a|-c|-e|-d|-b]"",group.toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,125,"assertEquals(0,group.getMinimum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,126,"assertEquals(Integer.MAX_VALUE,group.getMaximum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,128,group = (GroupImpl)CLI2Converter.group(pattern);
True,CLI2ConverterTest.java,CLI2ConverterTest.java,129,"assertEquals(""[-a <arg>|-c|-e <arg>]"",group.toString());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,130,"assertEquals(0,group.getMinimum());"
True,CLI2ConverterTest.java,CLI2ConverterTest.java,131,"assertEquals(Integer.MAX_VALUE,group.getMaximum());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/cli/AlreadySelectedException.java,src/java/org/apache/commons/cli/AlreadySelectedException.java,70,ublic class AlreadySelectedException extends ParseException {
True,src/java/org/apache/commons/cli/AlreadySelectedException.java,src/java/org/apache/commons/cli/AlreadySelectedException.java,70,public class AlreadySelectedException
True,src/java/org/apache/commons/cli/AlreadySelectedException.java,src/java/org/apache/commons/cli/AlreadySelectedException.java,71,extends ParseException {
False,src/java/org/apache/commons/cli/AlreadySelectedException.java,src/java/org/apache/commons/cli/AlreadySelectedException.java,78,ublic AlreadySelectedException( String message ) {
False,src/java/org/apache/commons/cli/AlreadySelectedException.java,src/java/org/apache/commons/cli/AlreadySelectedException.java,79,uper( message );
True,src/java/org/apache/commons/cli/AlreadySelectedException.java,src/java/org/apache/commons/cli/AlreadySelectedException.java,79,public AlreadySelectedException(String message)
True,src/java/org/apache/commons/cli/AlreadySelectedException.java,src/java/org/apache/commons/cli/AlreadySelectedException.java,81,super(message);
False,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/BasicParser.java,v 1.3 2002/09/19 22:59:43 jkeyes Exp $"
False,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,3, $Revision: 1.3 $
False,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,4, $Date: 2002/09/19 22:59:43 $
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/BasicParser.java,v 1.4 2002/12/09 23:47:24 jkeyes Exp $"
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,3,* $Revision: 1.4 $
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,4,* $Date: 2002/12/09 23:47:24 $
False,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,85,"rotected String[] flatten( Options options,"
False,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,86,"tring[] arguments,"
False,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,87,oolean stopAtNonOption )
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,85,"protected String[] flatten(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,86,boolean stopAtNonOption)
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,63,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,67,mport java.util.List;
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,67,import java.util.List;
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,89,rivate List args    = new LinkedList();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,88,private List args = new LinkedList();
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,95,rivate Map names   = new HashMap();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,94,private Map names = new HashMap();
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,106,ommandLine() {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,105,CommandLine()
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,115,ublic boolean hasOption(String opt) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,116,eturn options.containsKey( opt );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,115,public boolean hasOption(String opt)
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,117,return options.containsKey(opt);
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,125,ublic boolean hasOption( char opt ) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,126,eturn hasOption( String.valueOf( opt ) );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,126,public boolean hasOption(char opt)
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,128,return hasOption(String.valueOf(opt));
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,135,ublic Object getOptionObject( String opt ) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,136,tring res = getOptionValue( opt );
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,138,f( !options.containsKey( opt ) ) {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,137,public Object getOptionObject(String opt)
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,139,String res = getOptionValue(opt);
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,141,if (!options.containsKey(opt))
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,141,bject type = ((Option)options.get(opt)).getType();
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,142,"eturn res == null ? null : TypeHandler.createValue(res, type);"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,146,Object type = ((Option) options.get(opt)).getType();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,148,"return (res == null)        ? null : TypeHandler.createValue(res, type);"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,151,ublic Object getOptionObject( char opt ) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,152,eturn getOptionObject( String.valueOf( opt ) );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,157,public Object getOptionObject(char opt)
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,159,return getOptionObject(String.valueOf(opt));
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,162,ublic String getOptionValue( String opt ) {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,169,public String getOptionValue(String opt)
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,174,ublic String getOptionValue( char opt ) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,175,eturn getOptionValue( String.valueOf( opt ) );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,183,public String getOptionValue(char opt)
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,185,return getOptionValue(String.valueOf(opt));
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,185,ublic String[] getOptionValues( String opt ) {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,195,public String[] getOptionValues(String opt)
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,188,pt = Util.stripLeadingHyphens( opt );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,199,opt = Util.stripLeadingHyphens(opt);
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,191,f( names.containsKey( opt ) ) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,192,ey = (String)names.get( opt );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,203,if (names.containsKey(opt))
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,205,key = (String) names.get(opt);
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,195,f( options.containsKey( key ) ) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,196,eturn ((Option)options.get(key)).getValues();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,208,if (options.containsKey(key))
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,210,return ((Option) options.get(key)).getValues();
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,208,ublic String[] getOptionValues( char opt ) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,209,eturn getOptionValues( String.valueOf( opt ) );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,223,public String[] getOptionValues(char opt)
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,225,return getOptionValues(String.valueOf(opt));
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,216, @param defaultValue is the default value to be returned if the option is not specified
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,232,* @param defaultValue is the default value to be returned if the option
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,233,* is not specified
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,220,"ublic String getOptionValue( String opt, String defaultValue ) {"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,221,tring answer = getOptionValue( opt );
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,222,eturn ( answer != null ) ? answer : defaultValue;
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,237,"public String getOptionValue(String opt, String defaultValue)"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,239,String answer = getOptionValue(opt);
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,241,return (answer != null) ? answer : defaultValue;
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,229, @param defaultValue is the default value to be returned if the option is not specified
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,248,* @param defaultValue is the default value to be returned if the option
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,249,* is not specified
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,233,"ublic String getOptionValue( char opt, String defaultValue ) {"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,234,"eturn getOptionValue( String.valueOf( opt ), defaultValue );"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,253,"public String getOptionValue(char opt, String defaultValue)"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,255,"return getOptionValue(String.valueOf(opt), defaultValue);"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,242,ublic String[] getArgs() {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,243,tring[] answer = new String[ args.size() ];
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,244,rgs.toArray( answer );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,263,public String[] getArgs()
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,265,String[] answer = new String[args.size()];
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,267,args.toArray(answer);
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,253,ublic List getArgList() {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,277,public List getArgList()
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,268,"uf.append( ""[ CommandLine: [ options: "" );"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,269,uf.append( options.toString() );
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,270,"uf.append( "" ] [ args: "");"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,271,uf.append( args.toString() );
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,272,"uf.append( "" ] ]"" );"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,294,"buf.append(""[ CommandLine: [ options: "");"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,295,buf.append(options.toString());
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,296,"buf.append("" ] [ args: "");"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,297,buf.append(args.toString());
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,298,"buf.append("" ] ]"");"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,283,oid addArg(String arg) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,284,rgs.add( arg );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,309,void addArg(String arg)
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,311,args.add(arg);
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,293,oid addOption( Option opt ) {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,294,"ashcodeMap.put( new Integer( opt.hashCode() ), opt );"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,320,void addOption(Option opt)
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,322,"hashcodeMap.put(new Integer(opt.hashCode()), opt);"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,297,f( key == null ) {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,326,if (key == null)
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,300,lse {
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,301,"ames.put( opt.getLongOpt(), key );"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,330,else
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,332,"names.put(opt.getLongOpt(), key);"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,304,"ptions.put( key, opt );"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,335,"options.put(key, opt);"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,313,ublic Iterator iterator( ) {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,344,public Iterator iterator()
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,322,ublic Option[] getOptions( ) {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,354,public Option[] getOptions()
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,326,ptionsArray = new Option[ processed.size() ];
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,360,optionsArray = new Option[processed.size()];
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,329,eturn (Option[]) processed.toArray( optionsArray );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,363,return (Option[]) processed.toArray(optionsArray);
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.5 2002/11/18 08:41:26 jkeyes Exp $"
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,3, $Revision: 1.5 $
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,4, $Date: 2002/11/18 08:41:26 $
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.6 2002/12/09 23:47:24 jkeyes Exp $"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,3,* $Revision: 1.6 $
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,4,* $Date: 2002/12/09 23:47:24 $
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,84,"ublic CommandLine parse( Options options, String[] arguments )"
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,85,hrows ParseException;
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,84,"CommandLine parse(Options options, String[] arguments)"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,85,throws ParseException;
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,99,"ublic CommandLine parse( Options options, String[] arguments, Properties props )"
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,100,hrows ParseException;
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,99,"CommandLine parse(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,100,Properties properties)
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,101,throws ParseException;
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,114,"ublic CommandLine parse( Options options, String[] arguments, boolean stopAtNonOption )"
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,115,hrows ParseException;
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,115,"CommandLine parse(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,116,boolean stopAtNonOption)
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,117,throws ParseException;
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,130,"ublic CommandLine parse( Options options, String[] arguments, Properties properties, boolean stopAtNonOption)"
False,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,131,hrows ParseException;
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,132,"CommandLine parse(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,133,"Properties properties, boolean stopAtNonOption)"
True,src/java/org/apache/commons/cli/CommandLineParser.java,src/java/org/apache/commons/cli/CommandLineParser.java,134,throws ParseException;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.10 2002/09/19 22:59:43 jkeyes Exp $"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,3, $Revision: 1.10 $
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,4, $Date: 2002/09/19 22:59:43 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.11 2002/12/09 23:47:24 jkeyes Exp $"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,3,* $Revision: 1.11 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,4,* $Date: 2002/12/09 23:47:24 $
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,63,mport java.util.Arrays;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,65,mport java.util.Collection;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,66,mport java.util.Iterator;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,74, @version $Revision: 1.10 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,71,* @version $Revision: 1.11 $
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,85,rivate void init() {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,82,private void init()
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,100,* @param options The Options to parse the arguments by.
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,101,* @param arguments The arguments that have to be flattened.
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,102,* @param stopAtNonOption specifies whether to stop
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,103,* flattening when a non option has been encountered
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,104,* @return a String array of the flattened arguments
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,102,"rotected String[] flatten( Options options,"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,103,"tring[] arguments,"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,104,oolean stopAtNonOption )
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,106,"protected String[] flatten(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,107,boolean stopAtNonOption)
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,110,or( int i = 0; i < arguments.length; i++ ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,111,"f( ""--"".equals( arguments[i] ) ) {"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,114,for (int i = 0; i < arguments.length; i++)
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,116,"if (""--"".equals(arguments[i]))"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,113,"okens.add( ""--"" );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,119,"tokens.add(""--"");"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,115,"lse if ( ""-"".equals( arguments[i] ) ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,116,"okens.add( ""-"" );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,121,"else if (""-"".equals(arguments[i]))"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,123,"tokens.add(""-"");"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,118,"lse if( arguments[i].startsWith( ""-"" ) ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,119,ption option = options.getOption( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,125,"else if (arguments[i].startsWith(""-""))"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,127,Option option = options.getOption(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,122,f( option == null ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,130,if (option == null)
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,124,"ption specialOption = options.getOption( arguments[i].substring(0,2) );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,125,f( specialOption != null ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,126,"okens.add( arguments[i].substring(0,2) );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,127,okens.add( arguments[i].substring(2) );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,133,Option specialOption =
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,134,"options.getOption(arguments[i].substring(0, 2));"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,136,if (specialOption != null)
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,138,"tokens.add(arguments[i].substring(0, 2));"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,139,tokens.add(arguments[i].substring(2));
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,129,lse if( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,141,else if (stopAtNonOption)
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,131,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,144,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,133,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,134,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,146,else
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,148,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,137,lse {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,151,else
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,140,"ption specialOption = options.getOption( arguments[i].substring(0,2) );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,141,f( specialOption != null && option == null ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,142,"okens.add( arguments[i].substring(0,2) );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,143,okens.add( arguments[i].substring(2) );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,156,Option specialOption =
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,157,"options.getOption(arguments[i].substring(0, 2));"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,159,if ((specialOption != null) && (option == null))
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,161,"tokens.add(arguments[i].substring(0, 2));"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,162,tokens.add(arguments[i].substring(2));
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,145,lse if( currentOption != null && currentOption.hasArg() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,146,f( currentOption.hasArg() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,147,okens.add( arguments[i] );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,148,urrentOption= null;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,164,else if ((currentOption != null) && currentOption.hasArg())
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,166,if (currentOption.hasArg())
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,168,tokens.add(arguments[i]);
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,169,currentOption = null;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,150,lse if ( currentOption.hasArgs() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,151,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,171,else if (currentOption.hasArgs())
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,173,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,153,lse if ( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,175,else if (stopAtNonOption)
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,155,"okens.add( ""--"" );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,156,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,178,"tokens.add(""--"");"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,179,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,158,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,159,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,181,else
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,183,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,162,lse if (currentOption != null ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,163,okens.add( arguments[i] );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,165,lse if ( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,186,else if (currentOption != null)
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,188,tokens.add(arguments[i]);
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,190,else if (stopAtNonOption)
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,167,"okens.add( ""--"" );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,168,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,193,"tokens.add(""--"");"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,194,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,170,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,171,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,196,else
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,198,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,175,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,176,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,202,else
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,204,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,179,f( eatTheRest ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,180,or( i++; i < arguments.length; i++ ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,181,okens.add( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,207,if (eatTheRest)
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,209,for (i++; i < arguments.length; i++)
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,211,tokens.add(arguments[i]);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,185,eturn (String[])tokens.toArray( new String[] {} );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,216,return (String[]) tokens.toArray(new String[] {  });
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,78,ublic class HelpFormatter
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,80,/ --------------------------------------------------------------- Constants
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,82,ublic static final int DEFAULT_WIDTH              = 74;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,83,ublic static final int DEFAULT_LEFT_PAD           = 1;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,84,ublic static final int DEFAULT_DESC_PAD           = 3;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,85,"ublic static final String DEFAULT_SYNTAX_PREFIX   = ""usage: "";"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,86,"ublic static final String DEFAULT_OPT_PREFIX      = ""-"";"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,87,"ublic static final String DEFAULT_LONG_OPT_PREFIX = ""--"";"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,88,"ublic static final String DEFAULT_ARG_NAME        = ""arg"";"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,90,/ ------------------------------------------------------------------ Static
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,92,/ -------------------------------------------------------------- Attributes
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,94,ublic int defaultWidth;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,95,ublic int defaultLeftPad;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,96,ublic int defaultDescPad;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,97,ublic String defaultSyntaxPrefix;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,98,ublic String defaultNewLine;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,99,ublic String defaultOptPrefix;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,100,ublic String defaultLongOptPrefix;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,101,ublic String defaultArgName;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,103,/ ------------------------------------------------------------ Constructors
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,104,ublic HelpFormatter()
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,106,efaultWidth = DEFAULT_WIDTH;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,107,efaultLeftPad = DEFAULT_LEFT_PAD;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,108,efaultDescPad = DEFAULT_DESC_PAD;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,109,efaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,110,"efaultNewLine = System.getProperty(""line.separator"");"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,111,efaultOptPrefix = DEFAULT_OPT_PREFIX;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,112,efaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,113,efaultArgName = DEFAULT_ARG_NAME;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,116,/ ------------------------------------------------------------------ Public
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,118,"ublic void printHelp( String cmdLineSyntax,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,119,ptions options )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,121,"rintHelp( defaultWidth, cmdLineSyntax, null, options, null, false );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,124,"ublic void printHelp( String cmdLineSyntax,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,125,"ptions options,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,126,oolean autoUsage )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,128,"rintHelp( defaultWidth, cmdLineSyntax, null, options, null, autoUsage );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,131,"ublic void printHelp( String cmdLineSyntax,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,132,"tring header,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,133,"ptions options,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,134,tring footer )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,136,"rintHelp( cmdLineSyntax, header, options, footer, false );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,139,"ublic void printHelp( String cmdLineSyntax,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,140,"tring header,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,141,"ptions options,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,142,"tring footer,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,143,oolean autoUsage )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,145,"rintHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,148,"ublic void printHelp( int width,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,149,"tring cmdLineSyntax,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,150,"tring header,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,151,"ptions options,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,152,tring footer )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,154,"rintHelp( width, cmdLineSyntax, header, options, footer, false );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,157,"ublic void printHelp( int width,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,158,"tring cmdLineSyntax,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,159,"tring header,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,160,"ptions options,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,161,"tring footer,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,162,oolean autoUsage )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,164,rintWriter pw = new PrintWriter(System.out);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,165,"rintHelp( pw, width, cmdLineSyntax, header,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,166,"ptions, defaultLeftPad, defaultDescPad, footer, autoUsage );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,167,w.flush();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,169,"ublic void printHelp( PrintWriter pw,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,170,"nt width,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,171,"tring cmdLineSyntax,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,172,"tring header,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,173,"ptions options,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,174,"nt leftPad,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,175,"nt descPad,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,176,tring footer )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,177,hrows IllegalArgumentException
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,179,"rintHelp( pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,182,"ublic void printHelp( PrintWriter pw,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,183,"nt width,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,184,"tring cmdLineSyntax,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,185,"tring header,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,186,"ptions options,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,187,"nt leftPad,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,188,"nt descPad,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,189,"tring footer,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,190,oolean autoUsage )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,191,hrows IllegalArgumentException
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,193,f ( cmdLineSyntax == null || cmdLineSyntax.length() == 0 )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,195,"hrow new IllegalArgumentException(""cmdLineSyntax not provided"");"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,198,f ( autoUsage ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,199,"rintUsage( pw, width, cmdLineSyntax, options );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,201,lse {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,202,"rintUsage( pw, width, cmdLineSyntax );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,205,f ( header != null && header.trim().length() > 0 )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,207,"rintWrapped( pw, width, header );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,209,"rintOptions( pw, width, options, leftPad, descPad );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,210,f ( footer != null && footer.trim().length() > 0 )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,212,"rintWrapped( pw, width, footer );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,217, <p>Prints the usage statement for the specified application.</p>
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,219, @param pw The PrintWriter to print the usage statement
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,220, @param width ??
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,221, @param appName The application name
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,222, @param options The command line Options
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,223," @see #appendOptionGroup(StringBuffer,OptionGroup)"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,224," @see #appendOption(StringBuffer,Option,boolean)"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,227,"ublic void printUsage( PrintWriter pw, int width, String app, Options options )"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,229,/ initialise the string buffer
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,230,"tringBuffer buff = new StringBuffer( defaultSyntaxPrefix ).append( app ).append( "" "" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,232,/ create a list for processed option groups
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,233,inal Collection processedGroups = new ArrayList();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,235,/ temp variable
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,236,ption option;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,238,/ iterate over the options
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,239,or ( Iterator i = options.getOptions().iterator(); i.hasNext(); )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,241,/ get the next Option
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,242,ption = (Option) i.next();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,244,/ check if the option is part of an OptionGroup
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,245,ptionGroup group = options.getOptionGroup( option );
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,247,/ if the option is part of a group
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,248,f( group != null) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,249,/ and if the group has not already been processed
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,250,f( !processedGroups.contains(group) ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,251,/ add the group to the processed list
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,252,rocessedGroups.add( group );
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,253,/ add the usage clause
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,254,"ppendOptionGroup( buff, group );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,256,/ otherwise the option was displayed in the group
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,257,/ previously so ignore it.
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,259,/ if the Option is not part of an OptionGroup
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,260,lse {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,261,"ppendOption( buff, option, option.isRequired() );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,264,f( i.hasNext() ){
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,265,"uff.append( "" "" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,269,/ call printWrapped
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,270,"rintWrapped( pw, width, buff.toString().indexOf(' ')+1,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,271,uff.toString() );
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,275, Appends the usage clause for an OptionGroup to a StringBuffer.
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,276, The clause is wrapped in square brackets if the group is required.
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,277, The display of the options is handled by appendOption
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,278, @param buff the StringBuffer to append to
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,279, @param group the group to append
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,280," @see #appendOption(StringBuffer,Option,boolean)"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,282,"rivate static void appendOptionGroup( final StringBuffer buff, final OptionGroup group )"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,284,f( !group.isRequired() ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,285,"uff.append( ""["" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,288,/ for each option in the OptionGroup
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,289,or( Iterator i = group.getOptions().iterator(); i.hasNext(); ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,290,/ whether the option is required or not is handled at group level
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,291,"ppendOption( buff, (Option)i.next(), true);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,292,f( i.hasNext() ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,293,"uff.append( "" | "" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,297,f( !group.isRequired() ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,298,"uff.append( ""]"" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,303, Appends the usage clause for an Option to a StringBuffer.
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,304, The clause is wrapped in square brackets if the group is required.
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,305, The display of the options is handled by appendOption
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,306, @param buff the StringBuffer to append to
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,307, @param group the group to append
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,308," @see #appendOption(StringBuffer,Option,boolean)"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,310,"rivate static void appendOption( final StringBuffer buff, final Option option, final boolean required)"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,312,f( !required ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,313,"uff.append( ""["" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,316,f( option.getOpt() != null ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,317,"uff.append( ""-"" ).append( option.getOpt() );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,319,lse {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,320,"uff.append( ""--"" ).append( option.getLongOpt() );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,323,/ if the Option has a value
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,324,f( option.hasArg() && option.getArgName() != null ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,325,"uff.append( "" <"" ).append( option.getArgName() ).append( "">"" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,328,/ if the Option is not a required option
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,329,f( !required ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,330,"uff.append( ""]"" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,335,"ublic void printUsage( PrintWriter pw, int width, String cmdLineSyntax )"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,337,nt argPos = cmdLineSyntax.indexOf(' ') + 1;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,338,"rintWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,339,efaultSyntaxPrefix + cmdLineSyntax);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,342,"ublic void printOptions( PrintWriter pw, int width, Options options, int leftPad, int descPad )"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,344,tringBuffer sb = new StringBuffer();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,345,"enderOptions(sb, width, options, leftPad, descPad);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,346,w.println(sb.toString());
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,349,"ublic void printWrapped( PrintWriter pw, int width, String text )"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,351,"rintWrapped(pw, width, 0, text);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,354,"ublic void printWrapped( PrintWriter pw, int width, int nextLineTabStop, String text )"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,356,tringBuffer sb = new StringBuffer(text.length());
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,357,"enderWrappedText(sb, width, nextLineTabStop, text);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,358,w.println(sb.toString());
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,361,/ --------------------------------------------------------------- Protected
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,363,"rotected StringBuffer renderOptions( StringBuffer sb,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,364,"nt width,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,365,"ptions options,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,366,"nt leftPad,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,367,nt descPad )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,369,inal String lpad = createPadding(leftPad);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,370,inal String dpad = createPadding(descPad);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,372,"/first create list containing only <lpad>-a,--aaa where -a is opt and --aaa is"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,373,/long opt; in parallel look for the longest opt string
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,374,/this list will be then used to sort options ascending
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,375,nt max = 0;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,376,tringBuffer optBuf;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,377,ist prefixList = new ArrayList();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,378,ption option;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,379,ist optList = options.helpOptions();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,380,"ollections.sort( optList, new StringBufferComparator() );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,381,or ( Iterator i = optList.iterator(); i.hasNext(); )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,383,ption = (Option) i.next();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,384,ptBuf = new StringBuffer(8);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,386,f ( option.getOpt() == null )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,388,"ptBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,390,lse
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,392,ptBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,393,f ( option.hasLongOpt() )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,395,"ptBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,400,f( option.hasArg() ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,401,f( option.hasArgName() ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,402,"ptBuf.append("" <"").append( option.getArgName() ).append( "">"" );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,404,lse {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,405,ptBuf.append(' ');
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,409,refixList.add(optBuf);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,410,ax = optBuf.length() > max ? optBuf.length() : max;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,412,nt x = 0;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,413,or ( Iterator i = optList.iterator(); i.hasNext(); )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,415,ption = (Option) i.next();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,416,ptBuf = new StringBuffer( prefixList.get( x++ ).toString() );
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,418,f ( optBuf.length() < max )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,420,ptBuf.append(createPadding(max - optBuf.length()));
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,422,ptBuf.append( dpad );
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,424,nt nextLineTabStop = max + descPad;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,426,f( option.getDescription() != null ) {
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,427,ptBuf.append( option.getDescription() );
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,429,"enderWrappedText(sb, width, nextLineTabStop,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,430,ptBuf.toString());
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,431,f ( i.hasNext() )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,433,b.append(defaultNewLine);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,437,eturn sb;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,440,"rotected StringBuffer renderWrappedText( StringBuffer sb,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,441,"nt width,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,442,"nt nextLineTabStop,"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,443,tring text )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,445,"nt pos = findWrapPos( text, width, 0);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,446,f ( pos == -1 )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,448,b.append(rtrim(text));
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,449,eturn sb;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,451,lse
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,453,"b.append(rtrim(text.substring(0, pos))).append(defaultNewLine);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,456,/all following lines must be padded with nextLineTabStop space characters
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,457,inal String padding = createPadding(nextLineTabStop);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,459,hile ( true )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,461,ext = padding + text.substring(pos).trim();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,462,"os = findWrapPos( text, width, nextLineTabStop );"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,463,f ( pos == -1 )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,465,b.append(text);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,78,public class HelpFormatter {
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,79,// --------------------------------------------------------------- Constants
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,81,/** default number of characters per line */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,82,public static final int DEFAULT_WIDTH = 74;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,84,/** default padding to the left of each line */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,85,public static final int DEFAULT_LEFT_PAD = 1;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,88,public static final int DEFAULT_DESC_PAD = 3;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,90,/** the string to display at the begining of the usage statement */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,91,"public static final String DEFAULT_SYNTAX_PREFIX = ""usage: "";"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,93,/** default prefix for shortOpts */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,94,"public static final String DEFAULT_OPT_PREFIX = ""-"";"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,96,/** default prefix for long Option */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,97,"public static final String DEFAULT_LONG_OPT_PREFIX = ""--"";"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,99,/** default name for an argument */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,100,"public static final String DEFAULT_ARG_NAME = ""arg"";"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,102,// -------------------------------------------------------------- Attributes
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,104,/** number of characters per line */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,105,private int defaultWidth = DEFAULT_WIDTH;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,107,/** amount of padding to the left of each line */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,108,private int defaultLeftPad = DEFAULT_LEFT_PAD;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,111,private int defaultDescPad = DEFAULT_DESC_PAD;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,113,/** the string to display at the begining of the usage statement */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,114,private String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,116,/** the new line character/string ?? */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,117,"private String defaultNewLine = System.getProperty(""line.separator"");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,119,/** the shortOpt prefix */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,120,private String defaultOptPrefix = DEFAULT_OPT_PREFIX;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,122,/** the long Opt prefix */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,123,private String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,125,/** the name of the argument */
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,126,private String defaultArgName = DEFAULT_ARG_NAME;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,129,* Sets the 'width'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,131,* @param width the new value of 'width'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,133,public void setWidth(int width)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,135,this.defaultWidth = width;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,139,* Returns the 'width'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,141,* @return the 'width'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,143,public int getWidth()
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,145,return this.defaultWidth;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,149,* Sets the 'leftPadding'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,151,* @param padding the new value of 'leftPadding'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,153,public void setLeftPadding(int padding)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,155,this.defaultLeftPad = padding;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,159,* Returns the 'leftPadding'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,161,* @return the 'leftPadding'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,163,public int getLeftPadding()
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,165,return this.defaultLeftPad;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,169,* Sets the 'descPadding'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,171,* @param padding the new value of 'descPadding'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,173,public void setDescPadding(int padding)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,175,this.defaultDescPad = padding;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,179,* Returns the 'descPadding'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,181,* @return the 'descPadding'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,183,public int getDescPadding()
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,185,return this.defaultDescPad;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,189,* Sets the 'syntaxPrefix'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,191,* @param prefix the new value of 'syntaxPrefix'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,193,public void setSyntaxPrefix(String prefix)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,195,this.defaultSyntaxPrefix = prefix;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,199,* Returns the 'syntaxPrefix'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,201,* @return the 'syntaxPrefix'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,203,public String getSyntaxPrefix()
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,205,return this.defaultSyntaxPrefix;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,209,* Sets the 'newLine'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,211,* @param newline the new value of 'newLine'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,213,public void setNewLine(String newline)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,215,this.defaultNewLine = newline;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,219,* Returns the 'newLine'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,221,* @return the 'newLine'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,223,public String getNewLine()
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,225,return this.defaultNewLine;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,229,* Sets the 'optPrefix'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,231,* @param prefix the new value of 'optPrefix'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,233,public void setOptPrefix(String prefix)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,235,this.defaultOptPrefix = prefix;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,239,* Returns the 'optPrefix'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,241,* @return the 'optPrefix'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,243,public String getOptPrefix()
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,245,return this.defaultOptPrefix;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,249,* Sets the 'longOptPrefix'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,251,* @param prefix the new value of 'longOptPrefix'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,253,public void setLongOptPrefix(String prefix)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,255,this.defaultLongOptPrefix = prefix;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,259,* Returns the 'longOptPrefix'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,261,* @return the 'longOptPrefix'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,263,public String getLongOptPrefix()
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,265,return this.defaultLongOptPrefix;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,269,* Sets the 'argName'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,271,* @param name the new value of 'argName'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,273,public void setArgName(String name)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,275,this.defaultArgName = name;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,279,* Returns the 'argName'.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,281,* @return the 'argName'
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,283,public String getArgName()
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,285,return this.defaultArgName;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,289,// ------------------------------------------------------------------ Public
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,292,* <p>Print the help for <code>options</code> with the specified
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,293,* command line syntax.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,295,* @param cmdLineSyntax the syntax for this application
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,296,* @param options the Options instance
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,298,"public void printHelp(String cmdLineSyntax, Options options)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,300,"printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,304,* <p>Print the help for <code>options</code> with the specified
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,305,* command line syntax.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,307,* @param cmdLineSyntax the syntax for this application
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,308,* @param options the Options instance
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,309,* @param autoUsage whether to print an automatically generated
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,310,* usage statement
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,312,"public void printHelp(String cmdLineSyntax, Options options,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,313,boolean autoUsage)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,315,"printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,319,* <p>Print the help for <code>options</code> with the specified
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,320,* command line syntax.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,322,* @param cmdLineSyntax the syntax for this application
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,323,* @param header the banner to display at the begining of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,324,* @param options the Options instance
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,325,* @param footer the banner to display at the end of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,327,"public void printHelp(String cmdLineSyntax, String header, Options options,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,328,String footer)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,330,"printHelp(cmdLineSyntax, header, options, footer, false);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,334,* <p>Print the help for <code>options</code> with the specified
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,335,* command line syntax.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,337,* @param cmdLineSyntax the syntax for this application
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,338,* @param header the banner to display at the begining of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,339,* @param options the Options instance
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,340,* @param footer the banner to display at the end of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,341,* @param autoUsage whether to print an automatically generated
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,342,* usage statement
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,344,"public void printHelp(String cmdLineSyntax, String header, Options options,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,345,"String footer, boolean autoUsage)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,347,"printHelp(defaultWidth, cmdLineSyntax, header, options, footer,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,348,autoUsage);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,352,* <p>Print the help for <code>options</code> with the specified
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,353,* command line syntax.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,355,* @param width the number of characters to be displayed on each line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,356,* @param cmdLineSyntax the syntax for this application
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,357,* @param header the banner to display at the begining of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,358,* @param options the Options instance
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,359,* @param footer the banner to display at the end of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,361,"public void printHelp(int width, String cmdLineSyntax, String header,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,362,"Options options, String footer)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,364,"printHelp(width, cmdLineSyntax, header, options, footer, false);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,368,* <p>Print the help for <code>options</code> with the specified
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,369,* command line syntax.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,371,* @param width the number of characters to be displayed on each line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,372,* @param cmdLineSyntax the syntax for this application
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,373,* @param header the banner to display at the begining of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,374,* @param options the Options instance
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,375,* @param footer the banner to display at the end of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,376,* @param autoUsage whether to print an automatically generated
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,377,* usage statement
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,379,"public void printHelp(int width, String cmdLineSyntax, String header,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,380,"Options options, String footer, boolean autoUsage)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,382,PrintWriter pw = new PrintWriter(System.out);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,384,"printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,385,"defaultDescPad, footer, autoUsage);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,386,pw.flush();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,390,* <p>Print the help for <code>options</code> with the specified
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,391,* command line syntax.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,393,* @param pw the writer to which the help will be written
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,394,* @param width the number of characters to be displayed on each line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,395,* @param cmdLineSyntax the syntax for this application
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,396,* @param header the banner to display at the begining of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,397,* @param options the Options instance
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,398,* @param leftPad the number of characters of padding to be prefixed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,399,* to each line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,400,* @param descPad the number of characters of padding to be prefixed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,401,* to each description line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,402,* @param footer the banner to display at the end of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,404,"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,405,"String header, Options options, int leftPad,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,406,"int descPad, String footer)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,408,"printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,409,"footer, false);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,414,* <p>Print the help for <code>options</code> with the specified
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,415,* command line syntax.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,417,* @param pw the writer to which the help will be written
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,418,* @param width the number of characters to be displayed on each line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,419,* @param cmdLineSyntax the syntax for this application
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,420,* @param header the banner to display at the begining of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,421,* @param options the Options instance
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,422,* @param leftPad the number of characters of padding to be prefixed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,423,* to each line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,424,* @param descPad the number of characters of padding to be prefixed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,425,* to each description line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,426,* @param footer the banner to display at the end of the help
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,427,* @param autoUsage whether to print an automatically generated
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,428,* usage statement
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,430,"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,431,"String header, Options options, int leftPad,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,432,"int descPad, String footer, boolean autoUsage)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,434,if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,436,"throw new IllegalArgumentException(""cmdLineSyntax not provided"");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,439,if (autoUsage)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,441,"printUsage(pw, width, cmdLineSyntax, options);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,443,else
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,445,"printUsage(pw, width, cmdLineSyntax);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,448,if ((header != null) && (header.trim().length() > 0))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,450,"printWrapped(pw, width, header);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,453,"printOptions(pw, width, options, leftPad, descPad);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,455,if ((footer != null) && (footer.trim().length() > 0))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,457,"printWrapped(pw, width, footer);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,462,* <p>Prints the usage statement for the specified application.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,464,* @param pw The PrintWriter to print the usage statement
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,465,* @param width The number of characters to display per line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,466,* @param app The application name
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,467,* @param options The command line Options
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,470,"public void printUsage(PrintWriter pw, int width, String app,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,471,Options options)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,473,// initialise the string buffer
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,474,StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,475,".append("" "");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,477,// create a list for processed option groups
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,478,final Collection processedGroups = new ArrayList();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,480,// temp variable
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,481,Option option;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,483,// iterate over the options
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,484,for (Iterator i = options.getOptions().iterator(); i.hasNext();)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,486,// get the next Option
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,487,option = (Option) i.next();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,489,// check if the option is part of an OptionGroup
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,490,OptionGroup group = options.getOptionGroup(option);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,492,// if the option is part of a group
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,493,if (group != null)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,495,// and if the group has not already been processed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,496,if (!processedGroups.contains(group))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,498,// add the group to the processed list
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,499,processedGroups.add(group);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,502,// add the usage clause
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,503,"appendOptionGroup(buff, group);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,506,// otherwise the option was displayed in the group
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,507,// previously so ignore it.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,510,// if the Option is not part of an OptionGroup
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,511,else
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,513,"appendOption(buff, option, option.isRequired());"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,516,if (i.hasNext())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,518,"buff.append("" "");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,523,// call printWrapped
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,524,"printWrapped(pw, width, buff.toString().indexOf(' ') + 1,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,525,buff.toString());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,529,* Appends the usage clause for an OptionGroup to a StringBuffer.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,530,* The clause is wrapped in square brackets if the group is required.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,531,* The display of the options is handled by appendOption
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,532,* @param buff the StringBuffer to append to
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,533,* @param group the group to append
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,534,"* @see #appendOption(StringBuffer,Option,boolean)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,536,"private static void appendOptionGroup(final StringBuffer buff,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,537,final OptionGroup group)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,539,if (!group.isRequired())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,541,"buff.append(""["");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,544,// for each option in the OptionGroup
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,545,for (Iterator i = group.getOptions().iterator(); i.hasNext();)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,547,// whether the option is required or not is handled at group level
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,548,"appendOption(buff, (Option) i.next(), true);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,550,if (i.hasNext())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,552,"buff.append("" | "");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,556,if (!group.isRequired())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,558,"buff.append(""]"");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,563,* Appends the usage clause for an Option to a StringBuffer.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,565,* @param buff the StringBuffer to append to
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,566,* @param option the Option to append
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,567,* @param required whether the Option is required or not
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,569,"private static void appendOption(final StringBuffer buff,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,570,"final Option option,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,571,final boolean required)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,573,if (!required)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,575,"buff.append(""["");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,578,if (option.getOpt() != null)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,580,"buff.append(""-"").append(option.getOpt());"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,582,else
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,584,"buff.append(""--"").append(option.getLongOpt());"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,587,// if the Option has a value
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,588,if (option.hasArg() && (option.getArgName() != null))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,590,"buff.append("" <"").append(option.getArgName()).append("">"");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,593,// if the Option is not a required option
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,594,if (!required)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,596,"buff.append(""]"");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,601,"* <p>Print the cmdLineSyntax to the specified writer, using the"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,602,* specified width.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,604,* @param pw The printWriter to write the help to
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,605,* @param width The number of characters per line for the usage statement.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,606,* @param cmdLineSyntax The usage statement.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,608,"public void printUsage(PrintWriter pw, int width, String cmdLineSyntax)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,610,int argPos = cmdLineSyntax.indexOf(' ') + 1;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,612,"printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,613,defaultSyntaxPrefix + cmdLineSyntax);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,617,"* <p>Print the help for the specified Options to the specified writer,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,618,"* using the specified width, left padding and description padding.</p>"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,620,* @param pw The printWriter to write the help to
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,621,* @param width The number of characters to display per line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,622,* @param options The command line Options
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,623,* @param leftPad the number of characters of padding to be prefixed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,624,* to each line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,625,* @param descPad the number of characters of padding to be prefixed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,626,* to each description line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,628,"public void printOptions(PrintWriter pw, int width, Options options,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,629,"int leftPad, int descPad)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,631,StringBuffer sb = new StringBuffer();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,633,"renderOptions(sb, width, options, leftPad, descPad);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,634,pw.println(sb.toString());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,638,* <p>Print the specified text to the specified PrintWriter.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,640,* @param pw The printWriter to write the help to
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,641,* @param width The number of characters to display per line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,642,* @param text The text to be written to the PrintWriter
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,644,"public void printWrapped(PrintWriter pw, int width, String text)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,646,"printWrapped(pw, width, 0, text);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,650,* <p>Print the specified text to the specified PrintWriter.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,652,* @param pw The printWriter to write the help to
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,653,* @param width The number of characters to display per line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,654,* @param nextLineTabStop The position on the next line for the first tab.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,655,* @param text The text to be written to the PrintWriter
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,657,"public void printWrapped(PrintWriter pw, int width, int nextLineTabStop,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,658,String text)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,660,StringBuffer sb = new StringBuffer(text.length());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,662,"renderWrappedText(sb, width, nextLineTabStop, text);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,663,pw.println(sb.toString());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,666,// --------------------------------------------------------------- Protected
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,669,* <p>Render the specified Options and return the rendered Options
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,670,* in a StringBuffer.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,672,* @param sb The StringBuffer to place the rendered Options into.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,673,* @param width The number of characters to display per line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,674,* @param options The command line Options
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,675,* @param leftPad the number of characters of padding to be prefixed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,676,* to each line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,677,* @param descPad the number of characters of padding to be prefixed
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,678,* to each description line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,680,* @return the StringBuffer with the rendered Options contents.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,682,"protected StringBuffer renderOptions(StringBuffer sb, int width,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,683,"Options options, int leftPad,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,684,int descPad)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,686,final String lpad = createPadding(leftPad);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,687,final String dpad = createPadding(descPad);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,689,"// first create list containing only <lpad>-a,--aaa where"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,690,// -a is opt and --aaa is long opt; in parallel look for
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,691,// the longest opt string this list will be then used to
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,692,// sort options ascending
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,693,int max = 0;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,694,StringBuffer optBuf;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,695,List prefixList = new ArrayList();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,696,Option option;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,697,List optList = options.helpOptions();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,699,"Collections.sort(optList, new StringBufferComparator());"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,701,for (Iterator i = optList.iterator(); i.hasNext();)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,703,option = (Option) i.next();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,704,optBuf = new StringBuffer(8);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,706,if (option.getOpt() == null)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,708,"optBuf.append(lpad).append(""   "" + defaultLongOptPrefix)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,709,.append(option.getLongOpt());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,711,else
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,713,optBuf.append(lpad).append(defaultOptPrefix)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,714,.append(option.getOpt());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,716,if (option.hasLongOpt())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,718,"optBuf.append(',').append(defaultLongOptPrefix)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,719,.append(option.getLongOpt());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,723,if (option.hasArg())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,725,if (option.hasArgName())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,727,"optBuf.append("" <"").append(option.getArgName()).append("">"");"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,729,else
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,731,optBuf.append(' ');
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,735,prefixList.add(optBuf);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,736,max = (optBuf.length() > max)       ? optBuf.length() : max;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,739,int x = 0;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,741,for (Iterator i = optList.iterator(); i.hasNext();)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,743,option = (Option) i.next();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,744,optBuf = new StringBuffer(prefixList.get(x++).toString());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,746,if (optBuf.length() < max)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,748,optBuf.append(createPadding(max - optBuf.length()));
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,751,optBuf.append(dpad);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,753,int nextLineTabStop = max + descPad;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,755,if (option.getDescription() != null)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,757,optBuf.append(option.getDescription());
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,760,"renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,762,if (i.hasNext())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,764,sb.append(defaultNewLine);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,768,return sb;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,772,* <p>Render the specified text and return the rendered Options
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,773,* in a StringBuffer.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,775,* @param sb The StringBuffer to place the rendered text into.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,776,* @param width The number of characters to display per line
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,777,* @param nextLineTabStop The position on the next line for the first tab.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,778,* @param text The text to be rendered.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,780,* @return the StringBuffer with the rendered Options contents.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,782,"protected StringBuffer renderWrappedText(StringBuffer sb, int width,"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,783,"int nextLineTabStop, String text)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,785,"int pos = findWrapPos(text, width, 0);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,787,if (pos == -1)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,789,sb.append(rtrim(text));
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,469,"b.append(rtrim(text.substring(0, pos))).append(defaultNewLine);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,475, Finds the next text wrap position after <code>startPos</code> for the text
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,476, in <code>sb</code> with the column width <code>width</code>.
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,477, The wrap point is the last postion before startPos+width having a whitespace
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,478," character (space, \n, \r)."
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,480, @param sb text to be analyzed
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,481, @param width width of the wrapped text
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,482, @param startPos position from which to start the lookup whitespace character
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,483, @return postion on which the text must be wrapped or -1 if the wrap position is at the end
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,484,         of the text
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,486,"rotected int findWrapPos( String text, int width, int startPos )"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,488,nt pos = -1;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,489,/ the line ends before the max wrap pos or a new line char found
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,490,"f ( ((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)  ||"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,491,"(pos = text.indexOf('\t', startPos)) != -1 && pos <= width) )"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,493,eturn pos;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,495,lse if ( (startPos + width) >= text.length() )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,497,eturn -1;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,500,/look for the last whitespace character before startPos+width
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,501,os = startPos + width;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,502,har c;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,503,hile ( pos >= startPos && (c = text.charAt(pos)) != ' ' && c != '\n' && c != '\r' )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,505,-pos;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,507,/if we found it - just return
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,508,f ( pos > startPos )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,510,eturn pos;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,512,lse
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,514,/must look for the first whitespace chearacter after startPos + width
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,515,os = startPos + width;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,516,hile ( pos <= text.length() && (c = text.charAt(pos)) != ' ' && c != '\n' && c != '\r' )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,518,+pos;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,520,eturn pos == text.length() ? -1 : pos;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,524,rotected String createPadding(int len)
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,526,tringBuffer sb = new StringBuffer(len);
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,527,or ( int i = 0; i < len; ++i )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,529,b.append(' ');
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,531,eturn sb.toString();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,534,rotected String rtrim( String s )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,536,f ( s == null || s.length() == 0 )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,538,eturn s;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,541,nt pos = s.length();
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,542,hile ( pos >= 0 && Character.isWhitespace(s.charAt(pos-1)) )
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,544,-pos;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,546,"eturn s.substring(0, pos);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,549,/ ------------------------------------------------------- Package protected
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,551,/ ----------------------------------------------------------------- Private
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,553,/ ----------------------------------------------------------- Inner classes
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,793,else
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,795,"sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,555,rivate static class StringBufferComparator
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,556,mplements Comparator
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,798,// all following lines must be padded with nextLineTabStop space
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,799,// characters
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,800,final String padding = createPadding(nextLineTabStop);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,802,while (true)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,804,text = padding + text.substring(pos).trim();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,805,"pos = findWrapPos(text, width, nextLineTabStop);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,807,if (pos == -1)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,809,sb.append(text);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,811,return sb;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,814,"sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,819,* Finds the next text wrap position after <code>startPos</code> for the
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,820,* text in <code>text</code> with the column width <code>width</code>.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,821,* The wrap point is the last postion before startPos+width having a
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,822,"* whitespace character (space, \n, \r)."
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,824,* @param text The text being searched for the wrap position
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,825,* @param width width of the wrapped text
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,826,* @param startPos position from which to start the lookup whitespace
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,827,* character
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,828,* @return postion on which the text must be wrapped or -1 if the wrap
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,829,* position is at the end of the text
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,831,"protected int findWrapPos(String text, int width, int startPos)"
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,558,"ublic int compare( Object o1, Object o2 )"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,833,int pos = -1;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,835,// the line ends before the max wrap pos or a new line char found
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,836,"if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,837,"|| ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width))"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,839,return pos;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,841,else if ((startPos + width) >= text.length())
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,843,return -1;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,847,// look for the last whitespace character before startPos+width
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,848,pos = startPos + width;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,850,char c;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,852,while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ')
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,853,&& (c != '\n') && (c != '\r'))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,855,--pos;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,858,// if we found it - just return
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,859,if (pos > startPos)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,861,return pos;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,863,else
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,865,// must look for the first whitespace chearacter after startPos
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,866,// + width
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,867,pos = startPos + width;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,869,while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ')
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,870,&& (c != '\n') && (c != '\r'))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,872,++pos;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,875,return (pos == text.length())        ? (-1) : pos;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,880,* <p>Return a String of padding of length <code>len</code>.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,882,* @param len The length of the String of padding to create.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,884,* @return The String of padding
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,886,protected String createPadding(int len)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,888,StringBuffer sb = new StringBuffer(len);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,890,for (int i = 0; i < len; ++i)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,892,sb.append(' ');
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,895,return sb.toString();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,899,* <p>Remove the trailing whitespace from the specified String.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,901,* @param s The String to remove the trailing padding from.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,903,* @return The String of without the trailing padding
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,905,protected String rtrim(String s)
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,907,if ((s == null) || (s.length() == 0))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,909,return s;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,912,int pos = s.length();
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,914,while ((pos >= 0) && Character.isWhitespace(s.charAt(pos - 1)))
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,916,--pos;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,919,"return s.substring(0, pos);"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,922,// ------------------------------------------------------ Package protected
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,923,// ---------------------------------------------------------------- Private
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,924,// ---------------------------------------------------------- Inner classes
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,926,* <p>This class implements the <code>Comparator</code> interface
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,927,* for comparing StringBuffers.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,929,private static class StringBufferComparator
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,930,implements Comparator {
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,933,* <p>Compares its two arguments for order. Returns a negative
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,934,"* integer, zero, or a positive integer as the first argument"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,935,"* is less than, equal to, or greater than the second.</p>"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,937,* @param o1 The first StringBuffer to be compared.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,938,* @param o2 The second StringBuffer to be compared.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,940,"* @return a negative integer, zero, or a positive integer as"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,941,"* the first argument is less than, equal to, or greater than the"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,942,* second.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,944,"public int compare(Object o1, Object o2)"
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,953,* <p>Removes any leading hyphens from <code>strOption</code>.</p>
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,955,* @param strOption The String from which to strip the leading
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,956,* hyphens.
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,958,* @return The String without any leading hyphens.
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,571,StartIndex = 0;
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,967,iStartIndex = 0;
False,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,573,eturn strOption.substring(iStartIndex);
True,src/java/org/apache/commons/cli/HelpFormatter.java,src/java/org/apache/commons/cli/HelpFormatter.java,970,return strOption.substring(iStartIndex);
False,src/java/org/apache/commons/cli/MissingArgumentException.java,src/java/org/apache/commons/cli/MissingArgumentException.java,71,ublic class MissingArgumentException extends ParseException {
True,src/java/org/apache/commons/cli/MissingArgumentException.java,src/java/org/apache/commons/cli/MissingArgumentException.java,70,public class MissingArgumentException
True,src/java/org/apache/commons/cli/MissingArgumentException.java,src/java/org/apache/commons/cli/MissingArgumentException.java,71,extends ParseException {
False,src/java/org/apache/commons/cli/MissingArgumentException.java,src/java/org/apache/commons/cli/MissingArgumentException.java,79,ublic MissingArgumentException( String message ) {
False,src/java/org/apache/commons/cli/MissingArgumentException.java,src/java/org/apache/commons/cli/MissingArgumentException.java,80,uper( message );
True,src/java/org/apache/commons/cli/MissingArgumentException.java,src/java/org/apache/commons/cli/MissingArgumentException.java,79,public MissingArgumentException(String message)
True,src/java/org/apache/commons/cli/MissingArgumentException.java,src/java/org/apache/commons/cli/MissingArgumentException.java,81,super(message);
False,src/java/org/apache/commons/cli/MissingOptionException.java,src/java/org/apache/commons/cli/MissingOptionException.java,70,ublic class MissingOptionException extends ParseException {
True,src/java/org/apache/commons/cli/MissingOptionException.java,src/java/org/apache/commons/cli/MissingOptionException.java,69,public class MissingOptionException
True,src/java/org/apache/commons/cli/MissingOptionException.java,src/java/org/apache/commons/cli/MissingOptionException.java,70,extends ParseException {
False,src/java/org/apache/commons/cli/MissingOptionException.java,src/java/org/apache/commons/cli/MissingOptionException.java,78,ublic MissingOptionException( String message ) {
False,src/java/org/apache/commons/cli/MissingOptionException.java,src/java/org/apache/commons/cli/MissingOptionException.java,79,uper( message );
True,src/java/org/apache/commons/cli/MissingOptionException.java,src/java/org/apache/commons/cli/MissingOptionException.java,78,public MissingOptionException(String message)
True,src/java/org/apache/commons/cli/MissingOptionException.java,src/java/org/apache/commons/cli/MissingOptionException.java,80,super(message);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,82,** constant that specifies the number of argument values has not been specified */
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,83,ublic final static int UNINITIALIZED = -1;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,82,/** constant that specifies the number of argument values has
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,83,not been specified */
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,84,public static final int UNINITIALIZED = -1;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,86,ublic final static int UNLIMITED_VALUES = -2;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,87,public static final int UNLIMITED_VALUES = -2;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,113,rivate int numberOfArgs = UNINITIALIZED;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,114,private int numberOfArgs = UNINITIALIZED;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,128, @param hasArg specifies whether the Option takes an argument or not
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,131,* @throws IllegalArgumentException if there are any non valid
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,132,* Option characters in <code>opt</code>.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,131,"ublic Option( String opt, String description )"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,132,hrows IllegalArgumentException
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,134,"public Option(String opt, String description)"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,135,throws IllegalArgumentException
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,134,"his( opt, null, false, description );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,137,"this(opt, null, false, description);"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,147,* @throws IllegalArgumentException if there are any non valid
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,148,* Option characters in <code>opt</code>.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,144,"ublic Option( String opt, boolean hasArg, String description )"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,145,hrows IllegalArgumentException
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,150,"public Option(String opt, boolean hasArg, String description)"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,151,throws IllegalArgumentException
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,147,"his( opt, null, hasArg, description );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,153,"this(opt, null, hasArg, description);"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,164,* @throws IllegalArgumentException if there are any non valid
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,165,* Option characters in <code>opt</code>.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,158,"ublic Option( String opt, String longOpt, boolean hasArg, String description )"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,159,hrows IllegalArgumentException
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,167,"public Option(String opt, String longOpt, boolean hasArg,"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,168,String description)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,169,throws IllegalArgumentException
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,162,ptionValidator.validateOption( opt );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,172,OptionValidator.validateOption(opt);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,164,his.opt          = opt;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,165,his.longOpt      = longOpt;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,174,this.opt = opt;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,175,this.longOpt = longOpt;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,168,f( hasArg ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,178,if (hasArg)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,172,his.hasArg       = hasArg;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,173,his.description  = description;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,183,this.hasArg = hasArg;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,184,this.description = description;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,183,ublic int getId( ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,184,eturn getKey().charAt( 0 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,194,public int getId()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,196,return getKey().charAt(0);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,192,tring getKey() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,204,String getKey()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,194,f( opt == null ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,207,if (opt == null)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,209,ublic String getOpt() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,224,public String getOpt()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,218,ublic Object getType() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,234,public Object getType()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,227,ublic void setType( Object type ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,244,public void setType(Object type)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,236,ublic String getLongOpt() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,254,public String getLongOpt()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,245,ublic void setLongOpt( String longOpt ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,264,public void setLongOpt(String longOpt)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,255,ublic void setOptionalArg( boolean optionalArg ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,275,public void setOptionalArg(boolean optionalArg)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,262,ublic boolean hasOptionalArg( ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,283,public boolean hasOptionalArg()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,270,ublic boolean hasLongOpt() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,271,eturn ( this.longOpt != null );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,292,public boolean hasLongOpt()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,294,return (this.longOpt != null);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,278,ublic boolean hasArg() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,279,eturn this.numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,301,public boolean hasArg()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,303,return (this.numberOfArgs > 0) || (numberOfArgs == UNLIMITED_VALUES);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,286,ublic String getDescription() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,310,public String getDescription()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,295,ublic boolean isRequired() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,320,public boolean isRequired()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,304,ublic void setRequired( boolean required ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,330,public void setRequired(boolean required)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,313,ublic void setArgName( String argName ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,340,public void setArgName(String argName)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,322,ublic String getArgName() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,350,public String getArgName()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,333,ublic boolean hasArgName() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,334,eturn (this.argName != null && this.argName.length() > 0 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,362,public boolean hasArgName()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,364,return (this.argName != null && this.argName.length() > 0);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,342,ublic boolean hasArgs() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,343,eturn this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,372,public boolean hasArgs()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,374,return (this.numberOfArgs > 1)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,375,|| (this.numberOfArgs == UNLIMITED_VALUES);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,351,ublic void setArgs( int num ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,383,public void setArgs(int num)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,361,ublic void setValueSeparator( char sep ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,394,public void setValueSeparator(char sep)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,370,ublic char getValueSeparator() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,404,public char getValueSeparator()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,410,* <p>Return whether this Option has specified a value separator.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,412,* @return whether this Option has specified a value separator.</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,377,ublic boolean hasValueSeparator() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,378,eturn ( this.valuesep > 0 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,414,public boolean hasValueSeparator()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,416,return (this.valuesep > 0);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,386,ublic int getArgs( ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,424,public int getArgs()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,395,oid addValue( String value )
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,434,void addValue(String value)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,397,witch( numberOfArgs ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,398,ase UNINITIALIZED:
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,399,"hrow new RuntimeException( ""Cannot add value, no arguments allowed."" );"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,400,efault:
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,401,rocessValue( value );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,436,switch (numberOfArgs)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,438,case UNINITIALIZED:
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,439,"throw new RuntimeException(""NO_ARGS_ALLOWED"");"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,441,default:
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,442,processValue(value);
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,453,* @param value The String to be processed.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,414,rivate void processValue( String value ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,457,private void processValue(String value)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,417,f( hasValueSeparator() ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,460,if (hasValueSeparator())
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,423,nt index = value.indexOf( sep );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,466,int index = value.indexOf(sep);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,426,hile( index != -1 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,469,while (index != -1)
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,429,f( values.size() == numberOfArgs-1 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,472,if (values.size() == (numberOfArgs - 1))
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,434,"dd( value.substring( 0, index ) );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,479,"add(value.substring(0, index));"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,437,alue = value.substring( index+1 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,483,value = value.substring(index + 1);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,440,ndex = value.indexOf( sep );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,487,index = value.indexOf(sep);
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,445,dd( value );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,493,add(value);
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,502,* @param value The value to be added to this Option
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,456,rivate void add( String value ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,457,f( numberOfArgs > 0 && values.size() > numberOfArgs-1 ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,458,"hrow new RuntimeException( ""Cannot add value, list full."" );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,506,private void add(String value)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,508,if ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1)))
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,510,"throw new RuntimeException(""Cannot add value, list full."");"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,461,his.values.add( value );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,515,this.values.add(value);
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,519,* Returns the specified value of this Option or
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,520,* <code>null</code> if there is no value.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,466, <code>null</code> if there are no values.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,523,* <code>null</code> if there is no value.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,468,ublic String getValue() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,469,eturn this.values.size()==0 ? null : (String)this.values.get( 0 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,525,public String getValue()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,527,return hasNoValues() ? null : (String) this.values.get(0);
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,531,* Returns the specified value of this Option or
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,532,* <code>null</code> if there is no value.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,534,* @param index The index of the value to be returned.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,474, <code>null</code> if there are no values.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,537,* <code>null</code> if there is no value.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,539,* @throws IndexOutOfBoundsException if index is less than 1
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,540,* or greater than the number of the values for this Option.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,476,ublic String getValue( int index )
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,477,hrows IndexOutOfBoundsException
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,542,public String getValue(int index)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,543,throws IndexOutOfBoundsException
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,479,eturn ( this.values.size()==0 ) ? null : (String)this.values.get( index );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,545,return hasNoValues() ? null : (String) this.values.get(index);
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,549,* Returns the value/first value of this Option or the
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,550,* <code>defaultValue</code> if there is no value.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,552,* @param defaultValue The value to be returned if ther
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,553,* is no value.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,486,ublic String getValue( String defaultValue ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,487,tring value = getValue( );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,488,eturn ( value != null ) ? value : defaultValue;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,558,public String getValue(String defaultValue)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,560,String value = getValue();
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,562,return (value != null) ? value : defaultValue;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,566,* Return the values of this Option as a String array
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,567,* or null if there are no values
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,495,ublic String[] getValues() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,496,eturn this.values.size()==0 ? null : (String[])this.values.toArray(new String[]{});
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,572,public String[] getValues()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,574,return hasNoValues()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,575,? null : (String[]) this.values.toArray(new String[] {  });
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,503,ublic java.util.List getValuesList() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,582,public java.util.List getValuesList()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,510,ublic Object clone() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,511,"ption option = new Option( getOpt(), getDescription() );"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,512,ption.setArgs( getArgs() );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,513,ption.setOptionalArg( hasOptionalArg() );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,514,ption.setRequired( isRequired() );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,515,ption.setLongOpt( getLongOpt() );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,516,ption.setType( getType() );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,517,ption.setValueSeparator( getValueSeparator() );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,590,public Object clone()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,592,"Option option = new Option(getOpt(), getDescription());"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,594,option.setArgs(getArgs());
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,595,option.setOptionalArg(hasOptionalArg());
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,596,option.setRequired(isRequired());
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,597,option.setLongOpt(getLongOpt());
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,598,option.setType(getType());
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,599,option.setValueSeparator(getValueSeparator());
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,526,ublic String toString() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,609,public String toString()
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,529,uf.append( this.opt );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,531,f ( this.longOpt != null ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,532,"uf.append("" "")"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,533,append(this.longOpt);
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,613,buf.append(this.opt);
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,615,if (this.longOpt != null)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,617,"buf.append("" "").append(this.longOpt);"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,538,f ( hasArg ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,539,"uf.append( ""+ARG"" );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,622,if (hasArg)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,624,"buf.append(""+ARG"");"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,542,"uf.append("" :: "")"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,543,append( this.description );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,545,f ( this.type != null ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,546,"uf.append("" :: "")"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,547,append( this.type );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,627,"buf.append("" :: "").append(this.description);"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,629,if (this.type != null)
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,631,"buf.append("" :: "").append(this.type);"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,640,* Returns whether this Option has any values.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,642,* @return whether this Option has any values.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,644,private boolean hasNoValues()
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,646,return this.values.size() == 0;
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.14 2002/11/19 22:54:48 jkeyes Exp $"
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,3, $Revision: 1.14 $
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,4, $Date: 2002/11/19 22:54:48 $
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.15 2002/12/09 23:47:24 jkeyes Exp $"
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,3,* $Revision: 1.15 $
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,4,* $Date: 2002/12/09 23:47:24 $
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,68," <a href=""http://c2.com/cgi-bin/wiki?BuilderPattern"">http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>"
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,67,"* <a href=""http://c2.com/cgi-bin/wiki?BuilderPattern"">"
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,68,* http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,70, @author John Keyes ( john at integralsource.com )
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,70,* @author John Keyes (john at integralsource.com)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,95,/ private constructor
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,96,rivate OptionBuilder() {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,103,* private constructor to prevent instances being created
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,105,private OptionBuilder()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,102,rivate static void reset() {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,112,private static void reset()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,121,ublic static OptionBuilder withLongOpt( String longopt ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,133,public static OptionBuilder withLongOpt(String longopt)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,131,ublic static OptionBuilder hasArg( ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,145,public static OptionBuilder hasArg()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,143,ublic static OptionBuilder hasArg( boolean hasArg ) {
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,144,nstance.numberOfArgs = ( hasArg == true ) ? 1 : Option.UNINITIALIZED;
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,159,public static OptionBuilder hasArg(boolean hasArg)
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,161,instance.numberOfArgs = (hasArg == true) ? 1 : Option.UNINITIALIZED;
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,155,ublic static OptionBuilder withArgName( String name ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,173,public static OptionBuilder withArgName(String name)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,165,ublic static OptionBuilder isRequired( ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,185,public static OptionBuilder isRequired()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,176, Option opt = OptionBuilder.withValueSeparator( ':' )
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,177,                           .create( 'D' );
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,198,* Option opt = OptionBuilder.withValueSeparator(':')
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,199,*                           .create('D');
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,179, CommandLine line = parser.parse( args );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,180, String propertyName = opt.getValue( 0 );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,181, String propertyValue = opt.getValue( 1 );
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,201,* CommandLine line = parser.parse(args);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,202,* String propertyName = opt.getValue(0);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,203,* String propertyValue = opt.getValue(1);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,206,* @param sep The value separator to be used for the argument values.
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,186,ublic static OptionBuilder withValueSeparator( char sep ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,210,public static OptionBuilder withValueSeparator(char sep)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,197, Option opt = OptionBuilder.withValueSeparator( )
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,198,                           .create( 'D' );
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,223,* Option opt = OptionBuilder.withValueSeparator()
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,224,*                           .create('D');
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,200, CommandLine line = parser.parse( args );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,201, String propertyName = opt.getValue( 0 );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,202, String propertyValue = opt.getValue( 1 );
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,226,* CommandLine line = parser.parse(args);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,227,* String propertyName = opt.getValue(0);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,228,* String propertyValue = opt.getValue(1);
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,207,ublic static OptionBuilder withValueSeparator( ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,233,public static OptionBuilder withValueSeparator()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,219,ublic static OptionBuilder isRequired( boolean required ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,247,public static OptionBuilder isRequired(boolean required)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,229,ublic static OptionBuilder hasArgs( ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,259,public static OptionBuilder hasArgs()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,241,ublic static OptionBuilder hasArgs( int num ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,273,public static OptionBuilder hasArgs(int num)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,251,ublic static OptionBuilder hasOptionalArg( ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,285,public static OptionBuilder hasOptionalArg()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,263,ublic static OptionBuilder hasOptionalArgs( ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,299,public static OptionBuilder hasOptionalArgs()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,277,ublic static OptionBuilder hasOptionalArgs( int numArgs ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,315,public static OptionBuilder hasOptionalArgs(int numArgs)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,290,ublic static OptionBuilder withType( Object type ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,330,public static OptionBuilder withType(Object type)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,301,ublic static OptionBuilder withDescription( String description ) {
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,343,public static OptionBuilder withDescription(String description)
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,315,ublic static Option create( char opt )
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,316,hrows IllegalArgumentException
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,359,public static Option create(char opt)
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,360,throws IllegalArgumentException
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,318,eturn create( String.valueOf( opt ) );
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,362,return create(String.valueOf(opt));
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,328,ublic static Option create()
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,329,hrows IllegalArgumentException
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,372,public static Option create()
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,373,throws IllegalArgumentException
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,331,f( longopt == null ) {
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,332,"hrow new IllegalArgumentException( ""must specify longopt"" );"
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,375,if (longopt == null)
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,377,"throw new IllegalArgumentException(""must specify longopt"");"
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,335,eturn create( null );
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,380,return create(null);
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,348,ublic static Option create( String opt )
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,349,hrows IllegalArgumentException
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,393,public static Option create(String opt)
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,394,throws IllegalArgumentException
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,352,"ption option = new Option( opt, description );"
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,397,"Option option = new Option(opt, description);"
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,355,ption.setLongOpt( longopt );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,356,ption.setRequired( required );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,357,ption.setOptionalArg( optionalArg );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,358,ption.setArgs( numberOfArgs );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,359,ption.setType( type );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,360,ption.setValueSeparator( valuesep );
False,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,361,ption.setArgName( argName );
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,401,option.setLongOpt(longopt);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,402,option.setRequired(required);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,403,option.setOptionalArg(optionalArg);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,404,option.setArgs(numberOfArgs);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,405,option.setType(type);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,406,option.setValueSeparator(valuesep);
True,src/java/org/apache/commons/cli/OptionBuilder.java,src/java/org/apache/commons/cli/OptionBuilder.java,407,option.setArgName(argName);
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,90,ublic OptionGroup addOption(Option opt) {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,89,public OptionGroup addOption(Option opt)
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,93,"ptionMap.put( opt.getKey(), opt );"
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,93,"optionMap.put(opt.getKey(), opt);"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,101,ublic Collection getNames() {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,102,public Collection getNames()
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,109,ublic Collection getOptions() {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,111,public Collection getOptions()
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,120,ublic void setSelected(Option opt) throws AlreadySelectedException {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,123,public void setSelected(Option opt)
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,124,throws AlreadySelectedException
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,125,f ( this.selected == null || this.selected.equals( opt.getOpt() ) ) {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,129,if ((this.selected == null) || this.selected.equals(opt.getOpt()))
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,128,lse {
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,129,"hrow new AlreadySelectedException( ""an option from this group has "" +"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,130,"already been selected: '"" +"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,131,"elected + ""'"");"
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,133,else
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,135,"throw new AlreadySelectedException(""an option from this group has """
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,136,"+ ""already been selected: '"""
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,137,"+ selected + ""'"");"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,138,ublic String getSelected() {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,144,public String getSelected()
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,145,ublic void setRequired( boolean required ) {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,152,public void setRequired(boolean required)
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,152, @returns whether this option group is required
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,160,* @return whether this option group is required
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,154,ublic boolean isRequired() {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,162,public boolean isRequired()
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,162,ublic String toString() {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,171,public String toString()
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,167,"uff.append( ""["" );"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,168,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,169,ption option = (Option)iter.next();
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,177,"buff.append(""["");"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,171,f( option.getOpt() != null ) {
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,172,"uff.append( ""-"" );"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,173,uff.append( option.getOpt() );
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,179,while (iter.hasNext())
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,181,Option option = (Option) iter.next();
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,183,if (option.getOpt() != null)
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,185,"buff.append(""-"");"
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,186,buff.append(option.getOpt());
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,175,lse {
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,176,"uff.append( ""--"" );"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,177,uff.append( option.getLongOpt() );
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,188,else
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,190,"buff.append(""--"");"
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,191,buff.append(option.getLongOpt());
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,179,"uff.append( "" "" );"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,180,uff.append( option.getDescription( ) );
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,182,f( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,183,"uff.append( "", "" );"
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,194,"buff.append("" "");"
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,195,buff.append(option.getDescription());
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,197,if (iter.hasNext())
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,199,"buff.append("", "");"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,186,"uff.append( ""]"" );"
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,203,"buff.append(""]"");"
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionValidator.java,v 1.1 2002/11/18 08:41:26 jkeyes Exp $"
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,3, $Revision: 1.1 $
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,4, $Date: 2002/11/18 08:41:26 $
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionValidator.java,v 1.2 2002/12/09 23:47:25 jkeyes Exp $"
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,3,* $Revision: 1.2 $
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,4,* $Date: 2002/12/09 23:47:25 $
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,85,tatic void validateOption( String opt )
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,86,hrows IllegalArgumentException
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,85,static void validateOption(String opt)
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,86,throws IllegalArgumentException
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,89,f( opt == null ) {
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,89,if (opt == null)
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,93,lse if( opt.length() == 1 ) {
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,94,har ch = opt.charAt( 0 );
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,95,f ( !isValidOpt( ch ) ) {
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,96,"hrow new IllegalArgumentException( ""illegal option value '"""
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,97," ch + ""'"" );"
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,95,else if (opt.length() == 1)
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,97,char ch = opt.charAt(0);
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,99,if (!isValidOpt(ch))
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,101,"throw new IllegalArgumentException(""illegal option value '"" + ch"
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,101,lse {
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,107,else
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,103,or( int i = 0; i < chars.length; i++ ) {
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,104,f( !isValidChar( chars[i] ) ) {
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,105,"hrow new IllegalArgumentException( ""opt contains illegal character value '"" + chars[i] + ""'"" );"
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,111,for (int i = 0; i < chars.length; i++)
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,113,if (!isValidChar(chars[i]))
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,115,throw new IllegalArgumentException(
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,116,"""opt contains illegal character value '"" + chars[i]"
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,115," @return true if <code>c</code> is a letter, ' ', '?' or '@', otherwise false."
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,127,"* @return true if <code>c</code> is a letter, ' ', '?' or '@',"
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,128,* otherwise false.
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,117,rivate static boolean isValidOpt( char c ) {
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,118,eturn ( isValidChar( c ) || c == ' ' || c == '?' || c == '@' );
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,130,private static boolean isValidOpt(char c)
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,132,return (isValidChar(c) || (c == ' ') || (c == '?') || c == '@');
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,127,rivate static boolean isValidChar( char c ) {
False,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,128,eturn Character.isJavaIdentifierPart( c );
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,141,private static boolean isValidChar(char c)
True,src/java/org/apache/commons/cli/OptionValidator.java,src/java/org/apache/commons/cli/OptionValidator.java,143,return Character.isJavaIdentifierPart(c);
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,71,mport java.util.*;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,91,rivate Map  shortOpts    = new HashMap();
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,89,private Map shortOpts = new HashMap();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,94,rivate Map  longOpts     = new HashMap();
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,92,private Map longOpts = new HashMap();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,100,rivate Map optionGroups  = new HashMap();
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,98,private Map optionGroups = new HashMap();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,104,ublic Options() {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,102,public Options()
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,113,ublic Options addOptionGroup( OptionGroup group ) {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,112,public Options addOptionGroup(OptionGroup group)
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,116,f( group.isRequired() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,117,equiredOpts.add( group );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,116,if (group.isRequired())
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,118,requiredOpts.add(group);
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,120,hile( options.hasNext() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,121,ption option = (Option)options.next();
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,121,while (options.hasNext())
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,123,Option option = (Option) options.next();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,125,ption.setRequired( false );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,126,ddOption( option );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,129,option.setRequired(false);
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,130,addOption(option);
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,128,"ptionGroups.put( option.getKey(), group );"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,132,"optionGroups.put(option.getKey(), group);"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,142,"ublic Options addOption(String opt, boolean hasArg, String description) {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,143,"ddOption( opt, null, hasArg, description );"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,146,"public Options addOption(String opt, boolean hasArg, String description)"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,148,"addOption(opt, null, hasArg, description);"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,156,"ublic Options addOption(String opt, String longOpt, boolean hasArg, String description) {"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,157,"ddOption( new Option( opt, longOpt, hasArg, description ) );"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,162,"public Options addOption(String opt, String longOpt, boolean hasArg,"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,163,String description)
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,165,"addOption(new Option(opt, longOpt, hasArg, description));"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,167,ublic Options addOption(Option opt)  {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,176,public Options addOption(Option opt)
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,170,/ add it to the long option list
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,171,f ( opt.hasLongOpt() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,172,"ongOpts.put( opt.getLongOpt(), opt );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,175,/ if the option is required add it to the required list
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,176,f ( opt.isRequired() && !requiredOpts.contains( key ) ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,177,equiredOpts.add( key );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,179,"hortOpts.put( key, opt );"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,180,// add it to the long option list
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,181,if (opt.hasLongOpt())
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,183,"longOpts.put(opt.getLongOpt(), opt);"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,186,// if the option is required add it to the required list
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,187,if (opt.isRequired() && !requiredOpts.contains(key))
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,189,requiredOpts.add(key);
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,192,"shortOpts.put(key, opt);"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,188,ublic Collection getOptions() {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,189,eturn Collections.unmodifiableCollection( helpOptions() );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,201,public Collection getOptions()
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,203,return Collections.unmodifiableCollection(helpOptions());
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,197,ist helpOptions() {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,198,ist opts = new ArrayList( shortOpts.values() );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,211,List helpOptions()
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,213,List opts = new ArrayList(shortOpts.values());
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,211,eturn new ArrayList( opts );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,229,return new ArrayList(opts);
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,219,ublic List getRequiredOptions() {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,237,public List getRequiredOptions()
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,228,ublic Option getOption( String opt ) {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,247,public Option getOption(String opt)
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,249,opt = Util.stripLeadingHyphens(opt);
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,230,pt = Util.stripLeadingHyphens( opt );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,232,f( shortOpts.containsKey( opt ) ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,233,eturn (Option) shortOpts.get( opt );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,251,if (shortOpts.containsKey(opt))
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,253,return (Option) shortOpts.get(opt);
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,235,eturn (Option) longOpts.get( opt );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,256,return (Option) longOpts.get(opt);
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,246,ublic boolean hasOption( String opt ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,247,pt = Util.stripLeadingHyphens( opt );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,248,eturn shortOpts.containsKey( opt ) || longOpts.containsKey( opt );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,267,public boolean hasOption(String opt)
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,269,opt = Util.stripLeadingHyphens(opt);
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,271,return shortOpts.containsKey(opt) || longOpts.containsKey(opt);
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,258,ublic OptionGroup getOptionGroup( Option opt ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,259,eturn (OptionGroup)optionGroups.get( opt.getKey() );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,281,public OptionGroup getOptionGroup(Option opt)
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,283,return (OptionGroup) optionGroups.get(opt.getKey());
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,266,ublic String toString() {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,290,public String toString()
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,270,uf.append( shortOpts.toString() );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,271,"uf.append( "" ] [ long "" );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,272,uf.append( longOpts );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,273,"uf.append( "" ]"");"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,295,buf.append(shortOpts.toString());
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,296,"buf.append("" ] [ long "");"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,297,buf.append(longOpts);
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,298,"buf.append("" ]"");"
False,src/java/org/apache/commons/cli/ParseException.java,src/java/org/apache/commons/cli/ParseException.java,70,ublic class ParseException extends Exception
True,src/java/org/apache/commons/cli/ParseException.java,src/java/org/apache/commons/cli/ParseException.java,69,public class ParseException extends Exception {
False,src/java/org/apache/commons/cli/ParseException.java,src/java/org/apache/commons/cli/ParseException.java,79,ublic ParseException( String message ) {
False,src/java/org/apache/commons/cli/ParseException.java,src/java/org/apache/commons/cli/ParseException.java,80,uper( message );
True,src/java/org/apache/commons/cli/ParseException.java,src/java/org/apache/commons/cli/ParseException.java,77,public ParseException(String message)
True,src/java/org/apache/commons/cli/ParseException.java,src/java/org/apache/commons/cli/ParseException.java,79,super(message);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.10 2002/11/27 23:22:02 jkeyes Exp $"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,3, $Revision: 1.10 $
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,4, $Date: 2002/11/27 23:22:02 $
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.11 2002/12/09 23:47:25 jkeyes Exp $"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,3,* $Revision: 1.11 $
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,4,* $Date: 2002/12/09 23:47:25 $
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,69,mport java.util.Map;
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,77, @version $Revision: 1.10 $
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,75,* @version $Revision: 1.11 $
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,94, @param args The arguments that have to be flattened.
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,94,* @param arguments The arguments that have to be flattened.
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,99,"bstract protected String[] flatten( Options opts,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,100,"tring[] arguments,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,101,oolean stopAtNonOption );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,99,"protected abstract String[] flatten(Options opts, String[] arguments,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,100,boolean stopAtNonOption);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,113,"ublic CommandLine parse( Options options,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,114,tring[] arguments )
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,115,hrows ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,112,"public CommandLine parse(Options options, String[] arguments)"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,113,throws ParseException
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,117,"eturn parse( options, arguments, null, false );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,115,"return parse(options, arguments, null, false);"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,132,"ublic CommandLine parse( Options options,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,133,"tring[] arguments,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,134,roperties properties )
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,135,hrows ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,130,"public CommandLine parse(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,131,Properties properties)
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,132,throws ParseException
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,137,"eturn parse( options, arguments, properties, false );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,134,"return parse(options, arguments, properties, false);"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,155,"ublic CommandLine parse( Options options,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,156,"tring[] arguments,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,157,oolean stopAtNonOption )
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,158,hrows ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,152,"public CommandLine parse(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,153,boolean stopAtNonOption)
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,154,throws ParseException
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,160,"eturn parse( options, arguments, null, stopAtNonOption );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,156,"return parse(options, arguments, null, stopAtNonOption);"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,166,* @param stopAtNonOption stop parsing the arguments when the first
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,167,* non option is encountered.
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,175,"ublic CommandLine parse( Options opts,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,176,"tring[] arguments,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,177,"roperties properties,"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,178,oolean stopAtNonOption )
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,179,hrows ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,174,"public CommandLine parse(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,175,"Properties properties, boolean stopAtNonOption)"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,176,throws ParseException
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,182,ptions = opts;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,179,this.options = options;
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,188,f( arguments == null ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,185,if (arguments == null)
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,192,"ist tokenList = Arrays.asList( flatten( opts, arguments, stopAtNonOption ) );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,190,"List tokenList = Arrays.asList(flatten(this.options,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,191,"arguments,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,192,stopAtNonOption));
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,196,hile( iterator.hasNext() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,197,tring t = (String)iterator.next();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,197,while (iterator.hasNext())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,199,String t = (String) iterator.next();
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,200,"f( ""--"".equals( t ) ) {"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,202,"if (""--"".equals(t))"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,204,"lse if( ""-"".equals( t ) ) {"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,205,f( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,208,"else if (""-"".equals(t))"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,210,if (stopAtNonOption)
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,208,lse {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,209,md.addArg(t );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,214,else
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,216,cmd.addArg(t);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,213,"lse if( t.startsWith( ""-"" ) ) {"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,214,f ( stopAtNonOption && !options.hasOption( t ) ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,221,"else if (t.startsWith(""-""))"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,223,if (stopAtNonOption && !options.hasOption(t))
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,216,md.addArg( t );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,226,cmd.addArg(t);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,218,lse {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,219,"rocessOption( t, iterator );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,228,else
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,230,"processOption(t, iterator);"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,223,lse {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,224,md.addArg( t );
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,225,f( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,235,else
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,237,cmd.addArg(t);
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,239,if (stopAtNonOption)
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,231,f( eatTheRest ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,232,hile( iterator.hasNext() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,233,tring str = (String)iterator.next();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,246,if (eatTheRest)
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,248,while (iterator.hasNext())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,250,String str = (String) iterator.next();
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,235,"f( !""--"".equals( str ) ) {"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,236,md.addArg( str );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,253,"if (!""--"".equals(str))"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,255,cmd.addArg(str);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,241,rocessProperties( properties );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,261,processProperties(properties);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,247, <p>Sets the values of Options using the values in <code>properties</code>.</p>
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,268,* <p>Sets the values of Options using the values in
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,269,* <code>properties</code>.</p>
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,271,* @param properties The value properties to be processed.
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,249,rivate void processProperties( Properties properties ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,250,f( properties == null ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,273,private void processProperties(Properties properties)
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,275,if (properties == null)
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,254,or( Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,280,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,256,f( !cmd.hasOption( option ) ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,257,ption opt = options.getOption( option );
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,259,/ get the value from the properties instance
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,260,tring value = properties.getProperty( option );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,284,if (!cmd.hasOption(option))
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,286,Option opt = options.getOption(option);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,262,f( opt.hasArgs() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,263,f( opt.getValues() == null || opt.getValues().length == 0 ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,264,ry {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,265,pt.addValue( value );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,288,// get the value from the properties instance
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,289,String value = properties.getProperty(option);
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,291,if (opt.hasArgs())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,293,if ((opt.getValues() == null)
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,294,|| (opt.getValues().length == 0))
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,296,try
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,298,opt.addValue(value);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,267,atch( RuntimeException exp ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,300,catch (RuntimeException exp)
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,272,"lse if ( ! ( ""yes"".equalsIgnoreCase( value ) ||"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,273,"true"".equalsIgnoreCase( value ) ||"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,274,"1"".equalsIgnoreCase( value) ) ) {"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,306,"else if (!(""yes"".equalsIgnoreCase(value)"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,307,"|| ""true"".equalsIgnoreCase(value)"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,308,"|| ""1"".equalsIgnoreCase(value)))"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,280,md.addOption( opt );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,315,cmd.addOption(opt);
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,324,* @throws MissingOptionException if any of the required Options
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,325,* are not present.
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,290,hrows MissingOptionException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,328,throws MissingOptionException
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,295,f( requiredOptions.size() > 0 ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,332,if (requiredOptions.size() > 0)
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,300,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,301,uff.append( iter.next() );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,338,while (iter.hasNext())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,340,buff.append(iter.next());
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,304,hrow new MissingOptionException( buff.toString() );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,343,throw new MissingOptionException(buff.toString());
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,308,"ublic void processArgs( Option opt, ListIterator iter )"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,309,hrows ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,348,* <p>Process the argument values for the specified Option
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,349,* <code>opt</code> using the values retrieved from the
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,350,* specified iterator <code>iter</code>.
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,352,* @param opt The current Option
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,353,* @param iter The iterator over the flattened command line
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,354,* Options.
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,356,* @throws ParseException if an argument value is required
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,357,* and it is has not been found.
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,359,"public void processArgs(Option opt, ListIterator iter)"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,360,throws ParseException
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,312,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,313,tring str = (String)iter.next();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,363,while (iter.hasNext())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,365,String str = (String) iter.next();
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,316,f( options.hasOption( str ) ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,368,if (options.hasOption(str))
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,321,lse {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,322,ry {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,323,pt.addValue( str ) ;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,376,else
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,378,try
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,380,opt.addValue(str);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,325,atch( RuntimeException exp ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,382,catch (RuntimeException exp)
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,332,f( opt.getValues() == null && !opt.hasOptionalArg() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,333,"hrow new MissingArgumentException( ""no argument for:"" + opt.getKey() );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,391,if ((opt.getValues() == null) && !opt.hasOptionalArg())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,393,"throw new MissingArgumentException(""no argument for:"""
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,394,+ opt.getKey());
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,337,"rivate void processOption( String arg, ListIterator iter )"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,338,hrows ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,399,* <p>Process the Option specified by <code>arg</code>
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,400,* using the values retrieved from the specfied iterator
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,401,* <code>iter</code>.
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,403,* @param arg The String value representing an Option
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,404,* @param iter The iterator over the flattened command
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,405,* line arguments.
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,407,* @throws ParseException if <code>arg</code> does not
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,408,* represent an Option
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,410,"private void processOption(String arg, ListIterator iter)"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,411,throws ParseException
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,343,oolean hasOption = options.hasOption( arg );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,416,boolean hasOption = options.hasOption(arg);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,346,f( !hasOption ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,347,"hrow new UnrecognizedOptionException(""Unrecognized option: "" + arg);"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,419,if (!hasOption)
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,421,"throw new UnrecognizedOptionException(""Unrecognized option: """
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,422,+ arg);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,349,lse {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,350,pt = (Option) options.getOption( arg );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,424,else
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,426,opt = (Option) options.getOption(arg);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,355,f ( opt.isRequired() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,356,equiredOptions.remove( opt.getKey() );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,431,if (opt.isRequired())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,433,requiredOptions.remove(opt.getKey());
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,361,f ( options.getOptionGroup( opt ) != null ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,362,ptionGroup group = ( OptionGroup ) options.getOptionGroup( opt );
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,363,f( group.isRequired() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,364,equiredOptions.remove( group );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,438,if (options.getOptionGroup(opt) != null)
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,440,OptionGroup group = (OptionGroup) options.getOptionGroup(opt);
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,442,if (group.isRequired())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,444,requiredOptions.remove(group);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,366,roup.setSelected( opt );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,447,group.setSelected(opt);
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,370,f ( opt.hasArg() ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,371,"rocessArgs( opt, iter );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,451,if (opt.hasArg())
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,453,"processArgs(opt, iter);"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,375,md.addOption( opt );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,458,cmd.addOption(opt);
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,66,* @todo These need to break out to OptionType and also
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,67,* to be pluggable.
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,73,// TODO: These need to break out to OptionType and also to be pluggable.
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,76,ublic static final Class STRING_VALUE        = java.lang.String.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,75,public static final Class STRING_VALUE = java.lang.String.class;
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,78,ublic static final Class OBJECT_VALUE        = java.lang.Object.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,78,public static final Class OBJECT_VALUE = java.lang.Object.class;
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,80,ublic static final Class NUMBER_VALUE        = java.lang.Number.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,81,public static final Class NUMBER_VALUE = java.lang.Number.class;
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,82,ublic static final Class DATE_VALUE          = java.util.Date.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,84,public static final Class DATE_VALUE = java.util.Date.class;
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,84,ublic static final Class CLASS_VALUE         = java.lang.Class.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,87,public static final Class CLASS_VALUE = java.lang.Class.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,89,/// can we do this one??
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,90,"// is meant to check that the file exists, else it errors."
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,91,// ie) it's for reading not writing.
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,86,// can we do this one??
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,87,"/ is meant to check that the file exists, else it errors."
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,88,/ ie) it's for reading not writing.
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,90,ublic static final Class EXISTING_FILE_VALUE = java.io.FileInputStream.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,94,public static final Class EXISTING_FILE_VALUE =
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,95,java.io.FileInputStream.class;
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,92,ublic static final Class FILE_VALUE          = java.io.File.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,98,public static final Class FILE_VALUE = java.io.File.class;
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,94,ublic static final Class FILES_VALUE         = java.io.File[].class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,101,public static final Class FILES_VALUE = java.io.File[].class;
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,96,ublic static final Class URL_VALUE           = java.net.URL.class;
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,104,public static final Class URL_VALUE = java.net.URL.class;
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,104,ublic static Object getValueClass(char ch) {
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,105,f (ch == '@') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,112,public static Object getValueClass(char ch)
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,114,if (ch == '@')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,107, else if (ch == ':') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,118,else if (ch == ':')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,109, else if (ch == '%') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,122,else if (ch == '%')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,111, else if (ch == '+') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,126,else if (ch == '+')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,113, else if (ch == '#') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,130,else if (ch == '#')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,115, else if (ch == '<') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,134,else if (ch == '<')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,117, else if (ch == '>') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,138,else if (ch == '>')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,119, else if (ch == '*') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,142,else if (ch == '*')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,121, else if (ch == '/') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,146,else if (ch == '/')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,134,ublic static boolean isValueCode(char ch) {
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,135,f( (ch != '@') &&
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,136,ch != ':') &&
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,137,ch != '%') &&
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,138,ch != '+') &&
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,139,ch != '#') &&
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,140,ch != '<') &&
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,141,ch != '>') &&
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,142,ch != '*') &&
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,143,ch != '/')
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,161,public static boolean isValueCode(char ch)
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,163,if ((ch != '@') && (ch != ':') && (ch != '%') && (ch != '+')
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,164,&& (ch != '#') && (ch != '<') && (ch != '>') && (ch != '*')
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,165,&& (ch != '/'))
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,158,ublic static Options parsePattern(String pattern) {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,180,public static Options parsePattern(String pattern)
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,168,or(int i=0; i<sz; i++) {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,191,for (int i = 0; i < sz; i++)
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,173,f(!isValueCode(ch)) {
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,174,f(opt != ' ') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,197,if (!isValueCode(ch))
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,199,if (opt != ' ')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,176,ptions.addOption( OptionBuilder.hasArg( type != null )
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,177,isRequired( required )
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,178,withType( type )
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,179,create( opt ) );
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,202,options.addOption(
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,203,OptionBuilder.hasArg(type != null)
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,204,.isRequired(required).withType(type)
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,205,.create(opt));
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,185, else
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,186,f(ch == '!') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,213,else if (ch == '!')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,188, else {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,217,else
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,193,f(opt != ' ') {
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,223,if (opt != ' ')
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,195,ptions.addOption( OptionBuilder.hasArg( type != null )
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,196,isRequired( required )
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,197,withType( type )
False,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,198,create( opt ) );
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,226,options.addOption(
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,227,OptionBuilder.hasArg(type != null).isRequired(required)
True,src/java/org/apache/commons/cli/PatternOptionBuilder.java,src/java/org/apache/commons/cli/PatternOptionBuilder.java,228,.withType(type).create(opt));
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.11 2002/09/19 22:59:43 jkeyes Exp $"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,3, $Revision: 1.11 $
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,4, $Date: 2002/09/19 22:59:43 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.12 2002/12/09 23:47:25 jkeyes Exp $"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,3,* $Revision: 1.12 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,4,* $Date: 2002/12/09 23:47:25 $
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,63,mport java.util.Arrays;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,65,mport java.util.Collection;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,64,import java.util.Arrays;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,67,mport java.util.Map;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,75, @version $Revision: 1.11 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,73,* @version $Revision: 1.12 $
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,93,rivate void init() {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,94,private void init()
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,124,"  {@link PosixParser#burstToken( String, boolean) burstToken}.</li>"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,126,"*  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,137,"rotected String[] flatten( Options options,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,138,"tring[] arguments,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,139,oolean stopAtNonOption )
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,139,"protected String[] flatten(Options options, String[] arguments,"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,140,boolean stopAtNonOption)
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,145,terator iter = Arrays.asList( arguments ).iterator();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,146,Iterator iter = Arrays.asList(arguments).iterator();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,148,/ process each command line token
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,149,hile ( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,149,// process each command line token
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,150,while (iter.hasNext())
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,155,"f( token.startsWith( ""--"" ) ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,156,f( token.indexOf( '=' ) != -1 ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,157,"okens.add( token.substring( 0, token.indexOf( '=' ) ) );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,158,"okens.add( token.substring( token.indexOf( '=' ) + 1,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,159,oken.length() ) );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,156,"if (token.startsWith(""--""))"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,158,if (token.indexOf('=') != -1)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,160,"tokens.add(token.substring(0, token.indexOf('=')));"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,161,"tokens.add(token.substring(token.indexOf('=') + 1,"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,162,token.length()));
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,164,else
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,166,tokens.add(token);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,161,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,162,okens.add( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,166,"lse if( ""-"".equals( token ) ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,167,rocessSingleHyphen( token );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,171,"else if (""-"".equals(token))"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,173,processSingleHyphen(token);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,169,"lse if( token.startsWith( ""-"" ) ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,175,"else if (token.startsWith(""-""))"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,171,f( tokenLength == 2 ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,172,"rocessOptionToken( token, stopAtNonOption );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,179,if (tokenLength == 2)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,181,"processOptionToken(token, stopAtNonOption);"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,175,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,176,"urstToken( token, stopAtNonOption );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,185,else
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,187,"burstToken(token, stopAtNonOption);"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,179,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,180,f( stopAtNonOption ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,181,rocess( token );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,190,else
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,192,if (stopAtNonOption)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,194,process(token);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,183,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,184,okens.add( token );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,196,else
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,198,tokens.add(token);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,188,obble( iter );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,202,gobble(iter);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,191,eturn (String[])tokens.toArray( new String[] {} );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,205,return (String[]) tokens.toArray(new String[] {  });
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,199,rivate void gobble( Iterator iter ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,200,f( eatTheRest ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,201,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,202,okens.add( iter.next() );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,213,private void gobble(Iterator iter)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,215,if (eatTheRest)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,217,while (iter.hasNext())
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,219,tokens.add(iter.next());
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,220,rivate void process( String value ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,221,f( currentOption != null && currentOption.hasArg() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,222,f( currentOption.hasArg() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,223,okens.add( value );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,237,private void process(String value)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,239,if ((currentOption != null) && currentOption.hasArg())
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,241,if (currentOption.hasArg())
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,243,tokens.add(value);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,226,lse if (currentOption.hasArgs() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,227,okens.add( value );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,246,else if (currentOption.hasArgs())
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,248,tokens.add(value);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,230,lse {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,251,else
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,232,"okens.add( ""--"" );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,233,okens.add( value );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,254,"tokens.add(""--"");"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,255,tokens.add(value);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,243,rivate void processSingleHyphen( String hyphen ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,244,okens.add( hyphen );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,265,private void processSingleHyphen(String hyphen)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,267,tokens.add(hyphen);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,259,"rivate void processOptionToken( String token, boolean stopAtNonOption ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,260,f( this.options.hasOption( token ) ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,261,urrentOption = this.options.getOption( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,262,okens.add( token );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,282,"private void processOptionToken(String token, boolean stopAtNonOption)"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,284,if (this.options.hasOption(token))
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,286,currentOption = this.options.getOption(token);
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,287,tokens.add(token);
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,264,lse if( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,289,else if (stopAtNonOption)
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,273,"  <li>ignore the first character (""<b>-</b>"" )</li>"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,299,"*  <li>ignore the first character (""<b>-</b>"")</li>"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,317,* @param token The current token to be <b>burst</b>
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,318,* @param stopAtNonOption Specifies whether to stop processing
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,319,* at the first non-Option encountered.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,291,"rotected void burstToken( String token, boolean stopAtNonOption ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,321,"protected void burstToken(String token, boolean stopAtNonOption)"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,294,or( int i = 1; i < tokenLength; i++) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,295,tring ch = String.valueOf( token.charAt( i ) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,296,oolean hasOption = options.hasOption( ch );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,325,for (int i = 1; i < tokenLength; i++)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,327,String ch = String.valueOf(token.charAt(i));
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,328,boolean hasOption = options.hasOption(ch);
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,330,if (hasOption)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,332,"tokens.add(""-"" + ch);"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,333,currentOption = options.getOption(ch);
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,335,if (currentOption.hasArg() && (token.length() != (i + 1)))
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,337,tokens.add(token.substring(i + 1));
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,298,f( hasOption ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,299,"okens.add( ""-"" + ch );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,300,urrentOption = options.getOption( ch );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,301,f( currentOption.hasArg() && token.length()!=i+1 ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,302,okens.add( token.substring( i+1 ) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,306,lse if( stopAtNonOption ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,307,rocess( token.substring( i ) );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,342,else if (stopAtNonOption)
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,344,process(token.substring(i));
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,309,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,310,"okens.add( ""-"" + ch );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,346,else
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,348,"tokens.add(""-"" + ch);"
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,65,mport java.net.URL;
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,66,import java.net.URL;
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,91,"ublic static Object createValue(String str, Object obj) {"
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,92,"eturn createValue(str, (Class)obj);"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,92,"public static Object createValue(String str, Object obj)"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,94,"return createValue(str, (Class) obj);"
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,104,"ublic static Object createValue(String str, Class clazz) {"
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,105,f( PatternOptionBuilder.STRING_VALUE == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,106,"public static Object createValue(String str, Class clazz)"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,108,if (PatternOptionBuilder.STRING_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,107, else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,108,f( PatternOptionBuilder.OBJECT_VALUE == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,112,else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,110, else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,111,f( PatternOptionBuilder.NUMBER_VALUE == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,116,else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,113, else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,114,f( PatternOptionBuilder.DATE_VALUE   == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,120,else if (PatternOptionBuilder.DATE_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,116, else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,117,f( PatternOptionBuilder.CLASS_VALUE  == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,124,else if (PatternOptionBuilder.CLASS_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,119, else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,120,f( PatternOptionBuilder.FILE_VALUE   == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,128,else if (PatternOptionBuilder.FILE_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,122, else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,123,f( PatternOptionBuilder.EXISTING_FILE_VALUE   == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,132,else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,125, else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,126,f( PatternOptionBuilder.FILES_VALUE  == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,136,else if (PatternOptionBuilder.FILES_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,128, else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,129,f( PatternOptionBuilder.URL_VALUE    == clazz) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,140,else if (PatternOptionBuilder.URL_VALUE == clazz)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,131, else {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,144,else
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,140," @return the initialised object, or null if it couldn't create the Object."
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,154,"* @return the initialised object, or null if it couldn't create"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,155,* the Object.
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,142,ublic static Object createObject(String str) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,157,public static Object createObject(String str)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,144,ry {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,161,try
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,146, catch (ClassNotFoundException cnfe) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,147,"ystem.err.println(""Unable to find: ""+str);"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,165,catch (ClassNotFoundException cnfe)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,167,"System.err.println(""Unable to find: "" + str);"
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,153,ry {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,174,try
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,155, catch (InstantiationException cnfe) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,156,"ystem.err.println(""InstantiationException; Unable to create: ""+str);"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,178,catch (InstantiationException cnfe)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,180,"System.err.println(""InstantiationException; Unable to create: """
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,181,+ str);
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,159,atch (IllegalAccessException cnfe) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,160,"ystem.err.println(""IllegalAccessException; Unable to create: ""+str);"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,185,catch (IllegalAccessException cnfe)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,187,"System.err.println(""IllegalAccessException; Unable to create: """
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,188,+ str);
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,174,ublic static Number createNumber(String str) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,203,public static Number createNumber(String str)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,176,ry {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,206,try
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,179, catch (NumberFormatException nfe) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,211,catch (NumberFormatException nfe)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,191,ublic static Class createClass(String str) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,192,ry {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,225,public static Class createClass(String str)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,227,try
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,194, catch (ClassNotFoundException cnfe) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,195,"ystem.err.println(""Unable to find: ""+str);"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,231,catch (ClassNotFoundException cnfe)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,233,"System.err.println(""Unable to find: "" + str);"
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,207,ublic static Date createDate(String str) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,246,public static Date createDate(String str)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,209,f(date == null) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,210,"ystem.err.println(""Unable to parse: ""+str);"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,250,if (date == null)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,252,"System.err.println(""Unable to parse: "" + str);"
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,222,ublic static URL createURL(String str) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,223,ry {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,265,public static URL createURL(String str)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,267,try
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,225, catch (MalformedURLException mue) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,226,"ystem.err.println(""Unable to parse: ""+str);"
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,271,catch (MalformedURLException mue)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,273,"System.err.println(""Unable to parse: "" + str);"
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,237,ublic static File createFile(String str) {
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,285,public static File createFile(String str)
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,247,ublic static File[] createFiles(String str) {
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,248,/ to implement/port:
False,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,249,/        return FileW.findFiles(str);
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,296,public static File[] createFiles(String str)
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,298,// to implement/port:
True,src/java/org/apache/commons/cli/TypeHandler.java,src/java/org/apache/commons/cli/TypeHandler.java,299,//        return FileW.findFiles(str);
False,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,71,ublic class UnrecognizedOptionException extends ParseException {
True,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,70,public class UnrecognizedOptionException
True,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,71,extends ParseException {
False,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,79,ublic UnrecognizedOptionException( String message ) {
False,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,80,uper( message );
True,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,79,public UnrecognizedOptionException(String message)
True,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,src/java/org/apache/commons/cli/UnrecognizedOptionException.java,81,super(message);
False,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Util.java,v 1.1 2002/11/18 08:41:26 jkeyes Exp $"
False,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,3, $Revision: 1.1 $
False,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,4, $Date: 2002/11/18 08:41:26 $
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Util.java,v 1.2 2002/12/09 23:47:25 jkeyes Exp $"
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,3,* $Revision: 1.2 $
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,4,* $Date: 2002/12/09 23:47:25 $
False,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,70,tatic String stripLeadingHyphens( String str ) {
False,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,71,"f( str.startsWith( ""--"" ) ) {"
False,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,72,"eturn str.substring( 2, str.length() );"
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,71,* <p>Remove the hyphens from the begining of <code>str</code> and
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,72,* return the new String.</p>
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,74,* @param str The string from which the hyphens should be removed.
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,76,* @return the hyphens from the begining of <code>str</code> and
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,77,* return the new String.
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,79,static String stripLeadingHyphens(String str)
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,81,"if (str.startsWith(""--""))"
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,83,"return str.substring(2, str.length());"
False,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,74,"lse if ( str.startsWith( ""-"" ) ) {"
False,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,75,"eturn str.substring( 1, str.length() );"
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,85,"else if (str.startsWith(""-""))"
True,src/java/org/apache/commons/cli/Util.java,src/java/org/apache/commons/cli/Util.java,87,"return str.substring(1, str.length());"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,67,"xpected = ""This is a"" + hf.defaultNewLine + ""test."";"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,67,"expected = ""This is a"" + hf.getNewLine() + ""test."";"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,72,"xpected = ""This is a"" + hf.defaultNewLine + ""    test."";"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,72,"expected = ""This is a"" + hf.getNewLine() + ""    test."";"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,77,"aaaa aaaa aaaa"" + hf.defaultNewLine +"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,78,"aaaaaa"" + hf.defaultNewLine +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,77,"""aaaa aaaa aaaa"" + hf.getNewLine() +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,78,"""aaaaaa"" + hf.getNewLine() +"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,87,"aaaa aaaa aaaa"" + hf.defaultNewLine +"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,88,"    aaaaaa"" + hf.defaultNewLine +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,87,"""aaaa aaaa aaaa"" + hf.getNewLine() +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,88,"""    aaaaaa"" + hf.getNewLine() +"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,114,"pad + ""-a"" + dpad + ""aaaa aaaa aaaa"" + hf.defaultNewLine +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,114,"lpad + ""-a"" + dpad + ""aaaa aaaa aaaa"" + hf.getNewLine() +"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,129,"pad + ""-a,--aaa"" + dpad + ""dddd dddd"" + hf.defaultNewLine +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,129,"lpad + ""-a,--aaa"" + dpad + ""dddd dddd"" + hf.getNewLine() +"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,139,"pad + ""-a,--aaa"" + dpad + ""dddd dddd"" + hf.defaultNewLine +"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,140,"f.createPadding(nextLineTabStop) + ""dddd dddd"" + hf.defaultNewLine +"
False,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,141,"pad + ""-b      "" + dpad + ""feeee eeee"" + hf.defaultNewLine +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,139,"lpad + ""-a,--aaa"" + dpad + ""dddd dddd"" + hf.getNewLine() +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,140,"hf.createPadding(nextLineTabStop) + ""dddd dddd"" + hf.getNewLine() +"
True,src/test/org/apache/commons/cli/TestHelpFormatter.java,src/test/org/apache/commons/cli/TestHelpFormatter.java,141,"lpad + ""-b      "" + dpad + ""feeee eeee"" + hf.getNewLine() +"

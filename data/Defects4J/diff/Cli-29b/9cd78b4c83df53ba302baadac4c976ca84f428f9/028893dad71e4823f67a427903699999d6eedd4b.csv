is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,98,* Returns the option that is currently processed.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,100,* @return the current option
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,102,Option getCurrentOption();
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,105,* Sets the current option. This method is called by concrete option
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,106,* implementations during command line processing. It enables the command
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,107,* line to keep track about the option that is currently processed.
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,109,* @param currentOption the new current option
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,111,void setCurrentOption(Option currentOption);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,51,private Option currentOption;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,52,private String checkForOption;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,65,setCurrentOption(rootOption);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,68,public Option getCurrentOption() {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,69,return currentOption;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,72,public void setCurrentOption(Option currentOption) {
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,73,this.currentOption = currentOption;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,219,ublic boolean looksLikeOption(final String trigger) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,220,or (final Iterator i = prefixes.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,221,inal String prefix = (String) i.next();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,231,* Tests whether the passed in trigger looks like an option. This
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,232,* implementation first checks whether the passed in string starts with a
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,233,"* prefix that indicates an option. If this is the case, it is also checked"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,234,* whether an option of this name is known for the current option. (This can
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,235,"* lead to reentrant invocations of this method, so care has to be taken"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,236,* about this.)
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,238,* @param trigger the command line element to test
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,239,* @return a flag whether this element seems to be an option
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,241,public boolean looksLikeOption(final String trigger)
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,243,if (checkForOption != null)
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,245,// this is a reentrant call
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,246,return !checkForOption.equals(trigger);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,223,f (trigger.startsWith(prefix)) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,224,eturn true;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,249,checkForOption = trigger;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,250,try
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,252,for (final Iterator i = prefixes.iterator(); i.hasNext();)
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,254,final String prefix = (String) i.next();
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,256,if (trigger.startsWith(prefix))
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,258,"if (getCurrentOption().canProcess(this, trigger)"
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,259,|| getCurrentOption().findOption(trigger) != null)
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,261,return true;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,228,eturn false;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,266,return false;
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,268,finally
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,270,checkForOption = null;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,139,f (commandLine.looksLikeOption(arg)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,139,"if (looksLikeOption(commandLine, arg)) {"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,191,f (commandLine.looksLikeOption(arg)) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,191,"if (looksLikeOption(commandLine, arg)) {"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,503,* Helper method for testing whether an element of the command line looks
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,504,"* like an option. This method queries the command line, but sets the"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,505,* current option first.
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,507,* @param commandLine the command line
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,508,* @param trigger the trigger to be checked
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,509,* @return a flag whether this element looks like an option
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,511,"private boolean looksLikeOption(final WriteableCommandLine commandLine,"
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,512,final String trigger) {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,513,Option oldOption = commandLine.getCurrentOption();
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,514,try {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,515,commandLine.setCurrentOption(this);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,516,return commandLine.looksLikeOption(trigger);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,517,} finally {
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,518,commandLine.setCurrentOption(oldOption);
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,9,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,15,* limitations under the License.
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,17,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,21,import org.apache.commons.cli2.Argument;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,22,import org.apache.commons.cli2.CommandLine;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,23,import org.apache.commons.cli2.Group;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,24,import org.apache.commons.cli2.Option;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,25,import org.apache.commons.cli2.OptionException;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,26,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,27,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,28,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,29,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,30,import org.apache.commons.cli2.validation.NumberValidator;
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,33,* An argument whose value is a negative number is mistaken as an option.
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,35,* @author Oliver Heger
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,36,* @version $Id$
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,38,public class BugCLI150Test extends TestCase
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,40,public void testNegativeNumber() throws OptionException
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,42,final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,43,final ArgumentBuilder aBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,44,final GroupBuilder gBuilder = new GroupBuilder();
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,46,final Argument numArg = aBuilder.withValidator(
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,47,NumberValidator.getNumberInstance()).withMinimum(1)
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,48,.withMaximum(1).create();
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,49,"final Option numOpt = oBuilder.withLongName(""num"").withArgument(numArg)"
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,50,.create();
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,51,final Group options = gBuilder.withOption(numOpt).create();
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,53,final Parser parser = new Parser();
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,54,parser.setGroup(options);
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,56,CommandLine cl = parser.parse(new String[] {
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,57,"""--num"", ""-42"""
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,59,Number num = (Number) cl.getValue(numOpt);
True,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,60,"assertEquals(""Wrong option value"", -42, num.intValue());"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,291, <p>Query to see if this Option requires an argument</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,293, @return boolean flag indicating if an argument is required
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,295,ublic boolean isRequired() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,296,eturn this.required;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,300, <p>Sets whether this Option is mandatory.</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,302, @param required specifies whether this Option is mandatory
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,304,ublic void setRequired( boolean required ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,305,his.required = required;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,309, <p>Sets the display name for the argument value.</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,311, @param argName the display name for the argument value.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,313,ublic void setArgName( String argName ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,314,his.argName = argName;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,318, <p>Gets the display name for the argument value.</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,320, @return the display name for the argument value.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,322,ublic String getArgName() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,323,eturn this.argName;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,327, <p>Returns whether the display name for the argument value
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,328, has been set.</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,330, @return if the display name for the argument value has been
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,331, set.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,333,ublic boolean hasArgName() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,334,eturn (this.argName != null && this.argName.length() > 0 );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,338, <p>Query to see if this Option can take many values</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,340, @return boolean flag indicating if multiple values are allowed
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,342,ublic boolean hasArgs() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,343,eturn ( this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,347, <p>Sets the number of argument values this Option can take.</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,349, @param num the number of argument values
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,351,ublic void setArgs( int num ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,352,his.numberOfArgs = num;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,356, <p>Sets the value separator.  For example if the argument value
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,357," was a Java property, the value separator would be '='.</p>"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,359, @param sep The value separator.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,361,ublic void setValueSeparator( char sep ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,362,his.valuesep = sep;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,366, <p>Returns the value separator character.</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,368, @return the value separator character.
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,370,ublic char getValueSeparator() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,371,eturn this.valuesep;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,375, <p>Returns the number of argument values this Option can take.</p>
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,377, @return num the number of argument values
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,379,ublic int getArgs( ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,380,eturn this.numberOfArgs;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,383,ublic void clearValues() {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,384,his.values.clear();
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,291,* <p>Query to see if this Option requires an argument</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,293,* @return boolean flag indicating if an argument is required
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,295,public boolean isRequired() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,296,return this.required;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,300,* <p>Sets whether this Option is mandatory.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,302,* @param required specifies whether this Option is mandatory
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,304,public void setRequired( boolean required ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,305,this.required = required;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,309,* <p>Sets the display name for the argument value.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,311,* @param argName the display name for the argument value.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,313,public void setArgName( String argName ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,314,this.argName = argName;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,318,* <p>Gets the display name for the argument value.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,320,* @return the display name for the argument value.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,322,public String getArgName() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,323,return this.argName;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,327,* <p>Returns whether the display name for the argument value
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,328,* has been set.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,330,* @return if the display name for the argument value has been
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,331,* set.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,333,public boolean hasArgName() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,334,return (this.argName != null && this.argName.length() > 0 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,338,* <p>Query to see if this Option can take many values</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,340,* @return boolean flag indicating if multiple values are allowed
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,342,public boolean hasArgs() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,343,return this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,347,* <p>Sets the number of argument values this Option can take.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,349,* @param num the number of argument values
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,351,public void setArgs( int num ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,352,this.numberOfArgs = num;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,356,* <p>Sets the value separator.  For example if the argument value
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,357,"* was a Java property, the value separator would be '='.</p>"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,359,* @param sep The value separator.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,361,public void setValueSeparator( char sep ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,362,this.valuesep = sep;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,366,* <p>Returns the value separator character.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,368,* @return the value separator character.
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,370,public char getValueSeparator() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,371,return this.valuesep;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,377,public boolean hasValueSeparator() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,378,return ( this.valuesep > 0 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,382,* <p>Returns the number of argument values this Option can take.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,384,* @return num the number of argument values
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,386,public int getArgs( ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,387,return this.numberOfArgs;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,392,ublic boolean addValue( String value ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,395,void addValue( String value )
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,396,eturn false;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,397,ase UNLIMITED_VALUES:
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,398,f( getValueSeparator() > 0 ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,399,nt index = 0;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,400,hile( (index = value.indexOf( getValueSeparator() ) ) != -1 ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,401,"his.values.add( value.substring( 0, index ) );"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,402,alue = value.substring( index+1 );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,405,his.values.add( value );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,406,eturn true;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,399,break;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,408,f( getValueSeparator() > 0 ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,409,nt index = 0;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,410,hile( (index = value.indexOf( getValueSeparator() ) ) != -1 ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,411,f( values.size() > numberOfArgs-1 ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,412,eturn false;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,414,"his.values.add( value.substring( 0, index ) );"
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,415,alue = value.substring( index+1 );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,418,f( values.size() > numberOfArgs-1 ) {
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,419,eturn false;
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,421,his.values.add( value );
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,422,eturn true;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,401,processValue( value );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,406,* <p>Processes the value.  If this Option has a value separator
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,407,* the value will have to be parsed into individual tokens.  When
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,408,* n-1 tokens have been processed and there are more value separators
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,409,"* in the value, parsing is ceased and the remaining characters are"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,410,* added as a single token.</p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,412,* @since 1.0.1
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,414,private void processValue( String value ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,416,// this Option has a separator character
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,417,if( hasValueSeparator() ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,419,// get the separator character
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,420,char sep = getValueSeparator();
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,422,// store the index for the value separator
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,423,int index = value.indexOf( sep );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,425,// while there are more value separators
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,426,while( index != -1 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,428,// next value to be added
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,429,if( values.size() == numberOfArgs-1 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,430,break;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,433,// store
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,434,"add( value.substring( 0, index ) );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,436,// parse
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,437,value = value.substring( index+1 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,439,// get new index
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,440,index = value.indexOf( sep );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,444,// store the actual value or the last value that has been parsed
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,445,add( value );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,449,* <p>Add the value to this Option.  If the number of arguments
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,450,* is greater than zero and there is enough space in the list then
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,451,"* add the value.  Otherwise, throw a runtime exception."
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,452,* </p>
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,454,* @since 1.0.1
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,456,private void add( String value ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,457,if( numberOfArgs > 0 && values.size() > numberOfArgs-1 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,458,"throw new RuntimeException( ""Cannot add value, list full."" );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,460,// store value
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,461,this.values.add( value );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,168,tring shortOpt = opt.getOpt();
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,168,String key = opt.getKey();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,170,/ add it to the long option list
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,171,f ( opt.hasLongOpt() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,172,"ongOpts.put( opt.getLongOpt(), opt );"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,170,// add it to the long option list
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,171,if ( opt.hasLongOpt() ) {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,172,"longOpts.put( opt.getLongOpt(), opt );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,175,/ if the option is required add it to the required list
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,176,f ( opt.isRequired() ) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,177,equiredOpts.add( opt.getKey() );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,175,// if the option is required add it to the required list
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,176,if ( opt.isRequired() && !requiredOpts.contains( key ) ) {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,177,requiredOpts.add( key );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,179,"shortOpts.put( key, opt );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,180,"hortOpts.put( shortOpt, opt );"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.8 2002/11/18 08:41:26 jkeyes Exp $"
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,3, $Revision: 1.8 $
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,4, $Date: 2002/11/18 08:41:26 $
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.9 2002/11/25 23:43:40 jkeyes Exp $"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,3,* $Revision: 1.9 $
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,4,* $Date: 2002/11/25 23:43:40 $
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,77, @version $Revision: 1.8 $
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,77,* @version $Revision: 1.9 $
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,302,lse if( !opt.addValue( str ) ) {
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,303,ter.previous();
False,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,304,reak;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,302,else {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,303,try {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,304,opt.addValue( str ) ;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,306,catch( RuntimeException exp ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,307,iter.previous();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,308,break;
False,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,8," $Id: BugsTest.java,v 1.11 2002/11/18 08:41:26 jkeyes Exp $"
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,8,"* $Id: BugsTest.java,v 1.12 2002/11/25 23:43:41 jkeyes Exp $"
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,347,public void test14786() {
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,348,"Option o = OptionBuilder.isRequired().withDescription(""test"").create(""test"");"
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,349,Options opts = new Options();
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,350,opts.addOption(o);
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,351,opts.addOption(o);
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,353,CommandLineParser parser = new GnuParser();
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,355,"String[] args = new String[] { ""-test"" };"
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,356,try {
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,357,"CommandLine line = parser.parse( opts, args );"
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,359,catch( ParseException exp ) {
True,src/test/org/apache/commons/cli/BugsTest.java,src/test/org/apache/commons/cli/BugsTest.java,360,"fail( ""Unexpected exception:"" + exp.getMessage() );"
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,195,"ssertTrue( _cmdline.getOptionValues( ""j"" ).length == 4);"
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,196,ssertTrue( _cmdline.getOptionValues( 'j' ).length == 4);
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,195,"assertEquals( 4, _cmdline.getOptionValues( ""j"" ).length );"
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,196,"assertEquals( 4, _cmdline.getOptionValues( 'j' ).length );"

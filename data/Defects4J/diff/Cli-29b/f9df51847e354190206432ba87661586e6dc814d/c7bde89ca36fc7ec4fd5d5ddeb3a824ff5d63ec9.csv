is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,92,** the recognised options */
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,93,rivate Map  options = new HashMap();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,92,/** the processed options */
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,93,private Map options = new HashMap();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,95,/** Map of unique options for ease to get complete list of options */
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,96,private Map hashcodeMap = new HashMap();
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,128,bject type = ((Option)options.get( opt )).getType();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,132,Object type = ((Option)((List)options.get(opt)).iterator().next()).getType();
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,146,eturn (String)((Option)options.get( opt )).getValue();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,150,String[] values = getOptionValues(opt);
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,151,return (values == null) ? null : values[0];
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,164,eturn (String[])((Option)options.get( opt )).getValues();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,169,List values = new java.util.ArrayList();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,171,List opts = (List)options.get( opt );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,172,Iterator iter = opts.iterator();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,174,while( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,175,Option optt = (Option)iter.next();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,176,values.addAll( optt.getValuesList() );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,178,return (values.size() == 0) ? null : (String[])values.toArray(new String[]{});
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,215,"** <p>Dump state, suitable for debugging.</p>"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,230,* jkeyes
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,231,* - commented out until it is implemented properly
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,232,"* <p>Dump state, suitable for debugging.</p>"
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,247,"ptions.put( opt.getOpt(), opt );"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,266,"hashcodeMap.put( new Integer( opt.hashCode() ), opt );"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,268,if( options.get( opt.getOpt() ) != null ) {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,269,((java.util.List)options.get( opt.getOpt() )).add( opt );
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,271,else {
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,272,"options.put( opt.getOpt(), new java.util.ArrayList() );"
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,273,((java.util.List)options.get( opt.getOpt() ) ).add( opt );
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,257,eturn options.values().iterator();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,284,return hashcodeMap.values().iterator();
False,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,266,ollection processed = options.values();
True,src/java/org/apache/commons/cli/CommandLine.java,src/java/org/apache/commons/cli/CommandLine.java,293,Collection processed = hashcodeMap.values();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.4 2002/08/04 23:04:52 jkeyes Exp $"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,3, $Revision: 1.4 $
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,4, $Date: 2002/08/04 23:04:52 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.5 2002/08/14 22:27:39 jkeyes Exp $"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,3,* $Revision: 1.5 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,4,* $Date: 2002/08/14 22:27:39 $
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,67,import java.util.Map;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,84,rivate Collection requiredOptions;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,85,private Map requiredOptions;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,200,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,201,har sep = opt.getValueSeparator();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,203,f( sep > 0 ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,204,nt findex;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,205,hile( ( findex = var.indexOf( sep ) ) != -1 ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,206,"tring val = var.substring( 0, findex );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,207,ar = var.substring( findex + 1);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,208,f( !opt.addValue( val ) ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,209,ter.previous();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,210,eturn;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,213,f( !opt.addValue( var ) ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,214,ter.previous();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,215,eturn;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,218,lse if( !opt.addValue( var ) ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,219,ter.previous();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,220,eturn;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,201,else if( !opt.addValue( var ) ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,202,iter.previous();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,203,return;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,302,terator iter = requiredOptions.iterator();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,284,Iterator iter = requiredOptions.values().iterator();
False,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,92,ublic class Option {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,92,public class Option implements Cloneable {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,371,if( getValueSeparator() > 0 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,372,int index = 0;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,373,while( (index = value.indexOf( getValueSeparator() ) ) != -1 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,374,"this.values.add( value.substring( 0, index ) );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,375,value = value.substring( index+1 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,381,if( getValueSeparator() > 0 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,382,int index = 0;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,383,while( (index = value.indexOf( getValueSeparator() ) ) != -1 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,384,if( values.size() > numberOfArgs-1 ) {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,385,return false;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,387,"this.values.add( value.substring( 0, index ) );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,388,value = value.substring( index+1 );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,434,public java.util.List getValuesList() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,435,return this.values;
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,438,public Object clone() {
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,439,"Option option = new Option( getOpt(), getDescription() );"
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,440,option.setArgs( getArgs() );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,441,option.setRequired( isRequired() );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,442,option.setLongOpt( getLongOpt() );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,443,option.setType( getType() );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,444,option.setValueSeparator( getValueSeparator() );
True,src/java/org/apache/commons/cli/Option.java,src/java/org/apache/commons/cli/Option.java,445,return option;
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,78,rivate Option selected;
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,78,private String selected;
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,120,f ( this.selected == null || this.selected.equals( opt ) ) {
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,121,his.selected = opt;
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,121,if ( this.selected == null || this.selected.equals( opt.getOpt() ) ) {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,122,this.selected = opt.getOpt();
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,133,ublic Option getSelected() {
True,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,134,public String getSelected() {
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,138, @return the usage string for this option group
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,141,ublic String usageString()
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,143,tringBuffer buff = new StringBuffer();
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,145,"uff.append( ""<\n"");"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,147,terator oiter = getOptions().iterator();
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,149,hile( oiter.hasNext() )
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,151,ption option = (Option)oiter.next();
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,152,ollection names = option.getNames();
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,154,terator iter = names.iterator();
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,156,hile( iter.hasNext() )
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,158,uff.append( option.getPrefix() );
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,159,uff.append( iter.next() );
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,160,f( iter.hasNext() )
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,162,"uff.append( "" | "" );"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,165,"uff.append( "" "" );"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,166,uff.append( option.getDescription( ) );
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,167,f ( oiter.hasNext() )
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,169,"uff.append( ""\n  or\n"" );"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,172,"uff.append( ""\n>"");"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,173,"uff.append( ""\n"" );"
False,src/java/org/apache/commons/cli/OptionGroup.java,src/java/org/apache/commons/cli/OptionGroup.java,174,eturn buff.toString();
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,116,"ptionGroups.put( option, group );"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,117,"optionGroups.put( option.getOpt(), group );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,186,ublic Collection getRequiredOptions() {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,187,eturn requiredOpts.values();
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,187,public Map getRequiredOptions() {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,188,return requiredOpts;
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,195,ublic Option getOption(String opt) {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,196,public Option getOption( String opt ) {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,198,Option option = null;
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,200,// short option
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,201,if( opt.length() == 1 ) {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,202,"option = (Option)shortOpts.get( ""-"" + opt );"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,204,// long option
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,205,"else if( opt.startsWith( ""--"" ) ) {"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,206,option = (Option)longOpts.get( opt );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,208,// a just-in-case
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,209,else {
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,210,option = (Option)shortOpts.get( opt );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,213,return (option == null) ? null : (Option)option.clone();
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,216,boolean hasOption(String opt) {
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,199,"eturn (Option) shortOpts.get( ""-"" + opt );"
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,220,"return shortOpts.containsKey( ""-"" + opt );"
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,203,eturn (Option) longOpts.get( opt );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,224,return longOpts.containsKey( opt );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,207,eturn (Option) shortOpts.get( opt );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,228,return shortOpts.containsKey( opt );
False,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,219,eturn (OptionGroup)optionGroups.get( opt );
True,src/java/org/apache/commons/cli/Options.java,src/java/org/apache/commons/cli/Options.java,240,return (OptionGroup)optionGroups.get( opt.getOpt() );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.5 2002/08/04 23:04:52 jkeyes Exp $"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,3, $Revision: 1.5 $
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,4, $Date: 2002/08/04 23:04:52 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.6 2002/08/14 22:27:39 jkeyes Exp $"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,3,* $Revision: 1.6 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,4,* $Date: 2002/08/14 22:27:39 $
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,66,import java.util.Map;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,85,rivate Collection requiredOptions;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,86,private Map requiredOptions;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,168,String argname = String.valueOf( token.charAt(i) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,168,ption opt = (Option) options.getOption(
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,169,tring.valueOf( token.charAt(i) ) );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,170,boolean hasOption = options.hasOption( argname );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,172,Option opt = null;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,172,f ( opt != null ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,175,if ( hasOption ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,176,opt = options.getOption( argname );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,210,opt.addValue( token.substring(i+1) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,257,ption opt = (Option) options.getOption( arg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,264,Option opt = null;//(Option) options.getOption( arg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,266,boolean hasOption = options.hasOption( arg );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,260,f( opt == null ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,269,if( !hasOption ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,272,else {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,273,opt = (Option) options.getOption( arg );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,267,equiredOptions.remove( opt );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,279,"requiredOptions.remove( ""-"" + opt.getOpt() );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,345,if( !opt.addValue( var ) ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,346,iter.previous();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,347,break;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,347,terator iter = requiredOptions.iterator();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,365,Iterator iter = requiredOptions.values().iterator();
True,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,53,.withValueSeparator()
False,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,66,"ssertEquals( opts[0], ""property=value"" );"
False,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,67,"ssertEquals( opts[1], ""property1=value1"" );"
True,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,67,"assertEquals( ""property"", opts[0] );"
True,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,68,"assertEquals( ""value"", opts[1] );"
True,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,69,"assertEquals( ""property1"", opts[2] );"
True,src/test/org/apache/commons/cli/ApplicationTest.java,src/test/org/apache/commons/cli/ApplicationTest.java,70,"assertEquals( ""value1"", opts[3] );"
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,81,hasArgs( 2 )
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,81,.hasArgs( )
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,183,"tring[] args = new String[] { ""arg1"", ""arg2"", ""arg3"", ""key=value"" };"
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,184,ssertTrue( _cmdline.getArgs().length == 4 );
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,183,"String[] args = new String[] { ""arg1"", ""arg2"", ""arg3"" };"
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,184,assertTrue( _cmdline.getArgs().length == 3 );
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,192,"tring[] values = new String[] { ""key"", ""value"" };"
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,192,"String[] values = new String[] { ""key"", ""value"", ""key"", ""value"" };"
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,195,"ssertTrue( _cmdline.getOptionValues( ""j"" ).length == 2);"
False,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,196,ssertTrue( _cmdline.getOptionValues( 'j' ).length == 2);
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,195,"assertTrue( _cmdline.getOptionValues( ""j"" ).length == 4);"
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,196,assertTrue( _cmdline.getOptionValues( 'j' ).length == 4);
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,218,* jkeyes - commented out this test as the new architecture
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,219,* breaks this type of functionality.  I have left the test
True,src/test/org/apache/commons/cli/ValuesTest.java,src/test/org/apache/commons/cli/ValuesTest.java,220,* here in case I get a brainwave on how to resolve this.

is_addition,old_file_path,new_file_path,line_num,content
False,CLI2Converter.java,CLI2Converter.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,CLI2Converter.java,CLI2Converter.java,3, contributor license agreements.  See the NOTICE file distributed with
False,CLI2Converter.java,CLI2Converter.java,4, this work for additional information regarding copyright ownership.
False,CLI2Converter.java,CLI2Converter.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,CLI2Converter.java,CLI2Converter.java,6," (the ""License""); you may not use this file except in compliance with"
False,CLI2Converter.java,CLI2Converter.java,7, the License.  You may obtain a copy of the License at
False,CLI2Converter.java,CLI2Converter.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,CLI2Converter.java,CLI2Converter.java,11," Unless required by applicable law or agreed to in writing, software"
False,CLI2Converter.java,CLI2Converter.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,CLI2Converter.java,CLI2Converter.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,CLI2Converter.java,CLI2Converter.java,14, See the License for the specific language governing permissions and
False,CLI2Converter.java,CLI2Converter.java,15, limitations under the License.
False,CLI2Converter.java,CLI2Converter.java,17,ackage org.apache.commons.cli;
False,CLI2Converter.java,CLI2Converter.java,19,mport java.util.HashSet;
False,CLI2Converter.java,CLI2Converter.java,20,mport java.util.Iterator;
False,CLI2Converter.java,CLI2Converter.java,21,mport java.util.List;
False,CLI2Converter.java,CLI2Converter.java,22,mport java.util.ListIterator;
False,CLI2Converter.java,CLI2Converter.java,23,mport java.util.Set;
False,CLI2Converter.java,CLI2Converter.java,25,mport org.apache.commons.cli2.Group;
False,CLI2Converter.java,CLI2Converter.java,26,mport org.apache.commons.cli2.Option;
False,CLI2Converter.java,CLI2Converter.java,27,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,CLI2Converter.java,CLI2Converter.java,28,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,CLI2Converter.java,CLI2Converter.java,29,mport org.apache.commons.cli2.builder.GroupBuilder;
False,CLI2Converter.java,CLI2Converter.java,30,mport org.apache.commons.cli2.validation.InvalidArgumentException;
False,CLI2Converter.java,CLI2Converter.java,31,mport org.apache.commons.cli2.validation.Validator;
False,CLI2Converter.java,CLI2Converter.java,34, A utility class for converting data structures version 1 to
False,CLI2Converter.java,CLI2Converter.java,35, version 2 Option instances.
False,CLI2Converter.java,CLI2Converter.java,37,ublic class CLI2Converter {
False,CLI2Converter.java,CLI2Converter.java,39,rivate CLI2Converter(){
False,CLI2Converter.java,CLI2Converter.java,40,/ prevent creation of static utility class
False,CLI2Converter.java,CLI2Converter.java,44, Creates a version 2 Option instance from a version 1 Option instance.
False,CLI2Converter.java,CLI2Converter.java,46, @param option1 the version 1 Option to convert
False,CLI2Converter.java,CLI2Converter.java,47, @return a version 2 Option
False,CLI2Converter.java,CLI2Converter.java,49,ublic static Option option(final org.apache.commons.cli.Option option1){
False,CLI2Converter.java,CLI2Converter.java,51,inal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,CLI2Converter.java,CLI2Converter.java,52,builder.withRequired(option1.isRequired());
False,CLI2Converter.java,CLI2Converter.java,54,inal String shortName = option1.getOpt();
False,CLI2Converter.java,CLI2Converter.java,55,"f(shortName!=null && !"" "".equals(shortName)){"
False,CLI2Converter.java,CLI2Converter.java,56,builder.withShortName(shortName);
False,CLI2Converter.java,CLI2Converter.java,59,inal String longName = option1.getLongOpt();
False,CLI2Converter.java,CLI2Converter.java,60,f(longName!=null){
False,CLI2Converter.java,CLI2Converter.java,61,builder.withLongName(longName);
False,CLI2Converter.java,CLI2Converter.java,63,builder.withId(option1.getId());
False,CLI2Converter.java,CLI2Converter.java,65,inal String description = option1.getDescription();
False,CLI2Converter.java,CLI2Converter.java,66,f(description!=null){
False,CLI2Converter.java,CLI2Converter.java,67,builder.withDescription(description);
False,CLI2Converter.java,CLI2Converter.java,70,f(option1.hasArg()){
False,CLI2Converter.java,CLI2Converter.java,71,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,CLI2Converter.java,CLI2Converter.java,72,inal String argName = option1.getArgName();
False,CLI2Converter.java,CLI2Converter.java,73,builder.withName(argName);
False,CLI2Converter.java,CLI2Converter.java,74,builder.withMaximum(option1.getArgs());
False,CLI2Converter.java,CLI2Converter.java,75,f(option1.hasValueSeparator()){
False,CLI2Converter.java,CLI2Converter.java,76,builder.withSubsequentSeparator(option1.getValueSeparator());
False,CLI2Converter.java,CLI2Converter.java,78,f(option1.hasOptionalArg()){
False,CLI2Converter.java,CLI2Converter.java,79,builder.withMinimum(0);
False,CLI2Converter.java,CLI2Converter.java,81,lse{
False,CLI2Converter.java,CLI2Converter.java,82,/TODO check what non-optional arg means
False,CLI2Converter.java,CLI2Converter.java,83,builder.withMinimum(option1.getArgs());
False,CLI2Converter.java,CLI2Converter.java,86,inal Object type = option1.getType();
False,CLI2Converter.java,CLI2Converter.java,87,f(type!=null){
False,CLI2Converter.java,CLI2Converter.java,88,builder.withValidator(new TypeHandlerValidator(type));
False,CLI2Converter.java,CLI2Converter.java,91,builder.withArgument(abuilder.create());
False,CLI2Converter.java,CLI2Converter.java,94,eturn obuilder.create();
False,CLI2Converter.java,CLI2Converter.java,98, Creates a version 2 Group instance from a version 1 OptionGroup instance.
False,CLI2Converter.java,CLI2Converter.java,100, @param optionGroup1 the version 1 OptionGroup to convert
False,CLI2Converter.java,CLI2Converter.java,101, @return a version 2 Group
False,CLI2Converter.java,CLI2Converter.java,103,ublic static Group group(final OptionGroup optionGroup1){
False,CLI2Converter.java,CLI2Converter.java,105,inal GroupBuilder gbuilder = new GroupBuilder();
False,CLI2Converter.java,CLI2Converter.java,107,or(final Iterator i = optionGroup1.getOptions().iterator();i.hasNext();){
False,CLI2Converter.java,CLI2Converter.java,108,inal org.apache.commons.cli.Option option1 = (org.apache.commons.cli.Option)i.next();
False,CLI2Converter.java,CLI2Converter.java,109,inal Option option2 = option(option1);
False,CLI2Converter.java,CLI2Converter.java,110,builder.withOption(option2);
False,CLI2Converter.java,CLI2Converter.java,113,builder.withMaximum(1);
False,CLI2Converter.java,CLI2Converter.java,115,f(optionGroup1.isRequired()){
False,CLI2Converter.java,CLI2Converter.java,116,builder.withMinimum(1);
False,CLI2Converter.java,CLI2Converter.java,119,eturn gbuilder.create();
False,CLI2Converter.java,CLI2Converter.java,123, Creates a version 2 Group instance from a version 1 Options instance.
False,CLI2Converter.java,CLI2Converter.java,125, @param options1 the version 1 Options to convert
False,CLI2Converter.java,CLI2Converter.java,126, @return a version 2 Group
False,CLI2Converter.java,CLI2Converter.java,128,ublic static Group group(final Options options1){
False,CLI2Converter.java,CLI2Converter.java,130,inal GroupBuilder gbuilder = new GroupBuilder();
False,CLI2Converter.java,CLI2Converter.java,132,inal Set optionGroups = new HashSet();
False,CLI2Converter.java,CLI2Converter.java,134,or(final Iterator i = options1.getOptionGroups().iterator();i.hasNext();){
False,CLI2Converter.java,CLI2Converter.java,135,inal OptionGroup optionGroup1 = (OptionGroup)i.next();
False,CLI2Converter.java,CLI2Converter.java,136,roup group = group(optionGroup1);
False,CLI2Converter.java,CLI2Converter.java,137,builder.withOption(group);
False,CLI2Converter.java,CLI2Converter.java,138,ptionGroups.add(optionGroup1);
False,CLI2Converter.java,CLI2Converter.java,141,or(final Iterator i = options1.getOptions().iterator();i.hasNext();){
False,CLI2Converter.java,CLI2Converter.java,142,inal org.apache.commons.cli.Option option1 = (org.apache.commons.cli.Option)i.next();
False,CLI2Converter.java,CLI2Converter.java,143,"f(!optionInAGroup(option1,optionGroups)){"
False,CLI2Converter.java,CLI2Converter.java,144,inal Option option2 = option(option1);
False,CLI2Converter.java,CLI2Converter.java,145,builder.withOption(option2);
False,CLI2Converter.java,CLI2Converter.java,149,eturn gbuilder.create();
False,CLI2Converter.java,CLI2Converter.java,152,"rivate static boolean optionInAGroup(final org.apache.commons.cli.Option option1, final Set optionGroups) {"
False,CLI2Converter.java,CLI2Converter.java,153,or (Iterator i = optionGroups.iterator(); i.hasNext();) {
False,CLI2Converter.java,CLI2Converter.java,154,ptionGroup group = (OptionGroup) i.next();
False,CLI2Converter.java,CLI2Converter.java,155,f(group.getOptions().contains(option1)){
False,CLI2Converter.java,CLI2Converter.java,156,eturn true;
False,CLI2Converter.java,CLI2Converter.java,159,eturn false;
False,CLI2Converter.java,CLI2Converter.java,163,lass TypeHandlerValidator implements Validator{
False,CLI2Converter.java,CLI2Converter.java,165,rivate final Object type;
False,CLI2Converter.java,CLI2Converter.java,168, Creates a new Validator using the TypeHandler class.
False,CLI2Converter.java,CLI2Converter.java,170, @see TypeHandler
False,CLI2Converter.java,CLI2Converter.java,171, @param type The required type for valid elements
False,CLI2Converter.java,CLI2Converter.java,173,ublic TypeHandlerValidator(final Object type){
False,CLI2Converter.java,CLI2Converter.java,174,his.type = type;
False,CLI2Converter.java,CLI2Converter.java,177,* (non-Javadoc)
False,CLI2Converter.java,CLI2Converter.java,178, @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
False,CLI2Converter.java,CLI2Converter.java,180,ublic void validate(final List values) throws InvalidArgumentException {
False,CLI2Converter.java,CLI2Converter.java,181,inal ListIterator i = values.listIterator();
False,CLI2Converter.java,CLI2Converter.java,182,hile(i.hasNext()){
False,CLI2Converter.java,CLI2Converter.java,183,inal String value = (String)i.next();
False,CLI2Converter.java,CLI2Converter.java,184,"inal Object converted = TypeHandler.createValue(value,type);"
False,CLI2Converter.java,CLI2Converter.java,185,f(converted==null){
False,CLI2Converter.java,CLI2Converter.java,186,"hrow new InvalidArgumentException(""Unable to understand value: "" + value);"
False,CLI2Converter.java,CLI2Converter.java,188,.set(converted);
False,CLI2ConverterTest.java,CLI2ConverterTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,CLI2ConverterTest.java,CLI2ConverterTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,CLI2ConverterTest.java,CLI2ConverterTest.java,4, this work for additional information regarding copyright ownership.
False,CLI2ConverterTest.java,CLI2ConverterTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,7, the License.  You may obtain a copy of the License at
False,CLI2ConverterTest.java,CLI2ConverterTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,CLI2ConverterTest.java,CLI2ConverterTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,CLI2ConverterTest.java,CLI2ConverterTest.java,14, See the License for the specific language governing permissions and
False,CLI2ConverterTest.java,CLI2ConverterTest.java,15, limitations under the License.
False,CLI2ConverterTest.java,CLI2ConverterTest.java,17,ackage org.apache.commons.cli;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,19,mport org.apache.commons.cli2.Group;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,20,mport org.apache.commons.cli2.builder.PatternBuilder;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,21,mport org.apache.commons.cli2.option.GroupImpl;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,23,mport junit.framework.TestCase;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,25,ublic class CLI2ConverterTest extends TestCase {
False,CLI2ConverterTest.java,CLI2ConverterTest.java,27,rivate Options aceOptions;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,28,rivate OptionGroup aceOptionGroup;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,29,rivate Options abcdeOptions;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,30,rivate Options pattern;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,32,rivate Option a;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,33,rivate Option bbb;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,34,rivate Option c;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,35,rivate Option ddd;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,36,rivate Option e;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,37,rivate Option f;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,38,rivate Option g;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,39,rivate Option h;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,40,rivate Option i;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,42,ublic void setUp(){
False,CLI2ConverterTest.java,CLI2ConverterTest.java,43," = OptionBuilder.withDescription(""A description"").create('a');"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,44,"bb = OptionBuilder.create(""bbb"");"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,45," = OptionBuilder.withLongOpt(""ccc"").create('c');"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,46,"dd = OptionBuilder.withLongOpt(""ddd"").create();"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,47," = OptionBuilder.isRequired(true).create(""e"");"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,48," = OptionBuilder.hasArg().withArgName(""argument"").create('f');"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,49, = OptionBuilder.hasArgs(5).create('g');
False,CLI2ConverterTest.java,CLI2ConverterTest.java,50, = OptionBuilder.hasOptionalArg().create('h');
False,CLI2ConverterTest.java,CLI2ConverterTest.java,51, = OptionBuilder.hasOptionalArgs(5).create('i');
False,CLI2ConverterTest.java,CLI2ConverterTest.java,53,ceOptions = new Options();
False,CLI2ConverterTest.java,CLI2ConverterTest.java,54,ceOptions.addOption(OptionBuilder.create('a'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,55,ceOptions.addOption(OptionBuilder.create('c'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,56,ceOptions.addOption(OptionBuilder.create('e'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,58,ceOptionGroup = new OptionGroup();
False,CLI2ConverterTest.java,CLI2ConverterTest.java,59,ceOptionGroup.addOption(OptionBuilder.create('a'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,60,ceOptionGroup.addOption(OptionBuilder.create('c'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,61,ceOptionGroup.addOption(OptionBuilder.create('e'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,63,bcdeOptions = new Options();
False,CLI2ConverterTest.java,CLI2ConverterTest.java,64,bcdeOptions.addOption(OptionBuilder.create('d'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,65,ptionGroup og = new OptionGroup();
False,CLI2ConverterTest.java,CLI2ConverterTest.java,66,g.addOption(OptionBuilder.create('a'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,67,g.addOption(OptionBuilder.create('c'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,68,g.addOption(OptionBuilder.create('e'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,69,bcdeOptions.addOptionGroup(og);
False,CLI2ConverterTest.java,CLI2ConverterTest.java,70,bcdeOptions.addOption(OptionBuilder.create('b'));
False,CLI2ConverterTest.java,CLI2ConverterTest.java,72,"attern = PatternOptionBuilder.parsePattern(""a%ce:"");"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,76, Class to test for Option option(Option)
False,CLI2ConverterTest.java,CLI2ConverterTest.java,78,ublic void testOption() {
False,CLI2ConverterTest.java,CLI2ConverterTest.java,79,ssertTrue(e.isRequired());
False,CLI2ConverterTest.java,CLI2ConverterTest.java,81,"ssertEquals(""A description"",a.getDescription());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,82,"ssertEquals('a',a.getId());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,83,"ssertEquals(""[-a]"",CLI2Converter.option(a).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,84,"ssertEquals(""[-bbb]"",CLI2Converter.option(bbb).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,85,"ssertEquals(""[-c (--ccc)]"",CLI2Converter.option(c).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,86,"ssertEquals(""[--ddd]"",CLI2Converter.option(ddd).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,87,"ssertEquals(""-e"",CLI2Converter.option(e).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,88,"ssertEquals(""[-f <argument>]"",CLI2Converter.option(f).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,89,"ssertEquals(""[-g <arg1> <arg2> <arg3> <arg4> <arg5>]"",CLI2Converter.option(g).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,90,"ssertEquals(""[-h [<arg>]]"",CLI2Converter.option(h).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,91,"ssertEquals(""[-i [<arg1> [<arg2> [<arg3> [<arg4> [<arg5>]]]]]]"",CLI2Converter.option(i).toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,94, Class to test for Group group(OptionGroup)
False,CLI2ConverterTest.java,CLI2ConverterTest.java,96,ublic void testGroupOptionGroup() {
False,CLI2ConverterTest.java,CLI2ConverterTest.java,97,roupImpl group;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,99,roup = (GroupImpl)CLI2Converter.group(aceOptionGroup);
False,CLI2ConverterTest.java,CLI2ConverterTest.java,100,"ssertEquals(""[-a|-c|-e]"",group.toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,101,"ssertEquals(0,group.getMinimum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,102,"ssertEquals(1,group.getMaximum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,104,ceOptionGroup.setRequired(true);
False,CLI2ConverterTest.java,CLI2ConverterTest.java,105,roup = (GroupImpl)CLI2Converter.group(aceOptionGroup);
False,CLI2ConverterTest.java,CLI2ConverterTest.java,106,"ssertEquals(""-a|-c|-e"",group.toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,107,"ssertEquals(1,group.getMinimum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,108,"ssertEquals(1,group.getMaximum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,111, Class to test for Group group(Options)
False,CLI2ConverterTest.java,CLI2ConverterTest.java,113,ublic void testGroupOptions() {
False,CLI2ConverterTest.java,CLI2ConverterTest.java,115,roupImpl group;
False,CLI2ConverterTest.java,CLI2ConverterTest.java,117,roup = (GroupImpl)CLI2Converter.group(aceOptions);
False,CLI2ConverterTest.java,CLI2ConverterTest.java,118,"ssertEquals(""[-a|-c|-e]"",group.toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,119,"ssertEquals(0,group.getMinimum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,120,"ssertEquals(Integer.MAX_VALUE,group.getMaximum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,122,roup = (GroupImpl)CLI2Converter.group(abcdeOptions);
False,CLI2ConverterTest.java,CLI2ConverterTest.java,124,"ssertEquals(""[-a|-c|-e|-d|-b]"",group.toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,125,"ssertEquals(0,group.getMinimum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,126,"ssertEquals(Integer.MAX_VALUE,group.getMaximum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,128,roup = (GroupImpl)CLI2Converter.group(pattern);
False,CLI2ConverterTest.java,CLI2ConverterTest.java,129,"ssertEquals(""[-a <arg>|-c|-e <arg>]"",group.toString());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,130,"ssertEquals(0,group.getMinimum());"
False,CLI2ConverterTest.java,CLI2ConverterTest.java,131,"ssertEquals(Integer.MAX_VALUE,group.getMaximum());"

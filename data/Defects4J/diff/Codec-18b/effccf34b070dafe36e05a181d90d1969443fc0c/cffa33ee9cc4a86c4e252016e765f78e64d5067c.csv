is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,146,* Place holder for the bytes we're dealing with for our based logic.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,147,* Bitwise operations store and extract the encoding or decoding from this variable.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,149,private long bitWorkArea;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,284,f (0 == modulus) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,285,eturn; // no leftovers to process
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,290,if (0 == modulus && lineLength == 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,291,return; // no leftovers to process and not using chunking
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,294,int savedPos = pos;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,331,f (lineLength > 0){ // add chunk separator if required
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,338,currentLinePos += pos - savedPos; // keep track of current line position
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,339,"// if currentPos == 0 we are at the start of a line, so don't add CRLF"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,340,if (lineLength > 0 && currentLinePos > 0){ // add chunk separator if required
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,338,odulus = (++modulus) % BITS_PER_ENCODED_BYTE;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,347,modulus = (++modulus) % BYTES_PER_UNENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,72,rotected final byte PAD = '='; // instance variable just in case it needs to vary later
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,72,protected static final byte PAD_DEFAULT = '='; // Allow static access to default
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,74,protected final byte PAD = PAD_DEFAULT; // instance variable just in case it needs to vary later
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,114, Place holder for the bytes we're dealing with for our based logic.
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,115, Bitwise operations store and extract the encoding or decoding from this variable.
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,117,rotected long bitWorkArea;
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,48,private static final String [][] BASE32_TEST_CASES_CHUNKED = { //Chunked
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,50,"{""f""      ,""MY======\r\n""},"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,51,"{""fo""     ,""MZXQ====\r\n""},"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,52,"{""foo""    ,""MZXW6===\r\n""},"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,53,"{""foob""   ,""MZXW6YQ=\r\n""},"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,54,"{""fooba""  ,""MZXW6YTB\r\n""},"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,55,"{""foobar"" ,""MZXW6YTBOI======\r\n""},"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,72,public void testBase32Chunked () throws Exception {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,73,Base32 codec = new Base32(20);
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,74,for (int i = 0; i < BASE32_TEST_CASES_CHUNKED.length; i++) {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,75,"assertEquals(BASE32_TEST_CASES_CHUNKED[i][1], codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes(""UTF-8"")));"

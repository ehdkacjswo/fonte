is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,317,if (lineSeparator == null) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,318,lineLength = 0;  // disable chunk-separating
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,319,lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,960,f (chunkSize > 0 && chunkSeparator != null) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,964,if (chunkSize > 0) {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,67,"Base64 b64 = new Base64(76, null);  // null lineSeparator same as saying no-chunking"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,68,encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,69,encodedContent = StringUtils.newStringUtf8(encodedBytes);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,70,"assertTrue(""encoding hello world"", encodedContent.equals(""SGVsbG8gV29ybGQ=""));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,72,"b64 = new Base64(0, null);  // null lineSeparator same as saying no-chunking"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,73,encodedBytes = b64.encode(StringUtils.getBytesUtf8(content));
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,74,encodedContent = StringUtils.newStringUtf8(encodedBytes);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,75,"assertTrue(""encoding hello world"", encodedContent.equals(""SGVsbG8gV29ybGQ=""));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,77,// bogus characters to decode (to skip actually)
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,78,"byte[] decode = b64.decode(""SGVsbG{}8gV29ybGQ="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,79,String decodeString = StringUtils.newStringUtf8(decode);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,80,"assertTrue(""decode hello world"", decodeString.equals(""Hello World""));"

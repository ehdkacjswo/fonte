is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,20,import java.io.UnsupportedEncodingException;
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,24,import org.apache.commons.codec.CharEncoding;
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,26, Hex encoder and decoder.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,29,"* Hex encoder and decoder. The charset used for certain operation can be set, the default is set in"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,30,* {@link #DEFAULT_CHARSET_NAME}
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,35, Used to build output as Hex
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,39,* Default charset name is {@link CharEncoding#UTF_8}
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,37,rivate static final char[] DIGITS_LOWER = {
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,38,"0', '1', '2', '3', '4', '5', '6', '7',"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,39,"8', '9', 'a', 'b', 'c', 'd', 'e', 'f'"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,41,public static final String DEFAULT_CHARSET_NAME = CharEncoding.UTF_8;
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,43, Used to build output as Hex
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,44,* Used to build output as Hex
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,45,rivate static final char[] DIGITS_UPPER = {
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,46,"0', '1', '2', '3', '4', '5', '6', '7',"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,47,"8', '9', 'A', 'B', 'C', 'D', 'E', 'F'"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,46,"private static final char[] DIGITS_LOWER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,51, Converts an array of characters representing hexadecimal values into an
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,52, array of bytes of those same values. The returned array will be half the
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,53," length of the passed array, as it takes two characters to represent any"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,54, given byte. An exception is thrown if the passed char array has an odd
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,55, number of elements.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,49,* Used to build output as Hex
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,51,"private static final char[] DIGITS_UPPER = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,54,* Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,55,"* returned array will be half the length of the passed array, as it takes two characters to represent any given"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,56,* byte. An exception is thrown if the passed char array has an odd number of elements.
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,57, @param data An array of characters containing hexadecimal digits
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,58, @return A byte array containing binary data decoded from
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,59,         the supplied char array.
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,60, @throws DecoderException Thrown if an odd number or illegal of characters
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,61,         is supplied
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,58,* @param data
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,59,*            An array of characters containing hexadecimal digits
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,60,* @return A byte array containing binary data decoded from the supplied char array.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,61,* @throws DecoderException
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,62,*             Thrown if an odd number or illegal of characters is supplied
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,86, Converts a hexadecimal character to an integer.
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,88, @param ch A character to convert to an integer digit
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,89, @param index The index of the character in the source
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,90, @return An integer
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,91, @throws DecoderException Thrown if ch is an illegal hex character
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,93,"rotected static int toDigit(char ch, int index) throws DecoderException {"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,94,"nt digit = Character.digit(ch, 16);"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,95,f (digit == -1) {
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,96,"hrow new DecoderException(""Illegal hexadecimal charcter "" + ch + "" at index "" + index);"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,98,eturn digit;
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,154, Converts an array of character bytes representing hexadecimal values into an
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,155, array of bytes of those same values. The returned array will be half the
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,156," length of the passed array, as it takes two characters to represent any"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,157, given byte. An exception is thrown if the passed char array has an odd
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,158, number of elements.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,139,* Converts an array of bytes into a String representing the hexadecimal values of each byte in order. The returned
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,140,"* String will be double the length of the passed array, as it takes two characters to represent any given byte."
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,142,* @param data
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,143,*            a byte[] to convert to Hex characters
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,144,* @return A String containing hexadecimal characters
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,145,* @since 1.4
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,147,public static String encodeHexString(byte[] data) {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,148,return new String(encodeHex(data));
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,152,* Converts a hexadecimal character to an integer.
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,160, @param array An array of character bytes containing hexadecimal digits
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,161, @return A byte array containing binary data decoded from
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,162,         the supplied byte array (representing characters).
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,163, @throws DecoderException Thrown if an odd number of characters is supplied
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,164,                   to this function
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,154,* @param ch
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,155,*            A character to convert to an integer digit
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,156,* @param index
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,157,*            The index of the character in the source
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,158,* @return An integer
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,159,* @throws DecoderException
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,160,*             Thrown if ch is an illegal hex character
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,162,"protected static int toDigit(char ch, int index) throws DecoderException {"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,163,"int digit = Character.digit(ch, 16);"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,164,if (digit == -1) {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,165,"throw new DecoderException(""Illegal hexadecimal charcter "" + ch + "" at index "" + index);"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,167,return digit;
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,170,private String charsetName = DEFAULT_CHARSET_NAME;
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,173,* Creates a new codec with the default charset name {@link #DEFAULT_CHARSET_NAME}
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,175,public Hex() {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,176,// use default encoding
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,180,* Creates a new codec with the given charset name.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,182,* @param csName
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,183,*            the charset name.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,185,public Hex(String csName) {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,186,setCharsetName(csName);
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,190,* Converts an array of character bytes representing hexadecimal values into an array of bytes of those same values.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,191,"* The returned array will be half the length of the passed array, as it takes two characters to represent any given"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,192,* byte. An exception is thrown if the passed char array has an odd number of elements.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,194,* @param array
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,195,*            An array of character bytes containing hexadecimal digits
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,196,* @return A byte array containing binary data decoded from the supplied byte array (representing characters).
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,197,* @throws DecoderException
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,198,*             Thrown if an odd number of characters is supplied to this function
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,168,eturn decodeHex(new String(array).toCharArray());
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,202,try {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,203,"return decodeHex(new String(array, getCharsetName()).toCharArray());"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,204,} catch (UnsupportedEncodingException e) {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,205,"throw new DecoderException(e.getMessage(), e);"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,172, Converts a String or an array of character bytes representing hexadecimal values into an
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,173, array of bytes of those same values. The returned array will be half the
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,174," length of the passed String or array, as it takes two characters to represent any"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,175, given byte. An exception is thrown if the passed char array has an odd
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,176, number of elements.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,210,* Converts a String or an array of character bytes representing hexadecimal values into an array of bytes of those
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,211,"* same values. The returned array will be half the length of the passed String or array, as it takes two characters"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,212,* to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,178," @param object A String or, an array of character bytes containing hexadecimal digits"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,179, @return A byte array containing binary data decoded from
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,180,         the supplied byte array (representing characters).
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,181, @throws DecoderException Thrown if an odd number of characters is supplied
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,182,                   to this function or the object is not a String or char[]
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,214,* @param object
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,215,"*            A String or, an array of character bytes containing hexadecimal digits"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,216,* @return A byte array containing binary data decoded from the supplied byte array (representing characters).
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,217,* @throws DecoderException
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,218,*             Thrown if an odd number of characters is supplied to this function or the object is not a String or
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,219,*             char[]
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,195, Converts an array of bytes into an array of bytes for the characters representing the
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,196, hexadecimal values of each byte in order. The returned array will be
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,197," double the length of the passed array, as it takes two characters to"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,232,* Converts an array of bytes into an array of bytes for the characters representing the hexadecimal values of each
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,233,"* byte in order. The returned array will be double the length of the passed array, as it takes two characters to"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,200, @param array a byte[] to convert to Hex characters
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,235,* <p>
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,236,* The conversion from hexadecimal characters to the returned bytes is performed with the charset named by
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,237,* {@link #getCharsetName()}.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,238,* </p>
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,240,* @param array
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,241,*            a byte[] to convert to Hex characters
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,243,* @throws IllegalStateException
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,244,*             if the charsetName is invalid. This API throws {@link IllegalStateException} instead of
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,245,*             {@link UnsupportedEncodingException} for backward compatibility.
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,205,eturn new String(encodeHex(array)).getBytes();
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,249,"return StringUtils.getBytesUnchecked(encodeHexString(array), getCharsetName());"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,209, Converts a String or an array of bytes into an array of characters representing the
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,210, hexadecimal values of each byte in order. The returned array will be
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,211," double the length of the passed String or array, as it takes two characters to"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,212, represent any given byte.
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,214," @param object a String, or byte[] to convert to Hex characters"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,253,* Converts a String or an array of bytes into an array of characters representing the hexadecimal values of each
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,254,"* byte in order. The returned array will be double the length of the passed String or array, as it takes two"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,255,* characters to represent any given byte.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,256,* <p>
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,257,* The conversion from hexadecimal characters to bytes to be encoded to performed with the charset named by
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,258,* {@link #getCharsetName()}.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,259,* </p>
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,261,* @param object
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,262,"*            a String, or byte[] to convert to Hex characters"
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,216, @throws EncoderException Thrown if the given object is not a String or byte[]
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,264,* @throws EncoderException
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,265,*             Thrown if the given object is not a String or byte[]
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,219,ublic Object encode(Object object) throws EncoderException {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,268,public Object encode(Object object) throws EncoderException {
False,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,221,yte[] byteArray = object instanceof String ? ((String) object).getBytes() : (byte[]) object;
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,270,byte[] byteArray = object instanceof String ? ((String) object).getBytes(getCharsetName()) : (byte[]) object;
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,274,} catch (UnsupportedEncodingException e) {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,275,"throw new EncoderException(e.getMessage(), e);"
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,280,* Gets the charset name.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,282,* @return the charset name.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,284,public String getCharsetName() {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,285,return this.charsetName;
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,289,* Sets the charset name.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,291,* @param charsetName
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,292,*            the charset name.
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,294,public void setCharsetName(String charsetName) {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,295,this.charsetName = charsetName;
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,298,public String toString() {
True,src/java/org/apache/commons/codec/binary/Hex.java,src/java/org/apache/commons/codec/binary/Hex.java,299,"return super.toString() + ""[charsetName="" + this.charsetName + ""]"";"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,46," @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,46,"* @see #getBytesUnchecked(String, String)"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,49,"eturn StringUtils.getSupportedBytes(string, CharEncoding.ISO_8859_1);"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,49,"return StringUtils.getBytesUnchecked(string, CharEncoding.ISO_8859_1);"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,62," @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,62,"* @see #getBytesUnchecked(String, String)"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,65,"eturn StringUtils.getSupportedBytes(string, CharEncoding.US_ASCII);"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,65,"return StringUtils.getBytesUnchecked(string, CharEncoding.US_ASCII);"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,78," @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,78,"* @see #getBytesUnchecked(String, String)"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,81,"eturn StringUtils.getSupportedBytes(string, CharEncoding.UTF_16);"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,81,"return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16);"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,94," @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,94,"* @see #getBytesUnchecked(String, String)"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,97,"eturn StringUtils.getSupportedBytes(string, CharEncoding.UTF_16BE);"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,97,"return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16BE);"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,110," @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,110,"* @see #getBytesUnchecked(String, String)"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,113,"eturn StringUtils.getSupportedBytes(string, CharEncoding.UTF_16LE);"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,113,"return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_16LE);"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,126," @see #getSupportedBytes(String, String)"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,126,"* @see #getBytesUnchecked(String, String)"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,129,"eturn StringUtils.getSupportedBytes(string, CharEncoding.UTF_8);"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,129,"return StringUtils.getBytesUnchecked(string, CharEncoding.UTF_8);"
False,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,151,"ublic static byte[] getSupportedBytes(String string, String charsetName) {"
True,src/java/org/apache/commons/codec/binary/StringUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,151,"public static byte[] getBytesUnchecked(String string, String charsetName) {"
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,201,eturn new String(Hex.encodeHex(md5(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,201,return Hex.encodeHexString(md5(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,215,eturn new String(Hex.encodeHex(md5(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,215,return Hex.encodeHexString(md5(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,226,eturn new String(Hex.encodeHex(md5(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,226,return Hex.encodeHexString(md5(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,324,eturn new String(Hex.encodeHex(sha256(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,324,return Hex.encodeHexString(sha256(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,341,eturn new String(Hex.encodeHex(sha256(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,341,return Hex.encodeHexString(sha256(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,356,eturn new String(Hex.encodeHex(sha256(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,356,return Hex.encodeHexString(sha256(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,418,eturn new String(Hex.encodeHex(sha384(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,418,return Hex.encodeHexString(sha384(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,435,eturn new String(Hex.encodeHex(sha384(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,435,return Hex.encodeHexString(sha384(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,450,eturn new String(Hex.encodeHex(sha384(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,450,return Hex.encodeHexString(sha384(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,512,eturn new String(Hex.encodeHex(sha512(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,512,return Hex.encodeHexString(sha512(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,529,eturn new String(Hex.encodeHex(sha512(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,529,return Hex.encodeHexString(sha512(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,544,eturn new String(Hex.encodeHex(sha512(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,544,return Hex.encodeHexString(sha512(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,555,eturn new String(Hex.encodeHex(sha(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,555,return Hex.encodeHexString(sha(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,569,eturn new String(Hex.encodeHex(sha(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,569,return Hex.encodeHexString(sha(data));
False,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,580,eturn new String(Hex.encodeHex(sha(data)));
True,src/java/org/apache/commons/codec/digest/DigestUtils.java,src/java/org/apache/commons/codec/digest/DigestUtils.java,580,return Hex.encodeHexString(sha(data));
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,943,"ystem.out.println(""reference: ["" + new String(Hex.encodeHex(ids[i])) + ""]"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,943,"System.out.println(""reference: ["" + Hex.encodeHexString(ids[i]) + ""]"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,945,ew String(Hex.encodeHex(decodedStandard)) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,945,Hex.encodeHexString(decodedStandard) +
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,950,ew String(Hex.encodeHex(decodedUrlSafe1)) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,950,Hex.encodeHexString(decodedUrlSafe1) +
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,955,ew String(Hex.encodeHex(decodedUrlSafe2)) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,955,Hex.encodeHexString(decodedUrlSafe2) +
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,960,ew String(Hex.encodeHex(decodedUrlSafe3)) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,960,Hex.encodeHexString(decodedUrlSafe3) +
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,20,import java.io.UnsupportedEncodingException;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,21,import java.nio.charset.Charset;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,23,import java.util.Iterator;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,25,import java.util.Set;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,26,import java.util.SortedMap;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,28,import junit.framework.Assert;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,42,private final static boolean LOG = false;
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,41,ublic void testDecodeArrayOddCharacters() {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,49,* @param data
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,51,private void checkDecodeHexOddCharacters(char[] data) {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,43,ew Hex().decode(new byte[] { 65 });
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,53,Hex.decodeHex(data);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,55,} catch (DecoderException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,56,// Expected exception
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,60,private void log(String s) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,61,if (LOG) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,62,System.out.println(s);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,66,"public void testCustomCharset() throws UnsupportedEncodingException, DecoderException {"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,67,SortedMap map = Charset.availableCharsets();
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,68,Set keys = map.keySet();
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,69,Iterator iterator = keys.iterator();
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,70,"log(""testCustomCharset: Checking "" + keys.size() + "" charsets..."");"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,71,while (iterator.hasNext()) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,72,String name = (String) iterator.next();
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,73,"testCustomCharset(name, ""testCustomCharset"");"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,46,atch (DecoderException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,78,* @param name
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,79,* @param parent
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,80,*            TODO
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,81,* @throws UnsupportedEncodingException
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,82,* @throws DecoderException
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,84,"private void testCustomCharset(String name, String parent) throws UnsupportedEncodingException, DecoderException {"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,85,if (charsetSanityCheck(name) == false) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,86,"log(""Interesting Java charset oddity: Charset sanity check failed for "" + name);"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,87,return;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,89,"log(parent + ""="" + name);"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,90,Hex customCodec = new Hex(name);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,91,// source data
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,92,"String sourceString = ""Hello World"";"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,93,byte[] sourceBytes = sourceString.getBytes(name);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,94,// test 1
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,95,// encode source to hex string to bytes with charset
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,96,byte[] actualEncodedBytes = customCodec.encode(sourceBytes);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,97,// encode source to hex string...
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,98,String expectedHexString = Hex.encodeHexString(sourceBytes);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,99,// ... and get the bytes in the expected charset
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,100,byte[] expectedHexStringBytes = expectedHexString.getBytes(name);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,101,"Assert.assertTrue(Arrays.equals(expectedHexStringBytes, actualEncodedBytes));"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,102,// test 2
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,103,"String actualStringFromBytes = new String(actualEncodedBytes, name);"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,104,"assertEquals(name + "", expectedHexString="" + expectedHexString + "", actualStringFromBytes="" + actualStringFromBytes,"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,105,"expectedHexString, actualStringFromBytes);"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,106,// second test:
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,107,Hex utf8Codec = new Hex();
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,108,"expectedHexString = ""48656c6c6f20576f726c64"";"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,109,byte[] decodedUtf8Bytes = (byte[]) utf8Codec.decode(expectedHexString);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,110,"actualStringFromBytes = new String(decodedUtf8Bytes, utf8Codec.getCharsetName());"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,111,// sanity check:
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,112,"assertEquals(name, sourceString, actualStringFromBytes);"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,113,// actual check:
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,114,byte[] decodedCustomBytes = customCodec.decode(actualEncodedBytes);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,115,"actualStringFromBytes = new String(decodedCustomBytes, name);"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,116,"assertEquals(name, sourceString, actualStringFromBytes);"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,119,private boolean charsetSanityCheck(String name) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,120,"final String source = ""the quick brown dog jumped over the lazy fox"";"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,121,try {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,122,byte[] bytes = source.getBytes(name);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,123,"String str = new String(bytes, name);"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,124,return source.equals(str);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,125,} catch (UnsupportedEncodingException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,126,// Should NEVER happen since we are getting the name from the Charset class.
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,127,if (LOG) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,128,e.printStackTrace();
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,130,return false;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,131,} catch (UnsupportedOperationException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,132,// Happens with:
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,133,// x-JIS0208 on Windows XP and Java Sun 1.6.0_14
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,134,if (LOG) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,135,e.printStackTrace();
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,137,return false;
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,141,public void testDecodeArrayOddCharacters() {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,142,try {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,143,new Hex().decode(new byte[]{65});
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,144,"fail(""An exception wasn't thrown when trying to decode an odd number of characters"");"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,145,} catch (DecoderException e) {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,56,atch (DecoderException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,154,} catch (DecoderException e) {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,66,atch (DecoderException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,163,} catch (DecoderException e) {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,73,ew Hex().decode(new int[] { 65 });
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,170,new Hex().decode(new int[]{65});
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,76,atch (DecoderException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,172,} catch (DecoderException e) {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,81,ublic void testDecodeHexOddCharacters() {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,82,ry {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,83,ex.decodeHex(new char[] { 'A' });
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,84,"ail(""An exception wasn't thrown when trying to decode an odd number of characters"");"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,86,atch (DecoderException e) {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,87,/ Expected exception
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,177,public void testDecodeHexOddCharacters1() {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,178,checkDecodeHexOddCharacters(new char[]{'A'});
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,181,public void testDecodeHexOddCharacters3() {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,182,"checkDecodeHexOddCharacters(new char[]{'A', 'B', 'C'});"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,185,public void testDecodeHexOddCharacters5() {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,186,"checkDecodeHexOddCharacters(new char[]{'A', 'B', 'C', 'D', 'E'});"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,96,atch (DecoderException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,193,} catch (DecoderException e) {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,104,"ssertTrue(Arrays.equals(new byte[0], (byte[])new Hex().decode("""")));"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,201,"assertTrue(Arrays.equals(new byte[0], (byte[]) new Hex().decode("""")));"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,109,ew Hex().encode(new int[] { 65 });
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,206,new Hex().encode(new int[]{65});
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,112,atch (EncoderException e) {
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,208,} catch (EncoderException e) {
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,137,har[] encodedStringChars = (char[])hex.encode(dataString);
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,138,ecodedBytes = (byte[])hex.decode(encodedStringChars);
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,139,"ssertTrue(Arrays.equals(dataString.getBytes(), decodedBytes));"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,233,char[] encodedStringChars = (char[]) hex.encode(dataString);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,234,decodedBytes = (byte[]) hex.decode(encodedStringChars);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,235,"assertTrue(Arrays.equals(StringUtils.getBytesUtf8(dataString), decodedBytes));"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,143,ncodedStringChars = (char[])hex.encode(dataString);
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,144,ecodedBytes = (byte[])hex.decode(new String(encodedStringChars));
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,145,"ssertTrue(Arrays.equals(dataString.getBytes(), decodedBytes));"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,239,encodedStringChars = (char[]) hex.encode(dataString);
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,240,decodedBytes = (byte[]) hex.decode(new String(encodedStringChars));
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,241,"assertTrue(Arrays.equals(StringUtils.getBytesUtf8(dataString), decodedBytes));"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,152,"ssertTrue(Arrays.equals(new char[0], (char[])new Hex().encode("""")));"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,248,"assertTrue(Arrays.equals(new char[0], (char[]) new Hex().encode("""")));"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,157,ssertEquals(
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,158,"000000000000000000000000000000000000"""
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,159," ""000000000000000000000000000000000000"","
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,160,ew String(c));
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,253,"assertEquals(""000000000000000000000000000000000000000000000000000000000000000000000000"", new String(c));"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,164,"yte[] b = ""Hello World"".getBytes();"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,257,"byte[] b = StringUtils.getBytesUtf8(""Hello World"");"
False,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,176,"yte[] b = ""Hello World"".getBytes();"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,269,"byte[] b = StringUtils.getBytesUtf8(""Hello World"");"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,280,"public void testRequiredCharset() throws UnsupportedEncodingException, DecoderException {"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,281,"testCustomCharset(""UTF-8"", ""testRequiredCharset"");"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,282,"testCustomCharset(""UTF-16"", ""testRequiredCharset"");"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,283,"testCustomCharset(""UTF-16BE"", ""testRequiredCharset"");"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,284,"testCustomCharset(""UTF-16LE"", ""testRequiredCharset"");"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,285,"testCustomCharset(""US-ASCII"", ""testRequiredCharset"");"
True,src/test/org/apache/commons/codec/binary/HexTest.java,src/test/org/apache/commons/codec/binary/HexTest.java,286,"testCustomCharset(""ISO8859_1"", ""testRequiredCharset"");"
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,56,estGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,56,testGetBytesUnchecked(charsetName);
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,62,private void testGetBytesUnchecked(String charsetName) throws UnsupportedEncodingException {
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,63,byte[] expected = STRING_FIXTURE.getBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,64,"byte[] actual = StringUtils.getBytesUnchecked(STRING_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,65,"Assert.assertTrue(Arrays.equals(expected, actual));"
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,64,estGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,70,testGetBytesUnchecked(charsetName);
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,72,estGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,78,testGetBytesUnchecked(charsetName);
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,80,estGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,86,testGetBytesUnchecked(charsetName);
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,88,estGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,94,testGetBytesUnchecked(charsetName);
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,96,estGetSupportedBytes(charsetName);
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,102,testGetBytesUnchecked(charsetName);
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,102,rivate void testGetSupportedBytes(String charsetName) throws UnsupportedEncodingException {
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,103,yte[] expected = STRING_FIXTURE.getBytes(charsetName);
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,104,"yte[] actual = StringUtils.getSupportedBytes(STRING_FIXTURE, charsetName);"
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,105,"ssert.assertTrue(Arrays.equals(expected, actual));"
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,108,ublic void testGetSupportedBytesBadEnc() {
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,108,public void testGetBytesUncheckedBadName() {
False,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,110,"tringUtils.getSupportedBytes(STRING_FIXTURE, ""UNKNOWN"");"
True,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,110,"StringUtils.getBytesUnchecked(STRING_FIXTURE, ""UNKNOWN"");"

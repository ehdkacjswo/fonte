is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,84,"ssertTrue(""encoding hello world"", encodedContent.equals(""SGVsbG8gV29ybGQ=""));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,84,"assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,89,"ssertTrue(""encoding hello world"", encodedContent.equals(""SGVsbG8gV29ybGQ=""));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,89,"assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,94,"ssertTrue(""encoding hello world"", encodedContent.equals(""SGVsbG8gV29ybGQ=""));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,94,"assertEquals(""encoding hello world"", ""SGVsbG8gV29ybGQ="", encodedContent);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,99,"ssertTrue(""decode hello world"", decodeString.equals(""Hello World""));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,99,"assertEquals(""decode hello world"", ""Hello World"", decodeString);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,266,"ssertTrue(Base64.decodeBase64(""===="".getBytes(""UTF-8"")).length == 0);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,266,"assertEquals(0, Base64.decodeBase64(""===="".getBytes(""UTF-8"")).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,269,"ssertTrue(Base64.decodeBase64(""==="".getBytes(""UTF-8"")).length == 0);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,270,"ssertTrue(Base64.decodeBase64(""=="".getBytes(""UTF-8"")).length == 0);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,271,"ssertTrue(Base64.decodeBase64(""="".getBytes(""UTF-8"")).length == 0);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,272,"ssertTrue(Base64.decodeBase64("""".getBytes(""UTF-8"")).length == 0);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,269,"assertEquals(0, Base64.decodeBase64(""==="".getBytes(""UTF-8"")).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,270,"assertEquals(0, Base64.decodeBase64(""=="".getBytes(""UTF-8"")).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,271,"assertEquals(0, Base64.decodeBase64(""="".getBytes(""UTF-8"")).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,272,"assertEquals(0, Base64.decodeBase64("""".getBytes(""UTF-8"")).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,277,"ssertTrue(Base64.decodeBase64(""====\n"".getBytes(""UTF-8"")).length == 0);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,277,"assertEquals(0, Base64.decodeBase64(""====\n"".getBytes(""UTF-8"")).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,280,"ssertTrue(Base64.decodeBase64(""===\n"".getBytes(""UTF-8"")).length == 0);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,281,"ssertTrue(Base64.decodeBase64(""==\n"".getBytes(""UTF-8"")).length == 0);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,282,"ssertTrue(Base64.decodeBase64(""=\n"".getBytes(""UTF-8"")).length == 0);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,283,"ssertTrue(Base64.decodeBase64(""\n"".getBytes(""UTF-8"")).length == 0);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,280,"assertEquals(0, Base64.decodeBase64(""===\n"".getBytes(""UTF-8"")).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,281,"assertEquals(0, Base64.decodeBase64(""==\n"".getBytes(""UTF-8"")).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,282,"assertEquals(0, Base64.decodeBase64(""=\n"".getBytes(""UTF-8"")).length);"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,283,"assertEquals(0, Base64.decodeBase64(""\n"".getBytes(""UTF-8"")).length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,304,"ssertTrue(""Dest string doesn't equal the original"", dest.equals(orig));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,304,"assertEquals(""Dest string doesn't equal the original"", orig, dest);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,457,"ssertTrue(""The result should be empty as the test encoded content did "" + ""not contain any valid base 64 characters"","
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,458,esult.length == 0);
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,457,"assertEquals(""The result should be empty as the test encoded content did "" + ""not contain any valid base 64 characters"","
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,458,"0, result.length);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,491,"ssertTrue(""dest string does not equal original"", dest.equals(original));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,491,"assertEquals(""dest string does not equal original"", original, dest);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,516,"ssertTrue(""dest string does not equal original"", dest.equals(original));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,516,"assertEquals(""dest string does not equal original"", original, dest);"
False,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1235,"ssertTrue(""testDEFAULT_BUFFER_SIZE"", strOriginal.equals(strDecoded));"
True,src/test/java/org/apache/commons/codec/binary/Base64Test.java,src/test/java/org/apache/commons/codec/binary/Base64Test.java,1235,"assertEquals(""testDEFAULT_BUFFER_SIZE"", strOriginal, strDecoded);"
False,src/test/java/org/apache/commons/codec/binary/HexTest.java,src/test/java/org/apache/commons/codec/binary/HexTest.java,340,ssertTrue(expected.equals(new String(actual)));
True,src/test/java/org/apache/commons/codec/binary/HexTest.java,src/test/java/org/apache/commons/codec/binary/HexTest.java,340,"assertEquals(expected, new String(actual));"
False,src/test/java/org/apache/commons/codec/binary/HexTest.java,src/test/java/org/apache/commons/codec/binary/HexTest.java,342,ssertTrue(expected.equals(new String(actual)));
True,src/test/java/org/apache/commons/codec/binary/HexTest.java,src/test/java/org/apache/commons/codec/binary/HexTest.java,342,"assertEquals(expected, new String(actual));"
False,src/test/java/org/apache/commons/codec/binary/HexTest.java,src/test/java/org/apache/commons/codec/binary/HexTest.java,344,ssertFalse(expected.equals(new String(actual)));
True,src/test/java/org/apache/commons/codec/binary/HexTest.java,src/test/java/org/apache/commons/codec/binary/HexTest.java,344,"assertEquals(expected, new String(actual));"

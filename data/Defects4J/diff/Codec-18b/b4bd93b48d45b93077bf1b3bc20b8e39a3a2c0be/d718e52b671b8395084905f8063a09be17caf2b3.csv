is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,4," The Apache Software License, Version 1.1"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,6, Copyright (c) 2001-2003 The Apache Software Foundation.  All rights
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,7, reserved.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,9," Redistribution and use in source and binary forms, with or without"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,10," modification, are permitted provided that the following conditions"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,11, are met:
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,13, 1. Redistributions of source code must retain the above copyright
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,14,"    notice, this list of conditions and the following disclaimer."
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,16, 2. Redistributions in binary form must reproduce the above copyright
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,17,"    notice, this list of conditions and the following disclaimer in"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,18,    the documentation and/or other materials provided with the
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,19,    distribution.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,21," 3. The end-user documentation included with the redistribution,"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,22,"    if any, must include the following acknowledgement:"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,23,"       ""This product includes software developed by the"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,24,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,25,"    Alternately, this acknowledgement may appear in the software itself,"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,26,    if and wherever such third-party acknowledgements normally appear.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,28," 4. The names ""Apache"", ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,29,"    Foundation"" must not be used to endorse or promote products derived"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,30,    from this software without prior written permission. For written
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,31,"    permission, please contact apache@apache.org."
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,33," 5. Products derived from this software may not be called ""Apache"","
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,34,"    ""Apache"" nor may ""Apache"" appear in their name without prior"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,35,    written permission of the Apache Software Foundation.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,37, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,38," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,39, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,40, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,41," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,42," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,43," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,44," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,45," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,46, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,47," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,48, SUCH DAMAGE.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,51, This software consists of voluntary contributions made by many
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,52, individuals on behalf of the Apache Software Foundation.  For more
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,53," information on the Apache Software Foundation, please see"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,54, <http://www.apache.org/>.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,58,ackage org.apache.commons.codec.base64;
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,61,mport java.util.Arrays;
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,62,mport java.util.Random;
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,64,mport junit.framework.Test;
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,65,mport junit.framework.TestCase;
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,66,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,69, @version $Revision: 1.4 $ $Date: 2003/10/05 21:45:49 $
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,70, @author Scott Sanders
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,71, @author Rodney Waldhoff
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,73,ublic class Base64Test extends TestCase {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,76, Construct a new instance of this test case.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,78, @param name Name of the test case
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,80,ublic Base64Test(String name) {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,81,uper(name);
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,86, Set up instance variables required by this test case.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,88,ublic void setUp() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,93, Return the tests included in this test suite.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,95,ublic static Test suite() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,96,eturn (new TestSuite(Base64Test.class));
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,100, Tear down instance variables required by this test case.
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,102,ublic void tearDown() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,107,  Test the Base64 implementation
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,109,ublic void testBase64() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,110,"tring content = ""Hello World"";"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,111,tring encodedContent;
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,112,ncodedContent = new String(Base64.encode(content.getBytes()));
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,113,"ssertTrue(""encoding hello world"", encodedContent.equals(""SGVsbG8gV29ybGQ=""));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,116,/ encode/decode random arrays from size 0 to size 11
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,117,ublic void testEncodeDecodeSmall() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,118,or(int i=0;i<12;i++) {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,119,yte[] data = new byte[i];
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,120,random.nextBytes(data);
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,121,yte[] enc =  Base64.encode(data);
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,122,"ssertTrue(""\"""" + (new String(enc)) + ""\"" is Base64 data."",Base64.isBase64((new String(enc))));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,123,yte[] data2 = Base64.decode(enc);
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,124,"ssertTrue(toString(data) + "" equals "" + toString(data2),Arrays.equals(data,data2));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,128,/ encode/decode a large random array
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,129,ublic void testEncodeDecodeRandom() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,130,or(int i=1;i<5;i++) {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,131,yte[] data = new byte[_random.nextInt(10000)+1];
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,132,random.nextBytes(data);
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,133,yte[] enc =  Base64.encode(data);
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,134,ssertTrue(Base64.isBase64(new String(enc)));
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,135,yte[] data2 = Base64.decode(enc);
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,136,"ssertTrue(Arrays.equals(data,data2));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,140,ublic void testSingletons() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,141,"ssertEquals(""AA=="",new String(Base64.encode(new byte[] { (byte)0 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,142,"ssertEquals(""AQ=="",new String(Base64.encode(new byte[] { (byte)1 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,143,"ssertEquals(""Ag=="",new String(Base64.encode(new byte[] { (byte)2 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,144,"ssertEquals(""Aw=="",new String(Base64.encode(new byte[] { (byte)3 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,145,"ssertEquals(""BA=="",new String(Base64.encode(new byte[] { (byte)4 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,146,"ssertEquals(""BQ=="",new String(Base64.encode(new byte[] { (byte)5 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,147,"ssertEquals(""Bg=="",new String(Base64.encode(new byte[] { (byte)6 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,148,"ssertEquals(""Bw=="",new String(Base64.encode(new byte[] { (byte)7 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,149,"ssertEquals(""CA=="",new String(Base64.encode(new byte[] { (byte)8 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,150,"ssertEquals(""CQ=="",new String(Base64.encode(new byte[] { (byte)9 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,151,"ssertEquals(""Cg=="",new String(Base64.encode(new byte[] { (byte)10 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,152,"ssertEquals(""Cw=="",new String(Base64.encode(new byte[] { (byte)11 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,153,"ssertEquals(""DA=="",new String(Base64.encode(new byte[] { (byte)12 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,154,"ssertEquals(""DQ=="",new String(Base64.encode(new byte[] { (byte)13 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,155,"ssertEquals(""Dg=="",new String(Base64.encode(new byte[] { (byte)14 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,156,"ssertEquals(""Dw=="",new String(Base64.encode(new byte[] { (byte)15 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,157,"ssertEquals(""EA=="",new String(Base64.encode(new byte[] { (byte)16 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,158,"ssertEquals(""EQ=="",new String(Base64.encode(new byte[] { (byte)17 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,159,"ssertEquals(""Eg=="",new String(Base64.encode(new byte[] { (byte)18 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,160,"ssertEquals(""Ew=="",new String(Base64.encode(new byte[] { (byte)19 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,161,"ssertEquals(""FA=="",new String(Base64.encode(new byte[] { (byte)20 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,162,"ssertEquals(""FQ=="",new String(Base64.encode(new byte[] { (byte)21 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,163,"ssertEquals(""Fg=="",new String(Base64.encode(new byte[] { (byte)22 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,164,"ssertEquals(""Fw=="",new String(Base64.encode(new byte[] { (byte)23 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,165,"ssertEquals(""GA=="",new String(Base64.encode(new byte[] { (byte)24 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,166,"ssertEquals(""GQ=="",new String(Base64.encode(new byte[] { (byte)25 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,167,"ssertEquals(""Gg=="",new String(Base64.encode(new byte[] { (byte)26 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,168,"ssertEquals(""Gw=="",new String(Base64.encode(new byte[] { (byte)27 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,169,"ssertEquals(""HA=="",new String(Base64.encode(new byte[] { (byte)28 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,170,"ssertEquals(""HQ=="",new String(Base64.encode(new byte[] { (byte)29 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,171,"ssertEquals(""Hg=="",new String(Base64.encode(new byte[] { (byte)30 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,172,"ssertEquals(""Hw=="",new String(Base64.encode(new byte[] { (byte)31 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,173,"ssertEquals(""IA=="",new String(Base64.encode(new byte[] { (byte)32 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,174,"ssertEquals(""IQ=="",new String(Base64.encode(new byte[] { (byte)33 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,175,"ssertEquals(""Ig=="",new String(Base64.encode(new byte[] { (byte)34 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,176,"ssertEquals(""Iw=="",new String(Base64.encode(new byte[] { (byte)35 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,177,"ssertEquals(""JA=="",new String(Base64.encode(new byte[] { (byte)36 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,178,"ssertEquals(""JQ=="",new String(Base64.encode(new byte[] { (byte)37 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,179,"ssertEquals(""Jg=="",new String(Base64.encode(new byte[] { (byte)38 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,180,"ssertEquals(""Jw=="",new String(Base64.encode(new byte[] { (byte)39 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,181,"ssertEquals(""KA=="",new String(Base64.encode(new byte[] { (byte)40 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,182,"ssertEquals(""KQ=="",new String(Base64.encode(new byte[] { (byte)41 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,183,"ssertEquals(""Kg=="",new String(Base64.encode(new byte[] { (byte)42 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,184,"ssertEquals(""Kw=="",new String(Base64.encode(new byte[] { (byte)43 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,185,"ssertEquals(""LA=="",new String(Base64.encode(new byte[] { (byte)44 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,186,"ssertEquals(""LQ=="",new String(Base64.encode(new byte[] { (byte)45 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,187,"ssertEquals(""Lg=="",new String(Base64.encode(new byte[] { (byte)46 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,188,"ssertEquals(""Lw=="",new String(Base64.encode(new byte[] { (byte)47 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,189,"ssertEquals(""MA=="",new String(Base64.encode(new byte[] { (byte)48 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,190,"ssertEquals(""MQ=="",new String(Base64.encode(new byte[] { (byte)49 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,191,"ssertEquals(""Mg=="",new String(Base64.encode(new byte[] { (byte)50 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,192,"ssertEquals(""Mw=="",new String(Base64.encode(new byte[] { (byte)51 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,193,"ssertEquals(""NA=="",new String(Base64.encode(new byte[] { (byte)52 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,194,"ssertEquals(""NQ=="",new String(Base64.encode(new byte[] { (byte)53 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,195,"ssertEquals(""Ng=="",new String(Base64.encode(new byte[] { (byte)54 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,196,"ssertEquals(""Nw=="",new String(Base64.encode(new byte[] { (byte)55 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,197,"ssertEquals(""OA=="",new String(Base64.encode(new byte[] { (byte)56 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,198,"ssertEquals(""OQ=="",new String(Base64.encode(new byte[] { (byte)57 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,199,"ssertEquals(""Og=="",new String(Base64.encode(new byte[] { (byte)58 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,200,"ssertEquals(""Ow=="",new String(Base64.encode(new byte[] { (byte)59 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,201,"ssertEquals(""PA=="",new String(Base64.encode(new byte[] { (byte)60 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,202,"ssertEquals(""PQ=="",new String(Base64.encode(new byte[] { (byte)61 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,203,"ssertEquals(""Pg=="",new String(Base64.encode(new byte[] { (byte)62 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,204,"ssertEquals(""Pw=="",new String(Base64.encode(new byte[] { (byte)63 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,205,"ssertEquals(""QA=="",new String(Base64.encode(new byte[] { (byte)64 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,206,"ssertEquals(""QQ=="",new String(Base64.encode(new byte[] { (byte)65 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,207,"ssertEquals(""Qg=="",new String(Base64.encode(new byte[] { (byte)66 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,208,"ssertEquals(""Qw=="",new String(Base64.encode(new byte[] { (byte)67 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,209,"ssertEquals(""RA=="",new String(Base64.encode(new byte[] { (byte)68 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,210,"ssertEquals(""RQ=="",new String(Base64.encode(new byte[] { (byte)69 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,211,"ssertEquals(""Rg=="",new String(Base64.encode(new byte[] { (byte)70 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,212,"ssertEquals(""Rw=="",new String(Base64.encode(new byte[] { (byte)71 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,213,"ssertEquals(""SA=="",new String(Base64.encode(new byte[] { (byte)72 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,214,"ssertEquals(""SQ=="",new String(Base64.encode(new byte[] { (byte)73 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,215,"ssertEquals(""Sg=="",new String(Base64.encode(new byte[] { (byte)74 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,216,"ssertEquals(""Sw=="",new String(Base64.encode(new byte[] { (byte)75 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,217,"ssertEquals(""TA=="",new String(Base64.encode(new byte[] { (byte)76 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,218,"ssertEquals(""TQ=="",new String(Base64.encode(new byte[] { (byte)77 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,219,"ssertEquals(""Tg=="",new String(Base64.encode(new byte[] { (byte)78 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,220,"ssertEquals(""Tw=="",new String(Base64.encode(new byte[] { (byte)79 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,221,"ssertEquals(""UA=="",new String(Base64.encode(new byte[] { (byte)80 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,222,"ssertEquals(""UQ=="",new String(Base64.encode(new byte[] { (byte)81 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,223,"ssertEquals(""Ug=="",new String(Base64.encode(new byte[] { (byte)82 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,224,"ssertEquals(""Uw=="",new String(Base64.encode(new byte[] { (byte)83 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,225,"ssertEquals(""VA=="",new String(Base64.encode(new byte[] { (byte)84 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,226,"ssertEquals(""VQ=="",new String(Base64.encode(new byte[] { (byte)85 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,227,"ssertEquals(""Vg=="",new String(Base64.encode(new byte[] { (byte)86 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,228,"ssertEquals(""Vw=="",new String(Base64.encode(new byte[] { (byte)87 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,229,"ssertEquals(""WA=="",new String(Base64.encode(new byte[] { (byte)88 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,230,"ssertEquals(""WQ=="",new String(Base64.encode(new byte[] { (byte)89 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,231,"ssertEquals(""Wg=="",new String(Base64.encode(new byte[] { (byte)90 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,232,"ssertEquals(""Ww=="",new String(Base64.encode(new byte[] { (byte)91 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,233,"ssertEquals(""XA=="",new String(Base64.encode(new byte[] { (byte)92 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,234,"ssertEquals(""XQ=="",new String(Base64.encode(new byte[] { (byte)93 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,235,"ssertEquals(""Xg=="",new String(Base64.encode(new byte[] { (byte)94 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,236,"ssertEquals(""Xw=="",new String(Base64.encode(new byte[] { (byte)95 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,237,"ssertEquals(""YA=="",new String(Base64.encode(new byte[] { (byte)96 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,238,"ssertEquals(""YQ=="",new String(Base64.encode(new byte[] { (byte)97 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,239,"ssertEquals(""Yg=="",new String(Base64.encode(new byte[] { (byte)98 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,240,"ssertEquals(""Yw=="",new String(Base64.encode(new byte[] { (byte)99 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,241,"ssertEquals(""ZA=="",new String(Base64.encode(new byte[] { (byte)100 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,242,"ssertEquals(""ZQ=="",new String(Base64.encode(new byte[] { (byte)101 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,243,"ssertEquals(""Zg=="",new String(Base64.encode(new byte[] { (byte)102 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,244,"ssertEquals(""Zw=="",new String(Base64.encode(new byte[] { (byte)103 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,245,"ssertEquals(""aA=="",new String(Base64.encode(new byte[] { (byte)104 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,248,ublic void testTriplets() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,249,"ssertEquals(""AAAA"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)0 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,250,"ssertEquals(""AAAB"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)1 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,251,"ssertEquals(""AAAC"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)2 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,252,"ssertEquals(""AAAD"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)3 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,253,"ssertEquals(""AAAE"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)4 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,254,"ssertEquals(""AAAF"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)5 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,255,"ssertEquals(""AAAG"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)6 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,256,"ssertEquals(""AAAH"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)7 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,257,"ssertEquals(""AAAI"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)8 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,258,"ssertEquals(""AAAJ"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)9 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,259,"ssertEquals(""AAAK"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)10 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,260,"ssertEquals(""AAAL"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)11 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,261,"ssertEquals(""AAAM"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)12 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,262,"ssertEquals(""AAAN"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)13 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,263,"ssertEquals(""AAAO"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)14 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,264,"ssertEquals(""AAAP"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)15 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,265,"ssertEquals(""AAAQ"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)16 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,266,"ssertEquals(""AAAR"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)17 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,267,"ssertEquals(""AAAS"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)18 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,268,"ssertEquals(""AAAT"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)19 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,269,"ssertEquals(""AAAU"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)20 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,270,"ssertEquals(""AAAV"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)21 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,271,"ssertEquals(""AAAW"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)22 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,272,"ssertEquals(""AAAX"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)23 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,273,"ssertEquals(""AAAY"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)24 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,274,"ssertEquals(""AAAZ"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)25 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,275,"ssertEquals(""AAAa"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)26 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,276,"ssertEquals(""AAAb"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)27 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,277,"ssertEquals(""AAAc"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)28 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,278,"ssertEquals(""AAAd"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)29 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,279,"ssertEquals(""AAAe"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)30 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,280,"ssertEquals(""AAAf"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)31 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,281,"ssertEquals(""AAAg"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)32 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,282,"ssertEquals(""AAAh"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)33 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,283,"ssertEquals(""AAAi"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)34 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,284,"ssertEquals(""AAAj"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)35 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,285,"ssertEquals(""AAAk"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)36 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,286,"ssertEquals(""AAAl"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)37 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,287,"ssertEquals(""AAAm"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)38 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,288,"ssertEquals(""AAAn"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)39 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,289,"ssertEquals(""AAAo"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)40 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,290,"ssertEquals(""AAAp"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)41 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,291,"ssertEquals(""AAAq"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)42 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,292,"ssertEquals(""AAAr"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)43 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,293,"ssertEquals(""AAAs"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)44 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,294,"ssertEquals(""AAAt"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)45 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,295,"ssertEquals(""AAAu"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)46 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,296,"ssertEquals(""AAAv"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)47 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,297,"ssertEquals(""AAAw"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)48 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,298,"ssertEquals(""AAAx"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)49 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,299,"ssertEquals(""AAAy"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)50 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,300,"ssertEquals(""AAAz"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)51 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,301,"ssertEquals(""AAA0"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)52 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,302,"ssertEquals(""AAA1"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)53 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,303,"ssertEquals(""AAA2"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)54 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,304,"ssertEquals(""AAA3"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)55 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,305,"ssertEquals(""AAA4"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)56 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,306,"ssertEquals(""AAA5"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)57 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,307,"ssertEquals(""AAA6"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)58 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,308,"ssertEquals(""AAA7"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)59 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,309,"ssertEquals(""AAA8"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)60 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,310,"ssertEquals(""AAA9"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)61 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,311,"ssertEquals(""AAA+"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)62 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,312,"ssertEquals(""AAA/"",new String(Base64.encode(new byte[] { (byte)0, (byte)0, (byte)63 })));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,315,ublic void testKnownEncodings() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,316,"ssertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="",new String(Base64.encode(""The quick brown fox jumped over the lazy dogs."".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,317,"ssertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="",new String(Base64.encode(""It was the best of times, it was the worst of times."".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,318,"ssertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="",new String(Base64.encode(""http://jakarta.apache.org/commmons"".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,319,"ssertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="",new String(Base64.encode(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,320,"ssertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="",new String(Base64.encode(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,321,"ssertEquals(""eHl6enkh"",new String(Base64.encode(""xyzzy!"".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,324,ublic void testKnownDecodings() {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,325,"ssertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decode(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,326,"ssertEquals(""It was the best of times, it was the worst of times."",new String(Base64.decode(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,327,"ssertEquals(""http://jakarta.apache.org/commmons"",new String(Base64.decode(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,328,"ssertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"",new String(Base64.decode(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,329,"ssertEquals(""{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"",new String(Base64.decode(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,330,"ssertEquals(""xyzzy!"",new String(Base64.decode(""eHl6enkh"".getBytes())));"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,333,/ -------------------------------------------------------- Private Methods
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,335,rivate String toString(byte[] data) {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,336,tringBuffer buf = new StringBuffer();
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,337,or(int i=0;i<data.length;i++) {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,338,uf.append(data[i]);
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,339,f(i != data.length-1) {
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,340,"uf.append("","");"
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,343,eturn buf.toString();
False,src/test/org/apache/commons/codec/base64/Base64Test.java,src/test/org/apache/commons/codec/base64/Base64Test.java,348,rivate Random _random = new Random();

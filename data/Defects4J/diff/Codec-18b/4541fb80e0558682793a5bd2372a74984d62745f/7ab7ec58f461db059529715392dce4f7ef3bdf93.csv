is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,26," Beider-Morse phonetic encodings are optimised for family names. However, they may be useful for a wide range of words."
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,26,"* Beider-Morse phonetic encodings are optimised for family names. However, they may be useful for a wide range"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,27,* of words.
False,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,58," ""<code>dortlaj|dortlej</code>"". Thus, the full, combined encoding is ""<code>(ortlaj|ortlej)-(dortlaj|dortlej)</code>""."
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,59,"* ""<code>dortlaj|dortlej</code>"". Thus, the full, combined encoding is ""{@code (ortlaj|ortlej)-(dortlaj|dortlej)}""."
False,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,124,"            true if multiple encodings are to be combined with a '|', false if just the first one is to be considered"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,125,"*            true if multiple encodings are to be combined with a '|', false if just the first one is"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,126,*            to be considered
False,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,39, <li><b>End-of-line comments:</b> Any occurance of '//' will cause all text following on that line to be discarded as a comment.</li>
False,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,40, <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode. This will skip all content until a
False,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,41, line ending in '*' and '/' is found.</li>
True,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,39,* <li><b>End-of-line comments:</b> Any occurrence of '//' will cause all text following on that line to be
True,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,40,* discarded as a comment.</li>
True,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,41,* <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode.
True,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,42,* This will skip all content until a line ending in '*' and '/' is found.</li>
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,234,"ollections.unmodifiableSet(new HashSet<String>(Arrays.asList(""bar"", ""ben"", ""da"", ""de"", ""van"", ""von""))));"
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,235,"AME_PREFIXES.put(NameType.SEPHARDIC, Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""al"", ""el"", ""da"", ""dal"", ""de"","
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,236,"del"", ""dela"", ""de la"", ""della"", ""des"", ""di"", ""do"", ""dos"", ""du"", ""van"", ""von""))));"
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,237,"AME_PREFIXES.put(NameType.GENERIC, Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(""da"", ""dal"", ""de"", ""del"", ""dela"","
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,238,"de la"", ""della"", ""des"", ""di"", ""do"", ""dos"", ""du"", ""van"", ""von""))));"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,234,Collections.unmodifiableSet(
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,235,"new HashSet<String>(Arrays.asList(""bar"", ""ben"", ""da"", ""de"", ""van"", ""von""))));"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,236,"NAME_PREFIXES.put(NameType.SEPHARDIC,"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,237,Collections.unmodifiableSet(
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,238,"new HashSet<String>(Arrays.asList(""al"", ""el"", ""da"", ""dal"", ""de"", ""del"", ""dela"", ""de la"","
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,239,"""della"", ""des"", ""di"", ""do"", ""dos"", ""du"", ""van"", ""von""))));"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,240,"NAME_PREFIXES.put(NameType.GENERIC,"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,241,Collections.unmodifiableSet(
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,242,"new HashSet<String>(Arrays.asList(""da"", ""dal"", ""de"", ""del"", ""dela"", ""de la"", ""della"","
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,243,"""des"", ""di"", ""do"", ""dos"", ""du"", ""van"", ""von""))));"
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,281, @return          a single String consisting of each element of <code>strings</code> interleaved by <code>sep</code>
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,286,* @return a single String consisting of each element of <code>strings</code> interleaved by <code>sep</code>
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,406, @return a phonetic representation of the input; a String containing '-'-separated phonetic representations of the input
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,411,* @return a phonetic representation of the input; a String containing '-'-separated phonetic representations
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,412,*   of the input
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,130,"eturn new Phoneme(this.phonemeText.toString() + right.phonemeText.toString(), this.languages.restrictTo(right.languages));"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,130,"return new Phoneme(this.phonemeText.toString() + right.phonemeText.toString(),"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,131,this.languages.restrictTo(right.languages));
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,171,"rivate static final Map<NameType, Map<RuleType, Map<String, List<Rule>>>> RULES = new EnumMap<NameType, Map<RuleType, Map<String, List<Rule>>>>("
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,172,ameType.class);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,172,"private static final Map<NameType, Map<RuleType, Map<String, List<Rule>>>> RULES ="
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,173,"new EnumMap<NameType, Map<RuleType, Map<String, List<Rule>>>>(NameType.class);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,210,"eturn String.format(""org/apache/commons/codec/language/bm/%s_%s_%s.txt"", nameType.getName(), rt.getName(), lang);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,211,"return String.format(""org/apache/commons/codec/language/bm/%s_%s_%s.txt"","
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,212,"nameType.getName(), rt.getName(), lang);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,259,"eturn langs.isSingleton() ? getInstance(nameType, rt, langs.getAny()) : getInstance(nameType, rt, Languages.ANY);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,261,"return langs.isSingleton() ? getInstance(nameType, rt, langs.getAny()) :"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,262,"getInstance(nameType, rt, Languages.ANY);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,277,"hrow new IllegalArgumentException(String.format(""No rules found for %s, %s, %s."", nameType.getName(), rt.getName(), lang));"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,280,"throw new IllegalArgumentException(String.format(""No rules found for %s, %s, %s."","
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,281,"nameType.getName(), rt.getName(), lang));"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,367,"/ System.err.println(""Warning: malformed rule statement split into "" + parts.length + "" parts: "" + rawLine);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,371,"//                            System.err.println(""Warning: malformed rule statement split into "" + parts.length +"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,372,"//                                               "" parts: "" + rawLine);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,490,"eturn input.length() > 0 && contains(bContent, input.charAt(input.length() - 1)) == shouldMatch;"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,495,return input.length() > 0 &&
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,496,"contains(bContent, input.charAt(input.length() - 1)) == shouldMatch;"

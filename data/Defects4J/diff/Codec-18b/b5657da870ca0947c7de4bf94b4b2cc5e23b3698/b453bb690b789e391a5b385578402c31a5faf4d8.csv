is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,35,* <h2>Encoding overview</h2>
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,37,* <p>
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,38,"* Beider-Morse phonetic encodings is a multi-step process. Firstly, a table of rules is consulted to guess what"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,39,"* language the word comes from. For example, if it ends in ""<code>ault</code>"" then it infers that the word is French. Next,"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,40,* the word is translated into a phonetic representation using a language-specific phonetics table. Some runs of letters
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,41,"* can be pronounced in multiple ways, and a single run of letters may be potentially broken up into phonemes at"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,42,"* different places, so this stage results in a set of possible language-specific phonetic representations. Lastly,"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,43,* this language-specific phonetic representation is processed by a table of rules that re-writes it phonetically taking
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,44,"* into account systematic pronunciation differences between languages, to move it towards a pan-indo-european phonetic"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,45,"* representation. Again, sometimes there are multiple ways this could be done and sometimes things that can be"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,46,* pronounced in several ways in the source language have only one way to represent them in this average phonetic
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,47,"* language, so the result is again a set of phonetic spellings."
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,48,* </p>
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,50,* <p>
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,51,"* Some names are treated as having multiple parts. This can be due to two things. Firstly, they may be hyphenated. In"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,52,"* this case, each individual hyphenated word is encoded, and then these are combined end-to-end for the final encoding."
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,53,"* Secondly, some names have standard prefixes, for example, ""<code>Mac/Mc</code>"" in Scottish (English) names. As sometimes it is"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,54,"* ambiguous whether the prefix is intended or is an accident of the spelling, the word is encoded once with the prefix"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,55,* and once without it. The resulting encoding contains one and then the other result.
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,56,* </p>
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,59,* <h2>Encoding format</h2>
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,61,* Individual phonetic spellings of an input word are represented in upper- and lower-case roman characters. Where there
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,62,"* are multiple possible phonetic representations, these are joined with a pipe (<code>|</code>) character. If multiple hyphenated"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,63,"* words where found, or if the word may contain a name prefix, each encoded word is placed in elipses and these blocks"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,64,"* are then joined with hyphens. For example, ""<code>d'ortley</code>"" has a possible prefix. The form without prefix encodes to"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,65,"* ""<code>ortlaj|ortlej</code>"", while the form with prefix encodes to ""<code>dortlaj|dortlej</code>"". Thus, the full, combined encoding is"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,66,"* ""<code>(ortlaj|ortlej)-(dortlaj|dortlej)</code>""."
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,68,* <p>
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,69,* The encoded forms are often quite a bit longer than the input strings. This is because a single input may have many
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,70,"* potential phonetic interpretations. For example, ""<code>Renault</code>"" encodes to"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,71,"* ""<code>rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult</code>"". The <code>APPROX</code> rules will tend to produce larger"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,72,"* encodings as they consider a wider range of possible, approximate phonetic interpretations of the original word."
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,73,"* Down-stream applications may wish to further process the encoding for indexing or lookup purposes, for example, by"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,74,* splitting on pipe (<code>|</code>) and indexing under each of these alternatives.
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,75,* </p>
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,81,// implementation note: This class is a spring-friendly facade to PhoneticEngine. It allows read/write configuration
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,82,// of an immutable PhoneticEngine instance that will be delegated to for the actual encoding.
True,src/main/java/org/apache/commons/codec/language/bm/Lang.java,src/main/java/org/apache/commons/codec/language/bm/Lang.java,74,// implementation note: This class is divided into two sections. The first part is a static factory interface that
True,src/main/java/org/apache/commons/codec/language/bm/Lang.java,src/main/java/org/apache/commons/codec/language/bm/Lang.java,75,// exposes the LANGUAGE_RULES_RN resource as a Lang instance. The second part is the Lang instance methods that
True,src/main/java/org/apache/commons/codec/language/bm/Lang.java,src/main/java/org/apache/commons/codec/language/bm/Lang.java,76,// encapsulate a particular language-guessing rule table and the language guessing itself.
True,src/main/java/org/apache/commons/codec/language/bm/Lang.java,src/main/java/org/apache/commons/codec/language/bm/Lang.java,78,// It may make sense in the future to expose the private constructor to allow power users to build custom language-
True,src/main/java/org/apache/commons/codec/language/bm/Lang.java,src/main/java/org/apache/commons/codec/language/bm/Lang.java,79,"// guessing rules, perhaps by marking it protected and allowing sub-classing. However, the vast majority of users"
True,src/main/java/org/apache/commons/codec/language/bm/Lang.java,src/main/java/org/apache/commons/codec/language/bm/Lang.java,80,// should be strongly encouraged to use the static factory <code>instance</code> method to get their Lang instances.
True,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,56,// implementation note: This class is divided into two sections. The first part is a static factory interface that
True,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,57,// exposes org/apache/commons/codec/language/bm/%s_languages.txt for %s in NameType.* as a list of supported
True,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,58,"// languages, and a second part that provides instance methods for accessing this set fo supported languages."
False,src/main/java/org/apache/commons/codec/language/bm/NameType.java,src/main/java/org/apache/commons/codec/language/bm/NameType.java,21," Supported types of names. Unless you are matching particular family names, use {@link #GENERIC}."
True,src/main/java/org/apache/commons/codec/language/bm/NameType.java,src/main/java/org/apache/commons/codec/language/bm/NameType.java,21,"* Supported types of names. Unless you are matching particular family names, use {@link #GENERIC}. The"
True,src/main/java/org/apache/commons/codec/language/bm/NameType.java,src/main/java/org/apache/commons/codec/language/bm/NameType.java,22,* <code>GENERIC</code> NameType should work reasonably well for non-name words. The other encodings are specifically
True,src/main/java/org/apache/commons/codec/language/bm/NameType.java,src/main/java/org/apache/commons/codec/language/bm/NameType.java,23,"* tuned to family names, and may not work well at all for general text."
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,55,"* Utility for manipulating a set of phonemes as they are being built up. Not intended for use outside this package,"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,56,* and probably not outside the {@link PhoneticEngine} class.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,58,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,59,* @since 1.6
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,64,* An empty builder where all phonemes must come from some set of languages. This will contain a single
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,65,* phoneme of zero characters. This can then be appended to. This should be the only way to create a new
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,66,* phoneme from scratch.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,68,* @param languages the set of languages
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,69,"* @return  a new, empty phoneme builder"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,82,* Create a new phoneme builder containing all phonemes in this one extended by <code>str</code>.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,84,* @param str   the characters to append to the phonemes
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,85,* @return  a new phoneme builder lenghened by <code>str</code>
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,98,* Create a new phoneme builder containing the application of the expression to all phonemes in this builder.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,100,"* This will lengthen phonemes that have compatible language sets to the expression, and drop those that are"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,101,* incompatible.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,103,* @param phonemeExpr   the expression to apply
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,104,* @return  a new phoneme builder containing the results of <code>phonemeExpr</code> applied to each phoneme
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,105,*      in turn
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,123,* The underlying phoneme set. Please don't mutate.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,125,* @return  the phoneme set
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,132,"* Stringify the phoneme set. This produces a single string of the strings of each phoneme, joined with a pipe."
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,133,"* This is explicitly provied in place of toString as it is a potentially expensive operation, which should be"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,134,* avoided when debugging.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,136,* @return  the stringified phoneme set
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,155,* A function closure capturing the application of a list of rules to an input sequence at a particular offset.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,156,"* After invocation, the values <code>i</code> and <code>found</code> are updated. <code>i</code> points to the"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,157,* index of the next char in <code>input</code> that must be processed next (the input up to that index having been
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,158,"* processed already), and <code>found</code> indicates if a matching rule was found or not. In the case where a"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,159,"* matching rule was found, <code>phonemeBuilder</code> is replaced with a new buidler containing the phonemes"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,160,* updated by the matching rule.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,162,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,163,* @since 1.6
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,192,"* This invokes the rules. It loops over the rules list, stopping at the first one that has a matching context"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,193,* and pattern. It then applies this rule to the phoneme builder to produce updated phonemes. If there was no
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,194,"* match, <code>i</code> is advanced one and the character is silently dropped from the phonetic spelling."
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,196,* @return <code>this</code>
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,241,* This is a performance hack to avoid overhead associated with very frequent CharSequence.subSequence calls.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,243,* @param cached the character sequence to cache
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,244,* @return a <code>CharSequence</code> that internally memoises subSequence values
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,274,* Join some strings with an internal separater.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,275,* @param strings   Strings to join
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,276,* @param sep       String to separate them with
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,277,* @return          a single String consisting of each element of <code>strings</code> interlieved by <code>sep</code>
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,321,* Apply the final rules to convert from a language-specific phonetic representation to a language-independent
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,322,* representation.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,324,* @param phonemeBuilder
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,325,* @param finalRules
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,326,* @return
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,388,// rules common across many (all) languages
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,390,// rules that apply to a specific language that may be ambiguous or wrong if applied to other languages
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,420,// special-case handling of word prefixes based upon the name type
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,383,"/ System.err.println(""Applying general rules"");"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,468,// Apply the general rules
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,385,"/ System.err.println(""Now got: "" + phonemeBuilder.makeString());"
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,386,"/ System.err.println(""Applying language-specific rules"");"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,470,// Apply the language-specific rules
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,388,"/ System.err.println(""Now got: "" + phonemeBuilder.makeString());"
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,389,"/ System.err.println(""Done"");"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,586, Decides if the pattern and context match the input starting at a position.
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,586,* Decides if the pattern and context match the input starting at a position. It is a match if the
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,587,"* <code>lContext</code> matches <code>input</code> up to <code>i</code>, <code>pattern</code> matches at i and"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,588,* <code>rContext</code> matches from the end of the match of <code>pattern</code> to the end of <code>input</code>.
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,609,// fixme: this is a readability/speed trade-off - these 3 expressions should be inlined for speed to avoid
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,610,"// evaluating latter ones if earlier ones have already failed, but that would make the code a lot harder to"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,611,// read
False,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,28,"PPROX(""approx""), EXACT(""exact""), RULES(""rules"");"
True,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,28,"/** Approximate rules, which will lead to the largest number of phonetic interpretations. */"
True,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,29,"APPROX(""approx""),"
True,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,30,"/** Exact rules, which will lead to a minimum number of phonetic interpretations. */"
True,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,31,"EXACT(""exact""),"
True,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,32,/** For internal use only. Please use {@link #APPROX} or {@link #EXACT}. */
True,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,33,"RULES(""rules"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,18,package org.apache.commons.codec.binary;
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,20,import java.io.InputStream;
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,23,* Provides Base32 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,24,"* is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,25,* constructor.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,26,* <p>
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,27,"* The default behaviour of the Base32InputStream is to DECODE, whereas the default behaviour of the Base32OutputStream"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,28,"* is to ENCODE, but this behaviour can be overridden by using a different constructor."
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,29,* </p>
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,30,* <p>
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,31,"* Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,32,"* character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc)."
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,33,* </p>
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,35,* @version $Revision$
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,36,"* @see <a href=""http://www.ietf.org/rfc/rfc4648.txt"">RFC 4648</a>"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,37,* @since 1.5
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,39,public class Base32InputStream extends BasedCodecInputStream {
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,42,* Creates a Base32InputStream such that all data read is Base32-decoded from the original provided InputStream.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,44,* @param in
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,45,*            InputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,47,public Base32InputStream(InputStream in) {
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,48,"this(in, false);"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,52,* Creates a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,53,* provided InputStream.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,55,* @param in
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,56,*            InputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,57,* @param doEncode
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,58,"*            true if we should encode all data read from us, false if we should decode."
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,60,"public Base32InputStream(InputStream in, boolean doEncode) {"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,61,"super(in, new Base32(false), doEncode);"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,65,* Creates a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,66,* provided InputStream.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,68,* @param in
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,69,*            InputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,70,* @param doEncode
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,71,"*            true if we should encode all data read from us, false if we should decode."
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,72,* @param lineLength
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,73,"*            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,74,"*            nearest multiple of 4). If lineLength <=0, the encoded data is not divided into lines. If doEncode is"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,75,"*            false, lineLength is ignored."
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,76,* @param lineSeparator
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,77,"*            If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \r\n)."
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,78,"*            If lineLength <= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored."
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,80,"public Base32InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator) {"
True,src/java/org/apache/commons/codec/binary/Base32InputStream.java,src/java/org/apache/commons/codec/binary/Base32InputStream.java,81,"super(in, new Base32(lineLength, lineSeparator), doEncode);"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,18,package org.apache.commons.codec.binary;
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,20,import java.io.OutputStream;
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,23,* Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,24,"* is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,25,* constructor.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,26,* <p>
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,27,"* The default behaviour of the Base64OutputStream is to ENCODE, whereas the default behaviour of the Base64InputStream"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,28,* is to DECODE. But this behaviour can be overridden by using a different constructor.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,29,* </p>
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,30,* <p>
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,31,* This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,32,* Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,33,* </p>
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,34,* <p>
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,35,"* Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,36,"* character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc)."
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,37,* </p>
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,39,* @author Apache Software Foundation
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,40,* @version $Id$
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,41,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,42,* @since 1.4
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,44,public class Base32OutputStream extends BasedCodecOutputStream {
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,47,* Creates a Base64OutputStream such that all data written is Base64-encoded to the original provided OutputStream.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,49,* @param out
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,50,*            OutputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,52,public Base32OutputStream(OutputStream out) {
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,53,"this(out, true);"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,57,* Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,58,* original provided OutputStream.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,60,* @param out
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,61,*            OutputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,62,* @param doEncode
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,63,"*            true if we should encode all data written to us, false if we should decode."
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,65,"public Base32OutputStream(OutputStream out, boolean doEncode) {"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,66,"super(out, new Base32(false), doEncode);"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,70,* Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,71,* original provided OutputStream.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,73,* @param out
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,74,*            OutputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,75,* @param doEncode
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,76,"*            true if we should encode all data written to us, false if we should decode."
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,77,* @param lineLength
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,78,"*            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,79,"*            nearest multiple of 4). If lineLength <=0, the encoded data is not divided into lines. If doEncode is"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,80,"*            false, lineLength is ignored."
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,81,* @param lineSeparator
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,82,"*            If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \r\n)."
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,83,"*            If lineLength <= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored."
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,85,"public Base32OutputStream(OutputStream out, boolean doEncode, int lineLength, byte[] lineSeparator) {"
True,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,src/java/org/apache/commons/codec/binary/Base32OutputStream.java,86,"super(out, new Base32(lineLength, lineSeparator), doEncode);"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,19,package org.apache.commons.codec.binary;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,21,import org.apache.commons.codec.BinaryDecoder;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,22,import org.apache.commons.codec.BinaryEncoder;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,23,import org.apache.commons.codec.DecoderException;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,24,import org.apache.commons.codec.EncoderException;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,26,"public abstract class BasedCodec implements BinaryEncoder, BinaryDecoder {"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,29,*  MIME chunk size per RFC 2045 section 6.8.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,31,* <p>
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,32,"* The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,33,* equal signs.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,34,* </p>
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,36,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045 section 6.8</a>"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,38,public static final int MIME_CHUNK_SIZE = 76;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,41,* PEM chunk size per RFC 1421 section 4.3.2.4.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,43,* <p>
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,44,"* The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,45,* equal signs.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,46,* </p>
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,48,"* @see <a href=""http://tools.ietf.org/html/rfc1421"">RFC 1421 section 4.3.2.4</a>"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,50,public static final int PEM_CHUNK_SIZE = 64;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,52,private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,54,private static final int DEFAULT_BUFFER_SIZE = 8192;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,56,* Buffer for streaming.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,58,protected byte[] buffer;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,61,* Position where next character should be written in the buffer.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,63,protected int pos;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,66,* Position where next character should be read from the buffer.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,68,private int readPos;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,71,"* Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this object becomes useless,"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,72,* and must be thrown away.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,74,protected boolean eof;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,77,* Place holder for the bytes we're dealing with for our based logic. Bitwise operations store and extract the
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,78,* encoding or decoding from this variable.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,80,protected long x;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,83,* Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,84,* make sure each encoded line never goes beyond lineLength (if lineLength > 0).
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,86,protected int currentLinePos;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,89,"* Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding."
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,90,* This variable helps track that.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,92,protected int modulus;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,94,protected BasedCodec(){
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,98,* Returns true if this object has buffered data for reading.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,100,* @return true if there is data still available for reading.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,102,boolean hasData() {  // package protected for access from I/O streams
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,103,return this.buffer != null;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,107,* Returns the amount of buffered data available for reading.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,109,* @return The amount of buffered data available for reading.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,111,int avail() {  // package protected for access from I/O streams
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,112,return buffer != null ? pos - readPos : 0;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,115,/** Doubles our buffer. */
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,116,protected void resizeBuffer() {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,117,if (buffer == null) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,118,buffer = new byte[DEFAULT_BUFFER_SIZE];
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,119,pos = 0;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,120,readPos = 0;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,121,} else {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,122,byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,123,"System.arraycopy(buffer, 0, b, 0, buffer.length);"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,124,buffer = b;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,129,"* Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,130,* bytes. Returns how many bytes were actually extracted.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,132,* @param b
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,133,*            byte[] array to extract the buffered data into.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,134,* @param bPos
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,135,*            position in byte[] array to start extraction at.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,136,* @param bAvail
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,137,*            amount of bytes we're allowed to extract. We may extract fewer (if fewer are available).
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,138,* @return The number of bytes successfully extracted into the provided byte[] array.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,140,"int readResults(byte[] b, int bPos, int bAvail) {  // package protected for access from I/O streams"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,141,if (buffer != null) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,142,"int len = Math.min(avail(), bAvail);"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,143,"System.arraycopy(buffer, readPos, b, bPos, len);"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,144,readPos += len;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,145,if (readPos >= pos) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,146,buffer = null;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,148,return len;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,150,return eof ? -1 : 0;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,154,* Checks if a byte value is whitespace or not.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,155,"* Whitespace is taken to mean: space, tab, CR, LF"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,156,* @param byteToCheck
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,157,*            the byte to check
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,158,"* @return true if byte is whitespace, false otherwise"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,160,protected static boolean isWhiteSpace(byte byteToCheck) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,161,switch (byteToCheck) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,162,case ' ' :
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,163,case '\n' :
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,164,case '\r' :
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,165,case '\t' :
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,166,return true;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,167,default :
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,168,return false;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,173,* Resets this Base32 object to its initial newly constructed state.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,175,private void reset() {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,176,buffer = null;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,177,pos = 0;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,178,readPos = 0;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,179,currentLinePos = 0;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,180,modulus = 0;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,181,eof = false;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,184,* Encodes an Object using the Base32 algorithm. This method is provided in order to satisfy the requirements of the
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,185,"* Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[]."
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,187,* @param pObject
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,188,*            Object to encode
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,189,* @return An object (of type byte[]) containing the Base32 encoded data which corresponds to the byte[] supplied.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,190,* @throws EncoderException
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,191,*             if the parameter supplied is not of type byte[]
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,193,public Object encode(Object pObject) throws EncoderException {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,194,if (!(pObject instanceof byte[])) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,195,"throw new EncoderException(""Parameter supplied to Base32 encode is not a byte[]"");"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,197,return encode((byte[]) pObject);
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,200,"* Encodes a byte[] containing binary data, into a String containing characters in the Base32 alphabet."
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,202,* @param pArray
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,203,*            a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,204,* @return A String containing only Base32 character data
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,206,public String encodeToString(byte[] pArray) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,207,return StringUtils.newStringUtf8(encode(pArray));
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,210,* Decodes an Object using the Base32 algorithm. This method is provided in order to satisfy the requirements of the
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,211,"* Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String."
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,213,* @param pObject
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,214,*            Object to decode
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,215,* @return An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,216,* @throws DecoderException
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,217,*             if the parameter supplied is not of type byte[]
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,219,public Object decode(Object pObject) throws DecoderException {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,220,if (pObject instanceof byte[]) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,221,return decode((byte[]) pObject);
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,222,} else if (pObject instanceof String) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,223,return decode((String) pObject);
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,224,} else {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,225,"throw new DecoderException(""Parameter supplied to Base32 decode is not a byte[] or a String"");"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,229,* Decodes a String containing characters in the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,231,* @param pArray
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,232,*            A String containing Base32 character data
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,233,* @return a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,235,public byte[] decode(String pArray) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,236,return decode(StringUtils.getBytesUtf8(pArray));
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,239,* Decodes a byte[] containing characters in the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,241,* @param pArray
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,242,*            A byte array containing Base32 character data
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,243,* @return a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,245,public byte[] decode(byte[] pArray) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,246,reset();
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,247,if (pArray == null || pArray.length == 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,248,return pArray;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,250,"decode(pArray, 0, pArray.length);"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,251,"decode(pArray, 0, -1); // Notify decoder of EOF."
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,252,byte[] result = new byte[pos];
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,253,"readResults(result, 0, result.length);"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,254,return result;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,257,"* Encodes a byte[] containing binary data, into a byte[] containing characters in the Base32 alphabet."
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,259,* @param pArray
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,260,*            a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,261,* @return A byte array containing only Base32 character data
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,263,public byte[] encode(byte[] pArray) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,264,reset();
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,265,if (pArray == null || pArray.length == 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,266,return pArray;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,268,"encode(pArray, 0, pArray.length);"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,269,"encode(pArray, 0, -1); // Notify encoder of EOF."
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,270,byte[] buf = new byte[pos - readPos];
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,271,"readResults(buf, 0, buf.length);"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,272,return buf;
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,275,"abstract void encode(byte[] pArray, int i, int length);  // package protected for access from I/O streams"
True,src/java/org/apache/commons/codec/binary/BasedCodec.java,src/java/org/apache/commons/codec/binary/BasedCodec.java,277,"abstract void decode(byte[] pArray, int i, int length); // package protected for access from I/O streams"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,19,package org.apache.commons.codec.binary;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,21,import java.io.FilterInputStream;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,22,import java.io.IOException;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,23,import java.io.InputStream;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,25,public class BasedCodecInputStream extends FilterInputStream {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,27,private final boolean doEncode;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,29,private final BasedCodec basedCodec;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,31,private final byte[] singleByte = new byte[1];
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,33,"protected BasedCodecInputStream(InputStream in, BasedCodec basedCodec, boolean doEncode) {"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,34,super(in);
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,35,this.doEncode = doEncode;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,36,this.basedCodec = basedCodec;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,40,* Reads one <code>byte</code> from this input stream.
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,42,* @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,43,* @throws IOException
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,44,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,46,public int read() throws IOException {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,47,"int r = read(singleByte, 0, 1);"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,48,while (r == 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,49,"r = read(singleByte, 0, 1);"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,51,if (r > 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,52,return singleByte[0] < 0 ? 256 + singleByte[0] : singleByte[0];
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,54,return -1;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,58,* Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,59,* from this InputStream.
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,61,* @param b
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,62,*            destination byte array
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,63,* @param offset
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,64,*            where to start writing the bytes
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,65,* @param len
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,66,*            maximum number of bytes to read
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,68,* @return number of bytes read
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,69,* @throws IOException
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,70,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,71,* @throws NullPointerException
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,72,*             if the byte array parameter is null
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,73,* @throws IndexOutOfBoundsException
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,74,"*             if offset, len or buffer size are invalid"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,76,"public int read(byte b[], int offset, int len) throws IOException {"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,77,if (b == null) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,78,throw new NullPointerException();
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,79,} else if (offset < 0 || len < 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,80,throw new IndexOutOfBoundsException();
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,81,} else if (offset > b.length || offset + len > b.length) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,82,throw new IndexOutOfBoundsException();
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,83,} else if (len == 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,84,return 0;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,85,} else {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,86,int readLen = 0;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,88,Rationale for while-loop on (readLen == 0):
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,90,Base32.readResults() usually returns > 0 or EOF (-1).  In the
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,91,"rare case where it returns 0, we just keep trying."
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,93,This is essentially an undocumented contract for InputStream
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,94,implementors that want their code to work properly with
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,95,"java.io.InputStreamReader, since the latter hates it when"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,96,InputStream.read(byte[]) returns a zero.  Unfortunately our
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,97,readResults() call must return 0 if a large amount of the data
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,98,"being decoded was non-base32, so this while-loop enables proper"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,99,interop with InputStreamReader for that scenario.
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,101,This is a fix for CODEC-101
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,103,while (readLen == 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,104,if (!basedCodec.hasData()) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,105,byte[] buf = new byte[doEncode ? 4096 : 8192];
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,106,int c = in.read(buf);
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,107,if (doEncode) {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,108,"basedCodec.encode(buf, 0, c);"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,109,} else {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,110,"basedCodec.decode(buf, 0, c);"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,113,"readLen = basedCodec.readResults(b, offset, len);"
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,115,return readLen;
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,119,* {@inheritDoc}
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,121,* @return false
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,123,public boolean markSupported() {
True,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecInputStream.java,124,return false; // not an easy job to support marks
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,15,* limitations under the License.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,19,package org.apache.commons.codec.binary;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,21,import java.io.FilterOutputStream;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,22,import java.io.IOException;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,23,import java.io.OutputStream;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,25,public class BasedCodecOutputStream extends FilterOutputStream {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,27,private final boolean doEncode;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,29,private final BasedCodec basedCodec;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,31,private final byte[] singleByte = new byte[1];
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,33,"public BasedCodecOutputStream(OutputStream out, BasedCodec basedCodec, boolean doEncode) {"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,34,super(out);
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,35,this.basedCodec = basedCodec;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,36,this.doEncode = doEncode;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,40,* Writes the specified <code>byte</code> to this output stream.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,42,* @param i
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,43,*            source byte
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,44,* @throws IOException
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,45,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,47,public void write(int i) throws IOException {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,48,singleByte[0] = (byte) i;
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,49,"write(singleByte, 0, 1);"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,53,* Writes <code>len</code> bytes from the specified <code>b</code> array starting at <code>offset</code> to this
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,54,* output stream.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,56,* @param b
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,57,*            source byte array
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,58,* @param offset
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,59,*            where to start reading the bytes
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,60,* @param len
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,61,*            maximum number of bytes to write
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,63,* @throws IOException
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,64,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,65,* @throws NullPointerException
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,66,*             if the byte array parameter is null
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,67,* @throws IndexOutOfBoundsException
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,68,"*             if offset, len or buffer size are invalid"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,70,"public void write(byte b[], int offset, int len) throws IOException {"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,71,if (b == null) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,72,throw new NullPointerException();
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,73,} else if (offset < 0 || len < 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,74,throw new IndexOutOfBoundsException();
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,75,} else if (offset > b.length || offset + len > b.length) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,76,throw new IndexOutOfBoundsException();
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,77,} else if (len > 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,78,if (doEncode) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,79,"basedCodec.encode(b, offset, len);"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,80,} else {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,81,"basedCodec.decode(b, offset, len);"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,83,flush(false);
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,88,* Flushes this output stream and forces any buffered output bytes to be written out to the stream. If propogate is
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,89,"* true, the wrapped stream will also be flushed."
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,91,* @param propogate
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,92,*            boolean flag to indicate whether the wrapped OutputStream should also be flushed.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,93,* @throws IOException
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,94,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,96,private void flush(boolean propogate) throws IOException {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,97,int avail = basedCodec.avail();
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,98,if (avail > 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,99,byte[] buf = new byte[avail];
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,100,"int c = basedCodec.readResults(buf, 0, avail);"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,101,if (c > 0) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,102,"out.write(buf, 0, c);"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,105,if (propogate) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,106,out.flush();
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,111,* Flushes this output stream and forces any buffered output bytes to be written out to the stream.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,113,* @throws IOException
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,114,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,116,public void flush() throws IOException {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,117,flush(true);
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,121,* Closes this output stream and releases any system resources associated with the stream.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,123,* @throws IOException
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,124,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,126,public void close() throws IOException {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,127,// Notify encoder of EOF (-1).
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,128,if (doEncode) {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,129,"basedCodec.encode(singleByte, 0, -1);"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,130,} else {
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,131,"basedCodec.decode(singleByte, 0, -1);"
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,133,flush();
True,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,src/java/org/apache/commons/codec/binary/BasedCodecOutputStream.java,134,out.close();

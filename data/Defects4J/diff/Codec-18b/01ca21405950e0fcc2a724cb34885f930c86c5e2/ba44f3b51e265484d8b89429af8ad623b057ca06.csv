is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,34," @version $Id: Base64.java,v 1.18 2004/03/18 17:34:56 ggregory Exp $"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,34,"* @version $Id: Base64.java,v 1.19 2004/03/24 18:37:25 ggregory Exp $"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,39, Chunk size according to RFC 2045.
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,39,* Chunk size per RFC 2045 section 6.8.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,44," @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045 section 2.1</a>"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,44,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045 section 6.8</a>"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,49," Chunk separator, we use a newline to separate chunks"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,50, of encoded data (if you ask for it to be chunked).
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,49,* Chunk separator per RFC 2045 section 2.1.
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,51,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045 section 2.1</a>"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,52,"tatic final byte[] CHUNK_SEPARATOR = ""\n"".getBytes();"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,53,"static final byte[] CHUNK_SEPARATOR = ""\r\n"".getBytes();"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,170, Encodes binary data using the base64 algorithm (this
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,171," does not ""chunk"" the output)."
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,171,* Encodes binary data using the base64 algorithm but
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,172,* does not chunk the output.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,230, Encodes hex octects into Base64.
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,231,"* Encodes binary data using the base64 algorithm, optionally"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,232,* chunking the output into 76 character blocks.
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,26, @version $Revision: 1.13 $ $Date: 2004/03/17 19:28:37 $
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,26,* @version $Revision: 1.14 $ $Date: 2004/03/24 18:37:25 $
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,71,public void testDecodePadOnlyChunked() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,72,"assertTrue(Base64.decodeBase64(""====\n"".getBytes()).length == 0);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,73,"assertEquals("""", new String(Base64.decodeBase64(""====\n"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,101,* Tests RFC 2045 section 2.1 CRLF definition.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,103,public void testRfc2045Section2Dot1CrLfDefinition() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,104,"assertTrue(Arrays.equals(new byte[] {13, 10}, Base64.CHUNK_SEPARATOR));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,108,* Tests RFC 2045 section 6.8 chuck size definition.
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,110,public void testRfc2045Section6Dot8ChunkSizeDefinition() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,111,"assertEquals(76, Base64.CHUNK_SIZE);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,222,public void testSingletonsChunked() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,223,"assertEquals(""AA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,224,"assertEquals(""AQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)1 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,225,"assertEquals(""Ag==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)2 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,226,"assertEquals(""Aw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)3 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,227,"assertEquals(""BA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)4 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,228,"assertEquals(""BQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)5 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,229,"assertEquals(""Bg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)6 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,230,"assertEquals(""Bw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)7 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,231,"assertEquals(""CA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)8 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,232,"assertEquals(""CQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)9 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,233,"assertEquals(""Cg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)10 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,234,"assertEquals(""Cw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)11 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,235,"assertEquals(""DA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)12 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,236,"assertEquals(""DQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)13 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,237,"assertEquals(""Dg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)14 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,238,"assertEquals(""Dw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)15 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,239,"assertEquals(""EA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)16 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,240,"assertEquals(""EQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)17 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,241,"assertEquals(""Eg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)18 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,242,"assertEquals(""Ew==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)19 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,243,"assertEquals(""FA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)20 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,244,"assertEquals(""FQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)21 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,245,"assertEquals(""Fg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)22 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,246,"assertEquals(""Fw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)23 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,247,"assertEquals(""GA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)24 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,248,"assertEquals(""GQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)25 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,249,"assertEquals(""Gg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)26 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,250,"assertEquals(""Gw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)27 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,251,"assertEquals(""HA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)28 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,252,"assertEquals(""HQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)29 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,253,"assertEquals(""Hg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)30 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,254,"assertEquals(""Hw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)31 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,255,"assertEquals(""IA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)32 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,256,"assertEquals(""IQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)33 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,257,"assertEquals(""Ig==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)34 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,258,"assertEquals(""Iw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)35 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,259,"assertEquals(""JA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)36 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,260,"assertEquals(""JQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)37 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,261,"assertEquals(""Jg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)38 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,262,"assertEquals(""Jw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)39 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,263,"assertEquals(""KA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)40 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,264,"assertEquals(""KQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)41 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,265,"assertEquals(""Kg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)42 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,266,"assertEquals(""Kw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)43 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,267,"assertEquals(""LA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)44 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,268,"assertEquals(""LQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)45 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,269,"assertEquals(""Lg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)46 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,270,"assertEquals(""Lw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)47 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,271,"assertEquals(""MA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)48 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,272,"assertEquals(""MQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)49 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,273,"assertEquals(""Mg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)50 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,274,"assertEquals(""Mw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)51 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,275,"assertEquals(""NA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)52 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,276,"assertEquals(""NQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)53 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,277,"assertEquals(""Ng==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)54 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,278,"assertEquals(""Nw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)55 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,279,"assertEquals(""OA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)56 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,280,"assertEquals(""OQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)57 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,281,"assertEquals(""Og==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)58 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,282,"assertEquals(""Ow==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)59 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,283,"assertEquals(""PA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)60 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,284,"assertEquals(""PQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)61 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,285,"assertEquals(""Pg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)62 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,286,"assertEquals(""Pw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)63 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,287,"assertEquals(""QA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)64 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,288,"assertEquals(""QQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)65 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,289,"assertEquals(""Qg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)66 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,290,"assertEquals(""Qw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)67 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,291,"assertEquals(""RA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)68 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,292,"assertEquals(""RQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)69 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,293,"assertEquals(""Rg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)70 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,294,"assertEquals(""Rw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)71 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,295,"assertEquals(""SA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)72 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,296,"assertEquals(""SQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)73 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,297,"assertEquals(""Sg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)74 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,298,"assertEquals(""Sw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)75 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,299,"assertEquals(""TA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)76 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,300,"assertEquals(""TQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)77 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,301,"assertEquals(""Tg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)78 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,302,"assertEquals(""Tw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)79 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,303,"assertEquals(""UA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)80 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,304,"assertEquals(""UQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)81 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,305,"assertEquals(""Ug==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)82 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,306,"assertEquals(""Uw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)83 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,307,"assertEquals(""VA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)84 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,308,"assertEquals(""VQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)85 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,309,"assertEquals(""Vg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)86 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,310,"assertEquals(""Vw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)87 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,311,"assertEquals(""WA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)88 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,312,"assertEquals(""WQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)89 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,313,"assertEquals(""Wg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)90 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,314,"assertEquals(""Ww==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)91 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,315,"assertEquals(""XA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)92 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,316,"assertEquals(""XQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)93 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,317,"assertEquals(""Xg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)94 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,318,"assertEquals(""Xw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)95 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,319,"assertEquals(""YA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)96 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,320,"assertEquals(""YQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)97 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,321,"assertEquals(""Yg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)98 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,322,"assertEquals(""Yw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)99 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,323,"assertEquals(""ZA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)100 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,324,"assertEquals(""ZQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)101 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,325,"assertEquals(""Zg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)102 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,326,"assertEquals(""Zw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)103 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,327,"assertEquals(""aA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)104 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,397,public void testTripletsChunked() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,398,"assertEquals(""AAAA\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)0 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,399,"assertEquals(""AAAB\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)1 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,400,"assertEquals(""AAAC\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)2 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,401,"assertEquals(""AAAD\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)3 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,402,"assertEquals(""AAAE\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)4 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,403,"assertEquals(""AAAF\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)5 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,404,"assertEquals(""AAAG\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)6 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,405,"assertEquals(""AAAH\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)7 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,406,"assertEquals(""AAAI\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)8 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,407,"assertEquals(""AAAJ\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)9 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,408,"assertEquals(""AAAK\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)10 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,409,"assertEquals(""AAAL\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)11 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,410,"assertEquals(""AAAM\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)12 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,411,"assertEquals(""AAAN\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)13 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,412,"assertEquals(""AAAO\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)14 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,413,"assertEquals(""AAAP\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)15 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,414,"assertEquals(""AAAQ\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)16 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,415,"assertEquals(""AAAR\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)17 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,416,"assertEquals(""AAAS\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)18 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,417,"assertEquals(""AAAT\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)19 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,418,"assertEquals(""AAAU\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)20 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,419,"assertEquals(""AAAV\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)21 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,420,"assertEquals(""AAAW\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)22 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,421,"assertEquals(""AAAX\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)23 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,422,"assertEquals(""AAAY\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)24 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,423,"assertEquals(""AAAZ\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)25 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,424,"assertEquals(""AAAa\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)26 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,425,"assertEquals(""AAAb\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)27 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,426,"assertEquals(""AAAc\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)28 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,427,"assertEquals(""AAAd\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)29 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,428,"assertEquals(""AAAe\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)30 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,429,"assertEquals(""AAAf\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)31 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,430,"assertEquals(""AAAg\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)32 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,431,"assertEquals(""AAAh\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)33 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,432,"assertEquals(""AAAi\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)34 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,433,"assertEquals(""AAAj\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)35 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,434,"assertEquals(""AAAk\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)36 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,435,"assertEquals(""AAAl\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)37 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,436,"assertEquals(""AAAm\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)38 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,437,"assertEquals(""AAAn\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)39 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,438,"assertEquals(""AAAo\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)40 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,439,"assertEquals(""AAAp\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)41 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,440,"assertEquals(""AAAq\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)42 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,441,"assertEquals(""AAAr\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)43 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,442,"assertEquals(""AAAs\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)44 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,443,"assertEquals(""AAAt\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)45 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,444,"assertEquals(""AAAu\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)46 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,445,"assertEquals(""AAAv\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)47 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,446,"assertEquals(""AAAw\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)48 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,447,"assertEquals(""AAAx\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)49 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,448,"assertEquals(""AAAy\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)50 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,449,"assertEquals(""AAAz\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)51 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,450,"assertEquals(""AAA0\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)52 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,451,"assertEquals(""AAA1\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)53 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,452,"assertEquals(""AAA2\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)54 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,453,"assertEquals(""AAA3\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)55 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,454,"assertEquals(""AAA4\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)56 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,455,"assertEquals(""AAA5\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)57 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,456,"assertEquals(""AAA6\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)58 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,457,"assertEquals(""AAA7\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)59 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,458,"assertEquals(""AAA8\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)60 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,459,"assertEquals(""AAA9\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)61 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,460,"assertEquals(""AAA+\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)62 })));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,461,"assertEquals(""AAA/\r\n"",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)63 })));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,272,"ssertEquals(""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\nbGFoIGJsYWg=\n"",new String(Base64.encodeBase64Chunked(""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"".getBytes())));"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,466,"assertEquals(""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n"",new String(Base64.encodeBase64Chunked(""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"".getBytes())));"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,404,"ssertTrue( ""Dest string doesn't eausl original"","
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,598,"assertTrue( ""Dest string doesn't equals the original"","

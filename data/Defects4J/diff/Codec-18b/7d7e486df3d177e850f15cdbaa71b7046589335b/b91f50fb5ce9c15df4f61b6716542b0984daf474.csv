is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,33,import org.apache.commons.codec.language.bm.Languages.LanguageSet;
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,34,import org.apache.commons.codec.language.bm.Rule.Phoneme;
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,110,inal Rule.Phoneme join = left.join(right);
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,111,f (!join.getLanguages().isEmpty()) {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,113,LanguageSet languages = left.getLanguages().restrictTo(right.getLanguages());
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,114,if (!languages.isEmpty()) {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,115,"final Rule.Phoneme join = new Phoneme(left, right, languages);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,113,his.phonemeText = new StringBuilder(phonemeLeft.phonemeText);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,113,"this(phonemeLeft.phonemeText, phonemeLeft.languages);"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,114,this.phonemeText.append(phonemeRight.phonemeText);
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,117,"public Phoneme(final Phoneme phonemeLeft, final Phoneme phonemeRight, final Languages.LanguageSet languages) {"
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,118,"this(phonemeLeft.phonemeText, languages);"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,115,his.languages = phonemeLeft.languages;
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,136,ublic Phoneme join(final Phoneme right) {
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,137,"eturn new Phoneme(this.phonemeText.toString() + right.phonemeText.toString(),"
False,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,138,his.languages.restrictTo(right.languages));

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,409,f (buffer != b) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,410,"ystem.arraycopy(buffer, readPos, b, bPos, len);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,411,eadPos += len;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,412,f (readPos >= pos) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,413,uffer = null;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,415, else {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,416,/ Re-using the original consumer's output array is only
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,417,/ allowed for one round.
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,409,"System.arraycopy(buffer, readPos, b, bPos, len);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,410,readPos += len;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,411,if (readPos >= pos) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,426, Sets the streaming buffer. This is a small optimization where we try to buffer directly to the consumer's output
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,427, array for one round (if the consumer calls this method first) instead of starting our own buffer.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,429, @param out
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,430,            byte[] array to buffer directly to.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,431, @param outPos
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,432,            Position to start buffering into.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,433, @param outAvail
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,434,            Amount of bytes available for direct buffering.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,436,"oid setInitialBuffer(byte[] out, int outPos, int outAvail) {"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,437,/ We can re-use consumer's original output array under
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,438,"/ special circumstances, saving on some System.arraycopy()."
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,439,f (out != null && out.length == outAvail) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,440,uffer = out;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,441,os = outPos;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,442,eadPos = outPos;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,496,f (lineLength > 0 && pos > 0) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,469,"// Don't want to append the CRLF two times in a row, so make sure previous"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,470,// character is not from CRLF!
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,471,byte b = lineSeparator[lineSeparator.length - 1];
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,472,if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,754,ong len = (pArray.length * 3) / 4;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,755,yte[] buf = new byte[(int) len];
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,756,"etInitialBuffer(buf, 0, buf.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,760,/ Would be nice to just return buf (like we sometimes do in the encode
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,761,"/ logic), but we have no idea what the line-length was (could even be"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,762,/ variable).  So we cannot determine ahead of time exactly how big an
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,763,/ array is necessary.  Hence the need to construct a 2nd byte array to
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,764,/ hold the final result:
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,949,"ong len = getEncodeLength(pArray, lineLength, lineSeparator);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,950,yte[] buf = new byte[(int) len];
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,951,"etInitialBuffer(buf, 0, buf.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,954,"/ Encoder might have resized, even though it was unnecessary."
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,955,f (buffer != buf) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,956,"eadResults(buf, 0, buf.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,958,"/ In URL-SAFE mode we skip the padding characters, so sometimes our"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,959,/ final length is a bit smaller.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,960,f (isUrlSafe() && pos < buf.length) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,961,yte[] smallerBuf = new byte[pos];
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,962,"ystem.arraycopy(buf, 0, smallerBuf, 0, pos);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,963,uf = smallerBuf;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,965,eturn buf;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,917,byte[] buf = new byte[pos - readPos];
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,918,"readResults(buf, 0, buf.length);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,919,return buf;
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,169,/ A little optimization to avoid System.arraycopy()
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,170,/ when possible.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,171,f (c > 0 && b.length == len) {
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,172,"ase64.setInitialBuffer(b, offset, len);"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,22,import java.io.IOException;
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,53,* Tests the bug reported in CODEC-105. Bad interactions with InputStream when reading one byte at a time.
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,55,public void testCodec105() throws IOException {
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,56,"Base64InputStream in = new Base64InputStream(new Codec105ErrorInputStream(), true, 0, null);"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,57,for (int i = 0; i < 5; i++) {
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,58,in.read();
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,18,package org.apache.commons.codec.binary;
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,20,import java.io.IOException;
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,21,import java.io.InputStream;
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,24,"* Emits three line-feeds '\n' in a row, one at a time, and then EOF."
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,26,* Recreates the bug described in CODEC-105.
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,28,* @author Apache Software Foundation
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,29,* @version $Id $
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,30,* @since 1.5
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,32,public class Codec105ErrorInputStream extends InputStream {
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,33,private static final int EOF = -1;
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,35,int countdown = 3;
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,37,public int read() throws IOException {
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,38,if (this.countdown-- > 0) {
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,39,return '\n';
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,40,} else {
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,41,return EOF;
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,45,"public int read(byte b[], int pos, int len) throws IOException {"
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,46,if (this.countdown-- > 0) {
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,47,b[pos] = '\n';
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,48,return 1;
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,49,} else {
True,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,src/test/org/apache/commons/codec/binary/Codec105ErrorInputStream.java,50,return EOF;

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/codec/BinaryDecoder.java,src/main/java/org/apache/commons/codec/BinaryDecoder.java,23,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/BinaryEncoder.java,src/main/java/org/apache/commons/codec/BinaryEncoder.java,23,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/CharEncoding.java,src/main/java/org/apache/commons/codec/CharEncoding.java,51,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/Charsets.java,src/main/java/org/apache/commons/codec/Charsets.java,53,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/Decoder.java,src/main/java/org/apache/commons/codec/Decoder.java,30,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/DecoderException.java,src/main/java/org/apache/commons/codec/DecoderException.java,24,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/Encoder.java,src/main/java/org/apache/commons/codec/Encoder.java,26,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/EncoderException.java,src/main/java/org/apache/commons/codec/EncoderException.java,25,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/StringDecoder.java,src/main/java/org/apache/commons/codec/StringDecoder.java,23,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/StringEncoder.java,src/main/java/org/apache/commons/codec/StringEncoder.java,23,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/StringEncoderComparator.java,src/main/java/org/apache/commons/codec/StringEncoderComparator.java,27,* @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,36, This class is thread-safe.
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,36,* This class is not thread-safe. Each thread should use its own instance.
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,125,private long bitWorkArea;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,276, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,281,"oid decode(byte[] in, int inPos, int inAvail, Context context) { // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,282,f (context.eof) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,282,"void decode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,283,if (eof) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,286,ontext.eof = true;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,287,eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,292,ontext.eof = true;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,293,eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,295,"nsureBufferSize(decodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,296,ensureBufferSize(decodeSize);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,299,ontext.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,300,ontext.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result; // collect decoded bytes
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,301,f (context.modulus == 0) { // we can output the 5 bytes
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,302,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,303,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,304,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,305,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,306,ontext.buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,300,modulus = (modulus+1) % BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,301,bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result; // collect decoded bytes
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,302,if (modulus == 0) { // we can output the 5 bytes
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,303,buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,304,buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,305,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,306,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,307,buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,316,"f (context.eof && context.modulus >= 2) { // if modulus < 2, nothing to do"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,317,"nsureBufferSize(decodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,317,"if (eof && modulus >= 2) { // if modulus < 2, nothing to do"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,318,ensureBufferSize(decodeSize);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,320,witch (context.modulus) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,321,switch (modulus) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,322,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,323,buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,325,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,326,buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,328,ontext.lbitWorkArea = context.lbitWorkArea >> 4; // drop 4 bits
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,329,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,330,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,329,bitWorkArea = bitWorkArea >> 4; // drop 4 bits
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,330,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,331,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,333,ontext.lbitWorkArea = context.lbitWorkArea >> 1;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,334,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,335,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,336,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,334,bitWorkArea = bitWorkArea >> 1;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,335,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,336,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,337,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,339,ontext.lbitWorkArea = context.lbitWorkArea >> 6;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,340,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,341,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,342,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,340,bitWorkArea = bitWorkArea >> 6;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,341,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,342,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,343,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,345,ontext.lbitWorkArea = context.lbitWorkArea >> 3;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,346,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,347,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,348,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,349,ontext.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,346,bitWorkArea = bitWorkArea >> 3;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,347,buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,348,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,349,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,350,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,368, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,371,"oid encode(byte[] in, int inPos, int inAvail, Context context) { // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,372,f (context.eof) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,371,"void encode(byte[] in, int inPos, int inAvail) { // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,372,if (eof) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,378,ontext.eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,379,f (0 == context.modulus && lineLength == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,378,eof = true;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,379,if (0 == modulus && lineLength == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,382,"nsureBufferSize(encodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,383,nt savedPos = context.pos;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,384,witch (context.modulus) { // % 5
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,382,ensureBufferSize(encodeSize);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,383,int savedPos = pos;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,384,switch (modulus) { // % 5
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,386,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,387,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; // 5-3=2
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,388,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,389,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,390,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,391,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,392,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,393,ontext.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,386,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,387,buffer[pos++] = encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS]; // 5-3=2
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,388,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,389,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,390,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,391,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,392,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,393,buffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,397,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,398,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,399,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,400,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,401,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,402,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,403,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,404,ontext.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,397,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,398,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,399,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,400,buffer[pos++] = encodeTable[(int)(bitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,401,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,402,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,403,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,404,buffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,407,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,408,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,409,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,410,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,411,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,412,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,413,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,414,ontext.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,407,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,408,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,409,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,410,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,411,buffer[pos++] = encodeTable[(int)(bitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,412,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,413,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,414,buffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,417,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,418,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,419,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,420,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,421,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,422,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,423,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,424,ontext.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,417,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,418,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,419,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,420,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,421,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,422,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,423,buffer[pos++] = encodeTable[(int)(bitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,424,buffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,427,ontext.currentLinePos += context.pos - savedPos; // keep track of current line position
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,427,currentLinePos += pos - savedPos; // keep track of current line position
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,429,f (lineLength > 0 && context.currentLinePos > 0){ // add chunk separator if required
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,430,"ystem.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,431,ontext.pos += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,429,if (lineLength > 0 && currentLinePos > 0){ // add chunk separator if required
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,430,"System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,431,pos += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,435,"nsureBufferSize(encodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,436,ontext.modulus = (context.modulus+1) % BYTES_PER_UNENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,435,ensureBufferSize(encodeSize);
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,436,modulus = (modulus+1) % BYTES_PER_UNENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,441,ontext.lbitWorkArea = (context.lbitWorkArea << 8) + b; // BITS_PER_BYTE
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,442,f (0 == context.modulus) { // we have enough bytes to create our output
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,443,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 35) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,444,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 30) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,445,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 25) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,446,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 20) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,447,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 15) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,448,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 10) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,449,ontext.buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 5) & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,450,ontext.buffer[context.pos++] = encodeTable[(int)context.lbitWorkArea & MASK_5BITS];
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,451,ontext.currentLinePos += BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,452,f (lineLength > 0 && lineLength <= context.currentLinePos) {
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,453,"ystem.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,454,ontext.pos += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,455,ontext.currentLinePos = 0;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,441,bitWorkArea = (bitWorkArea << 8) + b; // BITS_PER_BYTE
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,442,if (0 == modulus) { // we have enough bytes to create our output
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,443,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,444,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,445,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,446,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,447,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,448,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,449,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,450,buffer[pos++] = encodeTable[(int)bitWorkArea & MASK_5BITS];
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,451,currentLinePos += BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,452,if (lineLength > 0 && lineLength <= currentLinePos) {
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,453,"System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,454,pos += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/Base32.java,src/main/java/org/apache/commons/codec/binary/Base32.java,455,currentLinePos = 0;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,43, This class is thread-safe.
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,43,* This class is not thread-safe. Each thread should use its own instance.
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,47,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,160,* Place holder for the bytes we're dealing with for our based logic.
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,161,* Bitwise operations store and extract the encoding or decoding from this variable.
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,163,private int bitWorkArea;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,318, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,321,"oid encode(byte[] in, int inPos, int inAvail, Context context) {"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,322,f (context.eof) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,327,"void encode(byte[] in, int inPos, int inAvail) {"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,328,if (eof) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,328,ontext.eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,329,f (0 == context.modulus && lineLength == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,334,eof = true;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,335,if (0 == modulus && lineLength == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,332,"nsureBufferSize(encodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,333,nt savedPos = context.pos;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,334,witch (context.modulus) { // 0-2
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,338,ensureBufferSize(encodeSize);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,339,int savedPos = pos;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,340,switch (modulus) { // 0-2
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,336,ontext.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS]; // top 6 bits
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,337,ontext.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS]; // remaining 2
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,342,buffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS]; // top 6 bits
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,343,buffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS]; // remaining 2
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,340,ontext.buffer[context.pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,341,ontext.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,346,buffer[pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,347,buffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,346,ontext.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,347,ontext.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,348,ontext.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,352,buffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,353,buffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,354,buffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,351,ontext.buffer[context.pos++] = PAD;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,357,buffer[pos++] = PAD;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,355,ontext.currentLinePos += context.pos - savedPos; // keep track of current line position
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,361,currentLinePos += pos - savedPos; // keep track of current line position
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,357,f (lineLength > 0 && context.currentLinePos > 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,358,"ystem.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,359,ontext.pos += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,363,if (lineLength > 0 && currentLinePos > 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,364,"System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,365,pos += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,363,"nsureBufferSize(encodeSize, context);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,364,ontext.modulus = (context.modulus+1) % BYTES_PER_UNENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,369,ensureBufferSize(encodeSize);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,370,modulus = (modulus+1) % BYTES_PER_UNENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,369,ontext.ibitWorkArea = (context.ibitWorkArea << 8) + b; //  BITS_PER_BYTE
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,370,f (0 == context.modulus) { // 3 bytes = 24 bits = 4 * 6 bits to extract
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,371,ontext.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,372,ontext.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,373,ontext.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,374,ontext.buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,375,ontext.currentLinePos += BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,376,f (lineLength > 0 && lineLength <= context.currentLinePos) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,377,"ystem.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,378,ontext.pos += lineSeparator.length;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,379,ontext.currentLinePos = 0;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,375,bitWorkArea = (bitWorkArea << 8) + b; //  BITS_PER_BYTE
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,376,if (0 == modulus) { // 3 bytes = 24 bits = 4 * 6 bits to extract
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,377,buffer[pos++] = encodeTable[(bitWorkArea >> 18) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,378,buffer[pos++] = encodeTable[(bitWorkArea >> 12) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,379,buffer[pos++] = encodeTable[(bitWorkArea >> 6) & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,380,buffer[pos++] = encodeTable[bitWorkArea & MASK_6BITS];
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,381,currentLinePos += BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,382,if (lineLength > 0 && lineLength <= currentLinePos) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,383,"System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,384,pos += lineSeparator.length;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,385,currentLinePos = 0;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,408, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,411,"oid decode(byte[] in, int inPos, int inAvail, Context context) {"
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,412,f (context.eof) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,416,"void decode(byte[] in, int inPos, int inAvail) {"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,417,if (eof) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,416,ontext.eof = true;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,421,eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,419,"nsureBufferSize(decodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,424,ensureBufferSize(decodeSize);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,423,ontext.eof = true;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,428,eof = true;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,429,ontext.modulus = (context.modulus+1) % BYTES_PER_ENCODED_BLOCK;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,430,ontext.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,431,f (context.modulus == 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,432,ontext.buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,433,ontext.buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,434,ontext.buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,434,modulus = (modulus+1) % BYTES_PER_ENCODED_BLOCK;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,435,bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,436,if (modulus == 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,437,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,438,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,439,buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,444,f (context.eof && context.modulus != 0) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,445,"nsureBufferSize(decodeSize, context);"
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,449,if (eof && modulus != 0) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,450,ensureBufferSize(decodeSize);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,449,witch (context.modulus) {
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,454,switch (modulus) {
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,453,ontext.ibitWorkArea = context.ibitWorkArea >> 4; // dump the extra 4 bits
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,454,ontext.buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,458,bitWorkArea = bitWorkArea >> 4; // dump the extra 4 bits
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,459,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,457,ontext.ibitWorkArea = context.ibitWorkArea >> 2; // dump 2 bits
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,458,ontext.buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
False,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,459,ontext.buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,462,bitWorkArea = bitWorkArea >> 2; // dump 2 bits
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,463,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64.java,src/main/java/org/apache/commons/codec/binary/Base64.java,464,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
True,src/main/java/org/apache/commons/codec/binary/Base64InputStream.java,src/main/java/org/apache/commons/codec/binary/Base64InputStream.java,39,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java,39,* @author Apache Software Foundation
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,29, This class is thread-safe.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,29,* This class is not thread-safe.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,30,* Each thread should use its own instance.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,35, Holds thread context so classes can be thread-safe.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,37, This class is not itself thread-safe; each thread must allocate its own copy.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,39, @since 1.7
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,41,tatic class Context {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,44, Place holder for the bytes we're dealing with for our based logic.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,45, Bitwise operations store and extract the encoding or decoding from this variable.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,47,nt ibitWorkArea;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,50, Place holder for the bytes we're dealing with for our based logic.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,51, Bitwise operations store and extract the encoding or decoding from this variable.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,53,ong lbitWorkArea;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,56, Buffer for streaming.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,58,yte[] buffer;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,61, Position where next character should be written in the buffer.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,63,nt pos;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,66, Position where next character should be read from the buffer.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,68,nt readPos;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,71," Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this object becomes useless,"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,72, and must be thrown away.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,74,oolean eof;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,77, Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,78, make sure each encoded line never goes beyond lineLength (if lineLength > 0).
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,80,nt currentLinePos;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,83," Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding."
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,84, This variable helps track that.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,86,nt modulus;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,88,ontext() {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,103,* Buffer for streaming.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,105,protected byte[] buffer;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,108,* Position where next character should be written in the buffer.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,110,protected int pos;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,113,* Position where next character should be read from the buffer.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,115,private int readPos;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,118,"* Boolean flag to indicate the EOF has been reached. Once EOF has been reached, this object becomes useless,"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,119,* and must be thrown away.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,121,protected boolean eof;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,124,* Variable tracks how many characters have been written to the current line. Only used when encoding. We use it to
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,125,* make sure each encoded line never goes beyond lineLength (if lineLength > 0).
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,127,protected int currentLinePos;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,130,"* Writes to the buffer only occur after every 3/5 reads when encoding, and every 4/8 reads when decoding."
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,131,* This variable helps track that.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,133,protected int modulus;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,177, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,180,oolean hasData(Context context) {  // package protected for access from I/O streams
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,181,eturn context.buffer != null;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,155,boolean hasData() {  // package protected for access from I/O streams
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,156,return this.buffer != null;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,187, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,190,nt available(Context context) {  // package protected for access from I/O streams
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,191,eturn context.buffer != null ? context.pos - context.readPos : 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,164,int available() {  // package protected for access from I/O streams
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,165,return buffer != null ? pos - readPos : 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,204, Increases our buffer by the {@link #DEFAULT_BUFFER_RESIZE_FACTOR}.
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,205, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,207,rivate void resizeBuffer(Context context) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,208,f (context.buffer == null) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,209,ontext.buffer = new byte[getDefaultBufferSize()];
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,210,ontext.pos = 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,211,ontext.readPos = 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,177,/** Increases our buffer by the {@link #DEFAULT_BUFFER_RESIZE_FACTOR}. */
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,178,private void resizeBuffer() {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,179,if (buffer == null) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,180,buffer = new byte[getDefaultBufferSize()];
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,181,pos = 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,182,readPos = 0;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,213,yte[] b = new byte[context.buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,214,"ystem.arraycopy(context.buffer, 0, b, 0, context.buffer.length);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,215,ontext.buffer = b;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,184,byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,185,"System.arraycopy(buffer, 0, b, 0, buffer.length);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,186,buffer = b;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,223, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,225,"rotected void ensureBufferSize(int size, Context context){"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,226,f ((context.buffer == null) || (context.buffer.length < context.pos + size)){
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,227,esizeBuffer(context);
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,195,protected void ensureBufferSize(int size){
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,196,if ((buffer == null) || (buffer.length < pos + size)){
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,197,resizeBuffer();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,241, @param context the context to be used
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,244,"nt readResults(byte[] b, int bPos, int bAvail, Context context) {  // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,245,f (context.buffer != null) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,246,"nt len = Math.min(available(context), bAvail);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,247,"ystem.arraycopy(context.buffer, context.readPos, b, bPos, len);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,248,ontext.readPos += len;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,249,f (context.readPos >= context.pos) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,250,"ontext.buffer = null; // so hasData() will return false, and this method can return -1"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,213,"int readResults(byte[] b, int bPos, int bAvail) {  // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,214,if (buffer != null) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,215,"int len = Math.min(available(), bAvail);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,216,"System.arraycopy(buffer, readPos, b, bPos, len);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,217,readPos += len;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,218,if (readPos >= pos) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,219,"buffer = null; // so hasData() will return false, and this method can return -1"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,254,eturn context.eof ? EOF : 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,223,return eof ? EOF : 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,246,* Resets this object to its initial newly constructed state.
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,248,private void reset() {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,249,buffer = null;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,250,pos = 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,251,readPos = 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,252,currentLinePos = 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,253,modulus = 0;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,254,eof = false;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,343,ontext context = new Context();
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,324,reset();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,347,"ecode(pArray, 0, pArray.length, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,348,"ecode(pArray, 0, EOF, context); // Notify decoder of EOF."
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,349,yte[] result = new byte[context.pos];
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,350,"eadResults(result, 0, result.length, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,328,"decode(pArray, 0, pArray.length);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,329,"decode(pArray, 0, EOF); // Notify decoder of EOF."
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,330,byte[] result = new byte[pos];
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,331,"readResults(result, 0, result.length);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,362,ontext context = new Context();
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,343,reset();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,366,"ncode(pArray, 0, pArray.length, context);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,367,"ncode(pArray, 0, EOF, context); // Notify encoder of EOF."
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,368,yte[] buf = new byte[context.pos - context.readPos];
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,369,"eadResults(buf, 0, buf.length, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,347,"encode(pArray, 0, pArray.length);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,348,"encode(pArray, 0, EOF); // Notify encoder of EOF."
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,349,byte[] buf = new byte[pos - readPos];
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,350,"readResults(buf, 0, buf.length);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,384,"bstract void encode(byte[] pArray, int i, int length, Context context);  // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,365,"abstract void encode(byte[] pArray, int i, int length);  // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,386,"bstract void decode(byte[] pArray, int i, int length, Context context); // package protected for access from I/O streams"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,src/main/java/org/apache/commons/codec/binary/BaseNCodec.java,367,"abstract void decode(byte[] pArray, int i, int length); // package protected for access from I/O streams"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,26,mport org.apache.commons.codec.binary.BaseNCodec.Context;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,41,rivate Context context = new Context();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,62,eturn context.eof ? 0 : 1;
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,58,// use the EOF flag of the underlying codec instance
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,59,return baseNCodec.eof ? 0 : 1;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,142,f (!baseNCodec.hasData(context)) {
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,139,if (!baseNCodec.hasData()) {
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,146,"aseNCodec.encode(buf, 0, c, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,143,"baseNCodec.encode(buf, 0, c);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,148,"aseNCodec.decode(buf, 0, c, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,145,"baseNCodec.decode(buf, 0, c);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,151,"eadLen = baseNCodec.readResults(b, offset, len, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java,148,"readLen = baseNCodec.readResults(b, offset, len);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,26,mport org.apache.commons.codec.binary.BaseNCodec.Context;
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,41,rivate Context context = new Context();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,43,/ TODO should this be protected?
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,92,"aseNCodec.encode(b, offset, len, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,87,"baseNCodec.encode(b, offset, len);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,94,"aseNCodec.decode(b, offset, len, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,89,"baseNCodec.decode(b, offset, len);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,110,nt avail = baseNCodec.available(context);
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,105,int avail = baseNCodec.available();
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,113,"nt c = baseNCodec.readResults(buf, 0, avail, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,108,"int c = baseNCodec.readResults(buf, 0, avail);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,144,"aseNCodec.encode(singleByte, 0, EOF, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,139,"baseNCodec.encode(singleByte, 0, EOF);"
False,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,146,"aseNCodec.decode(singleByte, 0, EOF, context);"
True,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,src/main/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java,141,"baseNCodec.decode(singleByte, 0, EOF);"
True,src/main/java/org/apache/commons/codec/binary/BinaryCodec.java,src/main/java/org/apache/commons/codec/binary/BinaryCodec.java,31,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/binary/Hex.java,src/main/java/org/apache/commons/codec/binary/Hex.java,35,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/binary/StringUtils.java,src/main/java/org/apache/commons/codec/binary/StringUtils.java,32,"* @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
True,src/main/java/org/apache/commons/codec/digest/DigestUtils.java,src/main/java/org/apache/commons/codec/digest/DigestUtils.java,31,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java,src/main/java/org/apache/commons/codec/language/AbstractCaverphone.java,29,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/Caverphone.java,src/main/java/org/apache/commons/codec/language/Caverphone.java,29,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/Caverphone1.java,src/main/java/org/apache/commons/codec/language/Caverphone1.java,26,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/Caverphone2.java,src/main/java/org/apache/commons/codec/language/Caverphone2.java,26,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/ColognePhonetic.java,src/main/java/org/apache/commons/codec/language/ColognePhonetic.java,180,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java,src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java,30,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/Metaphone.java,src/main/java/org/apache/commons/codec/language/Metaphone.java,40,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/RefinedSoundex.java,src/main/java/org/apache/commons/codec/language/RefinedSoundex.java,28,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/Soundex.java,src/main/java/org/apache/commons/codec/language/Soundex.java,27,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/SoundexUtils.java,src/main/java/org/apache/commons/codec/language/SoundexUtils.java,26,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,77,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/Lang.java,src/main/java/org/apache/commons/codec/language/bm/Lang.java,70,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/Languages.java,src/main/java/org/apache/commons/codec/language/bm/Languages.java,52,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/NameType.java,src/main/java/org/apache/commons/codec/language/bm/NameType.java,25,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,50,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,59,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,168,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java,src/main/java/org/apache/commons/codec/language/bm/ResourceConstants.java,25,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/Rule.java,src/main/java/org/apache/commons/codec/language/bm/Rule.java,79,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,src/main/java/org/apache/commons/codec/language/bm/RuleType.java,23,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/net/BCodec.java,src/main/java/org/apache/commons/codec/net/BCodec.java,46,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/net/QCodec.java,src/main/java/org/apache/commons/codec/net/QCodec.java,47,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,61,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/net/RFC1522Codec.java,src/main/java/org/apache/commons/codec/net/RFC1522Codec.java,44,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/net/URLCodec.java,src/main/java/org/apache/commons/codec/net/URLCodec.java,49,* @author Apache Software Foundation
True,src/main/java/org/apache/commons/codec/net/Utils.java,src/main/java/org/apache/commons/codec/net/Utils.java,25,"* @author <a href=""mailto:ggregory@seagullsw.com"">Gary Gregory</a>"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,90,aseNCodec.Context context = new BaseNCodec.Context();
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,95,"odec.encode(unencoded, j, 1, context);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,94,"codec.encode(unencoded, j, 1);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,97,"odec.encode(unencoded, 0, -1, context);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,96,"codec.encode(unencoded, 0, -1);"
False,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,99,"odec.readResults(singly, 0, 100, context);"
True,src/test/java/org/apache/commons/codec/binary/Base32Test.java,src/test/java/org/apache/commons/codec/binary/Base32Test.java,98,"codec.readResults(singly, 0, 100);"
False,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,41,"oid encode(byte[] pArray, int i, int length, Context context) {"
True,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,41,"void encode(byte[] pArray, int i, int length) {"
False,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,45,"oid decode(byte[] pArray, int i, int length, Context context) {"
True,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java,45,"void decode(byte[] pArray, int i, int length) {"

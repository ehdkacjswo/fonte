is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,17,package org.apache.commons.codec.language;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,19,import java.io.InputStream;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,21,import java.util.Arrays;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,22,import java.util.Collections;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,23,import java.util.Comparator;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,24,import java.util.HashMap;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,25,import java.util.LinkedHashSet;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,26,import java.util.List;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,27,import java.util.Map;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,28,import java.util.Scanner;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,29,import java.util.Set;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,31,import org.apache.commons.codec.CharEncoding;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,32,import org.apache.commons.codec.EncoderException;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,33,import org.apache.commons.codec.StringEncoder;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,36,* Encodes a string into a Daitch-Mokotoff Soundex value.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,37,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,38,"* The Daitch-Mokotoff Soundex algorithm is a refinement of the Russel and American Soundex algorithms, yielding greater"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,39,* accuracy in matching especially Slavish and Yiddish surnames with similar pronunciation but differences in spelling.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,40,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,41,* The main differences compared to the other soundex variants are:
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,42,* <ul>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,43,* <li>coded names are 6 digits long
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,44,* <li>the initial character of the name is coded
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,45,* <li>rules to encoded multi-character n-grams
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,46,* <li>multiple possible encodings for the same name (branching)
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,47,* </ul>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,48,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,49,"* This implementation supports branching, depending on the used method:"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,50,* <ul>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,51,"* <li>{@link #encode(String)} - branching disabled, only the first code will be returned"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,52,"* <li>{@link #soundex(String)} - branching enabled, all codes will be returned, separated by '|'"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,53,* </ul>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,54,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,55,* Note: this implementation has additional branching rules compared to the original description of the algorithm. The
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,56,* rules can be customized by overriding the default rules contained in the resource file
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,57,* {@code org/apache/commons/codec/language/dmrules.txt}.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,58,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,59,* This class is thread-safe.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,61,* @see Soundex
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,62,"* @see <a href=""http://en.wikipedia.org/wiki/Daitch%E2%80%93Mokotoff_Soundex""> Wikipedia - Daitch-Mokotoff Soundex</a>"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,63,"* @see <a href=""http://www.avotaynu.com/soundex.htm"">Avotaynu - Soundexing and Genealogy</a>"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,65,* @version $Id$
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,66,* @since 1.10
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,68,public class DaitchMokotoffSoundex implements StringEncoder {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,71,* Inner class representing a branch during DM soundex encoding.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,73,private static final class Branch {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,74,private final StringBuilder builder;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,75,private String cachedString;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,76,private String lastReplacement;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,78,private Branch() {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,79,builder = new StringBuilder();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,80,lastReplacement = null;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,81,cachedString = null;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,85,"* Creates a new branch, identical to this branch."
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,87,"* @return a new, identical branch"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,89,public Branch createBranch() {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,90,final Branch branch = new Branch();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,91,branch.builder.append(toString());
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,92,branch.lastReplacement = this.lastReplacement;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,93,return branch;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,96,@Override
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,97,public boolean equals(final Object other) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,98,if (this == other) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,99,return true;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,101,if (!(other instanceof Branch)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,102,return false;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,105,return toString().equals(((Branch) other).toString());
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,109,* Finish this branch by appending '0's until the maximum code length has been reached.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,111,public void finish() {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,112,while (builder.length() < MAX_LENGTH) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,113,builder.append('0');
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,114,cachedString = null;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,118,@Override
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,119,public int hashCode() {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,120,return toString().hashCode();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,124,* Process the next replacement to be added to this branch.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,126,* @param replacement
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,127,*            the next replacement to append
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,128,* @param forceAppend
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,129,*            indicates if the default processing shall be overridden
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,131,"public void processNextReplacement(final String replacement, final boolean forceAppend) {"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,132,final boolean append = lastReplacement == null || !lastReplacement.endsWith(replacement) || forceAppend;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,134,if (append && builder.length() < MAX_LENGTH) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,135,builder.append(replacement);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,136,// remove all characters after the maximum length
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,137,if (builder.length() > MAX_LENGTH) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,138,"builder.delete(MAX_LENGTH, builder.length());"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,140,cachedString = null;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,143,lastReplacement = replacement;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,146,@Override
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,147,public String toString() {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,148,if (cachedString == null) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,149,cachedString = builder.toString();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,151,return cachedString;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,155,// static identifiers used during parsing of the rule file
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,158,* Inner class for storing rules.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,160,private static final class Rule {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,161,private final String pattern;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,162,private final String[] replacementAtStart;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,163,private final String[] replacementBeforeVowel;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,164,private final String[] replacementDefault;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,166,"protected Rule(final String pattern, final String replacementAtStart, final String replacementBeforeVowel,"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,167,final String replacementDefault) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,168,this.pattern = pattern;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,169,"this.replacementAtStart = replacementAtStart.split(""\\|"");"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,170,"this.replacementBeforeVowel = replacementBeforeVowel.split(""\\|"");"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,171,"this.replacementDefault = replacementDefault.split(""\\|"");"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,174,public int getPatternLength() {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,175,return pattern.length();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,178,"public String[] getReplacements(final String context, final boolean atStart) {"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,179,if (atStart) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,180,return replacementAtStart;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,183,final int nextIndex = getPatternLength();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,184,final boolean nextCharIsVowel = nextIndex < context.length() ? isVowel(context.charAt(nextIndex)) : false;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,185,if (nextCharIsVowel) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,186,return replacementBeforeVowel;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,189,return replacementDefault;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,192,private boolean isVowel(final char ch) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,193,return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,196,public boolean matches(final String context) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,197,return context.startsWith(pattern);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,200,@Override
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,201,public String toString() {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,202,"return String.format(""%s=(%s,%s,%s)"", pattern, Arrays.asList(replacementAtStart),"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,203,"Arrays.asList(replacementBeforeVowel), Arrays.asList(replacementDefault));"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,207,"private static final String COMMENT = ""//"";"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,208,"private static final String DOUBLE_QUOTE = ""\"""";"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,209,/** Folding rules. */
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,210,"private static final Map<Character, Character> FOLDINGS = new HashMap<Character, Character>();"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,212,/** The code length of a DM soundex value. */
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,213,private static final int MAX_LENGTH = 6;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,214,"private static final String MULTILINE_COMMENT_END = ""*/"";"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,216,"private static final String MULTILINE_COMMENT_START = ""/*"";"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,218,/** The resource file containing the replacement and folding rules */
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,219,"private static final String RESOURCE_FILE = ""org/apache/commons/codec/language/dmrules.txt"";"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,221,/** Transformation rules indexed by the first character of their pattern. */
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,222,"private static final Map<Character, List<Rule>> RULES = new HashMap<Character, List<Rule>>();"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,224,static {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,225,final InputStream rulesIS = DaitchMokotoffSoundex.class.getClassLoader().getResourceAsStream(RESOURCE_FILE);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,226,if (rulesIS == null) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,227,"throw new IllegalArgumentException(""Unable to load resource: "" + RESOURCE_FILE);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,230,"final Scanner scanner = new Scanner(rulesIS, CharEncoding.UTF_8);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,231,"parseRules(scanner, RESOURCE_FILE, RULES, FOLDINGS);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,232,scanner.close();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,234,// sort RULES by pattern length in descending order
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,235,"for (final Map.Entry<Character, List<Rule>> rule : RULES.entrySet()) {"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,236,final List<Rule> ruleList = rule.getValue();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,237,"Collections.sort(ruleList, new Comparator<Rule>() {"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,238,@Override
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,239,"public int compare(final Rule rule1, final Rule rule2) {"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,240,return rule2.getPatternLength() - rule1.getPatternLength();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,246,"private static void parseRules(final Scanner scanner, final String location,"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,247,"final Map<Character, List<Rule>> ruleMapping, final Map<Character, Character> asciiFoldings) {"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,248,int currentLine = 0;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,249,boolean inMultilineComment = false;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,251,while (scanner.hasNextLine()) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,252,currentLine++;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,253,final String rawLine = scanner.nextLine();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,254,String line = rawLine;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,256,if (inMultilineComment) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,257,if (line.endsWith(MULTILINE_COMMENT_END)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,258,inMultilineComment = false;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,260,continue;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,263,if (line.startsWith(MULTILINE_COMMENT_START)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,264,inMultilineComment = true;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,265,} else {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,266,// discard comments
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,267,final int cmtI = line.indexOf(COMMENT);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,268,if (cmtI >= 0) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,269,"line = line.substring(0, cmtI);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,272,// trim leading-trailing whitespace
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,273,line = line.trim();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,275,if (line.length() == 0) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,276,continue; // empty lines can be safely skipped
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,279,"if (line.contains(""="")) {"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,280,// folding
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,281,"final String[] parts = line.split(""="");"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,282,if (parts.length != 2) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,283,"throw new IllegalArgumentException(""Malformed folding statement split into "" + parts.length +"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,284,""" parts: "" + rawLine + "" in "" + location);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,285,} else {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,286,final String leftCharacter = parts[0];
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,287,final String rightCharacter = parts[1];
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,289,if (leftCharacter.length() != 1 || rightCharacter.length() != 1) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,290,"throw new IllegalArgumentException(""Malformed folding statement - "" +"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,291,"""patterns are not single characters: "" + rawLine + "" in "" + location);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,294,"asciiFoldings.put(leftCharacter.charAt(0), rightCharacter.charAt(0));"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,296,} else {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,297,// rule
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,298,"final String[] parts = line.split(""\\s+"");"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,299,if (parts.length != 4) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,300,"throw new IllegalArgumentException(""Malformed rule statement split into "" + parts.length +"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,301,""" parts: "" + rawLine + "" in "" + location);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,302,} else {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,303,try {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,304,final String pattern = stripQuotes(parts[0]);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,305,final String replacement1 = stripQuotes(parts[1]);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,306,final String replacement2 = stripQuotes(parts[2]);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,307,final String replacement3 = stripQuotes(parts[3]);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,309,"final Rule r = new Rule(pattern, replacement1, replacement2, replacement3);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,310,final char patternKey = r.pattern.charAt(0);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,311,List<Rule> rules = ruleMapping.get(patternKey);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,312,if (rules == null) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,313,rules = new ArrayList<Rule>();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,314,"ruleMapping.put(patternKey, rules);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,316,rules.add(r);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,317,} catch (final IllegalArgumentException e) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,318,throw new IllegalStateException(
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,319,"""Problem parsing line '"" + currentLine + ""' in "" + location, e);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,327,private static String stripQuotes(String str) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,328,if (str.startsWith(DOUBLE_QUOTE)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,329,str = str.substring(1);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,332,if (str.endsWith(DOUBLE_QUOTE)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,333,"str = str.substring(0, str.length() - 1);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,336,return str;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,339,/** Whether to use ascii folding prior to encoding. */
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,340,private final boolean folding;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,343,* Creates a new instance with ascii-folding enabled.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,345,public DaitchMokotoffSoundex() {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,346,this(true);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,350,* Creates a new instance.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,351,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,352,"* With ascii-folding enabled, certain accented characters will be transformed to equivalent ascii characters, e.g."
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,353,* è -&gt; e.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,355,* @param folding
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,356,*            if ascii-folding shall be performed before encoding
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,358,public DaitchMokotoffSoundex(final boolean folding) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,359,this.folding = folding;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,363,* Performs a cleanup of the input string before the actual soundex transformation.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,364,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,365,* Removes all whitespace characters and performs ascii folding if enabled.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,367,* @param input
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,368,*            the input string to cleanup
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,369,* @return a cleaned up string
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,371,private String cleanup(final String input) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,372,final StringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,373,for (char ch : input.toCharArray()) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,374,if (Character.isWhitespace(ch)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,375,continue;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,378,ch = Character.toLowerCase(ch);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,379,if (folding && FOLDINGS.containsKey(ch)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,380,ch = FOLDINGS.get(ch);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,382,sb.append(ch);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,384,return sb.toString();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,387,// -- BEGIN STATIC METHODS --//
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,390,* Encodes an Object using the Daitch-Mokotoff soundex algorithm without branching.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,391,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,392,"* This method is provided in order to satisfy the requirements of the Encoder interface, and will throw an"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,393,* EncoderException if the supplied object is not of type java.lang.String.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,395,* @see #soundex(String)
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,397,* @param obj
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,398,*            Object to encode
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,399,"* @return An object (of type java.lang.String) containing the DM soundex code, which corresponds to the String"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,400,*         supplied.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,401,* @throws EncoderException
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,402,*             if the parameter supplied is not of type java.lang.String
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,403,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,404,*             if a character is not mapped
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,406,@Override
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,407,public Object encode(final Object obj) throws EncoderException {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,408,if (!(obj instanceof String)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,409,throw new EncoderException(
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,410,"""Parameter supplied to DaitchMokotoffSoundex encode is not of type java.lang.String"");"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,412,return encode((String) obj);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,416,* Encodes a String using the Daitch-Mokotoff soundex algorithm without branching.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,418,* @see #soundex(String)
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,420,* @param str
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,421,*            A String object to encode
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,422,* @return A DM Soundex code corresponding to the String supplied
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,423,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,424,*             if a character is not mapped
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,426,@Override
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,427,public String encode(final String source) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,428,if (source == null) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,429,return null;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,431,"return soundex(source, false)[0];"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,434,// -- BEGIN INNER CLASSES --//
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,437,* Encodes a String using the Daitch-Mokotoff soundex algorithm with branching.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,438,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,439,"* In case a string is encoded into multiple codes (see branching rules), the result will contain all codes,"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,440,* separated by '|'.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,441,* <p>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,442,"* Example: the name ""AUERBACH"" is encoded as both"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,443,* <ul>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,444,* <li>097400</li>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,445,* <li>097500</li>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,446,* </ul>
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,447,"* Thus the result will be ""097400|097500""."
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,449,* @param str
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,450,*            A String object to encode
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,451,* @return A string containing a set of DM Soundex codes corresponding to the String supplied
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,452,* @throws IllegalArgumentException
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,453,*             if a character is not mapped
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,455,public String soundex(final String source) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,456,"final String[] branches = soundex(source, true);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,457,final StringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,458,int index = 0;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,459,for (final String branch : branches) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,460,sb.append(branch);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,461,if (++index < branches.length) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,462,sb.append('|');
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,465,return sb.toString();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,469,* Perform the actual DM soundex algorithm on the input string.
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,471,* @param source
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,472,*            A String object to encode
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,473,* @param branching
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,474,*            If branching shall be performed
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,475,* @return A string array containing all DM Soundex codes corresponding to the String supplied depending on the
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,476,*         selected branching mode
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,478,"private String[] soundex(final String source, final boolean branching) {"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,479,if (source == null) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,480,return null;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,483,final String input = cleanup(source);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,485,final Set<Branch> currentBranches = new LinkedHashSet<Branch>();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,486,currentBranches.add(new Branch());
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,488,char lastChar = '\0';
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,489,for (int index = 0; index < input.length(); index++) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,490,final char ch = input.charAt(index);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,492,// ignore whitespace inside a name
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,493,if (Character.isWhitespace(ch)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,494,continue;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,497,final String inputContext = input.substring(index);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,498,final List<Rule> rules = RULES.get(ch);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,499,if (rules == null) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,500,continue;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,503,// use an EMPTY_LIST to avoid false positive warnings wrt potential null pointer access
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,504,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,505,final List<Branch> nextBranches = branching ? new ArrayList<Branch>() : Collections.EMPTY_LIST;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,507,for (final Rule rule : rules) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,508,if (rule.matches(inputContext)) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,509,if (branching) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,510,nextBranches.clear();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,512,"final String[] replacements = rule.getReplacements(inputContext, lastChar == '\0');"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,513,final boolean branchingRequired = replacements.length > 1 && branching;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,515,for (final Branch branch : currentBranches) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,516,for (final String nextReplacement : replacements) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,517,"// if we have multiple replacements, always create a new branch"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,518,final Branch nextBranch = branchingRequired ? branch.createBranch() : branch;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,520,// special rule: occurrences of mn or nm are treated differently
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,521,final boolean force = (lastChar == 'm' && ch == 'n') || (lastChar == 'n' && ch == 'm');
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,523,"nextBranch.processNextReplacement(nextReplacement, force);"
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,525,if (branching) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,526,nextBranches.add(nextBranch);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,527,} else {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,528,break;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,533,if (branching) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,534,currentBranches.clear();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,535,currentBranches.addAll(nextBranches);
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,537,index += rule.getPatternLength() - 1;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,538,break;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,542,lastChar = ch;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,545,final String[] result = new String[currentBranches.size()];
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,546,int index = 0;
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,547,for (final Branch branch : currentBranches) {
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,548,branch.finish();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,549,result[index++] = branch.toString();
True,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java,552,return result;
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,17,package org.apache.commons.codec.language;
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,19,import org.apache.commons.codec.EncoderException;
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,20,import org.apache.commons.codec.StringEncoderAbstractTest;
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,25,* Tests {@link DaitchMokotoffSoundex}.
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,26,* <p>
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,27,* Keep this file in UTF-8 encoding for proper Javadoc processing.
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,28,* </p>
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,30,* @since 1.10
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,32,public class DaitchMokotoffSoundexTest extends StringEncoderAbstractTest<DaitchMokotoffSoundex> {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,34,@Override
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,35,protected DaitchMokotoffSoundex createStringEncoder() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,36,return new DaitchMokotoffSoundex();
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,39,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,40,public void testAccentedCharacterFolding() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,41,"Assert.assertEquals(""294795"", this.getStringEncoder().soundex(""Straßburg""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,42,"Assert.assertEquals(""294795"", this.getStringEncoder().soundex(""Strasburg""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,44,"Assert.assertEquals(""095600"", this.getStringEncoder().soundex(""Éregon""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,45,"Assert.assertEquals(""095600"", this.getStringEncoder().soundex(""Eregon""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,48,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,49,public void testAdjacentCodes() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,50,// AKSSOL
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,51,// A-KS-S-O-L
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,52,// 0-54-4---8 -> wrong
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,53,// 0-54-----8 -> correct
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,54,"Assert.assertEquals(""054800"", this.getStringEncoder().soundex(""AKSSOL""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,56,// GERSCHFELD
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,57,// G-E-RS-CH-F-E-L-D
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,58,// 5--4/94-5/4-7-8-3 -> wrong
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,59,// 5--4/94-5/--7-8-3 -> correct
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,60,"Assert.assertEquals(""547830|545783|594783|594578"", this.getStringEncoder().soundex(""GERSCHFELD""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,63,public void testEncodeBasic() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,64,"// same as above, but without branching"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,65,"Assert.assertEquals(""097400"", this.getStringEncoder().encode(""AUERBACH""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,66,"Assert.assertEquals(""097400"", this.getStringEncoder().encode(""OHRBACH""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,67,"Assert.assertEquals(""874400"", this.getStringEncoder().encode(""LIPSHITZ""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,68,"Assert.assertEquals(""874400"", this.getStringEncoder().encode(""LIPPSZYC""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,69,"Assert.assertEquals(""876450"", this.getStringEncoder().encode(""LEWINSKY""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,70,"Assert.assertEquals(""876450"", this.getStringEncoder().encode(""LEVINSKI""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,71,"Assert.assertEquals(""486740"", this.getStringEncoder().encode(""SZLAMAWICZ""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,72,"Assert.assertEquals(""486740"", this.getStringEncoder().encode(""SHLAMOVITZ""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,75,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,76,public void testEncodeIgnoreApostrophes() throws EncoderException {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,77,"this.checkEncodingVariations(""079600"", new String[] { ""OBrien"", ""'OBrien"", ""O'Brien"", ""OB'rien"", ""OBr'ien"","
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,78,"""OBri'en"", ""OBrie'n"", ""OBrien'"" });"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,82,* Test data from http://www.myatt.demon.co.uk/sxalg.htm
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,84,* @throws EncoderException
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,86,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,87,public void testEncodeIgnoreHyphens() throws EncoderException {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,88,"this.checkEncodingVariations(""565463"", new String[] { ""KINGSMITH"", ""-KINGSMITH"", ""K-INGSMITH"", ""KI-NGSMITH"","
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,89,"""KIN-GSMITH"", ""KING-SMITH"", ""KINGS-MITH"", ""KINGSM-ITH"", ""KINGSMI-TH"", ""KINGSMIT-H"", ""KINGSMITH-"" });"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,92,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,93,public void testEncodeIgnoreTrimmable() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,94,"Assert.assertEquals(""746536"", this.getStringEncoder().encode("" \t\n\r Washington \t\n\r ""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,95,"Assert.assertEquals(""746536"", this.getStringEncoder().encode(""Washington""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,99,* Examples from http://www.jewishgen.org/infofiles/soundex.html
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,101,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,102,public void testSoundexBasic() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,103,"Assert.assertEquals(""583600"", this.getStringEncoder().soundex(""GOLDEN""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,104,"Assert.assertEquals(""087930"", this.getStringEncoder().soundex(""Alpert""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,105,"Assert.assertEquals(""791900"", this.getStringEncoder().soundex(""Breuer""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,106,"Assert.assertEquals(""579000"", this.getStringEncoder().soundex(""Haber""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,107,"Assert.assertEquals(""665600"", this.getStringEncoder().soundex(""Mannheim""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,108,"Assert.assertEquals(""664000"", this.getStringEncoder().soundex(""Mintz""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,109,"Assert.assertEquals(""370000"", this.getStringEncoder().soundex(""Topf""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,110,"Assert.assertEquals(""586660"", this.getStringEncoder().soundex(""Kleinmann""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,111,"Assert.assertEquals(""769600"", this.getStringEncoder().soundex(""Ben Aron""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,113,"Assert.assertEquals(""097400|097500"", this.getStringEncoder().soundex(""AUERBACH""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,114,"Assert.assertEquals(""097400|097500"", this.getStringEncoder().soundex(""OHRBACH""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,115,"Assert.assertEquals(""874400"", this.getStringEncoder().soundex(""LIPSHITZ""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,116,"Assert.assertEquals(""874400|874500"", this.getStringEncoder().soundex(""LIPPSZYC""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,117,"Assert.assertEquals(""876450"", this.getStringEncoder().soundex(""LEWINSKY""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,118,"Assert.assertEquals(""876450"", this.getStringEncoder().soundex(""LEVINSKI""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,119,"Assert.assertEquals(""486740"", this.getStringEncoder().soundex(""SZLAMAWICZ""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,120,"Assert.assertEquals(""486740"", this.getStringEncoder().soundex(""SHLAMOVITZ""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,124,* Examples from http://www.avotaynu.com/soundex.htm
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,126,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,127,public void testSoundexBasic2() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,128,"Assert.assertEquals(""467000|567000"", this.getStringEncoder().soundex(""Ceniow""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,129,"Assert.assertEquals(""467000"", this.getStringEncoder().soundex(""Tsenyuv""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,130,"Assert.assertEquals(""587400|587500"", this.getStringEncoder().soundex(""Holubica""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,131,"Assert.assertEquals(""587400"", this.getStringEncoder().soundex(""Golubitsa""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,132,"Assert.assertEquals(""746480|794648"", this.getStringEncoder().soundex(""Przemysl""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,133,"Assert.assertEquals(""746480"", this.getStringEncoder().soundex(""Pshemeshil""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,134,"Assert.assertEquals(""944744|944745|944754|944755|945744|945745|945754|945755"","
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,135,"this.getStringEncoder().soundex(""Rosochowaciec""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,136,"Assert.assertEquals(""945744"", this.getStringEncoder().soundex(""Rosokhovatsets""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,140,* Examples from http://en.wikipedia.org/wiki/Daitch%E2%80%93Mokotoff_Soundex
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,142,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,143,public void testSoundexBasic3() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,144,"Assert.assertEquals(""734000|739400"", this.getStringEncoder().soundex(""Peters""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,145,"Assert.assertEquals(""734600|739460"", this.getStringEncoder().soundex(""Peterson""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,146,"Assert.assertEquals(""645740"", this.getStringEncoder().soundex(""Moskowitz""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,147,"Assert.assertEquals(""645740"", this.getStringEncoder().soundex(""Moskovitz""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,148,"Assert.assertEquals(""154600|145460|454600|445460"", this.getStringEncoder().soundex(""Jackson""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,149,"Assert.assertEquals(""154654|154645|154644|145465|145464|454654|454645|454644|445465|445464"", this"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,150,".getStringEncoder().soundex(""Jackson-Jackson""));"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,153,@Test
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,154,public void testSpecialRomanianCharacters() {
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,155,"Assert.assertEquals(""364000|464000"", this.getStringEncoder().soundex(""ţamas"")); // t-cedilla"
True,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,src/test/java/org/apache/commons/codec/language/DaitchMokotoffSoundexTest.java,156,"Assert.assertEquals(""364000|464000"", this.getStringEncoder().soundex(""țamas"")); // t-comma"

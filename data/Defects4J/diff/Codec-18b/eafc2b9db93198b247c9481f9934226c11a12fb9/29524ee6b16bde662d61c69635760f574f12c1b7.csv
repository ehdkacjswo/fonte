is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,254,et<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,254,Set<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>(Rule.Phoneme.COMPARATOR);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,24,import java.util.Comparator;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,83,"ublic static final class Phoneme implements PhonemeExpr, Comparable<Phoneme> {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,84,public static final class Phoneme implements PhonemeExpr {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,85,public static final Comparator<Phoneme> COMPARATOR = new Comparator<Phoneme>() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,86,"public int compare(Phoneme o1, Phoneme o2) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,87,for (int i = 0; i < o1.phonemeText.length(); i++) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,88,if (i >= o2.phonemeText.length()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,89,return +1;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,91,int c = o1.phonemeText.charAt(i) - o2.phonemeText.charAt(i);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,92,if (c != 0) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,93,return c;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,97,if (o1.phonemeText.length() < o2.phonemeText.length()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,98,return -1;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,101,return 0;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,97,ublic int compareTo(Phoneme o) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,98,or (int i = 0; i < phonemeText.length(); i++) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,99,f (i >= o.phonemeText.length()) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,100,eturn +1;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,102,nt c = phonemeText.charAt(i) - o.phonemeText.charAt(i);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,103,f (c != 0) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,104,eturn c;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,108,f (phonemeText.length() < o.phonemeText.length()) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,109,eturn -1;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,112,eturn 0;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,66,nt c = phs[i].compareTo(phs[j]);
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,66,"int c = Rule.Phoneme.COMPARATOR.compare(phs[i], phs[j]);"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,79,"ssertEquals(""Phoneme compared to itself should be zero: "" + ph.getPhonemeText(), 0, ph.compareTo(ph));"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,79,"assertEquals(""Phoneme compared to itself should be zero: "" + ph.getPhonemeText(), 0,"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,80,"Rule.Phoneme.COMPARATOR.compare(ph, ph));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,237,eturn Languages.LanguageSet.from(langs);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,237,Languages.LanguageSet ls = Languages.LanguageSet.from(langs);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,238,if (ls.equals(Languages.NO_LANGUAGES)) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,239,return Languages.ANY_LANGUAGE;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,240,} else {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,241,return ls;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,58,* A set of languages.
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,60,public static abstract class LanguageSet {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,61,public static LanguageSet from(Set<String> langs) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,62,if (langs.isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,63,return NO_LANGUAGES;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,64,} else {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,65,return new SomeLanguages(langs);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,69,public abstract boolean contains(String language);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,71,public abstract String getAny();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,73,public abstract boolean isEmpty();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,75,public abstract boolean isSingleton();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,77,public abstract LanguageSet restrictTo(LanguageSet other);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,81,"* Some languages, explicitly enumerated."
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,83,public static class SomeLanguages extends LanguageSet {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,84,private final Set<String> languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,86,private SomeLanguages(Set<String> languages) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,87,this.languages = Collections.unmodifiableSet(languages);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,90,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,91,public boolean contains(String language) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,92,return this.languages.contains(language);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,95,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,96,public String getAny() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,97,return this.languages.iterator().next();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,100,public Set<String> getLanguages() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,101,return this.languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,104,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,105,public boolean isEmpty() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,106,return this.languages.isEmpty();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,109,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,110,public boolean isSingleton() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,111,return this.languages.size() == 1;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,114,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,115,public LanguageSet restrictTo(LanguageSet other) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,116,if (other == NO_LANGUAGES) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,117,return other;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,118,} else if (other == ANY_LANGUAGE) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,119,return this;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,120,} else {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,121,SomeLanguages sl = (SomeLanguages) other;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,122,Set<String> ls = new HashSet<String>(this.languages);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,123,ls.retainAll(sl.languages);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,124,return from(ls);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,128,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,129,public String toString() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,130,"return ""Languages("" + languages.toString() + "")"";"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,110,rivate Languages(Set<String> languages) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,111,his.languages = languages;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,114,ublic Set<String> getLanguages() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,115,eturn this.languages;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,119, A set of languages.
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,121,ublic static abstract class LanguageSet {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,122,ublic abstract LanguageSet restrictTo(LanguageSet other);
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,124,ublic static LanguageSet from(Set<String> langs) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,125,f (langs.isEmpty()) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,126,eturn NO_LANGUAGES;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,127, else {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,128,eturn new SomeLanguages(langs);
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,132,ublic abstract boolean contains(String language);
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,134,ublic abstract boolean isSingleton();
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,136,ublic abstract String getAny();
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,138,ublic abstract boolean isEmpty();
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,146,ublic LanguageSet restrictTo(LanguageSet other) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,147,eturn this;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,193,public boolean contains(String language) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,194,return false;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,151,ublic boolean contains(String language) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,152,eturn false;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,198,public String getAny() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,199,"throw new NoSuchElementException(""Can't fetch any language from the empty language set."");"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,202,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,203,public boolean isEmpty() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,204,return true;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,161,ublic String getAny() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,162,"hrow new NoSuchElementException(""Can't fetch any language from the empty language set."");"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,213,public LanguageSet restrictTo(LanguageSet other) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,214,return this;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,166,ublic boolean isEmpty() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,167,eturn true;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,218,public String toString() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,219,"return ""NO_LANGUAGES"";"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,175,Override
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,176,ublic LanguageSet restrictTo(LanguageSet other) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,177,eturn other;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,185,Override
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,186,ublic boolean isSingleton() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,187,eturn false;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,202," Some languages, explicitly enumerated."
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,204,ublic static class SomeLanguages extends LanguageSet {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,205,rivate final Set<String> languages;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,207,rivate SomeLanguages(Set<String> languages) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,208,his.languages = Collections.unmodifiableSet(languages);
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,211,ublic Set<String> getLanguages() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,212,eturn this.languages;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,216,ublic LanguageSet restrictTo(LanguageSet other) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,217,f (other == NO_LANGUAGES) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,218,eturn other;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,219, else if (other == ANY_LANGUAGE) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,220,eturn this;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,221, else {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,222,omeLanguages sl = (SomeLanguages) other;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,223,et<String> ls = new HashSet<String>(this.languages);
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,224,s.retainAll(sl.languages);
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,225,eturn from(ls);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,243,public boolean isSingleton() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,244,return false;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,230,ublic boolean contains(String language) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,231,eturn this.languages.contains(language);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,248,public LanguageSet restrictTo(LanguageSet other) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,249,return other;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,235,ublic boolean isSingleton() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,236,eturn this.languages.size() == 1;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,253,public String toString() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,254,"return ""ANY_LANGUAGE"";"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,239,Override
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,240,ublic String getAny() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,241,eturn this.languages.iterator().next();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,258,private Languages(Set<String> languages) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,259,this.languages = languages;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,244,Override
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,245,ublic boolean isEmpty() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,246,eturn this.languages.isEmpty();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,262,public Set<String> getLanguages() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,263,return this.languages;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,52,static class PhonemeBuilder {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,54,public static PhonemeBuilder empty(Languages.LanguageSet languages) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,55,"return new PhonemeBuilder(Collections.singleton(new Rule.Phoneme("""", languages)));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,58,private final Set<Rule.Phoneme> phonemes;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,60,private PhonemeBuilder(Set<Rule.Phoneme> phonemes) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,61,this.phonemes = phonemes;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,64,public PhonemeBuilder append(String str) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,65,Set<Rule.Phoneme> newPhonemes = new HashSet<Rule.Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,67,for (Rule.Phoneme ph : this.phonemes) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,68,newPhonemes.add(ph.append(str));
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,71,return new PhonemeBuilder(newPhonemes);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,74,public PhonemeBuilder apply(Rule.PhonemeExpr phonemeExpr) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,75,Set<Rule.Phoneme> newPhonemes = new HashSet<Rule.Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,77,for (Rule.Phoneme left : this.phonemes) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,78,for (Rule.Phoneme right : phonemeExpr.getPhonemes()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,79,Rule.Phoneme join = left.join(right);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,80,if (!join.getLanguages().isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,81,newPhonemes.add(join);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,86,return new PhonemeBuilder(newPhonemes);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,89,public Set<Rule.Phoneme> getPhonemes() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,90,return this.phonemes;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,93,public String makeString() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,94,List<String> sorted = new ArrayList<String>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,96,for (Rule.Phoneme ph : this.phonemes) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,97,sorted.add(ph.getPhonemeText());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,100,Collections.sort(sorted);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,101,StringBuilder sb = new StringBuilder();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,103,for (String ph : sorted) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,104,if (sb.length() > 0)
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,105,"sb.append(""|"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,106,sb.append(ph);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,109,return sb.toString();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,113,private static class RulesApplication {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,114,private final List<Rule> finalRules;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,115,private final String input;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,117,private PhonemeBuilder phonemeBuilder;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,118,private int i;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,119,private boolean found;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,121,"public RulesApplication(List<Rule> finalRules, String input, PhonemeBuilder phonemeBuilder, int i) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,122,if (finalRules == null) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,123,"throw new NullPointerException(""The finalRules argument must not be null"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,125,this.finalRules = finalRules;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,126,this.phonemeBuilder = phonemeBuilder;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,127,this.input = input;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,128,this.i = i;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,131,public int getI() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,132,return this.i;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,135,public PhonemeBuilder getPhonemeBuilder() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,136,return this.phonemeBuilder;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,139,public RulesApplication invoke() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,140,this.found = false;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,141,int patternLength = 0;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,142,RULES: for (Rule rule : this.finalRules) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,143,String pattern = rule.getPattern();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,144,patternLength = pattern.length();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,145,"// log(""trying pattern: "" + pattern);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,147,"if (!rule.patternAndContextMatches(this.input, this.i)) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,148,"// log(""no match"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,149,continue RULES;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,152,this.phonemeBuilder = this.phonemeBuilder.apply(rule.getPhoneme());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,153,this.found = true;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,154,break RULES;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,157,if (!this.found) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,158,patternLength = 1;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,161,this.i += patternLength;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,162,return this;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,165,public boolean isFound() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,166,return this.found;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,181,"private static String join(Iterable<String> strings, String sep) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,182,StringBuilder sb = new StringBuilder();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,183,Iterator<String> si = strings.iterator();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,184,if (si.hasNext()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,185,sb.append(si.next());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,187,while (si.hasNext()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,188,sb.append(sep).append(si.next());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,191,return sb.toString();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,222,"private PhonemeBuilder applyFinalRules(PhonemeBuilder phonemeBuilder, List<Rule> finalRules, Languages.LanguageSet languageSet,"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,223,boolean strip) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,224,if (finalRules == null) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,225,"throw new NullPointerException(""finalRules can not be null"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,227,if (finalRules.isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,228,return phonemeBuilder;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,231,Set<Rule.Phoneme> phonemes = new HashSet<Rule.Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,233,for (Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,234,PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,235,String phonemeText = phoneme.getPhonemeText();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,236,"// System.err.println(""Expanding: "" + phonemeText);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,238,for (int i = 0; i < phonemeText.length();) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,239,"RulesApplication rulesApplication = new RulesApplication(finalRules, phonemeText, subBuilder, i).invoke();"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,240,boolean found = rulesApplication.isFound();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,241,subBuilder = rulesApplication.getPhonemeBuilder();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,243,if (!found) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,244,"// System.err.println(""Not found. Appending as-is"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,245,"subBuilder = subBuilder.append(phonemeText.substring(i, i + 1));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,248,i = rulesApplication.getI();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,250,"// System.err.println(phonemeText + "" "" + i + "": "" + subBuilder.makeString());"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,253,"// System.err.println(""Expanded to: "" + subBuilder.makeString());"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,255,phonemes.addAll(subBuilder.getPhonemes());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,258,return new PhonemeBuilder(phonemes);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,262,* Encodes a string to its phonetic representation.
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,264,* @param input
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,265,*            the String to encode
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,266,* @return the encoding of the input
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,268,public String encode(String input) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,269,Languages.LanguageSet languageSet = this.lang.guessLanguages(input);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,270,"return phoneticUtf8(input, languageSet);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,128, Encodes a string to its phonetic representation.
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,130, @param input
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,131,            the String to encode
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,132, @return the encoding of the input
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,134,ublic String encode(String input) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,135,anguages.LanguageSet languageSet = this.lang.guessLanguages(input);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,136,"eturn phoneticUtf8(input, languageSet);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,237,"rivate PhonemeBuilder applyFinalRules(PhonemeBuilder phonemeBuilder, List<Rule> finalRules, Languages.LanguageSet languageSet,"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,238,oolean strip) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,239,f (finalRules == null) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,240,"hrow new NullPointerException(""finalRules can not be null"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,242,f (finalRules.isEmpty()) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,243,eturn phonemeBuilder;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,246,et<Rule.Phoneme> phonemes = new HashSet<Rule.Phoneme>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,248,or (Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,249,honemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,250,tring phonemeText = phoneme.getPhonemeText();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,251,"/ System.err.println(""Expanding: "" + phonemeText);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,253,or (int i = 0; i < phonemeText.length();) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,254,"ulesApplication rulesApplication = new RulesApplication(finalRules, phonemeText, subBuilder, i).invoke();"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,255,oolean found = rulesApplication.isFound();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,256,ubBuilder = rulesApplication.getPhonemeBuilder();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,258,f (!found) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,259,"/ System.err.println(""Not found. Appending as-is"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,260,"ubBuilder = subBuilder.append(phonemeText.substring(i, i + 1));"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,263, = rulesApplication.getI();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,265,"/ System.err.println(phonemeText + "" "" + i + "": "" + subBuilder.makeString());"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,268,"/ System.err.println(""Expanded to: "" + subBuilder.makeString());"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,270,honemes.addAll(subBuilder.getPhonemes());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,273,eturn new PhonemeBuilder(phonemes);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,276,"rivate static String join(Iterable<String> strings, String sep) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,277,tringBuilder sb = new StringBuilder();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,278,terator<String> si = strings.iterator();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,279,f (si.hasNext()) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,280,b.append(si.next());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,282,hile (si.hasNext()) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,283,b.append(sep).append(si.next());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,286,eturn sb.toString();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,289,rivate static class RulesApplication {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,290,rivate final List<Rule> finalRules;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,291,rivate final String input;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,293,rivate PhonemeBuilder phonemeBuilder;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,294,rivate int i;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,295,rivate boolean found;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,297,"ublic RulesApplication(List<Rule> finalRules, String input, PhonemeBuilder phonemeBuilder, int i) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,298,f (finalRules == null) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,299,"hrow new NullPointerException(""The finalRules argument must not be null"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,301,his.finalRules = finalRules;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,302,his.phonemeBuilder = phonemeBuilder;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,303,his.input = input;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,304,his.i = i;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,307,ublic PhonemeBuilder getPhonemeBuilder() {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,308,eturn this.phonemeBuilder;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,311,ublic int getI() {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,312,eturn this.i;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,315,ublic boolean isFound() {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,316,eturn this.found;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,319,ublic RulesApplication invoke() {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,320,his.found = false;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,321,nt patternLength = 0;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,322,ULES: for (Rule rule : this.finalRules) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,323,tring pattern = rule.getPattern();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,324,atternLength = pattern.length();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,325,"/ log(""trying pattern: "" + pattern);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,327,"f (!rule.patternAndContextMatches(this.input, this.i)) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,328,"/ log(""no match"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,329,ontinue RULES;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,332,his.phonemeBuilder = this.phonemeBuilder.apply(rule.getPhoneme());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,333,his.found = true;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,334,reak RULES;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,337,f (!this.found) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,338,atternLength = 1;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,341,his.i += patternLength;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,342,eturn this;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,346,tatic class PhonemeBuilder {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,348,ublic static PhonemeBuilder empty(Languages.LanguageSet languages) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,349,"eturn new PhonemeBuilder(Collections.singleton(new Rule.Phoneme("""", languages)));"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,352,rivate final Set<Rule.Phoneme> phonemes;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,354,rivate PhonemeBuilder(Set<Rule.Phoneme> phonemes) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,355,his.phonemes = phonemes;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,358,ublic Set<Rule.Phoneme> getPhonemes() {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,359,eturn this.phonemes;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,362,ublic PhonemeBuilder apply(Rule.PhonemeExpr phonemeExpr) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,363,et<Rule.Phoneme> newPhonemes = new HashSet<Rule.Phoneme>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,365,or (Rule.Phoneme left : this.phonemes) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,366,or (Rule.Phoneme right : phonemeExpr.getPhonemes()) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,367,ule.Phoneme join = left.join(right);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,368,f (!join.getLanguages().isEmpty()) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,369,ewPhonemes.add(join);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,374,eturn new PhonemeBuilder(newPhonemes);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,377,ublic String makeString() {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,378,ist<String> sorted = new ArrayList<String>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,380,or (Rule.Phoneme ph : this.phonemes) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,381,orted.add(ph.getPhonemeText());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,384,ollections.sort(sorted);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,385,tringBuilder sb = new StringBuilder();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,387,or (String ph : sorted) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,388,f (sb.length() > 0)
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,389,"b.append(""|"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,390,b.append(ph);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,393,eturn sb.toString();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,396,ublic PhonemeBuilder append(String str) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,397,et<Rule.Phoneme> newPhonemes = new HashSet<Rule.Phoneme>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,399,or (Rule.Phoneme ph : this.phonemes) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,400,ewPhonemes.add(ph.append(str));
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,403,eturn new PhonemeBuilder(newPhonemes);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,81,public static class Phoneme implements PhonemeExpr {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,82,private final String phonemeText;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,83,private final Languages.LanguageSet languages;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,85,"public Phoneme(String phonemeText, Languages.LanguageSet languages) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,86,this.phonemeText = phonemeText;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,87,this.languages = languages;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,90,public Phoneme append(String str) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,91,"return new Phoneme(this.phonemeText + str, this.languages);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,94,public Languages.LanguageSet getLanguages() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,95,return this.languages;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,98,public Iterable<Phoneme> getPhonemes() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,99,return Collections.singleton(this);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,102,public String getPhonemeText() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,103,return this.phonemeText;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,106,public Phoneme join(Phoneme right) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,107,"return new Phoneme(this.phonemeText + right.phonemeText, this.languages.restrictTo(right.languages));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,111,public interface PhonemeExpr {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,112,Iterable<Phoneme> getPhonemes();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,115,public static class PhonemeList implements PhonemeExpr {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,116,private final List<Phoneme> phonemes;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,118,public PhonemeList(List<Phoneme> phonemes) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,119,this.phonemes = phonemes;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,122,public List<Phoneme> getPhonemes() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,123,return this.phonemes;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,228,private static Phoneme parsePhoneme(String ph) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,229,"int open = ph.indexOf(""["");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,230,if (open >= 0) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,231,"if (!ph.endsWith(""]"")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,232,"throw new IllegalArgumentException(""Phoneme expression contains a '[' but does not end in ']'"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,234,"String before = ph.substring(0, open);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,235,"String in = ph.substring(open + 1, ph.length() - 1);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,236,"Set<String> langs = new HashSet<String>(Arrays.asList(in.split(""[+]"")));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,238,"return new Phoneme(before, Languages.LanguageSet.from(langs));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,239,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,240,"return new Phoneme(ph, Languages.ANY_LANGUAGE);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,244,private static PhonemeExpr parsePhonemeExpr(String ph) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,245,"if (ph.startsWith(""("")) { // we have a bracketed list of options"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,246,"if (!ph.endsWith("")"")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,247,"throw new IllegalArgumentException(""Phoneme starts with '(' so must end with ')'"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,250,List<Phoneme> phs = new ArrayList<Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,251,"String body = ph.substring(1, ph.length() - 1);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,252,"for (String part : body.split(""[|]"")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,253,phs.add(parsePhoneme(part));
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,255,"if (body.startsWith(""|"") || body.endsWith(""|"")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,256,"phs.add(new Phoneme("""", Languages.ANY_LANGUAGE));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,259,return new PhonemeList(phs);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,260,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,261,return parsePhoneme(ph);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,259,rivate static PhonemeExpr parsePhonemeExpr(String ph) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,260,"f (ph.startsWith(""("")) { // we have a bracketed list of options"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,261,"f (!ph.endsWith("")"")) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,262,"hrow new IllegalArgumentException(""Phoneme starts with '(' so must end with ')'"");"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,265,ist<Phoneme> phs = new ArrayList<Phoneme>();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,266,"tring body = ph.substring(1, ph.length() - 1);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,267,"or (String part : body.split(""[|]"")) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,268,hs.add(parsePhoneme(part));
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,270,"f (body.startsWith(""|"") || body.endsWith(""|"")) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,271,"hs.add(new Phoneme("""", Languages.ANY_LANGUAGE));"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,274,eturn new PhonemeList(phs);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,275, else {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,276,eturn parsePhoneme(ph);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,280,rivate static Phoneme parsePhoneme(String ph) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,281,"nt open = ph.indexOf(""["");"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,282,f (open >= 0) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,283,"f (!ph.endsWith(""]"")) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,284,"hrow new IllegalArgumentException(""Phoneme expression contains a '[' but does not end in ']'"");"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,286,"tring before = ph.substring(0, open);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,287,"tring in = ph.substring(open + 1, ph.length() - 1);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,288,"et<String> langs = new HashSet<String>(Arrays.asList(in.split(""[+]"")));"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,290,"eturn new Phoneme(before, Languages.LanguageSet.from(langs));"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,291, else {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,292,"eturn new Phoneme(ph, Languages.ANY_LANGUAGE);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,379,// * Decides if the language restriction for this rule applies.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,381,// * @param languageArg
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,382,// * a Set of Strings giving the names of the languages in scope
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,383,"// * @return true if these satistfy the language and logical restrictions on this rule, false otherwise"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,385,// public boolean languageMatches(Set<String> languageArg) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,386,// if (!languageArg.contains(Languages.ANY) && !this.languages.isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,387,// if (ALL.equals(this.logical) && !languageArg.containsAll(this.languages)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,388,// return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,389,// } else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,390,// Set<String> isect = new HashSet<String>(languageArg);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,391,// isect.retainAll(this.languages);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,392,// return !isect.isEmpty();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,394,// } else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,395,// return true;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,360,/ * Decides if the language restriction for this rule applies.
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,362,/ * @param languageArg
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,363,/ * a Set of Strings giving the names of the languages in scope
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,364,"/ * @return true if these satistfy the language and logical restrictions on this rule, false otherwise"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,366,/ public boolean languageMatches(Set<String> languageArg) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,367,/ if (!languageArg.contains(Languages.ANY) && !this.languages.isEmpty()) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,368,/ if (ALL.equals(this.logical) && !languageArg.containsAll(this.languages)) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,369,/ return false;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,370,/ } else {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,371,/ Set<String> isect = new HashSet<String>(languageArg);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,372,/ isect.retainAll(this.languages);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,373,/ return !isect.isEmpty();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,375,/ } else {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,376,/ return true;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,408,ublic interface PhonemeExpr {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,409,terable<Phoneme> getPhonemes();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,412,ublic static class Phoneme implements PhonemeExpr {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,413,rivate final String phonemeText;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,414,rivate final Languages.LanguageSet languages;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,416,"ublic Phoneme(String phonemeText, Languages.LanguageSet languages) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,417,his.phonemeText = phonemeText;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,418,his.languages = languages;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,421,ublic String getPhonemeText() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,422,eturn this.phonemeText;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,425,ublic Languages.LanguageSet getLanguages() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,426,eturn this.languages;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,429,ublic Iterable<Phoneme> getPhonemes() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,430,eturn Collections.singleton(this);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,433,ublic Phoneme join(Phoneme right) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,434,"eturn new Phoneme(this.phonemeText + right.phonemeText, this.languages.restrictTo(right.languages));"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,437,ublic Phoneme append(String str) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,438,"eturn new Phoneme(this.phonemeText + str, this.languages);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,442,ublic static class PhonemeList implements PhonemeExpr {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,443,rivate final List<Phoneme> phonemes;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,445,ublic PhonemeList(List<Phoneme> phonemes) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,446,his.phonemes = phonemes;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,449,ublic List<Phoneme> getPhonemes() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,450,eturn this.phonemes;
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,28,mport org.junit.Ignore;
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,43,Ignore
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,49,"ssert.assertFalse(bmpm.encode(""ácz"").equals(""""));"
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,50,"ssert.assertFalse(bmpm.encode(""átz"").equals(""""));"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,47,"String[] names = { ""ácz"", ""átz"" };"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,48,for (String name : names) {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,49,"Assert.assertFalse(bmpm.encode(name).equals(""""));"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,83,// @Ignore
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,123,Test(timeout = 10000L)
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,125,@Test(timeout = 20000L)
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,51," ""כהן"", ""hebrew"", EXACT } });"
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,51,"{ ""כהן"", ""hebrew"", EXACT }, { ""ácz"", ""any"", EXACT }, { ""átz"", ""any"", EXACT } });"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,40,eturn Arrays
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,41,"asList(new Object[] { ""Renault"", ""rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"", NameType.GENERIC, RuleType.APPROX,"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,42,"rue },"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,43,"ew Object[] { ""Renault"", ""rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult"", NameType.ASHKENAZI, RuleType.APPROX, true },"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,44,"ew Object[] { ""Renault"", ""rinDlt"", NameType.SEPHARDIC, RuleType.APPROX, true },"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,45,"ew Object[] { ""SntJohn-Smith"", ""sntjonsmit"", NameType.GENERIC, RuleType.EXACT, true },"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,46,"ew Object[] { ""d'ortley"", ""ortlaj|ortlaj|ortlej|ortlej-dortlaj|dortlaj|dortlej|dortlej"", NameType.GENERIC,"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,47,"uleType.EXACT, true },"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,48,ew Object[] {
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,49,"van helsing"","
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,50,"elSink|elsink|helSink|helsink|helzink|xelsink-banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink"","
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,51,"ameType.GENERIC, RuleType.EXACT, false });"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,40,"return Arrays.asList(new Object[] { ""Renault"", ""rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"", NameType.GENERIC,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,41,"RuleType.APPROX, true }, new Object[] { ""Renault"", ""rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult"", NameType.ASHKENAZI,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,42,"RuleType.APPROX, true }, new Object[] { ""Renault"", ""rinDlt"", NameType.SEPHARDIC, RuleType.APPROX, true }, new Object[] {"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,43,"""SntJohn-Smith"", ""sntjonsmit"", NameType.GENERIC, RuleType.EXACT, true }, new Object[] { ""d'ortley"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,44,"""ortlaj|ortlaj|ortlej|ortlej-dortlaj|dortlaj|dortlej|dortlej"", NameType.GENERIC, RuleType.EXACT, true }, new Object[] {"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,45,"""van helsing"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,46,"""elSink|elsink|helSink|helsink|helzink|xelsink-banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,47,"NameType.GENERIC, RuleType.EXACT, false });"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,75,"ystem.err.println(""actual: "" + phoneticActual);"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,71,"System.err.println(""actual:    "" + phoneticActual);"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,33,/@RunWith(Parameterized.class)
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,33,// @RunWith(Parameterized.class)
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,39,"ew Object[] { ""matching language sets with ALL"","
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,40,"ew Rule(""e"", """", """", new Rule.Phoneme(""o"", Languages.LanguageSet.from("
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,41,"ew HashSet<String>(Arrays.asList(""english"", ""french""))))),"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,42,"ew HashSet<String>(Arrays.asList(""english"", ""french"")), true },"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,43,"ew Object[] { ""non-matching language sets with ALL"","
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,44,"ew Rule(""e"", """", """", new Rule.Phoneme(""o"", Languages.LanguageSet.from("
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,45,"ew HashSet<String>(Arrays.asList(""english"", ""french""))))),"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,46,"ew HashSet<String>(Arrays.asList(""english"")), false });"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,39,new Object[] {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,40,"""matching language sets with ALL"","
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,41,"new Rule(""e"", """", """", new Rule.Phoneme(""o"", Languages.LanguageSet.from(new HashSet<String>(Arrays.asList(""english"","
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,42,"""french""))))), new HashSet<String>(Arrays.asList(""english"", ""french"")), true },"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,43,new Object[] {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,44,"""non-matching language sets with ALL"","
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,45,"new Rule(""e"", """", """", new Rule.Phoneme(""o"", Languages.LanguageSet.from(new HashSet<String>(Arrays.asList(""english"","
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,46,"""french""))))), new HashSet<String>(Arrays.asList(""english"")), false });"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,61,/    @Test
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,62,/    public void testRuleLanguageMatches() {
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,63,"/        assertEquals(this.caseName, this.expected, this.rule.languageMatches(this.langs));"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,61,// @Test
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,62,// public void testRuleLanguageMatches() {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,63,"// assertEquals(this.caseName, this.expected, this.rule.languageMatches(this.langs));"

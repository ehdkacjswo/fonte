is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,201,et<String> ls = guessLanguages(text);
False,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,202,f (ls.size() == 1) {
False,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,203,eturn ls.iterator().next();
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,201,Languages.LanguageSet ls = guessLanguages(text);
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,202,if (ls.isSingleton()) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,203,return ls.getAny();
False,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,212, @param text
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,212,* @param input
False,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,214, @return a Set of Strings of language names that are potential matches for the word
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,214,* @return a Set of Strings of language names that are potential matches for the input word
False,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,216,ublic Set<String> guessLanguages(String input) {
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,216,public Languages.LanguageSet guessLanguages(String input) {
False,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,237,eturn langs;
True,src/java/org/apache/commons/codec/language/bm/Lang.java,src/java/org/apache/commons/codec/language/bm/Lang.java,237,return Languages.LanguageSet.from(langs);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,25,import java.util.NoSuchElementException;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,117,/ // The original code mapped sets of languages to unique numerical codes - this doesn't seem to be needed in this impl
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,118,/ public static Languages instance(String languagesResourceName)
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,120,/ // read languages list
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,121,"/ Map<String, Integer> ls = new HashMap<String, Integer>();"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,122,/ InputStream langIS = Languages.class.getClassLoader().getResourceAsStream(languagesResourceName);
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,124,/ if(langIS == null)
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,125,"/ throw new IllegalArgumentException(""Unable to resolve required resource: "" + languagesResourceName);"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,127,/ Scanner lsScanner = new Scanner(langIS);
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,128,/ int i = 0;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,129,/ while(lsScanner.hasNextLine()) {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,130,/ String line = lsScanner.nextLine();
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,131,/ i++;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,132,"/ ls.put(line.trim(), i^2);"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,135,"/ return new Languages(Collections.unmodifiableSet(ls.keySet()), Collections.unmodifiableMap(ls));"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,138,"/ // todo: phoneticutils.php: LanguageIndex, LanguageName, LanguageCode, LanguageIndexFromCode"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,141,/ private final Set<String> languages;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,142,"/ private final Map<String, Integer> language_codes;"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,144,"/ private Languages(Set<String> languages, Map<String, Integer> language_codes) {"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,145,/ this.languages = languages;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,146,/ this.language_codes = language_codes;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,149,/ public Set<String> getLanguages() {
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,150,/ return languages;
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,153,"/ public Map<String, Integer> getLanguage_codes() {"
False,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,154,/ return language_codes;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,119,* A set of languages.
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,121,public static abstract class LanguageSet {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,122,public abstract LanguageSet restrictTo(LanguageSet other);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,124,public static LanguageSet from(Set<String> langs) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,125,if (langs.isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,126,return NO_LANGUAGES;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,127,} else {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,128,return new SomeLanguages(langs);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,132,public abstract boolean contains(String language);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,134,public abstract boolean isSingleton();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,136,public abstract String getAny();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,138,public abstract boolean isEmpty();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,142,* No languages at all.
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,144,public static LanguageSet NO_LANGUAGES = new LanguageSet() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,145,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,146,public LanguageSet restrictTo(LanguageSet other) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,147,return this;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,150,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,151,public boolean contains(String language) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,152,return false;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,155,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,156,public boolean isSingleton() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,157,return false;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,160,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,161,public String getAny() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,162,"throw new NoSuchElementException(""Can't fetch any language from the empty language set."");"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,165,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,166,public boolean isEmpty() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,167,return true;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,172,* Any/all languages.
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,174,public static LanguageSet ANY_LANGUAGE = new LanguageSet() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,175,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,176,public LanguageSet restrictTo(LanguageSet other) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,177,return other;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,180,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,181,public boolean contains(String language) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,182,return true;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,185,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,186,public boolean isSingleton() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,187,return false;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,190,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,191,public String getAny() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,192,"throw new NoSuchElementException(""Can't fetch any language from the any language set."");"
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,195,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,196,public boolean isEmpty() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,197,return false;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,202,"* Some languages, explicitly enumerated."
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,204,public static class SomeLanguages extends LanguageSet {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,205,private final Set<String> languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,207,private SomeLanguages(Set<String> languages) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,208,this.languages = Collections.unmodifiableSet(languages);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,211,public Set<String> getLanguages() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,212,return this.languages;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,215,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,216,public LanguageSet restrictTo(LanguageSet other) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,217,if (other == NO_LANGUAGES) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,218,return other;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,219,} else if (other == ANY_LANGUAGE) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,220,return this;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,221,} else {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,222,SomeLanguages sl = (SomeLanguages) other;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,223,Set<String> ls = new HashSet<String>(this.languages);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,224,ls.retainAll(sl.languages);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,225,return from(ls);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,229,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,230,public boolean contains(String language) {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,231,return this.languages.contains(language);
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,234,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,235,public boolean isSingleton() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,236,return this.languages.size() == 1;
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,239,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,240,public String getAny() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,241,return this.languages.iterator().next();
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,244,@Override
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,245,public boolean isEmpty() {
True,src/java/org/apache/commons/codec/language/bm/Languages.java,src/java/org/apache/commons/codec/language/bm/Languages.java,246,return this.languages.isEmpty();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,135,et<String> languageSet = this.lang.guessLanguages(input);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,135,Languages.LanguageSet languageSet = this.lang.guessLanguages(input);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,147,"ublic String phoneticUtf8(String input, final Set<String> languageSet) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,147,"public String phoneticUtf8(String input, final Languages.LanguageSet languageSet) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,216,"tring phonetic = """";"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,216,PhonemeBuilder phonemeBuilder = PhonemeBuilder.empty(languageSet);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,220,"ulesApplication rulesApplication = new RulesApplication(rules, languageSet, input, phonetic, i).invoke();"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,220,"RulesApplication rulesApplication = new RulesApplication(rules, languageSet, input, phonemeBuilder, i).invoke();"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,222,honetic = rulesApplication.getPhonetic();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,222,phonemeBuilder = rulesApplication.getPhonemeBuilder();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,223,"// System.err.println(input + "" "" + i + "": "" + phonemeBuilder.makeString());"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,225,"honetic = applyFinalRules(phonetic, finalRules1, languageSet, false);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,226,"honetic = applyFinalRules(phonetic, finalRules2, languageSet, true);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,226,"// System.err.println(""Applying general rules"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,227,"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules1, languageSet, false);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,228,"// System.err.println(""Now got: "" + phonemeBuilder.makeString());"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,229,"// System.err.println(""Applying language-specific rules"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,230,"phonemeBuilder = applyFinalRules(phonemeBuilder, finalRules2, languageSet, true);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,231,"// System.err.println(""Now got: "" + phonemeBuilder.makeString());"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,232,"// System.err.println(""Done"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,228,eturn phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,234,return phonemeBuilder.makeString();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,231,rivate String removeDuplicateAlternates(final String phonetic) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,232,ist<String> altArray = splitOnPipe(phonetic);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,234,"tring result = ""|"";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,235,or (String alt : altArray) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,236,"f (!result.contains(""|"" + alt + ""|"")) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,237,"esult += (alt + ""|"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,241,"esult = result.substring(1, result.length() - 1);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,242,eturn result;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,246," Applied to a single alternative at a time -- not to a parenthisized list it removes all embedded bracketed attributes, logically-ands"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,247," them together, and places them at the end."
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,249," However if strip is true, this can indeed remove embedded bracketed attributes from a parenthesized list"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,251, @param input
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,252, @param strip
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,253, @return
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,255,"rivate String normalizeLanguageAttributes(final String input, final boolean strip) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,256,tring text = input;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,257,et<String> langs = new HashSet<String>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,259,nt bracketStart;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,260,hile ((bracketStart = text.indexOf('[')) != -1) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,261,"nt bracketEnd = text.indexOf(']', bracketStart);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,262,f (bracketEnd == -1) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,263,"hrow new IllegalArgumentException(""no closing square bracket in: "" + text);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,266,"tring body = text.substring(bracketStart + 1, bracketEnd);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,267,"angs.addAll(Arrays.asList(body.split(""[+]"")));"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,268,"ext = text.substring(0, bracketStart) + text.substring(bracketEnd + 1);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,271,f (langs.isEmpty() || strip) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,272,eturn text;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,273, else if (langs.contains(Languages.ANY)) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,274,"eturn ""["" + Languages.ANY + ""]"";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,275, else {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,276,"eturn text + ""["" + join(langs, ""+"") + ""]"";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,280,"rivate String applyFinalRules(String phonetic, List<Rule> finalRules, Set<String> languageArg, boolean strip) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,237,"private PhonemeBuilder applyFinalRules(PhonemeBuilder phonemeBuilder, List<Rule> finalRules, Languages.LanguageSet languageSet,"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,238,boolean strip) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,285,eturn phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,243,return phonemeBuilder;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,288,honetic = expand(phonetic);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,289,"/ must protect | in [] as split takes a regex, not a string literal"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,290,ist<String> phoneticArray = splitOnPipe(phonetic);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,292,or (int k = 0; k < phoneticArray.size(); k++) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,293,"/ log(""k: "" + k);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,295,tring aPhonetic = phoneticArray.get(k);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,296,"tring phonetic2 = """";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,298,"tring phoneticx = normalizeLanguageAttributes(aPhonetic, true);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,299,or (int i = 0; i < aPhonetic.length();) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,300,/ we will handle the increment manually
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,301,"f (aPhonetic.substring(i, i + 1).equals(""["")) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,302,nt attribStart = i;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,303,++;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,304,hile (true) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,305,++;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,306,"tring nextChar = aPhonetic.substring(i, i + 1);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,307,"f (nextChar.equals(""]"")) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,308,"honetic2 += aPhonetic.substring(attribStart, i);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,309,reak;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,246,Set<Rule.Phoneme> phonemes = new HashSet<Rule.Phoneme>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,313,ontinue;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,248,for (Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,249,PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,250,String phonemeText = phoneme.getPhonemeText();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,251,"// System.err.println(""Expanding: "" + phonemeText);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,316,"ulesApplication rulesApplication = new RulesApplication(finalRules, languageArg, phoneticx, phonetic2, i).invoke();"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,253,for (int i = 0; i < phonemeText.length();) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,254,"RulesApplication rulesApplication = new RulesApplication(finalRules, languageSet, phonemeText, subBuilder, i).invoke();"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,318,honetic2 = rulesApplication.getPhonetic();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,256,subBuilder = rulesApplication.getPhonemeBuilder();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,321,"honetic2 += aPhonetic.substring(i, i + 1);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,259,"// System.err.println(""Not found. Appending as-is"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,260,"subBuilder = subBuilder.append(phonemeText.substring(i, i + 1));"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,327,"honeticArray.set(k, expand(phonetic2));"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,330,"honetic = join(phoneticArray, ""|"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,331,f (strip) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,332,"honetic = normalizeLanguageAttributes(phonetic, true);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,334,"f (!phonetic.contains(""|"")) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,335,"honetic = ""("" + removeDuplicateAlternates(phonetic) + "")"";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,338,eturn phonetic;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,341,rivate String expand(String phonetic) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,342,nt altStart = phonetic.indexOf('(');
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,343,f (altStart == -1) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,344,"eturn normalizeLanguageAttributes(phonetic, false);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,347,"tring prefix = phonetic.substring(0, altStart);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,348,ltStart++;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,349,nt altEnd = phonetic.indexOf(')');
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,351,f (altEnd < altStart) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,352,"hrow new IllegalArgumentException(""Phonetic string has a close-bracket before the first open-bracket"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,355,"tring altString = phonetic.substring(altStart, altEnd);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,356,ltEnd++;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,357,tring suffix = phonetic.substring(altEnd);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,358,ist<String> altArray = splitOnPipe(altString);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,360,"tring result = """";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,361,or (String alt : altArray) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,362,tring alternate = expand(prefix + alt + suffix);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,363,"f (alternate.length() != 0 && !alternate.equals(""[any]"")) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,364,f (result.length() > 0) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,365,"esult += ""|"";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,367,esult += alternate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,265,"// System.err.println(phonemeText + "" "" + i + "": "" + subBuilder.makeString());"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,371,eturn result;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,268,"// System.err.println(""Expanded to: "" + subBuilder.makeString());"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,375," Tests for compatible language rules to do so, apply the rule, expand the results, and detect alternatives with incompatible"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,376, attributes then drop each alternative that has incompatible attributes and keep those that are compatible if there are no compatible
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,377," alternatives left, return false otherwise return the compatible alternatives"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,379, @param phonetic
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,380, @param target
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,381, @param languageArg
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,382, @return a String or null.
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,384,"rivate String applyRuleIfCompatible(String phonetic, String target, Set<String> languageArg) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,385,tring candidate = phonetic + target;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,386,"f (!candidate.contains(""["")) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,387,eturn candidate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,270,phonemes.addAll(subBuilder.getPhonemes());
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,390,andidate = expand(candidate);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,391,ist<String> candidateArray = splitOnPipe(candidate);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,393,"andidate = """";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,394,oolean found = false;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,396,or (String thisCandidate : candidateArray) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,397,f (!languageArg.contains(Languages.ANY)) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,398,"hisCandidate = normalizeLanguageAttributes(thisCandidate + ""["" + languageArg + ""]"", false);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,401,"f (!thisCandidate.equals(""[0]"")) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,402,ound = true;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,403,f (candidate.length() != 0) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,404,"andidate += ""|"";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,406,andidate += thisCandidate;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,410,f (!found) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,411,eturn null; // eugh!
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,413,"f (candidate.contains(""|"")) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,414,"andidate = ""("" + candidate + "")"";"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,417,eturn candidate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,273,return new PhonemeBuilder(phonemes);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,433,rivate static List<String> splitOnPipe(String str) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,434,ist<String> res = new ArrayList<String>();
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,436,hile (true) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,437,nt i = str.indexOf('|');
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,438,f (i < 0) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,439,es.add(str);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,440,reak;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,443,"es.add(str.substring(0, i));"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,444,tr = str.substring(i + 1);
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,447,eturn res;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,452,rivate final Set<String> languageArg;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,291,private final Languages.LanguageSet languageSet;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,455,rivate String phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,294,private PhonemeBuilder phonemeBuilder;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,459,"ublic RulesApplication(List<Rule> finalRules, Set<String> languageArg, String input, String phonetic, int i) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,298,"public RulesApplication(List<Rule> finalRules, Languages.LanguageSet languageSet, String input, PhonemeBuilder phonemeBuilder, int i) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,464,his.languageArg = languageArg;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,465,his.phonetic = phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,303,this.languageSet = languageSet;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,304,this.phonemeBuilder = phonemeBuilder;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,470,ublic String getPhonetic() {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,471,eturn this.phonetic;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,309,public PhonemeBuilder getPhonemeBuilder() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,310,return this.phonemeBuilder;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,490,"f (!rule.patternAndContextMatches(this.input, this.i) || !rule.languageMatches(this.languageArg)) {"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,329,"if (!rule.patternAndContextMatches(this.input, this.i)) {"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,495,"tring candidate = applyRuleIfCompatible(this.phonetic, rule.getPhoneme(), this.languageArg);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,497,f (candidate == null || candidate.length() == 0) {
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,498,"/ log(""no candidate"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,499,ontinue RULES;
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,501,his.phonetic = candidate;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,334,this.phonemeBuilder = this.phonemeBuilder.apply(rule.getPhoneme());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,348,static class PhonemeBuilder {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,350,public static PhonemeBuilder empty(Languages.LanguageSet languages) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,351,"return new PhonemeBuilder(Collections.singleton(new Rule.Phoneme("""", languages)));"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,354,private final Set<Rule.Phoneme> phonemes;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,356,private PhonemeBuilder(Set<Rule.Phoneme> phonemes) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,357,this.phonemes = phonemes;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,360,public Set<Rule.Phoneme> getPhonemes() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,361,return this.phonemes;
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,364,public PhonemeBuilder apply(Rule.PhonemeExpr phonemeExpr) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,365,Set<Rule.Phoneme> newPhonemes = new HashSet<Rule.Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,367,for (Rule.Phoneme left : this.phonemes) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,368,for (Rule.Phoneme right : phonemeExpr.getPhonemes()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,369,Rule.Phoneme join = left.join(right);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,370,if (!join.getLanguages().isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,371,newPhonemes.add(join);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,376,return new PhonemeBuilder(newPhonemes);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,379,public String makeString() {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,380,List<String> sorted = new ArrayList<String>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,382,for (Rule.Phoneme ph : this.phonemes) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,383,sorted.add(ph.getPhonemeText());
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,386,Collections.sort(sorted);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,387,StringBuilder sb = new StringBuilder();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,389,for (String ph : sorted) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,390,if (sb.length() > 0)
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,391,"sb.append(""|"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,392,sb.append(ph);
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,395,return sb.toString();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,398,public PhonemeBuilder append(String str) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,399,Set<Rule.Phoneme> newPhonemes = new HashSet<Rule.Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,401,for (Rule.Phoneme ph : this.phonemes) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,402,newPhonemes.add(ph.append(str));
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,405,return new PhonemeBuilder(newPhonemes);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,22,import java.util.Arrays;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,30,mport java.util.Stack;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,153,"ublic static List<Rule> instance(NameType nameType, RuleType rt, Set<String> langs) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,154,f (langs.size() == 1) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,155,"eturn instance(nameType, rt, langs.iterator().next());"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,153,"public static List<Rule> instance(NameType nameType, RuleType rt, Languages.LanguageSet langs) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,154,if (langs.isSingleton()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,155,"return instance(nameType, rt, langs.getAny());"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,228,tring pat = stripQuotes(parts[0]);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,229,tring lCon = stripQuotes(parts[1]);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,230,tring rCon = stripQuotes(parts[2]);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,231,tring ph = stripQuotes(parts[3]);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,233,alidatePhenome(ph);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,229,String pat = stripQuotes(parts[0]);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,230,String lCon = stripQuotes(parts[1]);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,231,String rCon = stripQuotes(parts[2]);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,232,PhonemeExpr ph = parsePhonemeExpr(stripQuotes(parts[3]));
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,233,"Rule r = new Rule(pat, lCon, rCon, ph);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,234,lines.add(r);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,237,"ule r = new Rule(pat, lCon, rCon, ph, Collections.<String> emptySet(), """"); // guessing last 2 parameters"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,238,ines.add(r);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,260,rivate static void validatePhenome(CharSequence ph) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,261,tack<Character> stack = new Stack<Character>();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,262,or (int i = 0; i < ph.length(); i++) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,263,witch (ph.charAt(i)) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,264,ase '(':
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,265,tack.push('(');
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,266,reak;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,267,ase '[':
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,268,tack.push('[');
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,269,reak;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,270,ase ')': {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,271,f (stack.isEmpty())
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,272,"hrow new IllegalArgumentException(""Closing ')' at "" + i + "" without an opening '('"" + "" in "" + ph);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,273,har c = stack.pop();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,274,f (c != '(')
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,275,"hrow new IllegalArgumentException(""Closing ')' does not pair with opening '"" + c + ""' at "" + i + "" in "" + ph);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,276,reak;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,259,private static PhonemeExpr parsePhonemeExpr(String ph) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,260,"if (ph.startsWith(""("")) { // we have a bracketed list of options"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,261,"if (!ph.endsWith("")"")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,262,"throw new IllegalArgumentException(""Phoneme starts with '(' so must end with ')'"");"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,278,ase ']': {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,279,f (stack.isEmpty())
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,280,"hrow new IllegalArgumentException(""Closing ']' at "" + i + "" without an opening '['"" + "" in "" + ph);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,281,har c = stack.pop();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,282,f (c != '[')
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,283,"hrow new IllegalArgumentException(""Closing ']' does not pair with opening '"" + c + ""' at "" + i + "" in "" + ph);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,284,reak;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,265,List<Phoneme> phs = new ArrayList<Phoneme>();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,266,"String body = ph.substring(1, ph.length() - 1);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,267,"for (String part : body.split(""[|]"")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,268,phs.add(parsePhoneme(part));
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,286,efault:
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,287,reak;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,270,"if (body.startsWith(""|"") || body.endsWith(""|"")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,271,"phs.add(new Phoneme("""", Languages.ANY_LANGUAGE));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,274,return new PhonemeList(phs);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,275,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,276,return parsePhoneme(ph);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,290,f (!stack.isEmpty())
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,291,"hrow new IllegalArgumentException(""Bracket(s) opened without corresponding closes: "" + stack + "" in "" + ph);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,294,rivate final Set<String> languages;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,280,private static Phoneme parsePhoneme(String ph) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,281,"int open = ph.indexOf(""["");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,282,if (open >= 0) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,283,"if (!ph.endsWith(""]"")) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,284,"throw new IllegalArgumentException(""Phoneme expression contains a '[' but does not end in ']'"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,286,"String before = ph.substring(0, open);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,287,"String in = ph.substring(open + 1, ph.length() - 1);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,288,"Set<String> langs = new HashSet<String>(Arrays.asList(in.split(""[+]"")));"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,296,rivate final Pattern lContext;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,290,"return new Phoneme(before, Languages.LanguageSet.from(langs));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,291,} else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,292,"return new Phoneme(ph, Languages.ANY_LANGUAGE);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,298,rivate final String logical;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,296,private final Pattern lContext;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,302,rivate final String phoneme;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,300,private final PhonemeExpr phoneme;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,317, @param languages
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,318,            the required languages
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,319, @param logical
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,320,            flag to indicate if all or only some languages must be in scope
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,322,"ublic Rule(String pattern, String lContext, String rContext, String phoneme, Set<String> languages, String logical) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,316,"public Rule(String pattern, String lContext, String rContext, PhonemeExpr phoneme) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,327,his.languages = languages;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,328,his.logical = logical;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,332, Gets the languages that must be in scope. Not all rules apply in every language.
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,334, @return a Set of Strings giving the relevant languages
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,336,ublic Set<String> getLanguages() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,337,eturn this.languages;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,350, Gets the logical combinator for the languages. ALL means all languages must be in scope for the rule to apply. Any other value means
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,351, that any one language must be in scope for the rule to apply.
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,353, @return the logical combinator String
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,355,ublic String getLogical() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,356,eturn this.logical;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,373,ublic String getPhoneme() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,346,public PhonemeExpr getPhoneme() {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,387, Decides if the language restriction for this rule applies.
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,389, @param languageArg
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,390,            a Set of Strings giving the names of the languages in scope
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,391," @return true if these satistfy the language and logical restrictions on this rule, false otherwise"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,393,ublic boolean languageMatches(Set<String> languageArg) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,394,f (!languageArg.contains(Languages.ANY) && !this.languages.isEmpty()) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,395,f (ALL.equals(this.logical) && !languageArg.containsAll(this.languages)) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,396,eturn false;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,397, else {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,398,et<String> isect = new HashSet<String>(languageArg);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,399,sect.retainAll(this.languages);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,400,eturn !isect.isEmpty();
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,402, else {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,403,eturn true;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,360,// * Decides if the language restriction for this rule applies.
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,362,// * @param languageArg
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,363,// * a Set of Strings giving the names of the languages in scope
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,364,"// * @return true if these satistfy the language and logical restrictions on this rule, false otherwise"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,366,// public boolean languageMatches(Set<String> languageArg) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,367,// if (!languageArg.contains(Languages.ANY) && !this.languages.isEmpty()) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,368,// if (ALL.equals(this.logical) && !languageArg.containsAll(this.languages)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,369,// return false;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,370,// } else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,371,// Set<String> isect = new HashSet<String>(languageArg);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,372,// isect.retainAll(this.languages);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,373,// return !isect.isEmpty();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,375,// } else {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,376,// return true;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,408,public interface PhonemeExpr {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,409,Iterable<Phoneme> getPhonemes();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,412,public static class Phoneme implements PhonemeExpr {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,413,private final String phonemeText;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,414,private final Languages.LanguageSet languages;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,416,"public Phoneme(String phonemeText, Languages.LanguageSet languages) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,417,this.phonemeText = phonemeText;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,418,this.languages = languages;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,421,public String getPhonemeText() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,422,return this.phonemeText;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,425,public Languages.LanguageSet getLanguages() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,426,return this.languages;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,429,public Iterable<Phoneme> getPhonemes() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,430,return Collections.singleton(this);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,433,public Phoneme join(Phoneme right) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,434,"return new Phoneme(this.phonemeText + right.phonemeText, this.languages.restrictTo(right.languages));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,437,public Phoneme append(String str) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,438,"return new Phoneme(this.phonemeText + str, this.languages);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,442,public static class PhonemeList implements PhonemeExpr {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,443,private final List<Phoneme> phonemes;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,445,public PhonemeList(List<Phoneme> phonemes) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,446,this.phonemes = phonemes;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,449,public List<Phoneme> getPhonemes() {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,450,return this.phonemes;
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,22,mport java.util.Collections;
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,28,mport org.junit.Ignore;
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,72,Ignore
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,83,"ule r = new Rule(""a"", """", """", """", Collections.<String> emptySet(), ""bob"");"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,80,"Rule r = new Rule(""a"", """", """", new Rule.Phoneme("""", Languages.ANY_LANGUAGE));"
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,114,Ignore
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,125,or (int i = 0; i < 20; i++) {
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,121,for (int i = 0; i < 40; i++) {
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,127,"ystem.out.println(i + "" String to encode:"" + stringBuffer.toString());"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,123,"// System.out.println(i + "" String to encode:"" + stringBuffer.toString());"
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,130,"ystem.out.println(i + "" Elapsed time in ms:"" + (System.currentTimeMillis() - start));"
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,126,"// System.out.println(i + "" Elapsed time in ms:"" + (System.currentTimeMillis() - start));"
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,25,mport java.util.Set;
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,70,et<String> guesses = this.lang.guessLanguages(this.name);
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,71,tring guess = this.lang.guessLanguage(this.name);
True,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,68,Languages.LanguageSet guesses = this.lang.guessLanguages(this.name);
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,76,f (this.exactness.equals(EXACT)) {
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,77,"ssertEquals(""language predicted for name '"" + this.name + ""' is wrong"", this.language, guess);"
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,78, else {
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,79,"/ System.out.println(""warning: test case that maps to multiple languages: '"" +"
False,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,src/test/org/apache/commons/codec/language/bm/LanguageGuessingTest.java,80,"/ name + ""':"" + language + "" ~> "" + guesses);"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,41,"asList(new Object[] { ""Renault"", ""rinolt|rino|rinDlt|rinalt|rinult|rinD|rina|rinu"", NameType.GENERIC, RuleType.APPROX,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,41,".asList(new Object[] { ""Renault"", ""rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"", NameType.GENERIC, RuleType.APPROX,"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,44,"ew Object[] { ""Renault"", ""(rinDlt)"", NameType.SEPHARDIC, RuleType.APPROX, true },"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,45,"ew Object[] { ""SntJohn-Smith"", ""(sntjonsmit)"", NameType.GENERIC, RuleType.EXACT, true },"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,46,"ew Object[] { ""d'ortley"", ""ortlaj|ortlej|ortlaj|ortlej-dortlaj|dortlej|dortlaj|dortlej"", NameType.GENERIC,"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,44,"new Object[] { ""Renault"", ""rinDlt"", NameType.SEPHARDIC, RuleType.APPROX, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,45,"new Object[] { ""SntJohn-Smith"", ""sntjonsmit"", NameType.GENERIC, RuleType.EXACT, true },"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,46,"new Object[] { ""d'ortley"", ""ortlaj|ortlaj|ortlej|ortlej-dortlaj|dortlaj|dortlej|dortlej"", NameType.GENERIC,"
False,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,50,"helSink|helsink|helzink|xelSink|xelsink|xelzink|HelSink|Helsink|Helzink-vanhelSink|vanhelsink|vanhelzink|vanjelSink|vanjelsink|vanjelzink|fanhelSink|fanhelsink|fanhelzink|fanjelSink|fanjelsink|fanjelzink|banhelSink|banhelsink|banhelzink|banjelSink|banjelsink|banjelzink"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,50,"""elSink|elsink|helSink|helsink|helzink|xelsink-banhelsink|fanhelsink|fanhelzink|vanhelsink|vanhelzink|vanjelsink"","
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,74,"System.err.println(""expecting: "" + this.phoneticExpected);"
True,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,75,"System.err.println(""actual: "" + phoneticActual);"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,27,mport org.junit.Test;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,28,mport org.junit.runner.RunWith;
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,37,RunWith(Parameterized.class)
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,33,//@RunWith(Parameterized.class)
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,44,"ew Rule(""e"", """", """", ""o"", new HashSet<String>(Arrays.asList(""english"", ""french"")), Rule.ALL),"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,40,"new Rule(""e"", """", """", new Rule.Phoneme(""o"", Languages.LanguageSet.from("
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,41,"new HashSet<String>(Arrays.asList(""english"", ""french""))))),"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,47,"ew Rule(""e"", """", """", ""o"", new HashSet<String>(Arrays.asList(""english"", ""french"")), Rule.ALL),"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,44,"new Rule(""e"", """", """", new Rule.Phoneme(""o"", Languages.LanguageSet.from("
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,45,"new HashSet<String>(Arrays.asList(""english"", ""french""))))),"
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,63,Test
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,64,ublic void testRuleLanguageMatches() {
False,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,65,"ssertEquals(this.caseName, this.expected, this.rule.languageMatches(this.langs));"
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,61,//    @Test
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,62,//    public void testRuleLanguageMatches() {
True,src/test/org/apache/commons/codec/language/bm/RuleTest.java,src/test/org/apache/commons/codec/language/bm/RuleTest.java,63,"//        assertEquals(this.caseName, this.expected, this.rule.languageMatches(this.langs));"

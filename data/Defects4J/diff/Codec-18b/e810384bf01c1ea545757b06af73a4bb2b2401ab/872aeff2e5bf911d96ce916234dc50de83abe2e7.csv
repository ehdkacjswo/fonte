is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,58, <p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,59, N.B. The next major release may break compatibility and make this field private.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,60, </p>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,87, Byte used to pad output.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,89,rivate static final byte PAD = '=';
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,126,"** Mask used to extract 8 bits, used in decoding Base32 bytes */"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,127,rivate static final int MASK_8BITS = 0xff;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,138,rivate final byte[] decodeTable;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,140, Line length for encoding. Not used when decoding. A value of zero or less implies no chunking of the Base32
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,141, encoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,127,* Decode table to use.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,143,rivate final int lineLength;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,129,private final byte[] decodeTable;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,152, <code>decodeSize = 3 + lineSeparator.length;</code>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,153, TODO 3?
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,138,* <code>decodeSize = {@link BYTES_PER_ENCODED_BLOCK} - 1 + lineSeparator.length;</code>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,159, <code>encodeSize = 4 + lineSeparator.length;</code>
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,160, TODO 4? is that BYTES_PER_ENCODED_BLOCK? - probably yes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,144,* <code>encodeSize = {@link BYTES_PER_ENCODED_BLOCK} + lineSeparator.length;</code>
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,222,*             Or the lineLength > 0 and lineSeparator is null.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,240,f (lineSeparator == null) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,241,ineLength = 0;  // disable chunk-separating
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,242,ineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,244,his.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,245,his.lineSeparator = new byte[lineSeparator.length];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,246,"ystem.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,247,f (lineLength > 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,248,his.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,249, else {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,250,his.encodeSize = BYTES_PER_ENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,252,his.decodeSize = this.encodeSize - 1;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,253,f (containsBase32Byte(lineSeparator)) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,254,tring sep = StringUtils.newStringUtf8(lineSeparator);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,255,"hrow new IllegalArgumentException(""lineSeperator must not contain Base32 characters: ["" + sep + ""]"");"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,225,"super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,226,"lineLength,"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,227,lineSeparator == null ? 0 : lineSeparator.length);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,267, Returns whether or not the <code>octet</code> is in the Base32 alphabet.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,269, @param octet
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,270,            The value to test
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,271," @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,273,ublic boolean isBase32(byte octet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,274,eturn octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,278, Returns whether or not the <code>octet</code> is in the Base32 Hex alphabet.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,280, @param octet
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,281,            The value to test
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,282," @return <code>true</code> if the value is defined in the the Base32 Hex alphabet (or pad), <code>false</code> otherwise."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,284,ublic boolean isBase32Hex(byte octet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,285,eturn octet == PAD || (octet >= 0 && octet < BASE32HEX_DECODE_TABLE.length && BASE32HEX_DECODE_TABLE[octet] != -1);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,289, Tests a given String to see if it contains only valid characters within the Base32 alphabet. Currently the
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,290, method treats whitespace as valid.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,292, @param base32
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,293,            String to test
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,294, @return <code>true</code> if all characters in the String are valid characters in the Base32 alphabet or if
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,295,"         the String is empty; <code>false</code>, otherwise"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,297,ublic boolean isBase32(String base32) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,298,eturn isBase32(StringUtils.getBytesUtf8(base32));
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,302, Tests a given byte array to see if it contains only valid characters within the Base32 alphabet. Currently the
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,303, method treats whitespace as valid.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,305, @param arrayOctet
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,306,            byte array to test
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,307, @return <code>true</code> if all bytes are valid characters in the Base32 alphabet or if the byte array is empty;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,308,"         <code>false</code>, otherwise"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,310,ublic boolean isBase32(byte[] arrayOctet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,311,or (int i = 0; i < arrayOctet.length; i++) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,312,f (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,313,eturn false;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,235,if (lineLength > 0) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,236,if (lineSeparator == null) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,237,"throw new IllegalArgumentException(""lineLength ""+lineLength+"" > 0, but lineSeparator is null"");"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,316,eturn true;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,320, Tests a given byte array to see if it contains any characters within the Base32 alphabet.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,321, Does not allow white-space.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,323, @param arrayOctet
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,324,            byte array to test
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,325, @return <code>true</code> if any byte is a valid character in the Base32 alphabet; <code>false</code> otherwise
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,327,rivate boolean containsBase32Byte(byte[] arrayOctet) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,328,or (int i = 0; i < arrayOctet.length; i++) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,329,f (isBase32(arrayOctet[i])) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,330,eturn true;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,239,// Must be done after initialising the tables
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,240,if (containsAlphabetOrPad(lineSeparator)) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,241,String sep = StringUtils.newStringUtf8(lineSeparator);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,242,"throw new IllegalArgumentException(""lineSeperator must not contain Base32 characters: ["" + sep + ""]"");"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,244,this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,245,this.lineSeparator = new byte[lineSeparator.length];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,246,"System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,247,} else {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,248,this.encodeSize = BYTES_PER_ENCODED_BLOCK;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,249,this.lineSeparator = null;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,333,eturn false;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,337, Encodes binary data using the Base32 algorithm but does not chunk the output.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,339, @param binaryData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,340,            binary data to encode
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,341, @return byte[] containing Base32 characters in their UTF-8 representation.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,343,ublic static byte[] encodeBase32(byte[] binaryData) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,344,"eturn encodeBase32(binaryData, false);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,348, Encodes binary data using the Base32 algorithm but does not chunk the output.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,350, @param binaryData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,351,            binary data to encode
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,352, @return String containing Base32 characters.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,354,ublic static String encodeBase32String(byte[] binaryData) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,355,"eturn StringUtils.newStringUtf8(encodeBase32(binaryData, false));"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,359, Encodes binary data using the Base32 algorithm but does not chunk the output.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,361, @param binaryData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,362,            binary data to encode
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,363, @return String containing Base32Hex characters.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,365,ublic static String encodeBase32HexString(byte[] binaryData) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,366,"eturn StringUtils.newStringUtf8(encodeBase32Hex(binaryData, false));"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,370, Encodes binary data using the Base32 algorithm and chunks the encoded output into 76 character blocks
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,372, @param binaryData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,373,            binary data to encode
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,374, @return Base32 characters chunked in 76 character blocks
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,376,ublic static byte[] encodeBase32Chunked(byte[] binaryData) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,377,"eturn encodeBase32(binaryData, true);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,381," Encodes binary data using the Base32 algorithm, optionally chunking the output into 76 character blocks."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,383, @param binaryData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,384,            Array containing binary data to encode.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,385, @param isChunked
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,386,            if <code>true</code> this encoder will chunk the Base32 output into 76 character blocks
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,387, @return Base32-encoded data.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,388, @throws IllegalArgumentException
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,389,             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,391,"ublic static byte[] encodeBase32(byte[] binaryData, boolean isChunked) {"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,392,"eturn encodeBase32(binaryData, isChunked, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,396," Encodes binary data using the Base32 Hex algorithm, optionally chunking the output into 76 character blocks."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,398, @param binaryData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,399,            Array containing binary data to encode.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,400, @param isChunked
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,401,            if <code>true</code> this encoder will chunk the Base32 output into 76 character blocks
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,402, @return Base32Hex-encoded data.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,403, @throws IllegalArgumentException
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,404,             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,406,"ublic static byte[] encodeBase32Hex(byte[] binaryData, boolean isChunked) {"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,407,"eturn encodeBase32Hex(binaryData, isChunked, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,411," Encodes binary data using the Base32 algorithm, optionally chunking the output into 76 character blocks."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,413, @param binaryData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,414,            Array containing binary data to encode.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,415, @param isChunked
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,416,            if <code>true</code> this encoder will chunk the Base32 output into 76 character blocks
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,417, @param maxResultSize
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,418,            The maximum result size to accept.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,419, @return Base32-encoded data.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,420, @throws IllegalArgumentException
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,421,             Thrown when the input array needs an output array bigger than maxResultSize
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,423,"ublic static byte[] encodeBase32(byte[] binaryData, boolean isChunked, int maxResultSize) {"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,424,f (binaryData == null || binaryData.length == 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,425,eturn binaryData;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,428,"ong len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,429,f (len > maxResultSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,430,"hrow new IllegalArgumentException(""Input array too big, the output array would be bigger ("" +"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,431,en +
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,432,") than the specified maxium size of "" +"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,433,axResultSize);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,436,"ase32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR) : new Base32();"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,437,eturn b64.encode(binaryData);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,441," Encodes binary data using the Base32Hex algorithm, optionally chunking the output into 76 character blocks."
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,443, @param binaryData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,444,            Array containing binary data to encode.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,445, @param isChunked
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,446,            if <code>true</code> this encoder will chunk the Base32 output into 76 character blocks
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,447, @param maxResultSize
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,448,            The maximum result size to accept.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,449, @return Base32Hex-encoded data.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,450, @throws IllegalArgumentException
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,451,             Thrown when the input array needs an output array bigger than maxResultSize
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,453,"ublic static byte[] encodeBase32Hex(byte[] binaryData, boolean isChunked, int maxResultSize) {"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,454,f (binaryData == null || binaryData.length == 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,455,eturn binaryData;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,458,"ong len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,459,f (len > maxResultSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,460,"hrow new IllegalArgumentException(""Input array too big, the output array would be bigger ("" +"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,461,en +
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,462,") than the specified maxium size of "" +"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,463,axResultSize);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,466,"ase32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,467,eturn b64.encode(binaryData);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,471, Decodes a Base32 String into octets
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,473, @param base32String
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,474,            String containing Base32 data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,475, @return Array containing decoded data.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,477,ublic static byte[] decodeBase32(String base32String) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,478,eturn new Base32().decode(base32String);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,482, Decodes Base32 data into octets
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,484, @param base32Data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,485,            Byte array containing Base32 data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,486, @return Array containing decoded data.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,488,ublic static byte[] decodeBase32(byte[] base32Data) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,489,eturn new Base32().decode(base32Data);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,493, Decodes a Base32 Hex String into octets
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,495, @param base32HexString
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,496,            String containing Base32Hex data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,497, @return Array containing decoded data.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,499,ublic static byte[] decodeBase32Hex(String base32HexString) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,500,eturn new Base32(true).decode(base32HexString);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,251,this.decodeSize = this.encodeSize - 1;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,504, Decodes Base32 Hex data into octets
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,255,* Returns whether or not the <code>octet</code> is in the Base32 alphabet.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,506, @param base32HexData
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,507,            Byte array containing Base32Hex data
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,508, @return Array containing decoded data.
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,257,* @param octet
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,258,*            The value to test
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,259,* @return <code>true</code> if the value is defined in the the Base32 alphabet <code>false</code> otherwise.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,510,ublic static byte[] decodeBase32Hex(byte[] base32HexData) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,511,eturn new Base32(true).decode(base32HexData);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,261,public boolean isInAlphabet(byte octet) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,262,return (octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,536,f (buffer == null || buffer.length - pos < encodeSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,537,esizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,287,if (0 == modulus) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,288,return; // no leftovers to process
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,290,ensureBufferSize(encodeSize);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,541,uffer[pos++] = encodeTable[(int)(x >> 3) & MASK_5BITS]; // 8-1*5 = 3
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,542,uffer[pos++] = encodeTable[(int)(x << 2) & MASK_5BITS]; // 5-3=2
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,293,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS]; // 8-1*5 = 3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,294,buffer[pos++] = encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS]; // 5-3=2
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,552,uffer[pos++] = encodeTable[(int)(x >> 11) & MASK_5BITS]; // 16-1*5 = 11
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,553,uffer[pos++] = encodeTable[(int)(x >>  6) & MASK_5BITS]; // 16-2*5 = 6
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,554,uffer[pos++] = encodeTable[(int)(x >>  1) & MASK_5BITS]; // 16-3*5 = 1
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,555,uffer[pos++] = encodeTable[(int)(x <<  4) & MASK_5BITS]; // 5-1 = 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,304,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS]; // 16-1*5 = 11
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,305,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  6) & MASK_5BITS]; // 16-2*5 = 6
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,306,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  1) & MASK_5BITS]; // 16-3*5 = 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,307,buffer[pos++] = encodeTable[(int)(bitWorkArea <<  4) & MASK_5BITS]; // 5-1 = 4
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,562,uffer[pos++] = encodeTable[(int)(x >> 19) & MASK_5BITS]; // 24-1*5 = 19
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,563,uffer[pos++] = encodeTable[(int)(x >> 14) & MASK_5BITS]; // 24-2*5 = 14
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,564,uffer[pos++] = encodeTable[(int)(x >>  9) & MASK_5BITS]; // 24-3*5 = 9
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,565,uffer[pos++] = encodeTable[(int)(x >>  4) & MASK_5BITS]; // 24-4*5 = 4
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,566,uffer[pos++] = encodeTable[(int)(x <<  1) & MASK_5BITS]; // 5-4 = 1
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,314,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS]; // 24-1*5 = 19
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,315,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS]; // 24-2*5 = 14
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,316,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  9) & MASK_5BITS]; // 24-3*5 = 9
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,317,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  4) & MASK_5BITS]; // 24-4*5 = 4
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,318,buffer[pos++] = encodeTable[(int)(bitWorkArea <<  1) & MASK_5BITS]; // 5-4 = 1
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,572,uffer[pos++] = encodeTable[(int)(x >> 27) & MASK_5BITS]; // 32-1*5 = 27
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,573,uffer[pos++] = encodeTable[(int)(x >> 22) & MASK_5BITS]; // 32-2*5 = 22
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,574,uffer[pos++] = encodeTable[(int)(x >> 17) & MASK_5BITS]; // 32-3*5 = 17
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,575,uffer[pos++] = encodeTable[(int)(x >> 12) & MASK_5BITS]; // 32-4*5 = 12
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,576,uffer[pos++] = encodeTable[(int)(x >>  7) & MASK_5BITS]; // 32-5*5 =  7
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,577,uffer[pos++] = encodeTable[(int)(x >>  2) & MASK_5BITS]; // 32-6*5 =  2
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,578,uffer[pos++] = encodeTable[(int)(x <<  3) & MASK_5BITS]; // 5-2 = 3
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,324,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS]; // 32-1*5 = 27
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,325,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS]; // 32-2*5 = 22
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,326,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS]; // 32-3*5 = 17
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,327,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS]; // 32-4*5 = 12
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,328,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  7) & MASK_5BITS]; // 32-5*5 =  7
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,329,buffer[pos++] = encodeTable[(int)(bitWorkArea >>  2) & MASK_5BITS]; // 32-6*5 =  2
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,330,buffer[pos++] = encodeTable[(int)(bitWorkArea <<  3) & MASK_5BITS]; // 5-2 = 3
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,582,"/ Don't want to append the CRLF two times in a row, so make sure previous"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,583,/ character is not from CRLF!
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,584,yte b = lineSeparator[lineSeparator.length - 1];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,585,f (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,334,if (lineLength > 0){ // add chunk separator if required
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,591,f (buffer == null || buffer.length - pos < encodeSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,592,esizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,340,ensureBufferSize(encodeSize);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,599, = (x << 8) + b; // ??
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,346,bitWorkArea = (bitWorkArea << 8) + b; // ??
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,601,uffer[pos++] = encodeTable[(int)(x >> 35) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,602,uffer[pos++] = encodeTable[(int)(x >> 30) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,603,uffer[pos++] = encodeTable[(int)(x >> 25) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,604,uffer[pos++] = encodeTable[(int)(x >> 20) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,605,uffer[pos++] = encodeTable[(int)(x >> 15) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,606,uffer[pos++] = encodeTable[(int)(x >> 10) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,607,uffer[pos++] = encodeTable[(int)(x >> 5) & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,608,uffer[pos++] = encodeTable[(int)x & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,348,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,349,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,350,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,351,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,352,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,353,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,354,buffer[pos++] = encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,355,buffer[pos++] = encodeTable[(int)bitWorkArea & MASK_5BITS];
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,649,f (buffer == null || buffer.length - pos < decodeSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,650,esizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,402,ensureBufferSize(decodeSize);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,662, = (x << BITS_PER_ENCODED_CHAR) + result; // collect decoded bytes
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,407,bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_CHAR) + result; // collect decoded bytes
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,664,uffer[pos++] = (byte) ((x >> 32) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,665,uffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,666,uffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,667,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,668,uffer[pos++] = (byte) (x & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,409,buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,410,buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,411,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,412,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,413,buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,678,f (eof && modulus != 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,679,f (buffer == null || buffer.length - pos < decodeSize) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,680,esizeBuffer();
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,423,"if (eof && modulus >= 2) { // if modulus < 2, nothing to do"
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,424,ensureBufferSize(decodeSize);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,686,uffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,429,buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,689,uffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,432,buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,692, = x >> 4; // drop 4 bits
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,693,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,694,uffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,435,bitWorkArea = bitWorkArea >> 4; // drop 4 bits
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,436,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,437,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,697, = x >> 1;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,698,uffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,699,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,700,uffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,440,bitWorkArea = bitWorkArea >> 1;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,441,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,442,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,443,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,703, = x >> 6;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,704,uffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,705,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,706,uffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,446,bitWorkArea = bitWorkArea >> 6;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,447,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,448,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,449,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,709, = x >> 3;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,710,uffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,711,uffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,712,uffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,713,uffer[pos++] = (byte) ((x) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,452,bitWorkArea = bitWorkArea >> 3;
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,453,buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,454,buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,455,buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
True,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,456,buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,720, Pre-calculates the amount of space needed to Base32-encode the supplied array.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,722, @param pArray byte[] array which will later be encoded
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,723, @param chunkSize line-length of the output (<= 0 means no chunking) between each
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,724,        chunkSeparator (e.g. CRLF).
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,725, @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,727, @return amount of space needed to encoded the supplied array.  Returns
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,728,         a long since a max-len array will require Integer.MAX_VALUE + 33%.
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,730,"rivate static long getEncodeLength(byte[] pArray, int chunkSize,"
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,731,yte[] chunkSeparator) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,732,/ Base32 always encodes to multiples of 8 (BYTES_PER_ENCODED_CHUNK).
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,733,hunkSize = (chunkSize / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,735,ong len = (pArray.length * BYTES_PER_ENCODED_BLOCK) / BYTES_PER_UNENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,736,ong mod = len % BYTES_PER_ENCODED_BLOCK;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,737,f (mod != 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,738,en += BYTES_PER_ENCODED_BLOCK - mod;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,740,f (chunkSize > 0) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,741,oolean lenChunksPerfectly = len % chunkSize == 0;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,742,en += (len / chunkSize) * chunkSeparator.length;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,743,f (!lenChunksPerfectly) {
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,744,en += chunkSeparator.length;
False,src/java/org/apache/commons/codec/binary/Base32.java,src/java/org/apache/commons/codec/binary/Base32.java,747,eturn len;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,55,* Defines the default buffer size - currently {@value}
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,56,* - must be large enough for at least one encoded block+separator
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,60,"/** Mask used to extract 8 bits, used in decoding bytes */"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,61,protected static final int MASK_8BITS = 0xff;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,64,* Byte used to pad output.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,66,protected final byte PAD = '='; // instance variable just in case it needs to vary later
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,68,"/** Number of bytes in each full block of unencoded data, e.g. 4 for Base64 and 5 for Base32 */"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,69,private final int unencodedBlockSize;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,71,"/** Number of bytes in each full block of encoded data, e.g. 3 for Base64 and 8 for Base32 */"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,72,private final int encodedBlockSize;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,75,* Chunksize for encoding. Not used when decoding.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,76,* A value of zero or less implies no chunking of the encoded data.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,77,* Rounded down to nearest multiple of encodedBlockSize.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,79,protected final int lineLength;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,82,* Size of chunk separator. Not used unless {@link #lineLength} > 0.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,84,private final int chunkSeparatorLength;
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,77, Place holder for the bytes we're dealing with for our based logic. Bitwise operations store and extract the
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,78, encoding or decoding from this variable.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,108,* Place holder for the bytes we're dealing with for our based logic.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,109,* Bitwise operations store and extract the encoding or decoding from this variable.
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,80,rotected long x;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,111,protected long bitWorkArea;
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,94,rotected BaseNCodec(){
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,126,* Note <code>lineLength</code> is rounded down to the nearest multiple of {@link encodedBlockSize}
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,127,* @param unencodedBlockSize the size of an unencoded block (e.g. Base64 = 3)
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,128,* @param encodedBlockSize the size of an encoded block (e.g. Base64 = 4)
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,129,"* @param lineLength if &gt; 0, use chunking with a length <code>lineLength</code>"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,130,"* @param chunkSeparatorLength the chunk separator length, if relevant"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,132,"protected BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength){"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,133,this.unencodedBlockSize = unencodedBlockSize;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,134,this.encodedBlockSize = encodedBlockSize;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,135,this.lineLength = (lineLength > 0  && chunkSeparatorLength > 0) ? (lineLength / encodedBlockSize) * encodedBlockSize : 0;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,136,this.chunkSeparatorLength = chunkSeparatorLength;
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,115,** Doubles our buffer. */
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,116,rotected void resizeBuffer() {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,158,* Get the default buffer size. Can be overridden.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,160,* @return {@link DEFAULT_BUFFER_RESIZE_SIZE}
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,162,protected int getDefaultBufferSize() {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,163,return DEFAULT_BUFFER_SIZE;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,166,/** Increases our buffer by the {@link DEFAULT_BUFFER_RESIZE_FACTOR}. */
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,167,private void resizeBuffer() {
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,118,uffer = new byte[DEFAULT_BUFFER_SIZE];
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,169,buffer = new byte[getDefaultBufferSize()];
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,129," Extracts buffered data into the provided byte[] array, starting at position bPos, up to a maximum of bAvail"
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,130, bytes. Returns how many bytes were actually extracted.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,180,* Ensure that the buffer has room for <code>size</code> bytes
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,182,* @param size minimum spare space required
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,184,protected void ensureBufferSize(int size){
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,185,if ((buffer == null) || (buffer.length < pos + size)){
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,186,resizeBuffer();
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,191,"* Extracts buffered data into the provided byte[] array, starting at position bPos,"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,192,* up to a maximum of bAvail bytes. Returns how many bytes were actually extracted.
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,146,uffer = null;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,208,"buffer = null; // so hasData() will return false, and this method can return -1"
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,173, Resets this Base32 object to its initial newly constructed state.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,235,* Resets this object to its initial newly constructed state.
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,184, Encodes an Object using the Base32 algorithm. This method is provided in order to satisfy the requirements of the
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,247,* Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,189, @return An object (of type byte[]) containing the Base32 encoded data which corresponds to the byte[] supplied.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,252,* @return An object (of type byte[]) containing the Base-N encoded data which corresponds to the byte[] supplied.
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,195,"hrow new EncoderException(""Parameter supplied to Base32 encode is not a byte[]"");"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,258,"throw new EncoderException(""Parameter supplied to Base-N encode is not a byte[]"");"
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,200," Encodes a byte[] containing binary data, into a String containing characters in the Base32 alphabet."
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,264,"* Encodes a byte[] containing binary data, into a String containing characters in the Base-N alphabet."
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,204, @return A String containing only Base32 character data
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,268,* @return A String containing only Base-N character data
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,210, Decodes an Object using the Base32 algorithm. This method is provided in order to satisfy the requirements of the
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,275,* Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,225,"hrow new DecoderException(""Parameter supplied to Base32 decode is not a byte[] or a String"");"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,290,"throw new DecoderException(""Parameter supplied to Base-N decode is not a byte[] or a String"");"
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,229, Decodes a String containing characters in the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,295,* Decodes a String containing characters in the Base-N alphabet.
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,232,            A String containing Base32 character data
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,298,*            A String containing Base-N character data
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,239, Decodes a byte[] containing characters in the Base32 alphabet.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,306,* Decodes a byte[] containing characters in the Base-N alphabet.
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,242,            A byte array containing Base32 character data
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,309,*            A byte array containing Base-N character data
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,257," Encodes a byte[] containing binary data, into a byte[] containing characters in the Base32 alphabet."
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,325,"* Encodes a byte[] containing binary data, into a byte[] containing characters in the alphabet."
False,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,261, @return A byte array containing only Base32 character data
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,329,* @return A byte array containing only the basen alphabetic character data
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,344,"* Encodes a byte[] containing binary data, into a String containing characters in the appropriate alphabet."
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,345,* Uses UTF8 encoding.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,347,* @param pArray a byte array containing binary data
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,348,* @return String containing only character data in the appropriate alphabet.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,350,public String encodeAsString(byte[] pArray){
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,351,return StringUtils.newStringUtf8(encode(pArray));
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,359,* Returns whether or not the <code>octet</code> is in the current alphabet.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,360,* Does not allow whitespace or pad.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,362,* @param octet The value to test
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,364,"* @return <code>true</code> if the value is defined in the current alphabet, <code>false</code> otherwise."
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,366,protected abstract boolean isInAlphabet(byte b);
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,369,* Tests a given byte array to see if it contains only valid characters within the alphabet.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,370,* The method optionally treats whitespace and pad as valid.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,372,* @param arrayOctet byte array to test
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,373,"* @param allowWSPad if <code>true</code>, then whitespace and PAD are also allowed"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,375,* @return <code>true</code> if all bytes are valid characters in the alphabet or if the byte array is empty;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,376,"*         <code>false</code>, otherwise"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,378,"public boolean isInAlphabet(byte[] arrayOctet, boolean allowWSPad) {"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,379,for (int i = 0; i < arrayOctet.length; i++) {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,380,if (!isInAlphabet(arrayOctet[i]) &&
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,381,(!allowWSPad || (arrayOctet[i] != PAD) && !isWhiteSpace(arrayOctet[i]))) {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,382,return false;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,385,return true;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,389,* Tests a given String to see if it contains only valid characters within the alphabet.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,390,* The method treats whitespace and PAD as valid.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,392,* @param basen String to test
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,393,* @return <code>true</code> if all characters in the String are valid characters in the alphabet or if
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,394,"*         the String is empty; <code>false</code>, otherwise"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,395,"* @see #isInAlphabet(byte[], boolean)"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,397,public boolean isInAlphabet(String basen) {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,398,"return isInAlphabet(StringUtils.getBytesUtf8(basen), true);"
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,402,* Tests a given byte array to see if it contains any characters within the alphabet or PAD.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,404,* Intended for use in checking line-ending arrays
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,406,* @param arrayOctet
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,407,*            byte array to test
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,408,* @return <code>true</code> if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,410,protected boolean containsAlphabetOrPad(byte[] arrayOctet) {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,411,if (arrayOctet == null) {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,412,return false;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,414,for (int i = 0; i < arrayOctet.length; i++) {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,415,if (PAD == arrayOctet[i] || isInAlphabet(arrayOctet[i])) {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,416,return true;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,419,return false;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,423,* Calculates the amount of space needed to encode the supplied array.
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,425,* @param pArray byte[] array which will later be encoded
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,427,* @return amount of space needed to encoded the supplied array.  Returns
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,428,*         a long since a max-len array will require > Integer.MAX_VALUE
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,430,public long getEncodedLength(byte[] pArray) {
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,431,// Calculate non-chunked size - rounded up to allow for padding
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,432,long len = ((pArray.length + unencodedBlockSize-1)  / unencodedBlockSize) * encodedBlockSize;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,433,if (lineLength > 0) { // We're using chunking
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,434,// Round up to nearest multiple
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,435,len += ((len + lineLength-1) / lineLength) * chunkSeparatorLength;
True,src/java/org/apache/commons/codec/binary/BaseNCodec.java,src/java/org/apache/commons/codec/binary/BaseNCodec.java,437,return len;
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,21,import java.util.Arrays;
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,49,Base32 codec = new Base32();
False,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,48,"ssertEquals(BASE32_TEST_CASES[i][1], Base32.encodeBase32String(BASE32_TEST_CASES[i][0].getBytes(""UTF-8"")));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,51,"assertEquals(BASE32_TEST_CASES[i][1], codec.encodeAsString(BASE32_TEST_CASES[i][0].getBytes(""UTF-8"")));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,56,Base32 codec = new Base32(true);
False,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,54,"ssertEquals(BASE32HEX_TEST_CASES[i][1], Base32.encodeBase32HexString(BASE32HEX_TEST_CASES[i][0].getBytes(""UTF-8"")));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,58,"assertEquals(BASE32HEX_TEST_CASES[i][1], codec.encodeAsString(BASE32HEX_TEST_CASES[i][0].getBytes(""UTF-8"")));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,62,public void testSingleCharEncoding() {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,63,for (int i = 0; i < 20; i++) {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,64,Base32 codec = new Base32();
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,65,byte unencoded[] = new byte[i];
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,66,byte allInOne[] = codec.encode(unencoded);
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,67,codec = new Base32();
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,68,for (int j=0; j< unencoded.length; j++) {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,69,"codec.encode(unencoded, j, 1);"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,71,"codec.encode(unencoded, 0, -1);"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,72,byte singly[] = new byte[allInOne.length];
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,73,"int bytes = codec.readResults(singly, 0, 100);"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,74,"if (!Arrays.equals(allInOne, singly)){"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,75,fail();
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,80,public void testRandomBytes() {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,81,for (int i = 0; i < 20; i++) {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,82,Base32 codec = new Base32();
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,83,"byte[][] b = Base32TestData.randomData(codec, i);"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,84,"assertEquals(""""+i+"" ""+codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,85,"//assertEquals(b[0],codec.decode(b[1]));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,88,public void testRandomBytesChunked() {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,89,for (int i = 0; i < 20; i++) {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,90,Base32 codec = new Base32(10);
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,91,"byte[][] b = Base32TestData.randomData(codec, i);"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,92,"assertEquals(""""+i+"" ""+codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,93,"//assertEquals(b[0],codec.decode(b[1]));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,96,public void testRandomBytesHex() {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,97,for (int i = 0; i < 20; i++) {
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,98,Base32 codec = new Base32(true);
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,99,"byte[][] b = Base32TestData.randomData(codec, i);"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,100,"assertEquals(""""+i+"" ""+codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));"
True,src/test/org/apache/commons/codec/binary/Base32Test.java,src/test/org/apache/commons/codec/binary/Base32Test.java,101,"//assertEquals(b[0],codec.decode(b[1]));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,9,*   http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,19,package org.apache.commons.codec.binary;
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,23,public class BaseNCodecTest extends TestCase {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,25,BaseNCodec codec;
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,27,public void setUp(){
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,28,"codec = new BaseNCodec(0, 0, 0, 0) {"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,29,protected boolean isInAlphabet(byte b) {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,30,return b=='O' || b == 'K'; // allow OK
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,33,"void encode(byte[] pArray, int i, int length) {"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,36,"void decode(byte[] pArray, int i, int length) {"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,41,public void testBaseNCodec() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,42,assertNotNull(codec);
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,45,//    public void testHasData() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,46,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,49,//    public void testAvail() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,50,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,53,//    public void testEnsureBufferSize() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,54,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,57,//    public void testReadResults() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,58,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,61,public void testIsWhiteSpace() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,62,assertTrue(BaseNCodec.isWhiteSpace((byte) ' '));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,63,assertTrue(BaseNCodec.isWhiteSpace((byte) '\n'));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,64,assertTrue(BaseNCodec.isWhiteSpace((byte) '\r'));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,65,assertTrue(BaseNCodec.isWhiteSpace((byte) '\t'));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,68,//    public void testEncodeObject() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,69,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,72,//    public void testEncodeToString() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,73,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,76,//    public void testDecodeObject() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,77,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,80,//    public void testDecodeString() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,81,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,84,//    public void testDecodeByteArray() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,85,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,88,//    public void testEncodeByteArray() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,89,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,92,//    public void testEncodeAsString() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,93,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,96,//    public void testEncodeByteArrayIntInt() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,97,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,100,//    public void testDecodeByteArrayIntInt() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,101,"//        fail(""Not yet implemented"");"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,104,public void testIsInAlphabetByte() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,105,assertFalse(codec.isInAlphabet((byte) 0));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,106,assertFalse(codec.isInAlphabet((byte) 'a'));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,107,assertTrue(codec.isInAlphabet((byte) 'O'));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,108,assertTrue(codec.isInAlphabet((byte) 'K'));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,111,public void testIsInAlphabetByteArrayBoolean() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,112,"assertTrue(codec.isInAlphabet(new byte[]{}, false));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,113,"assertTrue(codec.isInAlphabet(new byte[]{'O'}, false));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,114,"assertFalse(codec.isInAlphabet(new byte[]{'O',' '}, false));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,115,"assertFalse(codec.isInAlphabet(new byte[]{' '}, false));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,116,"assertTrue(codec.isInAlphabet(new byte[]{}, true));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,117,"assertTrue(codec.isInAlphabet(new byte[]{'O'}, true));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,118,"assertTrue(codec.isInAlphabet(new byte[]{'O',' '}, true));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,119,"assertTrue(codec.isInAlphabet(new byte[]{' '}, true));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,122,public void testIsInAlphabetString() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,123,"assertTrue(codec.isInAlphabet(""OK""));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,124,"assertTrue(codec.isInAlphabet(""O=K= \t\n\r""));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,127,public void testContainsAlphabetOrPad() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,128,"assertTrue(codec.containsAlphabetOrPad(""OK"".getBytes()));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,129,"assertTrue(codec.containsAlphabetOrPad(""OK "".getBytes()));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,130,"assertFalse(codec.containsAlphabetOrPad(""ok "".getBytes()));"
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,131,assertTrue(codec.containsAlphabetOrPad(new byte[]{codec.PAD}));
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,134,//    public void testGetEncodedLength() {
True,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,src/test/org/apache/commons/codec/binary/BaseNCodecTest.java,135,"//        fail(""Not yet implemented"");"

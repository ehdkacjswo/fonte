is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,17,package org.apache.commons.codec.digest;
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,19,import java.util.Random;
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,22,* Base64 like method to convert binary bytes into ASCII chars.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,24,* TODO: Can Base64 be reused?
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,26,* @version $Id $
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,27,* @since 1.7
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,29,class B64 {
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,32,* Table with characters for Base64 transformation.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,34,"static final String B64T = ""./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";"
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,37,* Base64 like conversion of bytes to ASCII chars.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,39,* @param b2
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,40,*            A byte from the result.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,41,* @param b1
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,42,*            A byte from the result.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,43,* @param b0
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,44,*            A byte from the result.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,45,* @param outLen
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,46,*            The number of expected output chars.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,47,* @param buffer
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,48,*            Where the output chars is appended to.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,50,"static void b64from24bit(byte b2, byte b1, byte b0, int outLen, StringBuilder buffer) {"
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,51,// The bit masking is necessary because the JVM byte type is signed!
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,52,int w = ((b2 << 16) & 0x00ffffff) | ((b1 << 8) & 0x00ffff) | (b0 & 0xff);
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,53,"// It's effectively a ""for"" loop but kept to resemble the original C code."
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,54,int n = outLen;
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,55,while (n-- > 0) {
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,56,buffer.append(B64T.charAt(w & 0x3f));
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,57,w >>= 6;
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,62,* Generates a string of random chars from the B64T set.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,64,* @param num
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,65,*            Number of chars to generate.
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,67,static String getRandomSalt(int num) {
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,68,StringBuilder saltString = new StringBuilder();
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,69,for (int i = 1; i <= num; i++) {
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,70,saltString.append(B64T.charAt(new Random().nextInt(B64T.length())));
True,src/main/java/org/apache/commons/codec/digest/B64.java,src/main/java/org/apache/commons/codec/digest/B64.java,72,return saltString.toString();
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,17,package org.apache.commons.codec.digest;
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,19,import org.apache.commons.codec.Charsets;
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,22,* GNU libc crypt(3) compatible hash method.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,24,"* See {@link #crypt(String, String)} for further details."
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,26,* @version $Id $
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,27,* @since 1.7
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,29,public class Crypt {
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,32,* Encrypts a password in a crypt(3) compatible way.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,34,* A random salt and the default algorithm (currently SHA-512) are used. See
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,35,"* {@link #crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,37,* @param keyBytes
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,38,*            The plaintext password.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,39,* @return The hash value.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,41,public static String crypt(byte[] keyBytes) throws Exception {
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,42,"return crypt(keyBytes, null);"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,46,* Encrypts a password in a crypt(3) compatible way.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,48,* A random salt and the default algorithm (currently SHA-512) are used. See
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,49,"* {@link #crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,51,* @param keyBytes
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,52,*            The plaintext password.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,53,* @param salt
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,54,*            The salt value
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,55,* @return The hash value.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,57,"public static String crypt(byte[] keyBytes, String salt) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,58,if (salt == null) {
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,59,return Sha2Crypt.sha512Crypt(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,60,} else if (salt.startsWith(Sha2Crypt.SHA512_PREFIX)) {
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,61,"return Sha2Crypt.sha512Crypt(keyBytes, salt);"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,62,} else if (salt.startsWith(Sha2Crypt.SHA256_PREFIX)) {
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,63,"return Sha2Crypt.sha256Crypt(keyBytes, salt);"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,64,} else if (salt.startsWith(Md5Crypt.MD5_PREFIX)) {
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,65,"return Md5Crypt.md5Crypt(keyBytes, salt);"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,66,} else {
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,67,"return UnixCrypt.crypt(keyBytes, salt);"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,72,* Calculates the digest using the strongest crypt(3) algorithm.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,74,* A random salt and the default algorithm (currently SHA-512) are used.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,76,"* @see #crypt(String, String)"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,77,* @param key
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,78,*            The plaintext password.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,79,* @return The hash value.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,81,public static String crypt(String key) throws Exception {
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,82,"return crypt(key, null);"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,86,* Encrypts a password in a crypt(3) compatible way.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,88,* <p>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,89,* The exact algorithm depends on the format of the salt string:
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,90,* <ul>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,91,* <li>SHA-512 salts start with $6$ and are up to 16 chars long.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,92,* <li>SHA-256 salts start with $5$ and are up to 16 chars long
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,93,"* <li>MD5 salts start with ""$1$"" and are up to 8 chars long"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,94,"* <li>DES, the traditional UnixCrypt algorithm is used else with only 2 chars"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,95,* <li>Only the first 8 chars of the passwords are used in the DES algorithm!
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,96,* </ul>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,97,"* The magic strings ""$apr1$"" and ""$2a$"" are not recognised by this method as its output should be identical with"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,98,* that of the libc implementation.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,100,* <p>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,101,"* The rest of the salt string is drawn from the set [a-zA-Z0-9./] and is cut at the maximum length of if a ""$"" sign"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,102,* is encountered. It is therefore valid to enter a complete hash value as salt to e.g. verify a password with:
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,103,"* storedPwd.equals(crypt(enteredPwd, storedPwd))"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,105,* <p>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,106,"* The resulting string starts with the marker string ($6$), continues with the salt value and ends with a ""$"" sign"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,107,* followed by the actual hash value. For DES the string only contains the salt and actual hash. It's toal length is
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,108,* dependend on the algorithm used:
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,109,* <ul>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,110,* <li>SHA-512: 106 chars
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,111,* <li>SHA-256: 63 chars
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,112,* <li>MD5: 34 chars
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,113,* <li>DES: 13 chars
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,114,* </ul>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,116,* <p>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,117,* Example:
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,119,* <pre>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,120,"*      crypt(""secret"", ""$1$xxxx"") => ""$1$xxxx$aMkevjfEIpa35Bh3G4bAc."""
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,121,"*      crypt(""secret"", ""xx"") => ""xxWAum7tHdIUw"""
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,122,* </pre>
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,124,* This method comes in a variation that accepts a byte[] array to support input strings that are not encoded in
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,125,* UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,127,"* @see ""The man page of the libc crypt (3) function."""
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,128,* @param key
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,129,*            The plaintext password as entered by the used.
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,130,* @param salt
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,131,*            The salt value
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,132,* @return The hash value i.e. encrypted password including the salt string
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,134,"public static String crypt(String key, String salt) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/Crypt.java,src/main/java/org/apache/commons/codec/digest/Crypt.java,135,"return crypt(key.getBytes(Charsets.UTF_8), salt);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,17,package org.apache.commons.codec.digest;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,19,import java.security.MessageDigest;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,21,import java.util.regex.Matcher;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,22,import java.util.regex.Pattern;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,24,import org.apache.commons.codec.Charsets;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,27,"* The libc crypt() ""$1$"" and Apache ""$apr1$"" MD5-based hash algorithm."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,28,* <p>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,29,"* Based on the public domain (""beer-ware"") C implementation from Poul-Henning Kamp which was found at:"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,30,* </p>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,31,* <p>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,32,* http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libcrypt/crypt-md5.c?rev=1.1;content-type=text%2Fplain</br>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,33,"* Source: $FreeBSD: src/lib/libcrypt/crypt-md5.c,v 1.1 1999/01/21 13:50:09 brandon Exp $"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,34,* </p>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,35,* <p>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,36,* Conversion to Kotlin and from there to Java in 2012.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,37,* </p>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,38,* <p>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,39,"* The C style comments are from the original C code, the ones with ""//"" from me."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,40,* </p>
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,42,* @version $Id $
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,43,* @since 1.7
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,45,public class Md5Crypt {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,48,* The Identifier of the Apache variant.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,50,"static final String APR1_PREFIX = ""$apr1$"";"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,53,* The number of bytes of the final hash.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,55,private static final int BLOCKSIZE = 16;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,58,* The MessageDigest MD5_ALGORITHM.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,60,"private static final String MD5_ALGORITHM = ""MD5"";"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,63,* The Identifier of this crypt() variant.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,65,"static final String MD5_PREFIX = ""$1$"";"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,68,* The number of rounds of the big loop.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,70,private static final int ROUNDS = 1000;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,72,"/** See {@link #apr1Crypt(String, String)} for details. */"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,73,public static String apr1Crypt(byte[] keyBytes) throws Exception {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,74,"return apr1Crypt(keyBytes, APR1_PREFIX + B64.getRandomSalt(8));"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,77,"/** See {@link #apr1Crypt(String, String)} for details. */"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,78,"public static String apr1Crypt(byte[] keyBytes, String salt) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,79,// to make the md5Crypt regex happy
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,80,if (salt != null && !salt.startsWith(APR1_PREFIX)) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,81,salt = APR1_PREFIX + salt;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,83,"return Md5Crypt.md5Crypt(keyBytes, salt, APR1_PREFIX);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,86,"/** See {@link #apr1Crypt(String, String)} for details. */"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,87,public static String apr1Crypt(String keyBytes) throws Exception {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,88,return apr1Crypt(keyBytes.getBytes(Charsets.UTF_8));
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,92,"* Generates an Apache htpasswd compatible ""$apr1$"" MD5 based hash value. *"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,94,"* The algorithm is identical to the crypt(3) ""$1$"" one but produces different outputs due to the different salt"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,95,* prefix.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,97,* @param keyBytes
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,98,*            The plaintext string that should be hashed.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,99,* @param salt
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,100,*            Salt string including the prefix and optionally garbage at the end. Will be generated randomly if
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,101,*            null.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,103,"public static String apr1Crypt(String keyBytes, String salt) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,104,"return apr1Crypt(keyBytes.getBytes(Charsets.UTF_8), salt);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,108,"* Generates a libc6 crypt() compatible ""$1$"" hash value."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,110,"* See {@link Crypt#crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,112,public static String md5Crypt(final byte[] keyBytes) throws Exception {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,113,"return md5Crypt(keyBytes, MD5_PREFIX + B64.getRandomSalt(8));"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,117,"* Generates a libc crypt() compatible ""$1$"" MD5 based hash value."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,119,"* See {@link Crypt#crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,121,* @param keyBytes
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,122,*            The plaintext string that should be hashed.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,123,* @param salt
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,124,*            Salt string including the prefix and optionally garbage at the end. Will be generated randomly if
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,125,*            null.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,127,"public static String md5Crypt(byte[] keyBytes, String salt) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,128,"return md5Crypt(keyBytes, salt, MD5_PREFIX);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,132,"* Generates a libc6 crypt() ""$1$"" or Apache htpasswd ""$apr1$"" hash value."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,134,"* See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,136,"public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,137,int keyLen = keyBytes.length;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,139,// Extract the real salt from the given string which can be a complete hash string.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,140,String saltString;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,141,if (salt == null) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,142,saltString = B64.getRandomSalt(8);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,143,} else {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,144,"Pattern p = Pattern.compile(""^"" + prefix.replace(""$"", ""\\$"") + ""([\\.\\/a-zA-Z0-9]{1,8}).*"");"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,145,Matcher m = p.matcher(salt);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,146,if (m == null || !m.find()) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,147,"throw new IllegalArgumentException(""Invalid salt value: "" + salt);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,149,saltString = m.group(1);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,151,byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,153,MessageDigest ctx = MessageDigest.getInstance(MD5_ALGORITHM);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,156,"* The password first, since that is what is most unknown"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,158,ctx.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,161,* Then our magic string
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,163,ctx.update(prefix.getBytes(Charsets.UTF_8));
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,166,* Then the raw salt
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,168,ctx.update(saltBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,171,"* Then just as many characters of the MD5(pw,salt,pw)"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,173,MessageDigest ctx1 = MessageDigest.getInstance(MD5_ALGORITHM);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,174,ctx1.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,175,ctx1.update(saltBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,176,ctx1.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,177,byte[] finalb = ctx1.digest();
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,178,int ii = keyLen;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,179,while (ii > 0) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,180,"ctx.update(finalb, 0, ii > 16 ? 16 : ii);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,181,ii -= 16;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,185,* Don't leave anything around in vm they could use.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,187,"Arrays.fill(finalb, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,190,* Then something really weird...
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,192,ii = keyLen;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,193,int j = 0;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,194,while (ii > 0) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,195,if ((ii & 1) == 1) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,196,ctx.update(finalb[j]);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,197,} else {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,198,ctx.update(keyBytes[j]);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,200,ii >>= 1;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,204,* Now make the output string
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,206,"StringBuilder passwd = new StringBuilder(prefix + saltString + ""$"");"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,207,finalb = ctx.digest();
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,210,"* and now, just to make sure things don't run too fast On a 60 Mhz Pentium this takes 34 msec, so you would"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,211,* need 30 seconds to build a 1000 entry dictionary...
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,213,for (int i = 0; i < ROUNDS; i++) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,214,ctx1 = MessageDigest.getInstance(MD5_ALGORITHM);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,215,if ((i & 1) != 0) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,216,ctx1.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,217,} else {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,218,"ctx1.update(finalb, 0, BLOCKSIZE);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,221,if (i % 3 != 0) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,222,ctx1.update(saltBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,225,if (i % 7 != 0) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,226,ctx1.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,229,if ((i & 1) != 0) {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,230,"ctx1.update(finalb, 0, BLOCKSIZE);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,231,} else {
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,232,ctx1.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,234,finalb = ctx1.digest();
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,237,// The following was nearly identical to the Sha2Crypt code.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,238,"// Again, the buflen is not really needed."
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,239,// int buflen = MD5_PREFIX.length() - 1 + salt_string.length() + 1 + BLOCKSIZE + 1;
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,240,"B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,241,"B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,242,"B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,243,"B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,244,"B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,245,"B64.b64from24bit((byte) 0, (byte) 0, finalb[11], 2, passwd);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,248,* Don't leave anything around in vm they could use.
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,250,// Is there a better way to do this with the JVM?
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,251,ctx.reset();
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,252,ctx1.reset();
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,253,"Arrays.fill(keyBytes, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,254,"Arrays.fill(saltBytes, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,255,"Arrays.fill(finalb, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,src/main/java/org/apache/commons/codec/digest/Md5Crypt.java,257,return passwd.toString();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,17,package org.apache.commons.codec.digest;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,19,import java.security.MessageDigest;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,20,import java.util.Arrays;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,21,import java.util.regex.Matcher;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,22,import java.util.regex.Pattern;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,25,* SHA2-based Unix crypt implementation.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,27,* <p>
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,28,* Based on the C implementation released into the Public Domain by Ulrich Drepper &lt;drepper@redhat.com&gt;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,29,* http://www.akkadia.org/drepper/SHA-crypt.txt
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,30,* </p>
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,32,* <p>
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,33,* Conversion to Kotlin and from there to Java in 2012 by Christian Hammers &lt;ch@lathspell.de&gt; and likewise put
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,34,* into the Public Domain.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,35,* </p>
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,37,* @version $Id $
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,38,* @since 1.7
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,40,public class Sha2Crypt {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,43,* Default number of rounds if not explicitly specified.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,45,private static final int ROUNDS_DEFAULT = 5000;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,48,* Maximum number of rounds.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,50,private static final int ROUNDS_MAX = 999999999;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,53,* Minimum number of rounds.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,55,private static final int ROUNDS_MIN = 1000;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,58,* Prefix for optional rounds specification.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,60,"private static final String ROUNDS_PREFIX = ""rounds="";"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,63,* The MessageDigest algorithm.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,65,"private static final String SHA256_ALGORITHM = ""SHA-256"";"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,68,* The number of bytes the final hash value will have.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,70,private static final int SHA256_BLOCKSIZE = 32;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,73,* The prefixes that can be used to identify this crypt() variant.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,75,"static final String SHA256_PREFIX = ""$5$"";"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,77,"private static final String SHA512_ALGORITHM = ""SHA-512"";"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,79,private static final int SHA512_BLOCKSIZE = 64;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,81,"static final String SHA512_PREFIX = ""$6$"";"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,84,"* Generates a libc crypt() compatible ""$5$"" hash value with random salt."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,86,"* See {@link Crypt#crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,88,public static String sha256Crypt(byte[] keyBytes) throws Exception {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,89,"return sha256Crypt(keyBytes, null);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,93,"* Generates a libc6 crypt() compatible ""$5$"" hash value."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,95,"* See {@link Crypt#crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,97,"public static String sha256Crypt(byte[] keyBytes, String salt) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,98,if (salt == null) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,99,salt = SHA256_PREFIX + B64.getRandomSalt(8);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,101,"return sha2Crypt(keyBytes, salt, SHA256_PREFIX, SHA256_BLOCKSIZE, SHA256_ALGORITHM);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,105,"* Generates a libc6 crypt() compatible ""$5$"" or ""$6$"" SHA2 based hash value."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,107,* This is a nearly line by line conversion of the original C function. The numbered comments are from the algorithm
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,108,"* description, the short C-style ones from the original C code and the ones with ""Remark"" from me."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,110,"* See {@link Crypt#crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,112,* @param keyBytes
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,113,*            The plaintext that should be hashed.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,114,* @param salt_string
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,115,"*            The real salt value without prefix or ""rounds=""."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,116,* @param saltPrefix
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,117,*            Either $5$ or $6$.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,118,* @param blocksize
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,119,*            A value that differs between $5$ and $6$.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,120,* @param algorithm
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,121,*            The MessageDigest algorithm identifier string.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,122,* @return The complete hash value including prefix and salt.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,124,"private static String sha2Crypt(byte[] keyBytes, String salt, String saltPrefix, int blocksize, String algorithm)"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,125,throws Exception {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,126,int keyLen = keyBytes.length;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,128,// Extracts effective salt and the number of rounds from the given salt.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,129,int rounds = ROUNDS_DEFAULT;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,130,boolean roundsCustom = false;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,131,if (salt == null) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,132,"throw new IllegalArgumentException(""Invalid salt value: null"");"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,134,"Pattern p = Pattern.compile(""^\\$([56])\\$(rounds=(\\d+)\\$)?([\\.\\/a-zA-Z0-9]{1,16}).*"");"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,135,Matcher m = p.matcher(salt);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,136,if (m == null || !m.find()) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,137,"throw new IllegalArgumentException(""Invalid salt value: "" + salt);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,139,if (m.group(3) != null) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,140,rounds = Integer.valueOf(m.group(3));
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,141,"rounds = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, rounds));"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,142,roundsCustom = true;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,144,String saltString = m.group(4);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,145,"byte[] saltBytes = saltString.getBytes(""UTF-8"");"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,146,int saltLen = saltBytes.length;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,148,// 1. start digest A
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,149,// Prepare for the real work.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,150,MessageDigest ctx = MessageDigest.getInstance(algorithm);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,152,// 2. the password string is added to digest A
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,154,* Add the key string.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,156,ctx.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,158,// 3. the salt string is added to digest A. This is just the salt string
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,159,"// itself without the enclosing '$', without the magic salt_prefix $5$ and"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,160,// $6$ respectively and without the rounds=<N> specification.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,162,// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,163,// necessary since it is a constant string and does not add security
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,164,// and /possibly/ allows a plain text attack. Since the rounds=<N>
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,165,// specification should never be added this would also create an
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,166,// inconsistency.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,168,* The last part is the salt string. This must be at most 16 characters and it ends at the first `$' character
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,169,* (for compatibility with existing implementations).
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,171,ctx.update(saltBytes);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,173,// 4. start digest B
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,175,"* Compute alternate sha512 sum with input KEY, SALT, and KEY. The final result will be added to the first"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,176,* context.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,178,MessageDigest altCtx = MessageDigest.getInstance(algorithm);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,180,// 5. add the password to digest B
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,182,* Add key.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,184,altCtx.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,186,// 6. add the salt string to digest B
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,188,* Add salt.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,190,altCtx.update(saltBytes);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,192,// 7. add the password again to digest B
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,194,* Add key again.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,196,altCtx.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,198,// 8. finish digest B
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,200,* Now get result of this (32 bytes) and add it to the other context.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,202,byte[] altResult = altCtx.digest();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,204,// 9. For each block of 32 or 64 bytes in the password string (excluding
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,205,"// the terminating NUL in the C representation), add digest B to digest A"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,207,* Add for any character in the key one byte of the alternate sum.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,210,* (Remark: the C code comment seems wrong for key length > 32!)
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,212,int cnt = keyBytes.length;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,213,while (cnt > blocksize) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,214,"ctx.update(altResult, 0, blocksize);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,215,cnt -= blocksize;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,218,// 10. For the remaining N bytes of the password string add the first
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,219,// N bytes of digest B to digest A
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,220,"ctx.update(altResult, 0, cnt);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,222,// 11. For each bit of the binary representation of the length of the
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,223,"// password string up to and including the highest 1-digit, starting"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,224,// from to lowest bit position (numeric value 1):
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,226,// a) for a 1-digit add digest B to digest A
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,228,// b) for a 0-digit add the password string
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,230,// NB: this step differs significantly from the MD5 algorithm. It
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,231,// adds more randomness.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,233,"* Take the binary representation of the length of the key and for every 1 add the alternate sum, for every 0"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,234,* the key.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,236,cnt = keyBytes.length;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,237,while (cnt > 0) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,238,if ((cnt & 1) != 0) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,239,"ctx.update(altResult, 0, blocksize);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,240,} else {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,241,ctx.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,243,cnt >>= 1;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,246,// 12. finish digest A
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,248,* Create intermediate result.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,250,altResult = ctx.digest();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,252,// 13. start digest DP
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,254,* Start computation of P byte sequence.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,256,altCtx = MessageDigest.getInstance(algorithm);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,258,// 14. for every byte in the password (excluding the terminating NUL byte
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,259,// in the C representation of the string)
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,261,// add the password to digest DP
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,263,* For every character in the password add the entire password.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,265,for (int i = 1; i <= keyLen; i++) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,266,altCtx.update(keyBytes);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,269,// 15. finish digest DP
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,271,* Finish the digest.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,273,byte[] tempResult = altCtx.digest();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,275,// 16. produce byte sequence P of the same length as the password where
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,277,// a) for each block of 32 or 64 bytes of length of the password string
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,278,// the entire digest DP is used
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,280,// b) for the remaining N (up to 31 or 63) bytes use the first N
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,281,// bytes of digest DP
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,283,* Create byte sequence P.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,285,byte[] pBytes = new byte[keyLen];
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,286,int cp = 0;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,287,while (cp < keyLen - blocksize) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,288,"System.arraycopy(tempResult, 0, pBytes, cp, blocksize);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,289,cp += blocksize;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,291,"System.arraycopy(tempResult, 0, pBytes, cp, keyLen - cp);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,293,// 17. start digest DS
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,295,* Start computation of S byte sequence.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,297,altCtx = MessageDigest.getInstance(algorithm);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,299,"// 18. repeast the following 16+A[0] times, where A[0] represents the first"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,300,// byte in digest A interpreted as an 8-bit unsigned value
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,302,// add the salt to digest DS
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,304,* For every character in the password add the entire password.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,306,for (int i = 1; i <= 16 + (altResult[0] & 0xff); i++) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,307,altCtx.update(saltBytes);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,310,// 19. finish digest DS
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,312,* Finish the digest.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,314,tempResult = altCtx.digest();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,316,// 20. produce byte sequence S of the same length as the salt string where
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,318,// a) for each block of 32 or 64 bytes of length of the salt string
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,319,// the entire digest DS is used
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,321,// b) for the remaining N (up to 31 or 63) bytes use the first N
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,322,// bytes of digest DS
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,324,* Create byte sequence S.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,326,"// Remark: The salt is limited to 16 chars, how does this make sense?"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,327,byte[] sBytes = new byte[saltLen];
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,328,cp = 0;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,329,while (cp < saltLen - blocksize) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,330,"System.arraycopy(tempResult, 0, sBytes, cp, blocksize);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,331,cp += blocksize;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,333,"System.arraycopy(tempResult, 0, sBytes, cp, saltLen - cp);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,335,// 21. repeat a loop according to the number specified in the rounds=<N>
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,336,// specification in the salt (or the default value if none is
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,337,"// present). Each round is numbered, starting with 0 and up to N-1."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,339,// The loop uses a digest as input. In the first round it is the
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,340,// digest produced in step 12. In the latter steps it is the digest
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,341,// produced in step 21.h. The following text uses the notation
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,342,"// ""digest A/C"" to desribe this behavior."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,344,* Repeatedly run the collected hash value through sha512 to burn CPU cycles.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,346,for (int i = 0; i <= rounds - 1; i++) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,347,// a) start digest C
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,349,* New context.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,351,ctx = MessageDigest.getInstance(algorithm);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,353,// b) for odd round numbers add the byte sequense P to digest C
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,354,// c) for even round numbers add digest A/C
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,356,* Add key or last result.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,358,if ((i & 1) != 0) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,359,"ctx.update(pBytes, 0, keyLen);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,360,} else {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,361,"ctx.update(altResult, 0, blocksize);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,364,// d) for all round numbers not divisible by 3 add the byte sequence S
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,366,* Add salt for numbers not divisible by 3.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,368,if (i % 3 != 0) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,369,"ctx.update(sBytes, 0, saltLen);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,372,// e) for all round numbers not divisible by 7 add the byte sequence P
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,374,* Add key for numbers not divisible by 7.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,376,if (i % 7 != 0) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,377,"ctx.update(pBytes, 0, keyLen);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,380,// f) for odd round numbers add digest A/C
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,381,// g) for even round numbers add the byte sequence P
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,383,* Add key or last result.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,385,if ((i & 1) != 0) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,386,"ctx.update(altResult, 0, blocksize);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,387,} else {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,388,"ctx.update(pBytes, 0, keyLen);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,391,// h) finish digest C.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,393,* Create intermediate result.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,395,altResult = ctx.digest();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,398,// 22. Produce the output string. This is an ASCII string of the maximum
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,399,"// size specified above, consisting of multiple pieces:"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,401,"// a) the salt salt_prefix, $5$ or $6$ respectively"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,403,"// b) the rounds=<N> specification, if one was present in the input"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,404,// salt string. A trailing '$' is added in this case to separate
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,405,// the rounds specification from the following text.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,407,// c) the salt string truncated to 16 characters
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,409,// d) a '$' character
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,411,* Now we can construct the result string. It consists of three parts.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,413,"StringBuilder buffer = new StringBuilder(saltPrefix + (roundsCustom ? ROUNDS_PREFIX + rounds + ""$"" : """")"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,414,"+ saltString + ""$"");"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,416,// e) the base-64 encoded final C digest. The encoding used is as
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,417,// follows:
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,420,// Each group of three bytes from the digest produces four
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,421,// characters as output:
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,423,// 1. character: the six low bits of the first byte
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,424,// 2. character: the two high bits of the first byte and the
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,425,// four low bytes from the second byte
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,426,// 3. character: the four high bytes from the second byte and
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,427,// the two low bits from the third byte
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,428,// 4. character: the six high bits from the third byte
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,430,// The groups of three bytes are as follows (in this sequence).
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,431,// These are the indices into the byte array containing the
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,432,"// digest, starting with index 0. For the last group there are"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,433,// not enough bytes left in the digest and the value zero is used
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,434,// in its place. This group also produces only three or two
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,435,// characters as output for SHA-512 and SHA-512 respectively.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,437,// This was just a safeguard in the C implementation:
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,438,// int buflen = salt_prefix.length() - 1 + ROUNDS_PREFIX.length() + 9 + 1 + salt_string.length() + 1 + 86 + 1;
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,440,if (blocksize == 32) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,441,"B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,442,"B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,443,"B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,444,"B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,445,"B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,446,"B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,447,"B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,448,"B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,449,"B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,450,"B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,451,"B64.b64from24bit((byte) 0, altResult[31], altResult[30], 3, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,452,} else {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,453,"B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,454,"B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,455,"B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,456,"B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,457,"B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,458,"B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,459,"B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,460,"B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,461,"B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,462,"B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,463,"B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,464,"B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,465,"B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,466,"B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,467,"B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,468,"B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,469,"B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,470,"B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,471,"B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,472,"B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,473,"B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,474,"B64.b64from24bit((byte) 0, (byte) 0, altResult[63], 2, buffer);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,478,* Clear the buffer for the intermediate result so that people attaching to processes or reading core dumps
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,479,* cannot get any information.
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,481,// Is there a better way to do this with the JVM?
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,482,"Arrays.fill(tempResult, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,483,"Arrays.fill(pBytes, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,484,"Arrays.fill(sBytes, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,485,ctx.reset();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,486,altCtx.reset();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,487,"Arrays.fill(keyBytes, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,488,"Arrays.fill(saltBytes, (byte) 0);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,490,return buffer.toString();
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,494,"* Generates a libc crypt() compatible ""$6$"" hash value with random salt."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,496,"* See {@link Crypt#crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,498,public static String sha512Crypt(byte[] keyBytes) throws Exception {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,499,"return sha512Crypt(keyBytes, null);"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,503,"* Generates a libc6 crypt() compatible ""$6$"" hash value."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,505,"* See {@link Crypt#crypt(String, String)} for details."
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,507,"public static String sha512Crypt(byte[] keyBytes, String salt) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,508,if (salt == null) {
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,509,salt = SHA512_PREFIX + B64.getRandomSalt(8);
True,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java,511,"return sha2Crypt(keyBytes, salt, SHA512_PREFIX, SHA512_BLOCKSIZE, SHA512_ALGORITHM);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,5,"* licenses this file to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,7,* You may obtain a copy of the License at
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,9,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,13,"* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,14,* License for the specific language governing permissions and limitations under
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,15,* the License.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,17,package org.apache.commons.codec.digest;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,19,import java.util.Random;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,21,import org.apache.commons.codec.Charsets;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,24,* Unix crypt(3) algorithm implementation.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,26,* This class only implements the traditional 56 bit DES based algorithm. Please
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,27,* use DigestUtils.crypt() for a method that distinguishes between all the
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,28,* algorithms supported in the current glibc's crypt().
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,30,* The Java implementation was taken from the JetSpeed Portal project (see
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,31,* org.apache.jetspeed.services.security.ldap.UnixCrypt).
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,33,* This class is slightly incompatible if the given salt contains characters
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,34,* that are not part of the allowed range [a-zA-Z0-9./].
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,36,* @version $Id $
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,37,* @since 1.7
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,39,public class UnixCrypt {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,41,private static final int CON_SALT[] = {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,42,"0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,43,"0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,44,"0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,45,"0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,46,"0, 0, 0, 0, 0, 0, 0, 1, 2, 3,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,47,"4, 5, 6, 7, 8, 9, 10, 11, 5, 6,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,48,"7, 8, 9, 10, 11, 12, 13, 14, 15, 16,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,49,"17, 18, 19, 20, 21, 22, 23, 24, 25, 26,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,50,"27, 28, 29, 30, 31, 32, 33, 34, 35, 36,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,51,"37, 32, 33, 34, 35, 36, 37, 38, 39, 40,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,52,"41, 42, 43, 44, 45, 46, 47, 48, 49, 50,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,53,"51, 52, 53, 54, 55, 56, 57, 58, 59, 60,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,54,"61, 62, 63, 0, 0, 0, 0, 0"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,57,private static final int COV2CHAR[] = {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,58,"46, 47, 48, 49, 50, 51, 52, 53, 54, 55,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,59,"56, 57, 65, 66, 67, 68, 69, 70, 71, 72,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,60,"73, 74, 75, 76, 77, 78, 79, 80, 81, 82,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,61,"83, 84, 85, 86, 87, 88, 89, 90, 97, 98,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,62,"99, 100, 101, 102, 103, 104, 105, 106, 107, 108,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,63,"109, 110, 111, 112, 113, 114, 115, 116, 117, 118,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,64,"119, 120, 121, 122"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,67,"private static final char SALT_CHARS[] = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789./"".toCharArray();"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,69,private static final boolean SHIFT2[] = {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,70,"false, false, true, true, true, true, true, true, false, true,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,71,"true, true, true, true, true, false"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,74,private static final int SKB[][] = {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,76,"0, 16, 0x20000000, 0x20000010, 0x10000, 0x10010, 0x20010000, 0x20010010, 2048, 2064,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,77,"0x20000800, 0x20000810, 0x10800, 0x10810, 0x20010800, 0x20010810, 32, 48, 0x20000020, 0x20000030,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,78,"0x10020, 0x10030, 0x20010020, 0x20010030, 2080, 2096, 0x20000820, 0x20000830, 0x10820, 0x10830,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,79,"0x20010820, 0x20010830, 0x80000, 0x80010, 0x20080000, 0x20080010, 0x90000, 0x90010, 0x20090000, 0x20090010,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,80,"0x80800, 0x80810, 0x20080800, 0x20080810, 0x90800, 0x90810, 0x20090800, 0x20090810, 0x80020, 0x80030,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,81,"0x20080020, 0x20080030, 0x90020, 0x90030, 0x20090020, 0x20090030, 0x80820, 0x80830, 0x20080820, 0x20080830,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,82,"0x90820, 0x90830, 0x20090820, 0x20090830"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,84,"0, 0x2000000, 8192, 0x2002000, 0x200000, 0x2200000, 0x202000, 0x2202000, 4, 0x2000004,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,85,"8196, 0x2002004, 0x200004, 0x2200004, 0x202004, 0x2202004, 1024, 0x2000400, 9216, 0x2002400,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,86,"0x200400, 0x2200400, 0x202400, 0x2202400, 1028, 0x2000404, 9220, 0x2002404, 0x200404, 0x2200404,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,87,"0x202404, 0x2202404, 0x10000000, 0x12000000, 0x10002000, 0x12002000, 0x10200000, 0x12200000, 0x10202000, 0x12202000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,88,"0x10000004, 0x12000004, 0x10002004, 0x12002004, 0x10200004, 0x12200004, 0x10202004, 0x12202004, 0x10000400, 0x12000400,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,89,"0x10002400, 0x12002400, 0x10200400, 0x12200400, 0x10202400, 0x12202400, 0x10000404, 0x12000404, 0x10002404, 0x12002404,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,90,"0x10200404, 0x12200404, 0x10202404, 0x12202404"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,92,"0, 1, 0x40000, 0x40001, 0x1000000, 0x1000001, 0x1040000, 0x1040001, 2, 3,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,93,"0x40002, 0x40003, 0x1000002, 0x1000003, 0x1040002, 0x1040003, 512, 513, 0x40200, 0x40201,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,94,"0x1000200, 0x1000201, 0x1040200, 0x1040201, 514, 515, 0x40202, 0x40203, 0x1000202, 0x1000203,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,95,"0x1040202, 0x1040203, 0x8000000, 0x8000001, 0x8040000, 0x8040001, 0x9000000, 0x9000001, 0x9040000, 0x9040001,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,96,"0x8000002, 0x8000003, 0x8040002, 0x8040003, 0x9000002, 0x9000003, 0x9040002, 0x9040003, 0x8000200, 0x8000201,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,97,"0x8040200, 0x8040201, 0x9000200, 0x9000201, 0x9040200, 0x9040201, 0x8000202, 0x8000203, 0x8040202, 0x8040203,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,98,"0x9000202, 0x9000203, 0x9040202, 0x9040203"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,100,"0, 0x100000, 256, 0x100100, 8, 0x100008, 264, 0x100108, 4096, 0x101000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,101,"4352, 0x101100, 4104, 0x101008, 4360, 0x101108, 0x4000000, 0x4100000, 0x4000100, 0x4100100,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,102,"0x4000008, 0x4100008, 0x4000108, 0x4100108, 0x4001000, 0x4101000, 0x4001100, 0x4101100, 0x4001008, 0x4101008,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,103,"0x4001108, 0x4101108, 0x20000, 0x120000, 0x20100, 0x120100, 0x20008, 0x120008, 0x20108, 0x120108,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,104,"0x21000, 0x121000, 0x21100, 0x121100, 0x21008, 0x121008, 0x21108, 0x121108, 0x4020000, 0x4120000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,105,"0x4020100, 0x4120100, 0x4020008, 0x4120008, 0x4020108, 0x4120108, 0x4021000, 0x4121000, 0x4021100, 0x4121100,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,106,"0x4021008, 0x4121008, 0x4021108, 0x4121108"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,108,"0, 0x10000000, 0x10000, 0x10010000, 4, 0x10000004, 0x10004, 0x10010004, 0x20000000, 0x30000000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,109,"0x20010000, 0x30010000, 0x20000004, 0x30000004, 0x20010004, 0x30010004, 0x100000, 0x10100000, 0x110000, 0x10110000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,110,"0x100004, 0x10100004, 0x110004, 0x10110004, 0x20100000, 0x30100000, 0x20110000, 0x30110000, 0x20100004, 0x30100004,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,111,"0x20110004, 0x30110004, 4096, 0x10001000, 0x11000, 0x10011000, 4100, 0x10001004, 0x11004, 0x10011004,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,112,"0x20001000, 0x30001000, 0x20011000, 0x30011000, 0x20001004, 0x30001004, 0x20011004, 0x30011004, 0x101000, 0x10101000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,113,"0x111000, 0x10111000, 0x101004, 0x10101004, 0x111004, 0x10111004, 0x20101000, 0x30101000, 0x20111000, 0x30111000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,114,"0x20101004, 0x30101004, 0x20111004, 0x30111004"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,116,"0, 0x8000000, 8, 0x8000008, 1024, 0x8000400, 1032, 0x8000408, 0x20000, 0x8020000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,117,"0x20008, 0x8020008, 0x20400, 0x8020400, 0x20408, 0x8020408, 1, 0x8000001, 9, 0x8000009,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,118,"1025, 0x8000401, 1033, 0x8000409, 0x20001, 0x8020001, 0x20009, 0x8020009, 0x20401, 0x8020401,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,119,"0x20409, 0x8020409, 0x2000000, 0xa000000, 0x2000008, 0xa000008, 0x2000400, 0xa000400, 0x2000408, 0xa000408,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,120,"0x2020000, 0xa020000, 0x2020008, 0xa020008, 0x2020400, 0xa020400, 0x2020408, 0xa020408, 0x2000001, 0xa000001,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,121,"0x2000009, 0xa000009, 0x2000401, 0xa000401, 0x2000409, 0xa000409, 0x2020001, 0xa020001, 0x2020009, 0xa020009,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,122,"0x2020401, 0xa020401, 0x2020409, 0xa020409"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,124,"0, 256, 0x80000, 0x80100, 0x1000000, 0x1000100, 0x1080000, 0x1080100, 16, 272,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,125,"0x80010, 0x80110, 0x1000010, 0x1000110, 0x1080010, 0x1080110, 0x200000, 0x200100, 0x280000, 0x280100,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,126,"0x1200000, 0x1200100, 0x1280000, 0x1280100, 0x200010, 0x200110, 0x280010, 0x280110, 0x1200010, 0x1200110,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,127,"0x1280010, 0x1280110, 512, 768, 0x80200, 0x80300, 0x1000200, 0x1000300, 0x1080200, 0x1080300,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,128,"528, 784, 0x80210, 0x80310, 0x1000210, 0x1000310, 0x1080210, 0x1080310, 0x200200, 0x200300,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,129,"0x280200, 0x280300, 0x1200200, 0x1200300, 0x1280200, 0x1280300, 0x200210, 0x200310, 0x280210, 0x280310,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,130,"0x1200210, 0x1200310, 0x1280210, 0x1280310"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,132,"0, 0x4000000, 0x40000, 0x4040000, 2, 0x4000002, 0x40002, 0x4040002, 8192, 0x4002000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,133,"0x42000, 0x4042000, 8194, 0x4002002, 0x42002, 0x4042002, 32, 0x4000020, 0x40020, 0x4040020,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,134,"34, 0x4000022, 0x40022, 0x4040022, 8224, 0x4002020, 0x42020, 0x4042020, 8226, 0x4002022,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,135,"0x42022, 0x4042022, 2048, 0x4000800, 0x40800, 0x4040800, 2050, 0x4000802, 0x40802, 0x4040802,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,136,"10240, 0x4002800, 0x42800, 0x4042800, 10242, 0x4002802, 0x42802, 0x4042802, 2080, 0x4000820,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,137,"0x40820, 0x4040820, 2082, 0x4000822, 0x40822, 0x4040822, 10272, 0x4002820, 0x42820, 0x4042820,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,138,"10274, 0x4002822, 0x42822, 0x4042822"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,142,private static final int SPTRANS[][] = {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,144,"0x820200, 0x20000, 0x80800000, 0x80820200, 0x800000, 0x80020200, 0x80020000, 0x80800000, 0x80020200, 0x820200,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,145,"0x820000, 0x80000200, 0x80800200, 0x800000, 0, 0x80020000, 0x20000, 0x80000000, 0x800200, 0x20200,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,146,"0x80820200, 0x820000, 0x80000200, 0x800200, 0x80000000, 512, 0x20200, 0x80820000, 512, 0x80800200,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,147,"0x80820000, 0, 0, 0x80820200, 0x800200, 0x80020000, 0x820200, 0x20000, 0x80000200, 0x800200,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,148,"0x80820000, 512, 0x20200, 0x80800000, 0x80020200, 0x80000000, 0x80800000, 0x820000, 0x80820200, 0x20200,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,149,"0x820000, 0x80800200, 0x800000, 0x80000200, 0x80020000, 0, 0x20000, 0x800000, 0x80800200, 0x820200,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,150,"0x80000000, 0x80820000, 512, 0x80020200"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,152,"0x10042004, 0, 0x42000, 0x10040000, 0x10000004, 8196, 0x10002000, 0x42000, 8192, 0x10040004,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,153,"4, 0x10002000, 0x40004, 0x10042000, 0x10040000, 4, 0x40000, 0x10002004, 0x10040004, 8192,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,154,"0x42004, 0x10000000, 0, 0x40004, 0x10002004, 0x42004, 0x10042000, 0x10000004, 0x10000000, 0x40000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,155,"8196, 0x10042004, 0x40004, 0x10042000, 0x10002000, 0x42004, 0x10042004, 0x40004, 0x10000004, 0,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,156,"0x10000000, 8196, 0x40000, 0x10040004, 8192, 0x10000000, 0x42004, 0x10002004, 0x10042000, 8192,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,157,"0, 0x10000004, 4, 0x10042004, 0x42000, 0x10040000, 0x10040004, 0x40000, 8196, 0x10002000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,158,"0x10002004, 4, 0x10040000, 0x42000"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,160,"0x41000000, 0x1010040, 64, 0x41000040, 0x40010000, 0x1000000, 0x41000040, 0x10040, 0x1000040, 0x10000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,161,"0x1010000, 0x40000000, 0x41010040, 0x40000040, 0x40000000, 0x41010000, 0, 0x40010000, 0x1010040, 64,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,162,"0x40000040, 0x41010040, 0x10000, 0x41000000, 0x41010000, 0x1000040, 0x40010040, 0x1010000, 0x10040, 0,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,163,"0x1000000, 0x40010040, 0x1010040, 64, 0x40000000, 0x10000, 0x40000040, 0x40010000, 0x1010000, 0x41000040,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,164,"0, 0x1010040, 0x10040, 0x41010000, 0x40010000, 0x1000000, 0x41010040, 0x40000000, 0x40010040, 0x41000000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,165,"0x1000000, 0x41010040, 0x10000, 0x1000040, 0x41000040, 0x10040, 0x1000040, 0, 0x41010000, 0x40000040,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,166,"0x41000000, 0x40010040, 64, 0x1010000"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,168,"0x100402, 0x4000400, 2, 0x4100402, 0, 0x4100000, 0x4000402, 0x100002, 0x4100400, 0x4000002,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,169,"0x4000000, 1026, 0x4000002, 0x100402, 0x100000, 0x4000000, 0x4100002, 0x100400, 1024, 2,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,170,"0x100400, 0x4000402, 0x4100000, 1024, 1026, 0, 0x100002, 0x4100400, 0x4000400, 0x4100002,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,171,"0x4100402, 0x100000, 0x4100002, 1026, 0x100000, 0x4000002, 0x100400, 0x4000400, 2, 0x4100000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,172,"0x4000402, 0, 1024, 0x100002, 0, 0x4100002, 0x4100400, 1024, 0x4000000, 0x4100402,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,173,"0x100402, 0x100000, 0x4100402, 2, 0x4000400, 0x100402, 0x100002, 0x100400, 0x4100000, 0x4000402,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,174,"1026, 0x4000000, 0x4000002, 0x4100400"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,176,"0x2000000, 16384, 256, 0x2004108, 0x2004008, 0x2000100, 16648, 0x2004000, 16384, 8,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,177,"0x2000008, 16640, 0x2000108, 0x2004008, 0x2004100, 0, 16640, 0x2000000, 16392, 264,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,178,"0x2000100, 16648, 0, 0x2000008, 8, 0x2000108, 0x2004108, 16392, 0x2004000, 256,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,179,"264, 0x2004100, 0x2004100, 0x2000108, 16392, 0x2004000, 16384, 8, 0x2000008, 0x2000100,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,180,"0x2000000, 16640, 0x2004108, 0, 16648, 0x2000000, 256, 16392, 0x2000108, 256,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,181,"0, 0x2004108, 0x2004008, 0x2004100, 264, 16384, 16640, 0x2004008, 0x2000100, 264,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,182,"8, 16648, 0x2004000, 0x2000008"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,184,"0x20000010, 0x80010, 0, 0x20080800, 0x80010, 2048, 0x20000810, 0x80000, 2064, 0x20080810,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,185,"0x80800, 0x20000000, 0x20000800, 0x20000010, 0x20080000, 0x80810, 0x80000, 0x20000810, 0x20080010, 0,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,186,"2048, 16, 0x20080800, 0x20080010, 0x20080810, 0x20080000, 0x20000000, 2064, 16, 0x80800,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,187,"0x80810, 0x20000800, 2064, 0x20000000, 0x20000800, 0x80810, 0x20080800, 0x80010, 0, 0x20000800,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,188,"0x20000000, 2048, 0x20080010, 0x80000, 0x80010, 0x20080810, 0x80800, 16, 0x20080810, 0x80800,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,189,"0x80000, 0x20000810, 0x20000010, 0x20080000, 0x80810, 0, 2048, 0x20000010, 0x20000810, 0x20080800,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,190,"0x20080000, 2064, 16, 0x20080010"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,192,"4096, 128, 0x400080, 0x400001, 0x401081, 4097, 4224, 0, 0x400000, 0x400081,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,193,"129, 0x401000, 1, 0x401080, 0x401000, 129, 0x400081, 4096, 4097, 0x401081,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,194,"0, 0x400080, 0x400001, 4224, 0x401001, 4225, 0x401080, 1, 4225, 0x401001,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,195,"128, 0x400000, 4225, 0x401000, 0x401001, 129, 4096, 128, 0x400000, 0x401001,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,196,"0x400081, 4225, 4224, 0, 128, 0x400001, 1, 0x400080, 0, 0x400081,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,197,"0x400080, 4224, 129, 4096, 0x401081, 0x400000, 0x401080, 1, 4097, 0x401081,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,198,"0x400001, 0x401080, 0x401000, 4097"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,200,"0x8200020, 0x8208000, 32800, 0, 0x8008000, 0x200020, 0x8200000, 0x8208020, 32, 0x8000000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,201,"0x208000, 32800, 0x208020, 0x8008020, 0x8000020, 0x8200000, 32768, 0x208020, 0x200020, 0x8008000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,202,"0x8208020, 0x8000020, 0, 0x208000, 0x8000000, 0x200000, 0x8008020, 0x8200020, 0x200000, 32768,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,203,"0x8208000, 32, 0x200000, 32768, 0x8000020, 0x8208020, 32800, 0x8000000, 0, 0x208000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,204,"0x8200020, 0x8008020, 0x8008000, 0x200020, 0x8208000, 32, 0x200020, 0x8008000, 0x8208020, 0x200000,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,205,"0x8200000, 0x8000020, 0x208000, 32800, 0x8008020, 0x8200000, 32, 0x8208000, 0x208020, 0,"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,206,"0x8000000, 0x8200020, 32768, 0x208020"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,210,"private static int[] body(int schedule[], int eSwap0, int eSwap1) {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,211,int left = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,212,int right = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,213,int t = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,214,for (int j = 0; j < 25; j++) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,215,for (int i = 0; i < 32; i += 4) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,216,"left = dEncrypt(left, right, i, eSwap0, eSwap1, schedule);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,217,"right = dEncrypt(right, left, i + 2, eSwap0, eSwap1, schedule);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,219,t = left;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,220,left = right;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,221,right = t;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,224,t = right;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,225,right = left >>> 1 | left << 31;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,226,left = t >>> 1 | t << 31;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,227,left &= 0xffffffff;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,228,right &= 0xffffffff;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,229,int results[] = new int[2];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,230,"permOp(right, left, 1, 0x55555555, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,231,right = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,232,left = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,233,"permOp(left, right, 8, 0xff00ff, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,234,left = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,235,right = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,236,"permOp(right, left, 2, 0x33333333, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,237,right = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,238,left = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,239,"permOp(left, right, 16, 65535, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,240,left = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,241,right = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,242,"permOp(right, left, 4, 0xf0f0f0f, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,243,right = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,244,left = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,245,int out[] = new int[2];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,246,out[0] = left;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,247,out[1] = right;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,248,return out;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,251,private static int byteToUnsigned(byte b) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,252,int value = b;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,253,return value < 0 ? value + 256 : value;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,256,"private static int dEncrypt(int el, int r, int s, int e0, int e1, int sArr[]) {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,257,int v = r ^ r >>> 16;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,258,int u = v & e0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,259,v &= e1;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,260,u = u ^ u << 16 ^ r ^ sArr[s];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,261,int t = v ^ v << 16 ^ r ^ sArr[s + 1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,262,t = t >>> 4 | t << 28;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,263,el ^= SPTRANS[1][t & 0x3f] | SPTRANS[3][t >>> 8 & 0x3f] | SPTRANS[5][t >>> 16 & 0x3f]
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,264,| SPTRANS[7][t >>> 24 & 0x3f] | SPTRANS[0][u & 0x3f] | SPTRANS[2][u >>> 8 & 0x3f]
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,265,| SPTRANS[4][u >>> 16 & 0x3f] | SPTRANS[6][u >>> 24 & 0x3f];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,266,return el;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,269,private static int[] desSetKey(byte key[]) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,270,int schedule[] = new int[32];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,271,"int c = fourBytesToInt(key, 0);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,272,"int d = fourBytesToInt(key, 4);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,273,int results[] = new int[2];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,274,"permOp(d, c, 4, 0xf0f0f0f, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,275,d = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,276,c = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,277,"c = hPermOp(c, -2, 0xcccc0000);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,278,"d = hPermOp(d, -2, 0xcccc0000);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,279,"permOp(d, c, 1, 0x55555555, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,280,d = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,281,c = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,282,"permOp(c, d, 8, 0xff00ff, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,283,c = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,284,d = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,285,"permOp(d, c, 1, 0x55555555, results);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,286,d = results[0];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,287,c = results[1];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,288,d = (d & 0xff) << 16 | d & 0xff00 | (d & 0xff0000) >>> 16 | (c & 0xf0000000) >>> 4;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,289,c &= 0xfffffff;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,290,int j = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,291,for (int i = 0; i < 16; i++) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,292,if (SHIFT2[i]) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,293,c = c >>> 2 | c << 26;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,294,d = d >>> 2 | d << 26;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,295,} else {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,296,c = c >>> 1 | c << 27;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,297,d = d >>> 1 | d << 27;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,299,c &= 0xfffffff;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,300,d &= 0xfffffff;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,301,int s = SKB[0][c & 0x3f] | SKB[1][c >>> 6 & 0x3 | c >>> 7 & 0x3c] | SKB[2][c >>> 13 & 0xf | c >>> 14 & 0x30] | SKB[3][c >>> 20 & 0x1 | c >>> 21 & 0x6 | c >>> 22 & 0x38];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,302,int t = SKB[4][d & 0x3f] | SKB[5][d >>> 7 & 0x3 | d >>> 8 & 0x3c] | SKB[6][d >>> 15 & 0x3f] | SKB[7][d >>> 21 & 0xf | d >>> 22 & 0x30];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,303,schedule[j++] = (t << 16 | s & 0xffff) & 0xffffffff;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,304,s = s >>> 16 | t & 0xffff0000;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,305,s = s << 4 | s >>> 28;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,306,schedule[j++] = s & 0xffffffff;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,309,return schedule;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,312,"private static int fourBytesToInt(byte b[], int offset) {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,313,int value = byteToUnsigned(b[offset++]);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,314,value |= byteToUnsigned(b[offset++]) << 8;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,315,value |= byteToUnsigned(b[offset++]) << 16;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,316,value |= byteToUnsigned(b[offset++]) << 24;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,317,return value;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,320,"private static int hPermOp(int a, int n, int m) {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,321,int t = (a << 16 - n ^ a) & m;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,322,a = a ^ t ^ t >>> 16 - n;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,323,return a;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,326,"private static void intToFourBytes(int iValue, byte b[], int offset) {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,327,b[offset++] = (byte) (iValue & 0xff);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,328,b[offset++] = (byte) (iValue >>> 8 & 0xff);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,329,b[offset++] = (byte) (iValue >>> 16 & 0xff);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,330,b[offset++] = (byte) (iValue >>> 24 & 0xff);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,333,"private static void permOp(int a, int b, int n, int m, int results[]) {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,334,int t = (a >>> n ^ b) & m;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,335,a ^= t << n;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,336,b ^= t;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,337,results[0] = a;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,338,results[1] = b;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,342,* Generates a crypt(3) compatible hash using the DES algorithm.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,344,"* As no salt is given, a random one will be used."
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,346,* @param original Plaintext password
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,348,* @return A 13 character string starting with the salt string.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,350,public static String crypt(byte[] original) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,351,"return crypt(original, null);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,355,* Generates a crypt(3) compatible hash using the DES algorithm.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,357,* Using unspecified characters as salt results incompatible hash values.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,359,* @param original Plaintext password
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,361,* @param salt A two character string drawn from [a-zA-Z0-9./] or null for a
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,362,* random one.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,364,* @return A 13 character string starting with the salt string.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,366,"public static String crypt(byte[] original, String salt) {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,367,if (salt == null) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,368,Random randomGenerator = new Random();
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,369,int numSaltChars = SALT_CHARS.length;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,370,"salt = """" + SALT_CHARS[Math.abs(randomGenerator.nextInt()) % numSaltChars] + SALT_CHARS[Math.abs(randomGenerator.nextInt()) % numSaltChars];"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,371,"} else if (!salt.matches(""^["" + B64.B64T + ""]{2,}$"")) {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,372,"throw new IllegalArgumentException(""Invalid salt value: "" + salt);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,375,"for (; salt.length() < 2; salt = salt + ""A"");"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,376,"StringBuilder buffer = new StringBuilder(""             "");"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,377,char charZero = salt.charAt(0);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,378,char charOne = salt.charAt(1);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,379,"buffer.setCharAt(0, charZero);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,380,"buffer.setCharAt(1, charOne);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,381,int eSwap0 = CON_SALT[charZero];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,382,int eSwap1 = CON_SALT[charOne] << 4;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,383,byte key[] = new byte[8];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,384,for (int i = 0; i < key.length; i++) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,385,key[i] = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,388,for (int i = 0; i < key.length && i < original.length; i++) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,389,int iChar = original[i];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,390,key[i] = (byte) (iChar << 1);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,393,int schedule[] = desSetKey(key);
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,394,"int out[] = body(schedule, eSwap0, eSwap1);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,395,byte b[] = new byte[9];
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,396,"intToFourBytes(out[0], b, 0);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,397,"intToFourBytes(out[1], b, 4);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,398,b[8] = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,399,int i = 2;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,400,int y = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,401,int u = 128;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,402,for (; i < 13; i++) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,403,int j = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,404,int c = 0;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,405,for (; j < 6; j++) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,406,c <<= 1;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,407,if ((b[y] & u) != 0) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,408,c |= 0x1;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,410,u >>>= 1;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,411,if (u == 0) {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,412,y++;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,413,u = 128;
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,415,"buffer.setCharAt(i, (char) COV2CHAR[c]);"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,418,return buffer.toString();
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,422,* Generates a crypt(3) compatible hash using the DES algorithm.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,424,"* As no salt is given, a random one is used."
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,426,* @param original Plaintext password
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,428,* @return A 13 character string starting with the salt string.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,430,public static String crypt(String original) throws Exception {
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,431,return crypt(original.getBytes(Charsets.UTF_8));
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,435,* Generates a crypt(3) compatible hash using the DES algorithm.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,437,* @param original Plaintext password
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,438,* @param salt A two character string drawn from [a-zA-Z0-9./] or null for a
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,439,* random one.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,440,* @return A 13 character string starting with the salt string.
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,442,"public static String crypt(String original, String salt) throws Exception {"
True,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,src/main/java/org/apache/commons/codec/digest/UnixCrypt.java,443,"return crypt(original.getBytes(Charsets.UTF_8), salt);"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,17,package org.apache.commons.codec.digest;
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,20,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,23,public class Apr1CryptTest {
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,25,@Test
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,26,public void testApr1CryptStrings() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,27,// A random example using htpasswd
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,28,"assertEquals(""$apr1$TqI9WECO$LHZB2DqRlk9nObiB6vJG9."", Md5Crypt.apr1Crypt(""secret"", ""$apr1$TqI9WECO""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,29,// empty data
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,30,"assertEquals(""$apr1$foo$P27KyD1htb4EllIPEYhqi0"", Md5Crypt.apr1Crypt("""", ""$apr1$foo""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,31,// salt gets cut at dollar sign
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,32,"assertEquals(""$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1"", Md5Crypt.apr1Crypt(""secret"", ""$apr1$1234""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,33,"assertEquals(""$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1"", Md5Crypt.apr1Crypt(""secret"", ""$apr1$1234$567""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,34,"assertEquals(""$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1"", Md5Crypt.apr1Crypt(""secret"", ""$apr1$1234$567$890""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,35,// salt gets cut at maximum length
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,36,"assertEquals(""$apr1$12345678$0lqb/6VUFP8JY/s/jTrIk0"", Md5Crypt.apr1Crypt(""secret"", ""$apr1$1234567890123456""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,37,"assertEquals(""$apr1$12345678$0lqb/6VUFP8JY/s/jTrIk0"", Md5Crypt.apr1Crypt(""secret"", ""$apr1$123456789012345678""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,40,@Test
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,41,public void testApr1CryptBytes() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,42,// An empty Bytearray equals an empty String
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,43,"assertEquals(""$apr1$foo$P27KyD1htb4EllIPEYhqi0"", Md5Crypt.apr1Crypt(new byte[0], ""$apr1$foo""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,44,"// UTF-8 stores \u00e4 ""a with diaeresis"" as two bytes 0xc3 0xa4."
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,45,"assertEquals(""$apr1$./$EeFrYzWWbmTyGdf4xULYc."", Md5Crypt.apr1Crypt(""t\u00e4st"", ""$apr1$./$""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,46,"// ISO-8859-1 stores ""a with diaeresis"" as single byte 0xe4."
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,47,"assertEquals(""$apr1$./$kCwT1pY9qXAJElYG9q1QE1"", Md5Crypt.apr1Crypt(""t\u00e4st"".getBytes(""ISO-8859-1""), ""$apr1$./$""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,50,@Test
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,51,public void testApr1CryptExplicitCall() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,52,// When explicitly called the prefix is optional
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,53,"assertEquals(""$apr1$1234$mAlH7FRST6FiRZ.kcYL.j1"", Md5Crypt.apr1Crypt(""secret"", ""1234""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,54,"// When explicitly called without salt, a random one will be used."
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,55,"assertTrue(Md5Crypt.apr1Crypt(""secret"".getBytes()).matches(""^\\$apr1\\$[a-zA-Z0-9./]{0,8}\\$.{1,}$""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,56,"assertTrue(Md5Crypt.apr1Crypt(""secret"".getBytes(), null).matches(""^\\$apr1\\$[a-zA-Z0-9./]{0,8}\\$.{1,}$""));"
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,59,@Test(expected = NullPointerException.class)
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,60,public void testApr1CryptNullData() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,61,Md5Crypt.apr1Crypt((byte[]) null);
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,64,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,65,public void testApr1CryptWithEmptySalt() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,src/test/java/org/apache/commons/codec/digest/Apr1CryptTest.java,66,"Md5Crypt.apr1Crypt(""secret"".getBytes(), """");"
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,17,package org.apache.commons.codec.digest;
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,20,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,22,public class B64Test {
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,24,@Test
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,25,public void testB64from24bit() {
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,26,"StringBuilder buffer = new StringBuilder("""");"
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,27,"B64.b64from24bit((byte) 8, (byte) 16, (byte) 64, 2, buffer);"
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,28,"B64.b64from24bit((byte) 7, (byte) 77, (byte) 120, 4, buffer);"
True,src/test/java/org/apache/commons/codec/digest/B64Test.java,src/test/java/org/apache/commons/codec/digest/B64Test.java,29,"assertEquals(""./spo/"", buffer.toString());"
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,17,package org.apache.commons.codec.digest;
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,19,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,20,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,22,public class CryptTest {
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,24,@Test
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,25,public void testDefaultCryptVariant() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,26,"// If salt is null or completely omitted, a random ""$6$"" is used."
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,27,"assertTrue(Crypt.crypt(""secret"").startsWith(""$6$""));"
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,28,"assertTrue(Crypt.crypt(""secret"", null).startsWith(""$6$""));"
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,32,* An empty string as salt is invalid.
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,34,"* The C and Perl implementations return an empty string, PHP threads it"
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,35,* as NULL. Our implementation should throw an Exception as any resulting
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,36,* hash would not be verifyable with other implementations of crypt().
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,38,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,39,public void testCryptWithEmptySalt() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/CryptTest.java,src/test/java/org/apache/commons/codec/digest/CryptTest.java,40,"Crypt.crypt(""secret"", """");"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,17,package org.apache.commons.codec.digest;
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,20,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,23,public class Md5CryptTest {
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,25,@Test
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,26,public void testMd5CryptStrings() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,27,// empty data
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,28,"assertEquals(""$1$foo$9mS5ExwgIECGE5YKlD5o91"", Crypt.crypt("""", ""$1$foo""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,29,// salt gets cut at dollar sign
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,30,"assertEquals(""$1$1234$ImZYBLmYC.rbBKg9ERxX70"", Crypt.crypt(""secret"", ""$1$1234""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,31,"assertEquals(""$1$1234$ImZYBLmYC.rbBKg9ERxX70"", Crypt.crypt(""secret"", ""$1$1234$567""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,32,"assertEquals(""$1$1234$ImZYBLmYC.rbBKg9ERxX70"", Crypt.crypt(""secret"", ""$1$1234$567$890""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,33,// salt gets cut at maximum length
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,34,"assertEquals(""$1$12345678$hj0uLpdidjPhbMMZeno8X/"", Crypt.crypt(""secret"", ""$1$1234567890123456""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,35,"assertEquals(""$1$12345678$hj0uLpdidjPhbMMZeno8X/"", Crypt.crypt(""secret"", ""$1$123456789012345678""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,38,@Test
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,39,public void testMd5CryptBytes() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,40,// An empty Bytearray equals an empty String
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,41,"assertEquals(""$1$foo$9mS5ExwgIECGE5YKlD5o91"", Crypt.crypt(new byte[0], ""$1$foo""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,42,"// UTF-8 stores \u00e4 ""a with diaeresis"" as two bytes 0xc3 0xa4."
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,43,"assertEquals(""$1$./$52agTEQZs877L9jyJnCNZ1"", Crypt.crypt(""t\u00e4st"", ""$1$./$""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,44,"// ISO-8859-1 stores ""a with diaeresis"" as single byte 0xe4."
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,45,"assertEquals(""$1$./$J2UbKzGe0Cpe63WZAt6p//"", Crypt.crypt(""t\u00e4st"".getBytes(""ISO-8859-1""), ""$1$./$""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,48,@Test
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,49,public void testMd5CryptExplicitCall() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,50,"assertTrue(Md5Crypt.md5Crypt(""secret"".getBytes()).matches(""^\\$1\\$[a-zA-Z0-9./]{0,8}\\$.{1,}$""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,51,"assertTrue(Md5Crypt.md5Crypt(""secret"".getBytes(), null).matches(""^\\$1\\$[a-zA-Z0-9./]{0,8}\\$.{1,}$""));"
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,54,@Test(expected = NullPointerException.class)
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,55,public void testMd5CryptNullData() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,56,Md5Crypt.md5Crypt((byte[]) null);
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,59,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,60,public void testMd5CryptWithEmptySalt() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,src/test/java/org/apache/commons/codec/digest/Md5CryptTest.java,61,"Md5Crypt.md5Crypt(""secret"".getBytes(), """");"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,17,package org.apache.commons.codec.digest;
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,20,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,23,public class Sha256CryptTest {
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,25,@Test
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,26,public void testSha256CryptStrings() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,27,// empty data
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,28,"assertEquals(""$5$foo$Fq9CX624QIfnCAmlGiPKLlAasdacKCRxZztPoeo7o0B"", Crypt.crypt("""", ""$5$foo""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,29,// salt gets cut at dollar sign
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,30,"assertEquals(""$5$45678$LulJuUIJIn.1uU.KPV9x92umMYFopzVDD.o2ZqA1i2/"", Crypt.crypt(""secret"", ""$5$45678""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,31,"assertEquals(""$5$45678$LulJuUIJIn.1uU.KPV9x92umMYFopzVDD.o2ZqA1i2/"", Crypt.crypt(""secret"", ""$5$45678$012""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,32,"assertEquals(""$5$45678$LulJuUIJIn.1uU.KPV9x92umMYFopzVDD.o2ZqA1i2/"", Crypt.crypt(""secret"", ""$5$45678$012$456""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,33,// salt gets cut at maximum length
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,34,"assertEquals(""$5$1234567890123456$GUiFKBSTUAGvcK772ulTDPltkTOLtFvPOmp9o.9FNPB"", Crypt.crypt(""secret"", ""$5$1234567890123456""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,35,"assertEquals(""$5$1234567890123456$GUiFKBSTUAGvcK772ulTDPltkTOLtFvPOmp9o.9FNPB"", Crypt.crypt(""secret"", ""$5$1234567890123456789""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,38,@Test
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,39,public void testSha256CryptBytes() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,40,// An empty Bytearray equals an empty String
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,41,"assertEquals(""$5$foo$Fq9CX624QIfnCAmlGiPKLlAasdacKCRxZztPoeo7o0B"", Crypt.crypt(new byte[0], ""$5$foo""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,42,"// UTF-8 stores \u00e4 ""a with diaeresis"" as two bytes 0xc3 0xa4."
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,43,"assertEquals(""$5$./$iH66LwY5sTDTdHeOxq5nvNDVAxuoCcyH/y6Ptte82P8"", Crypt.crypt(""t\u00e4st"", ""$5$./$""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,44,"// ISO-8859-1 stores ""a with diaeresis"" as single byte 0xe4."
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,45,"assertEquals(""$5$./$qx5gFfCzjuWUOvsDDy.5Nor3UULPIqLVBZhgGNS0c14"", Crypt.crypt(""t\u00e4st"".getBytes(""ISO-8859-1""), ""$5$./$""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,48,@Test
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,49,public void testSha256CryptExplicitCall() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,50,"assertTrue(Sha2Crypt.sha256Crypt(""secret"".getBytes()).matches(""^\\$5\\$[a-zA-Z0-9./]{0,16}\\$.{1,}$""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,51,"assertTrue(Sha2Crypt.sha256Crypt(""secret"".getBytes(), null).matches(""^\\$5\\$[a-zA-Z0-9./]{0,16}\\$.{1,}$""));"
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,54,@Test(expected = NullPointerException.class)
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,55,public void testSha256CryptNullData() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,56,Sha2Crypt.sha256Crypt((byte[]) null);
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,59,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,60,public void testSha256CryptWithEmptySalt() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java,61,"Sha2Crypt.sha256Crypt(""secret"".getBytes(), """");"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,17,package org.apache.commons.codec.digest;
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,20,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,23,public class Sha512CryptTest {
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,25,@Test
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,26,public void testSha512CryptStrings() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,27,// empty data
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,28,"assertEquals(""$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/"", Crypt.crypt("""", ""$6$foo""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,29,// salt gets cut at dollar sign
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,30,"assertEquals(""$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5."", Crypt.crypt(""secret"", ""$6$45678""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,31,"assertEquals(""$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5."", Crypt.crypt(""secret"", ""$6$45678$012""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,32,"assertEquals(""$6$45678$f2en/Y053Knir/wu/T8DQKSbiUGcPcbXKsmyVlP820dIpXoY0KlqgUqRVFfavdRXwDMUZYsxPOymA4zgX0qE5."", Crypt.crypt(""secret"", ""$6$45678$012$456""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,33,// salt gets cut at maximum length
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,34,"assertEquals(""$6$1234567890123456$d2HCAnimIF5VMqUnwaZ/4JhNDJ.ttsjm0nbbmc9eE7xUYiw79GMvXUc5ZqG5BlqkXSbASZxrvR0QefAgdLbeH."", Crypt.crypt(""secret"", ""$6$1234567890123456""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,35,"assertEquals(""$6$1234567890123456$d2HCAnimIF5VMqUnwaZ/4JhNDJ.ttsjm0nbbmc9eE7xUYiw79GMvXUc5ZqG5BlqkXSbASZxrvR0QefAgdLbeH."", Crypt.crypt(""secret"", ""$6$1234567890123456789""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,38,@Test
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,39,public void testSha512CryptBytes() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,40,// An empty Bytearray equals an empty String
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,41,"assertEquals(""$6$foo$Nywkte7LPWjaJhWjNeGJN.dFdY3pN1wYlGifyRLYOVlGS9EMSiZaDDe/BGSOYQ327q9.32I4UqQ5odsqvsBLX/"", Crypt.crypt(new byte[0], ""$6$foo""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,42,"// UTF-8 stores \u00e4 ""a with diaeresis"" as two bytes 0xc3 0xa4."
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,43,"assertEquals(""$6$./$fKtWqslQkwI8ZxjdWoeS.jHHrte97bZxiwB5gwCRHX6LG62fUhT6Bb5MRrjWvieh0C/gxh8ItFuTsVy80VrED1"", Crypt.crypt(""t\u00e4st"", ""$6$./$""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,44,"// ISO-8859-1 stores ""a with diaeresis"" as single byte 0xe4."
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,45,"assertEquals(""$6$./$L49DSK.d2df/LxGLJQMyS5A/Um.TdHqgc46j5FpScEPlqQHP5dEazltaDNDZ6UEs2mmNI6kPwtH/rsP9g5zBI."", Crypt.crypt(""t\u00e4st"".getBytes(""ISO-8859-1""), ""$6$./$""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,48,@Test
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,49,public void testSha512CryptExplicitCall() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,50,"assertTrue(Sha2Crypt.sha512Crypt(""secret"".getBytes()).matches(""^\\$6\\$[a-zA-Z0-9./]{0,16}\\$.{1,}$""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,51,"assertTrue(Sha2Crypt.sha512Crypt(""secret"".getBytes(), null).matches(""^\\$6\\$[a-zA-Z0-9./]{0,16}\\$.{1,}$""));"
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,54,@Test(expected = NullPointerException.class)
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,55,public void testSha512CryptNullData() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,56,Sha2Crypt.sha512Crypt((byte[]) null);
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,59,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,60,public void testSha512CryptWithEmptySalt() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,src/test/java/org/apache/commons/codec/digest/Sha512CryptTest.java,61,"Sha2Crypt.sha512Crypt(""secret"".getBytes(), """");"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,17,package org.apache.commons.codec.digest;
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,19,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,20,import static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,23,public class UnixCryptTest {
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,25,@Test
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,26,public void testUnixCryptStrings() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,27,// trivial test
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,28,"assertEquals(""xxWAum7tHdIUw"", Crypt.crypt(""secret"", ""xx""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,29,// empty data
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,30,"assertEquals(""12UFlHxel6uMM"", Crypt.crypt("""", ""12""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,31,// salt gets cut at maximum length
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,32,"assertEquals(""12FJgqDtVOg7Q"", Crypt.crypt(""secret"", ""12""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,33,"assertEquals(""12FJgqDtVOg7Q"", Crypt.crypt(""secret"", ""12345678""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,36,@Test
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,37,public void testUnixCryptBytes() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,38,// An empty Bytearray equals an empty String
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,39,"assertEquals(""12UFlHxel6uMM"", Crypt.crypt(new byte[0], ""12""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,40,"// UTF-8 stores \u00e4 ""a with diaeresis"" as two bytes 0xc3 0xa4."
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,41,"assertEquals(""./287bds2PjVw"", Crypt.crypt(""t\u00e4st"", ""./""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,42,"// ISO-8859-1 stores ""a with diaeresis"" as single byte 0xe4."
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,43,"assertEquals(""./bLIFNqo9XKQ"", Crypt.crypt(""t\u00e4st"".getBytes(""ISO-8859-1""), ""./""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,44,"assertEquals(""./bLIFNqo9XKQ"", Crypt.crypt(new byte[]{(byte) 0x74, (byte) 0xe4, (byte) 0x73, (byte) 0x74}, ""./""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,48,* Some salts are invalid for crypt(3) but not for unixCrypt().
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,50,@Test
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,51,public void testUnixCryptExplicitCall() {
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,52,"// A call to crypt() with an empty salt would result in a ""$6$"" hash."
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,53,// Using unixCrypt() explicitly results in a random salt.
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,54,"assertTrue(UnixCrypt.crypt(""secret"".getBytes()).matches(""^[a-zA-Z0-9./]{13}$""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,55,"assertTrue(UnixCrypt.crypt(""secret"".getBytes(), null).matches(""^[a-zA-Z0-9./]{13}$""));"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,59,"* Unimplemented ""$foo$"" salt prefixes would be threated as UnixCrypt salt."
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,61,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,62,public void testUnicCryptInvalidSalt() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,63,"UnixCrypt.crypt(""secret"", ""$a"");"
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,66,@Test(expected = NullPointerException.class)
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,67,public void testUnixCryptNullData() {
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,68,UnixCrypt.crypt((byte[]) null);
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,71,@Test(expected = IllegalArgumentException.class)
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,72,public void testUnixCryptWithEmptySalt() throws Exception {
True,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java,73,"UnixCrypt.crypt(""secret"", """");"

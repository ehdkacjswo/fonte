is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,148,"ist<Rule> rules = Rule.instance(this.nameType, RuleType.RULES, languageSet);"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,149,"ist<Rule> finalRules1 = Rule.instance(this.nameType, this.ruleType, ""common"");"
False,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,150,"ist<Rule> finalRules2 = Rule.instance(this.nameType, this.ruleType, languageSet);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,148,"final List<Rule> rules = Rule.instance(this.nameType, RuleType.RULES, languageSet);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,149,"final List<Rule> finalRules1 = Rule.instance(this.nameType, this.ruleType, ""common"");"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,150,"final List<Rule> finalRules2 = Rule.instance(this.nameType, this.ruleType, languageSet);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,151,"// System.err.println(""Languages: "" + languageSet);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,152,"// System.err.println(""Rules: "" + rules);"
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,351,if (altEnd < altStart) {
True,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,352,"throw new IllegalArgumentException(""Phonetic string has a close-bracket before the first open-bracket"");"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,30,import java.util.Stack;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,80,"rivate static final String DOUBLE_QUOTE = ""\"""";"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,83,"private static final String DOUBLE_QUOTE = ""\"""";"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,98,"s.put(l, parseRules(mkScanner(s, rt, l)));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,99,try {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,100,"rs.put(l, parseRules(createScanner(s, rt, l)));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,101,} catch (IllegalStateException e) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,102,"throw new IllegalStateException(""Problem processing "" + createResourceName(s, rt, l), e);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,101,"s.put(""common"", parseRules(mkScanner(s, rt, ""common"")));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,106,"rs.put(""common"", parseRules(createScanner(s, rt, ""common"")));"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,116,"private static String createResourceName(NameType nameType, RuleType rt, String lang) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,117,"return String.format(""org/apache/commons/codec/language/bm/%s_%s_%s.txt"", nameType.getName(), rt.getName(), lang);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,120,"private static Scanner createScanner(NameType nameType, RuleType rt, String lang) {"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,121,"String resName = createResourceName(nameType, rt, lang);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,122,InputStream rulesIS = Languages.class.getClassLoader().getResourceAsStream(resName);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,124,if (rulesIS == null) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,125,"throw new IllegalArgumentException(""Unable to load resource: "" + resName);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,128,"return new Scanner(rulesIS, ResourceConstants.ENCODING);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,131,private static Scanner createScanner(String lang) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,132,"String resName = String.format(""org/apache/commons/codec/language/bm/%s.txt"", lang);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,133,InputStream rulesIS = Languages.class.getClassLoader().getResourceAsStream(resName);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,135,if (rulesIS == null) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,136,"throw new IllegalArgumentException(""Unable to load resource: "" + resName);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,139,"return new Scanner(rulesIS, ResourceConstants.ENCODING);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,151,"rivate static Scanner mkScanner(NameType nameType, RuleType rt, String lang) {"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,152,"tring resName = String.format(""org/apache/commons/codec/language/bm/%s_%s_%s.txt"", nameType.getName(), rt.getName(), lang);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,153,nputStream rulesIS = Languages.class.getClassLoader().getResourceAsStream(resName);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,155,f (rulesIS == null) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,156,"hrow new IllegalArgumentException(""Unable to load resource: "" + resName);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,159,"eturn new Scanner(rulesIS, ResourceConstants.ENCODING);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,162,rivate static Scanner mkScanner(String lang) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,163,"tring resName = String.format(""org/apache/commons/codec/language/bm/%s.txt"", lang);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,164,nputStream rulesIS = Languages.class.getClassLoader().getResourceAsStream(resName);
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,166,f (rulesIS == null) {
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,167,"hrow new IllegalArgumentException(""Unable to load resource: "" + resName);"
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,170,"eturn new Scanner(rulesIS, ResourceConstants.ENCODING);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,184,int currentLine = 0;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,188,currentLine++;
False,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,209,ines.addAll(parseRules(mkScanner(incl)));
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,220,lines.addAll(parseRules(createScanner(incl)));
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,232,try {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,233,validatePhenome(ph);
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,234,} catch (IllegalArgumentException e) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,235,"throw new IllegalStateException(""Problem parsing line "" + currentLine, e);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,260,private static void validatePhenome(CharSequence ph) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,261,Stack<Character> stack = new Stack<Character>();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,262,for (int i = 0; i < ph.length(); i++) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,263,switch (ph.charAt(i)) {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,264,case '(':
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,265,stack.push('(');
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,266,break;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,267,case '[':
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,268,stack.push('[');
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,269,break;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,270,case ')': {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,271,if (stack.isEmpty())
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,272,"throw new IllegalArgumentException(""Closing ')' at "" + i + "" without an opening '('"" + "" in "" + ph);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,273,char c = stack.pop();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,274,if (c != '(')
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,275,"throw new IllegalArgumentException(""Closing ')' does not pair with opening '"" + c + ""' at "" + i + "" in "" + ph);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,276,break;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,278,case ']': {
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,279,if (stack.isEmpty())
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,280,"throw new IllegalArgumentException(""Closing ']' at "" + i + "" without an opening '['"" + "" in "" + ph);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,281,char c = stack.pop();
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,282,if (c != '[')
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,283,"throw new IllegalArgumentException(""Closing ']' does not pair with opening '"" + c + ""' at "" + i + "" in "" + ph);"
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,284,break;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,286,default:
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,287,break;
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,290,if (!stack.isEmpty())
True,src/java/org/apache/commons/codec/language/bm/Rule.java,src/java/org/apache/commons/codec/language/bm/Rule.java,291,"throw new IllegalArgumentException(""Bracket(s) opened without corresponding closes: "" + stack + "" in "" + ph);"
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,49,Ignore
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,49,// @Ignore
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,74,Test
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,74,@Test(timeout = 10000L)
False,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,116,Test
True,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,116,@Test(timeout = 10000L)

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,257,            Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4).
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,257,*            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,279,            Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4).
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,279,*            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,305,            Each line of encoded data will be at most of the given length (rounded up to nearest multiple of 4).
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,305,*            Each line of encoded data will be at most of the given length (rounded down to nearest multiple of 4).
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,317,his.lineLength = lineLength;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,317,this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,327,tring sep = StringBytesUtils.newStringUtf8(lineSeparator);
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,327,String sep = StringUtils.newStringUtf8(lineSeparator);
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,672,f (!(pObject instanceof byte[])) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,672,if (pObject instanceof byte[]) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,673,return decode((byte[]) pObject);
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,674,} else {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,675,eturn decode((byte[]) pObject);
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,686,eturn decodeBase64(pArray);
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,687,if (pArray == null || pArray.length == 0) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,688,return pArray;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,690,long len = (pArray.length * 3) / 4;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,691,byte[] buf = new byte[(int) len];
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,692,"setInitialBuffer(buf, 0, buf.length);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,693,"decode(pArray, 0, pArray.length);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,694,"decode(pArray, 0, -1); // Notify decoder of EOF."
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,696,// Would be nice to just return buf (like we sometimes do in the encode
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,697,"// logic), but we have no idea what the line-length was (could even be"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,698,// variable).  So we cannot determine ahead of time exactly how big an
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,699,// array is necessary.  Hence the need to construct a 2nd byte array to
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,700,// hold the final result:
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,702,byte[] result = new byte[pos];
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,703,"readResults(result, 0, result.length);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,704,return result;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,742,"ase64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,743,ong len = (binaryData.length * 4) / 3;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,744,ong mod = len % 4;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,745,f (mod != 0) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,746,en += 4 - mod;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,748,f (isChunked) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,749,oolean lenChunksPerfectly = len % CHUNK_SIZE == 0;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,750,en += (len / CHUNK_SIZE) * CHUNK_SEPARATOR.length;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,751,f (!lenChunksPerfectly) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,752,en += CHUNK_SEPARATOR.length;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,761,"long len = getEncodeLength(binaryData, CHUNK_SIZE, CHUNK_SEPARATOR);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,761,yte[] buf = new byte[(int) len];
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,762,"64.setInitialBuffer(buf, 0, buf.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,763,"64.encode(binaryData, 0, binaryData.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,764,"64.encode(binaryData, 0, -1); // Notify encoder of EOF."
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,765,"/ Encoder might have resized, even though it was unnecessary."
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,766,f (b64.buffer != buf) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,767,"64.readResults(buf, 0, buf.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,769,"/ In URL-SAFE mode we skip the padding characters, so sometimes our"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,770,/ final length is a bit smaller.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,771,f (urlSafe && b64.pos < buf.length) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,772,yte[] smallerBuf = new byte[b64.pos];
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,773,"ystem.arraycopy(buf, 0, smallerBuf, 0, b64.pos);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,774,uf = smallerBuf;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,776,eturn buf;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,769,"Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,770,return b64.encode(binaryData);
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,787,f (base64Data == null || base64Data.length == 0) {
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,788,eturn base64Data;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,791,ong len = (base64Data.length * 3) / 4;
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,792,yte[] buf = new byte[(int) len];
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,793,"64.setInitialBuffer(buf, 0, buf.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,794,"64.decode(base64Data, 0, base64Data.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,795,"64.decode(base64Data, 0, -1); // Notify decoder of EOF."
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,796,"/ We have no idea what the line-length was, so we"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,797,/ cannot know how much of our array wasn't used.
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,798,yte[] result = new byte[b64.pos];
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,799,"64.readResults(result, 0, result.length);"
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,800,eturn result;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,782,return b64.decode(base64Data);
False,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,876,"eturn encodeBase64(pArray, false, isUrlSafe());"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,858,"long len = getEncodeLength(pArray, lineLength, lineSeparator);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,859,byte[] buf = new byte[(int) len];
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,860,"setInitialBuffer(buf, 0, buf.length);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,861,"encode(pArray, 0, pArray.length);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,862,"encode(pArray, 0, -1); // Notify encoder of EOF."
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,863,"// Encoder might have resized, even though it was unnecessary."
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,864,if (buffer != buf) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,865,"readResults(buf, 0, buf.length);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,867,"// In URL-SAFE mode we skip the padding characters, so sometimes our"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,868,// final length is a bit smaller.
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,869,if (isUrlSafe() && pos < buf.length) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,870,byte[] smallerBuf = new byte[pos];
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,871,"System.arraycopy(buf, 0, smallerBuf, 0, pos);"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,872,buf = smallerBuf;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,874,return buf;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,878,* Pre-calculates the amount of space needed to base64-encode the supplied array.
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,880,* @param pArray byte[] array which will later be encoded
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,881,* @param chunkSize line-length of the output (<= 0 means no chunking) between each
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,882,*        chunkSeparator (e.g. CRLF).
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,883,* @param chunkSeparator the sequence of bytes used to separate chunks of output (e.g. CRLF).
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,885,* @return amount of space needed to encoded the supplied array.  Returns
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,886,*         a long since a max-len array will require Integer.MAX_VALUE + 33%.
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,888,"private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {"
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,889,// base64 always encodes to multiples of 4.
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,890,chunkSize = (chunkSize / 4) * 4;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,892,long len = (pArray.length * 4) / 3;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,893,long mod = len % 4;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,894,if (mod != 0) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,895,len += 4 - mod;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,897,if (chunkSize > 0 && chunkSeparator != null) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,898,boolean lenChunksPerfectly = len % chunkSize == 0;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,899,len += (len / chunkSize) * chunkSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,900,if (!lenChunksPerfectly) {
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,901,len += chunkSeparator.length;
True,src/java/org/apache/commons/codec/binary/Base64.java,src/java/org/apache/commons/codec/binary/Base64.java,904,return len;
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,25, Provides Base64 encoding and decoding in a streaming fashion (unlimited size).
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,26, When encoding the default lineLength is 76 characters and the default
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,27," lineEnding is CRLF, but these can be overridden by using the appropriate"
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,25,* Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,26,"* is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate"
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,30," The default behaviour of the Base64InputStream is to DECODE, whereas the"
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,31," default behaviour of the Base64OutputStream is to ENCODE, but this"
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,32, behaviour can be overridden by using a different constructor.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,33, </p><p>
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,29,"* The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream"
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,30,"* is to ENCODE, but this behaviour can be overridden by using a different constructor."
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,31,* </p>
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,32,* <p>
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,36, </p><p>
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,35,* </p>
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,36,* <p>
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,38," character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc)."
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,38,"* character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc)."
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,52, Creates a Base64InputStream such that all data read is Base64-decoded
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,53, from the original provided InputStream.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,55, @param in InputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,55,* Creates a Base64InputStream such that all data read is Base64-decoded from the original provided InputStream.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,57,* @param in
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,58,*            InputStream to wrap.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,62, Creates a Base64InputStream such that all data read is either
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,63, Base64-encoded or Base64-decoded from the original provided InputStream.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,65, @param in       InputStream to wrap.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,66," @param doEncode true if we should encode all data read from us,"
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,67,                 false if we should decode.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,65,* Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,66,* provided InputStream.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,68,* @param in
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,69,*            InputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,70,* @param doEncode
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,71,"*            true if we should encode all data read from us, false if we should decode."
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,76, Creates a Base64InputStream such that all data read is either
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,77, Base64-encoded or Base64-decoded from the original provided InputStream.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,79, @param in            InputStream to wrap.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,80," @param doEncode      true if we should encode all data read from us,"
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,81,                      false if we should decode.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,82," @param lineLength    If doEncode is true, each line of encoded"
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,83,                      data will contain lineLength characters.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,84,"                      If lineLength <=0, the encoded data is not divided into lines."
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,85,"                      If doEncode is false, lineLength is ignored."
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,86," @param lineSeparator If doEncode is true, each line of encoded"
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,87,                      data will be terminated with this byte sequence (e.g. \r\n).
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,88,"                      If lineLength <= 0, the lineSeparator is not used."
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,89,                      If doEncode is false lineSeparator is ignored.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,80,* Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,81,* provided InputStream.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,83,* @param in
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,84,*            InputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,85,* @param doEncode
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,86,"*            true if we should encode all data read from us, false if we should decode."
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,87,* @param lineLength
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,88,"*            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to"
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,89,"*            nearest multiple of 4). If lineLength <=0, the encoded data is not divided into lines. If doEncode is"
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,90,"*            false, lineLength is ignored."
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,91,* @param lineSeparator
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,92,"*            If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \r\n)."
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,93,"*            If lineLength <= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored."
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,100, @return the byte as an integer in the range 0 to 255
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,101, Returns -1 if EOF has been reached.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,104,* @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,105,* @throws IOException
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,106,*             if an I/O error occurs.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,115, Attempts to read <code>len</code> bytes into the specified
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,116, <code>b</code> array starting at <code>offset</code> from
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,117, this InputStream.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,120,* Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,121,* from this InputStream.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,119, @param b destination byte array
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,120, @param offset where to start writing the bytes
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,121, @param len maximum number of bytes to read
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,123,* @param b
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,124,*            destination byte array
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,125,* @param offset
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,126,*            where to start writing the bytes
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,127,* @param len
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,128,*            maximum number of bytes to read
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,124, @throws IOException if an I/O error occurs.
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,125, @throws NullPointerException if the byte array parameter is null
False,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,126," @throws IndexOutOfBoundsException if offset, len or buffer size are invalid"
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,131,* @throws IOException
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,132,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,133,* @throws NullPointerException
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,134,*             if the byte array parameter is null
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,135,* @throws IndexOutOfBoundsException
True,src/java/org/apache/commons/codec/binary/Base64InputStream.java,src/java/org/apache/commons/codec/binary/Base64InputStream.java,136,"*             if offset, len or buffer size are invalid"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,25, Provides Base64 encoding and decoding in a streaming fashion (unlimited size).
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,26, When encoding the default lineLength is 76 characters and the default
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,27," lineEnding is CRLF, but these can be overridden by using the appropriate"
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,25,* Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,26,"* is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,30," The default behaviour of the Base64OutputStream is to ENCODE, whereas the"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,31, default behaviour of the Base64InputStream is to DECODE.  But this behaviour
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,32, can be overridden by using a different constructor.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,33, </p><p>
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,29,"* The default behaviour of the Base64OutputStream is to ENCODE, whereas the default behaviour of the Base64InputStream"
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,30,* is to DECODE. But this behaviour can be overridden by using a different constructor.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,31,* </p>
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,32,* <p>
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,36, </p><p>
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,35,* </p>
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,36,* <p>
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,39, </p>
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,39,* </p>
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,51, Creates a Base64OutputStream such that all data written is Base64-encoded
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,52, to the original provided OutputStream.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,54, @param out OutputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,54,* Creates a Base64OutputStream such that all data written is Base64-encoded to the original provided OutputStream.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,56,* @param out
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,57,*            OutputStream to wrap.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,61, Creates a Base64OutputStream such that all data written is either
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,62, Base64-encoded or Base64-decoded to the original provided OutputStream.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,64, @param out      OutputStream to wrap.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,65," @param doEncode true if we should encode all data written to us,"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,66,                 false if we should decode.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,64,* Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,65,* original provided OutputStream.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,67,* @param out
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,68,*            OutputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,69,* @param doEncode
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,70,"*            true if we should encode all data written to us, false if we should decode."
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,75, Creates a Base64OutputStream such that all data written is either
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,76, Base64-encoded or Base64-decoded to the original provided OutputStream.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,78, @param out           OutputStream to wrap.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,79," @param doEncode      true if we should encode all data written to us,"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,80,                      false if we should decode.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,81," @param lineLength    If doEncode is true, each line of encoded"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,82,                      data will contain lineLength characters.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,83,"                      If lineLength <=0, the encoded data is not divided into lines."
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,84,"                      If doEncode is false, lineLength is ignored."
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,85," @param lineSeparator If doEncode is true, each line of encoded"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,86,                      data will be terminated with this byte sequence (e.g. \r\n).
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,87,"                      If lineLength <= 0, the lineSeparator is not used."
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,88,                      If doEncode is false lineSeparator is ignored.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,79,* Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,80,* original provided OutputStream.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,82,* @param out
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,83,*            OutputStream to wrap.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,84,* @param doEncode
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,85,"*            true if we should encode all data written to us, false if we should decode."
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,86,* @param lineLength
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,87,"*            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to"
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,88,"*            nearest multiple of 4). If lineLength <=0, the encoded data is not divided into lines. If doEncode is"
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,89,"*            false, lineLength is ignored."
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,90,* @param lineSeparator
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,91,"*            If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \r\n)."
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,92,"*            If lineLength <= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored."
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,103,* @param i
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,104,*            source byte
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,105,* @throws IOException
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,106,*             if an I/O error occurs.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,105, Writes <code>len</code> bytes from the specified
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,106, <code>b</code> array starting at <code>offset</code> to
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,107, this output stream.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,109, @param b source byte array
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,110, @param offset where to start reading the bytes
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,111, @param len maximum number of bytes to write
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,114,* Writes <code>len</code> bytes from the specified <code>b</code> array starting at <code>offset</code> to this
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,115,* output stream.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,117,* @param b
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,118,*            source byte array
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,119,* @param offset
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,120,*            where to start reading the bytes
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,121,* @param len
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,122,*            maximum number of bytes to write
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,113, @throws IOException if an I/O error occurs.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,114, @throws NullPointerException if the byte array parameter is null
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,115," @throws IndexOutOfBoundsException if offset, len or buffer size are invalid"
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,124,* @throws IOException
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,125,*             if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,126,* @throws NullPointerException
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,127,*             if the byte array parameter is null
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,128,* @throws IndexOutOfBoundsException
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,129,"*             if offset, len or buffer size are invalid"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,135, Flushes this output stream and forces any buffered output bytes
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,136," to be written out to the stream.  If propogate is true, the wrapped"
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,137, stream will also be flushed.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,139, @param propogate boolean flag to indicate whether the wrapped
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,140,                  OutputStream should also be flushed.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,141, @throws IOException if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,149,* Flushes this output stream and forces any buffered output bytes to be written out to the stream. If propogate is
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,150,"* true, the wrapped stream will also be flushed."
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,152,* @param propogate
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,153,*            boolean flag to indicate whether the wrapped OutputStream should also be flushed.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,154,* @throws IOException
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,155,*             if an I/O error occurs.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,158, Flushes this output stream and forces any buffered output bytes
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,159, to be written out to the stream.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,161, @throws IOException if an I/O error occurs.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,172,* Flushes this output stream and forces any buffered output bytes to be written out to the stream.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,174,* @throws IOException
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,175,*             if an I/O error occurs.
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,164,lush(true);
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,178,flush(true);
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,168, Closes this output stream and releases any system resources
False,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,169, associated with the stream.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,182,* Closes this output stream and releases any system resources associated with the stream.
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,184,* @throws IOException
True,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,src/java/org/apache/commons/codec/binary/Base64OutputStream.java,185,*             if an I/O error occurs.
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,34,ublic class StringBytesUtils {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,34,public class StringUtils {
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,49,"eturn StringBytesUtils.getSupportedBytes(string, CharEncoding.ISO_8859_1);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,49,"return StringUtils.getSupportedBytes(string, CharEncoding.ISO_8859_1);"
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,65,"eturn StringBytesUtils.getSupportedBytes(string, CharEncoding.US_ASCII);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,65,"return StringUtils.getSupportedBytes(string, CharEncoding.US_ASCII);"
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,81,"eturn StringBytesUtils.getSupportedBytes(string, CharEncoding.UTF_16);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,81,"return StringUtils.getSupportedBytes(string, CharEncoding.UTF_16);"
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,97,"eturn StringBytesUtils.getSupportedBytes(string, CharEncoding.UTF_16BE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,97,"return StringUtils.getSupportedBytes(string, CharEncoding.UTF_16BE);"
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,113,"eturn StringBytesUtils.getSupportedBytes(string, CharEncoding.UTF_16LE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,113,"return StringUtils.getSupportedBytes(string, CharEncoding.UTF_16LE);"
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,129,"eturn StringBytesUtils.getSupportedBytes(string, CharEncoding.UTF_8);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,129,"return StringUtils.getSupportedBytes(string, CharEncoding.UTF_8);"
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,155,"hrow StringBytesUtils.newIllegalStateException(charsetName, e);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,155,"throw StringUtils.newIllegalStateException(charsetName, e);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,174,* @return A new <code>String</code> decoded from the specified array of bytes using the given charset.
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,184,"hrow StringBytesUtils.newIllegalStateException(charsetName, e);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,185,"throw StringUtils.newIllegalStateException(charsetName, e);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,194,* @return A new <code>String</code> decoded from the specified array of bytes using the given charset.
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,198,"eturn StringBytesUtils.newString(bytes, CharEncoding.ISO_8859_1);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,200,"return StringUtils.newString(bytes, CharEncoding.ISO_8859_1);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,208,* @return A new <code>String</code> decoded from the specified array of bytes using the given charset.
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,211,"eturn StringBytesUtils.newString(bytes, CharEncoding.US_ASCII);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,214,"return StringUtils.newString(bytes, CharEncoding.US_ASCII);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,222,* @return A new <code>String</code> decoded from the specified array of bytes using the given charset.
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,224,"eturn StringBytesUtils.newString(bytes, CharEncoding.UTF_16);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,228,"return StringUtils.newString(bytes, CharEncoding.UTF_16);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,236,* @return A new <code>String</code> decoded from the specified array of bytes using the given charset.
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,237,"eturn StringBytesUtils.newString(bytes, CharEncoding.UTF_16BE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,242,"return StringUtils.newString(bytes, CharEncoding.UTF_16BE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,250,* @return A new <code>String</code> decoded from the specified array of bytes using the given charset.
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,250,"eturn StringBytesUtils.newString(bytes, CharEncoding.UTF_16LE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,256,"return StringUtils.newString(bytes, CharEncoding.UTF_16LE);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,264,* @return A new <code>String</code> decoded from the specified array of bytes using the given charset.
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,263,"eturn StringBytesUtils.newString(bytes, CharEncoding.UTF_8);"
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,270,"return StringUtils.newString(bytes, CharEncoding.UTF_8);"
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,266,rivate StringBytesUtils() {
False,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,267,"/ noop, cannot instantiate."
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,273,private StringUtils() {
True,src/java/org/apache/commons/codec/binary/StringBytesUtils.java,src/java/org/apache/commons/codec/binary/StringUtils.java,274,"// noop, cannot instantiate. Can always relax later."
False,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,31,mport org.apache.commons.codec.binary.StringBytesUtils;
True,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,31,import org.apache.commons.codec.binary.StringUtils;
False,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,280,"eturn new String(decode(StringBytesUtils.getBytesUsAscii(pString)), charset);"
True,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,280,"return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);"
False,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,385,eturn StringBytesUtils.newStringUsAscii(encode(pString.getBytes(charset)));
True,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java,385,return StringUtils.newStringUsAscii(encode(pString.getBytes(charset)));
False,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,24,mport org.apache.commons.codec.binary.StringBytesUtils;
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,24,import org.apache.commons.codec.binary.StringUtils;
False,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,79,uffer.append(StringBytesUtils.newStringUsAscii(rawdata));
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,79,buffer.append(StringUtils.newStringUsAscii(rawdata));
False,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,128,"yte[] data = StringBytesUtils.getBytesUsAscii(text.substring(from, to));"
True,src/java/org/apache/commons/codec/net/RFC1522Codec.java,src/java/org/apache/commons/codec/net/RFC1522Codec.java,128,"byte[] data = StringUtils.getBytesUsAscii(text.substring(from, to));"
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,31,mport org.apache.commons.codec.binary.StringBytesUtils;
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,31,import org.apache.commons.codec.binary.StringUtils;
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,227,eturn StringBytesUtils.newStringUsAscii(encode(pString.getBytes(charset)));
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,227,return StringUtils.newStringUsAscii(encode(pString.getBytes(charset)));
False,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,268,"eturn new String(decode(StringBytesUtils.getBytesUsAscii(pString)), charset);"
True,src/java/org/apache/commons/codec/net/URLCodec.java,src/java/org/apache/commons/codec/net/URLCodec.java,268,"return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,70,"yte[] encoded = StringBytesUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,71,yte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,70,"byte[] encoded = StringUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,71,byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,75,"ncoded = StringBytesUtils.getBytesUtf8(""AA==\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,75,"encoded = StringUtils.getBytesUtf8(""AA==\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,80,ncoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,80,encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,86,ncoded = StringBytesUtils.getBytesUtf8(singleLine);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,86,encoded = StringUtils.getBytesUtf8(singleLine);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,107,"yte[] encoded = StringBytesUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,108,yte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,107,"byte[] encoded = StringUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,108,byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,112,"ncoded = StringBytesUtils.getBytesUtf8(""AA==\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,112,"encoded = StringUtils.getBytesUtf8(""AA==\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,117,ncoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,117,encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,123,ncoded = StringBytesUtils.getBytesUtf8(singleLine);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,123,encoded = StringUtils.getBytesUtf8(singleLine);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,253,yte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,253,byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,266,yte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,266,byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,282,yte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,282,byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,299,yte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,299,byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,70,"yte[] encoded = StringBytesUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,71,yte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,70,"byte[] encoded = StringUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,71,byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,75,"ncoded = StringBytesUtils.getBytesUtf8(""AA==\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,75,"encoded = StringUtils.getBytesUtf8(""AA==\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,80,ncoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,80,encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,86,ncoded = StringBytesUtils.getBytesUtf8(singleLine);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,86,encoded = StringUtils.getBytesUtf8(singleLine);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,107,"yte[] encoded = StringBytesUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,108,yte[] decoded = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,107,"byte[] encoded = StringUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,108,byte[] decoded = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,112,"ncoded = StringBytesUtils.getBytesUtf8(""AA==\r\n"");"
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,112,"encoded = StringUtils.getBytesUtf8(""AA==\r\n"");"
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,117,ncoded = StringBytesUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,117,encoded = StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);
False,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,123,ncoded = StringBytesUtils.getBytesUtf8(singleLine);
True,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,123,encoded = StringUtils.getBytesUtf8(singleLine);
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,20,mport java.io.UnsupportedEncodingException;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,32,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,70, @throws Exception
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,72,ublic void testChunkedEncodeMultipleOf76() throws Exception {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,70,public void testChunkedEncodeMultipleOf76() {
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,77,"yte[] actualEncode = actualResult.getBytes(""UTF-8"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,75,byte[] actualEncode = StringUtils.getBytesUtf8(actualResult);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,178,public void testConstructor_Int_ByteArray_Boolean() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,179,"Base64 base64 = new Base64(65, new byte[]{'\t'}, false);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,180,byte[] encoded = base64.encode(Base64TestData.DECODED);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,181,String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,182,"expectedResult = expectedResult.replace('\n', '\t');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,183,String result = StringUtils.newStringUtf8(encoded);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,184,"assertEquals(""new Base64(65, \\t, false)"", expectedResult, result);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,187,public void testConstructor_Int_ByteArray_Boolean_UrlSafe() {
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,188,// url-safe variation
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,189,"Base64 base64 = new Base64(64, new byte[]{'\t'}, true);"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,190,byte[] encoded = base64.encode(Base64TestData.DECODED);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,191,String expectedResult = Base64TestData.ENCODED_64_CHARS_PER_LINE;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,192,"expectedResult = expectedResult.replaceAll(""="", """"); // url-safe has no == padding."
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,193,"expectedResult = expectedResult.replace('\n', '\t');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,194,"expectedResult = expectedResult.replace('+', '-');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,195,"expectedResult = expectedResult.replace('/', '_');"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,196,String result = StringUtils.newStringUtf8(encoded);
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,197,"assertEquals(""new Base64(64, \\t, true)"", result, expectedResult);"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,417,yte[] bArray = Base64.encodeBase64(original.getBytes());
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,418,bject o = bArray;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,437,Object o = Base64.encodeBase64(original.getBytes());
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,441,yte[] origBytes = original.getBytes();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,442,bject origObj = origBytes;
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,460,Object origObj = original.getBytes();
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,852, @throws UnsupportedEncodingException
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,853,"             Thrown if ""UTF-8"" character set is not available, not possible according to Java documentation."
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,874,"tandard[0] = StringBytesUtils.getBytesUtf8(""lO2NAxnkSTOZVg+2dATTcA=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,875,"tandard[1] = StringBytesUtils.getBytesUtf8(""K/fMJwH+Q5e0nr7tWsxwkA=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,876,"tandard[2] = StringBytesUtils.getBytesUtf8(""ZL4VS2/6QCWNGgEojnwxyg=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,877,"tandard[3] = StringBytesUtils.getBytesUtf8(""/3+PwBzbRxqMi1qTBhg/6A=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,890,"standard[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg+2dATTcA=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,891,"standard[1] = StringUtils.getBytesUtf8(""K/fMJwH+Q5e0nr7tWsxwkA=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,892,"standard[2] = StringUtils.getBytesUtf8(""ZL4VS2/6QCWNGgEojnwxyg=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,893,"standard[3] = StringUtils.getBytesUtf8(""/3+PwBzbRxqMi1qTBhg/6A=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,881,"rlSafe1[0] = StringBytesUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,882,"rlSafe1[1] = StringBytesUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,883,"rlSafe1[2] = StringBytesUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,884,"rlSafe1[3] = StringBytesUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,897,"urlSafe1[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,898,"urlSafe1[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,899,"urlSafe1[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg=="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,900,"urlSafe1[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A=="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,888,"rlSafe2[0] = StringBytesUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,889,"rlSafe2[1] = StringBytesUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,890,"rlSafe2[2] = StringBytesUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,891,"rlSafe2[3] = StringBytesUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,904,"urlSafe2[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,905,"urlSafe2[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,906,"urlSafe2[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg="");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,907,"urlSafe2[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A="");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,895,"rlSafe3[0] = StringBytesUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,896,"rlSafe3[1] = StringBytesUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,897,"rlSafe3[2] = StringBytesUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,898,"rlSafe3[3] = StringBytesUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,911,"urlSafe3[0] = StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,912,"urlSafe3[1] = StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,913,"urlSafe3[2] = StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg"");"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,914,"urlSafe3[3] = StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A"");"
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,912,"ystem.out.println(""standard:  ["""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,913, new String(Hex.encodeHex(decodedStandard))
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,914," ""] From: ["""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,915, StringBytesUtils.newStringUtf8(standard[i])
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,917,"ystem.out.println(""safe1:     ["""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,918, new String(Hex.encodeHex(decodedUrlSafe1))
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,919," ""] From: ["""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,920, StringBytesUtils.newStringUtf8(urlSafe1[i])
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,922,"ystem.out.println(""safe2:     ["""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,923, new String(Hex.encodeHex(decodedUrlSafe2))
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,924," ""] From: ["""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,925, StringBytesUtils.newStringUtf8(urlSafe2[i])
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,927,"ystem.out.println(""safe3:     ["""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,928, new String(Hex.encodeHex(decodedUrlSafe3))
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,929," ""] From: ["""
False,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,930, StringBytesUtils.newStringUtf8(urlSafe3[i])
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,928,"System.out.println(""standard:  ["" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,929,new String(Hex.encodeHex(decodedStandard)) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,930,"""] From: ["" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,931,StringUtils.newStringUtf8(standard[i]) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,933,"System.out.println(""safe1:     ["" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,934,new String(Hex.encodeHex(decodedUrlSafe1)) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,935,"""] From: ["" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,936,StringUtils.newStringUtf8(urlSafe1[i]) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,938,"System.out.println(""safe2:     ["" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,939,new String(Hex.encodeHex(decodedUrlSafe2)) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,940,"""] From: ["" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,941,StringUtils.newStringUtf8(urlSafe2[i]) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,943,"System.out.println(""safe3:     ["" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,944,new String(Hex.encodeHex(decodedUrlSafe3)) +
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,945,"""] From: ["" +"
True,src/test/org/apache/commons/codec/binary/Base64Test.java,src/test/org/apache/commons/codec/binary/Base64Test.java,946,StringUtils.newStringUtf8(urlSafe3[i]) +
True,src/test/org/apache/commons/codec/binary/Base64TestData.java,src/test/org/apache/commons/codec/binary/Base64TestData.java,28,"* @see <a href=""http://www.ietf.org/rfc/rfc2045.txt"">RFC 2045</a>"
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,30,ublic class StringBytesUtilsTest extends TestCase {
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,30,public class StringUtilsTest extends TestCase {
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,47,yte[] actual = StringBytesUtils.getBytesIso8859_1(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,47,byte[] actual = StringUtils.getBytesIso8859_1(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,55,yte[] actual = StringBytesUtils.getBytesUsAscii(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,55,byte[] actual = StringUtils.getBytesUsAscii(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,63,yte[] actual = StringBytesUtils.getBytesUtf16(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,63,byte[] actual = StringUtils.getBytesUtf16(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,71,yte[] actual = StringBytesUtils.getBytesUtf16Be(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,71,byte[] actual = StringUtils.getBytesUtf16Be(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,79,yte[] actual = StringBytesUtils.getBytesUtf16Le(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,79,byte[] actual = StringUtils.getBytesUtf16Le(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,87,yte[] actual = StringBytesUtils.getBytesUtf8(STRING_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,87,byte[] actual = StringUtils.getBytesUtf8(STRING_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,93,"yte[] actual = StringBytesUtils.getSupportedBytes(STRING_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,93,"byte[] actual = StringUtils.getSupportedBytes(STRING_FIXTURE, charsetName);"
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,99,"tringBytesUtils.getSupportedBytes(STRING_FIXTURE, ""UNKNOWN"");"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,99,"StringUtils.getSupportedBytes(STRING_FIXTURE, ""UNKNOWN"");"
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,108,"tring actual = StringBytesUtils.newString(BYTES_FIXTURE, charsetName);"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,108,"String actual = StringUtils.newString(BYTES_FIXTURE, charsetName);"
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,114,"tringBytesUtils.newString(BYTES_FIXTURE, ""UNKNOWN"");"
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,114,"StringUtils.newString(BYTES_FIXTURE, ""UNKNOWN"");"
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,125,tring actual = StringBytesUtils.newStringIso8859_1(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,125,String actual = StringUtils.newStringIso8859_1(BYTES_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,133,tring actual = StringBytesUtils.newStringUsAscii(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,133,String actual = StringUtils.newStringUsAscii(BYTES_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,141,tring actual = StringBytesUtils.newStringUtf16(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,141,String actual = StringUtils.newStringUtf16(BYTES_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,149,tring actual = StringBytesUtils.newStringUtf16Be(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,149,String actual = StringUtils.newStringUtf16Be(BYTES_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,157,tring actual = StringBytesUtils.newStringUtf16Le(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,157,String actual = StringUtils.newStringUtf16Le(BYTES_FIXTURE);
False,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,165,tring actual = StringBytesUtils.newStringUtf8(BYTES_FIXTURE);
True,src/test/org/apache/commons/codec/binary/StringBytesUtilsTest.java,src/test/org/apache/commons/codec/binary/StringUtilsTest.java,165,String actual = StringUtils.newStringUtf8(BYTES_FIXTURE);

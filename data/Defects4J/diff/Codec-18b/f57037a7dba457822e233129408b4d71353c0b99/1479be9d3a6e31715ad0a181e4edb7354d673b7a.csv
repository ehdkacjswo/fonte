is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,2,* Copyright 2001-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,17,package org.apache.commons.codec.net;
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,19,import org.apache.commons.codec.DecoderException;
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,20,import org.apache.commons.codec.EncoderException;
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,25,* Quoted-printable codec test cases
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,27,"* @author <a href=""mailto:oleg@ural.ru"">Oleg Kalnichevski</a>"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,29,public class BCodecTest extends TestCase {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,31,static final int SWISS_GERMAN_STUFF_UNICODE[] =
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,32,"{ 0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4 };"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,34,static final int RUSSIAN_STUFF_UNICODE[] =
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,35,"{ 0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, 0x432, 0x435, 0x442 };"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,37,public BCodecTest(String name) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,38,super(name);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,41,private String constructString(int[] unicodeChars) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,42,StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,43,if (unicodeChars != null) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,44,for (int i = 0; i < unicodeChars.length; i++) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,45,buffer.append((char) unicodeChars[i]);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,48,return buffer.toString();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,51,public void testUTF8RoundTrip() throws Exception {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,53,String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,54,String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,56,"BCodec bcodec = new BCodec(""UTF-8"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,58,"assertEquals(""=?UTF-8?B?0JLRgdC10Lxf0L/RgNC40LLQtdGC?="", bcodec.encode(ru_msg));"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,59,"assertEquals(""=?UTF-8?B?R3LDvGV6aV96w6Rtw6Q=?="", bcodec.encode(ch_msg));"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,61,"assertEquals(ru_msg, bcodec.decode(bcodec.encode(ru_msg)));"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,62,"assertEquals(ch_msg, bcodec.decode(bcodec.encode(ch_msg)));"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,65,public void testBasicEncodeDecode() throws Exception {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,66,BCodec bcodec = new BCodec();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,67,"String plain = ""Hello there"";"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,68,String encoded = bcodec.encode(plain);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,69,"assertEquals(""Basic B encoding test"", ""=?UTF-8?B?SGVsbG8gdGhlcmU=?="", encoded);"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,70,"assertEquals(""Basic B decoding test"", plain, bcodec.decode(encoded));"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,73,public void testEncodeDecodeNull() throws Exception {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,74,BCodec bcodec = new BCodec();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,75,"assertNull(""Null string B encoding test"", bcodec.encode((String) null));"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,76,"assertNull(""Null string B decoding test"", bcodec.decode((String) null));"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,79,public void testDecodeInvalid() throws Exception {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,80,BCodec bcodec = new BCodec();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,81,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,82,"bcodec.decode(""whatever"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,83,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,84,} catch (DecoderException e) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,85,// Expected. Move on
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,87,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,88,"bcodec.decode(""=?UTF-8?B?stuff"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,89,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,90,} catch (DecoderException e) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,91,// Expected. Move on
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,93,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,94,"bcodec.decode(""=??B?stuff?="");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,95,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,96,} catch (DecoderException e) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,97,// Expected. Move on
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,99,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,100,"bcodec.decode(""=?UTF-8??stuff?="");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,101,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,102,} catch (DecoderException e) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,103,// Expected. Move on
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,105,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,106,"bcodec.decode(""=?UTF-8?W?stuff?="");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,107,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,108,} catch (DecoderException e) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,109,// Expected. Move on
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,113,public void testEncodeStringWithNull() throws Exception {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,114,BCodec bcodec = new BCodec();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,115,String test = null;
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,116,"String result = bcodec.encode(test, ""charset"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,117,"assertEquals(""Result should be null"", null, result);"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,120,public void testDecodeStringWithNull() throws Exception {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,121,BCodec bcodec = new BCodec();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,122,String test = null;
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,123,String result = bcodec.decode(test);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,124,"assertEquals(""Result should be null"", null, result);"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,127,public void testEncodeObjects() throws Exception {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,128,BCodec bcodec = new BCodec();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,129,"String plain = ""what not"";"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,130,String encoded = (String) bcodec.encode((Object) plain);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,132,"assertEquals(""Basic B encoding test"", ""=?UTF-8?B?d2hhdCBub3Q=?="", encoded);"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,134,Object result = bcodec.encode((Object) null);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,135,"assertEquals(""Encoding a null Object should return null"", null, result);"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,137,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,138,Object dObj = new Double(3.0);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,139,bcodec.encode(dObj);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,140,"fail(""Trying to url encode a Double object should cause an exception."");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,141,} catch (EncoderException ee) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,142,"// Exception expected, test segment passes."
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,146,public void testInvalidEncoding() {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,147,"BCodec bcodec = new BCodec(""NONSENSE"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,148,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,149,"bcodec.encode(""Hello there!"");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,150,"fail(""We set the encoding to a bogus NONSENSE value, this shouldn't have worked."");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,151,} catch (EncoderException ee) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,152,"// Exception expected, test segment passes."
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,154,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,155,"bcodec.decode(""=?NONSENSE?Q?Hello there!?="");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,156,"fail(""We set the encoding to a bogus NONSENSE value, this shouldn't have worked."");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,157,} catch (DecoderException ee) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,158,"// Exception expected, test segment passes."
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,162,public void testDecodeObjects() throws Exception {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,163,BCodec bcodec = new BCodec();
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,164,"String decoded = ""=?UTF-8?B?d2hhdCBub3Q=?="";"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,165,String plain = (String) bcodec.decode((Object) decoded);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,166,"assertEquals(""Basic B decoding test"", ""what not"", plain);"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,168,Object result = bcodec.decode((Object) null);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,169,"assertEquals(""Decoding a null Object should return null"", null, result);"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,171,try {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,172,Object dObj = new Double(3.0);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,173,bcodec.decode(dObj);
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,174,"fail(""Trying to url encode a Double object should cause an exception."");"
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,175,} catch (DecoderException ee) {
True,src/test/org/apache/commons/codec/net/BCodecTest.java,src/test/org/apache/commons/codec/net/BCodecTest.java,176,"// Exception expected, test segment passes."
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,2,* Copyright 2001-2004 The Apache Software Foundation.
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,18,package org.apache.commons.codec.net;
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,20,import org.apache.commons.codec.DecoderException;
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,21,import org.apache.commons.codec.EncoderException;
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,23,import junit.framework.TestCase;
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,26,* Quoted-printable codec test cases
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,28,"* @author <a href=""mailto:oleg@ural.ru"">Oleg Kalnichevski</a>"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,30,public class QCodecTest extends TestCase {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,32,static final int SWISS_GERMAN_STUFF_UNICODE [] = {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,33,"0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,36,static final int RUSSIAN_STUFF_UNICODE [] = {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,37,"0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438,"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,38,"0x432, 0x435, 0x442"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,41,public QCodecTest(String name) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,42,super(name);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,45,private String constructString(int [] unicodeChars) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,46,StringBuffer buffer = new StringBuffer();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,47,if (unicodeChars != null) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,48,for (int i = 0; i < unicodeChars.length; i++) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,49,buffer.append((char)unicodeChars[i]);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,52,return buffer.toString();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,55,public void testUTF8RoundTrip() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,57,String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,58,String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,60,"QCodec qcodec = new QCodec(""UTF-8"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,62,assertEquals(
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,63,"""=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?="","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,64,qcodec.encode(ru_msg)
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,66,"assertEquals(""=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?="", qcodec.encode(ch_msg));"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,68,"assertEquals(ru_msg, qcodec.decode(qcodec.encode(ru_msg)));"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,69,"assertEquals(ch_msg, qcodec.decode(qcodec.encode(ch_msg)));"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,73,public void testBasicEncodeDecode() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,74,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,75,"String plain = ""= Hello there =\r\n"";"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,76,String encoded = qcodec.encode(plain);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,77,"assertEquals(""Basic Q encoding test"","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,78,"""=?UTF-8?Q?=3D Hello there =3D=0D=0A?="", encoded);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,79,"assertEquals(""Basic Q decoding test"","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,80,"plain, qcodec.decode(encoded));"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,83,public void testUnsafeEncodeDecode() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,84,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,85,"String plain = ""?_=\r\n"";"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,86,String encoded = qcodec.encode(plain);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,87,"assertEquals(""Unsafe chars Q encoding test"","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,88,"""=?UTF-8?Q?=3F=5F=3D=0D=0A?="", encoded);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,89,"assertEquals(""Unsafe chars Q decoding test"","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,90,"plain, qcodec.decode(encoded));"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,93,public void testEncodeDecodeNull() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,94,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,95,"assertNull(""Null string Q encoding test"","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,96,qcodec.encode((String)null));
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,97,"assertNull(""Null string Q decoding test"","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,98,qcodec.decode((String)null));
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,101,public void testDecodeInvalid() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,102,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,103,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,104,"qcodec.decode(""whatever"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,105,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,106,} catch(DecoderException e) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,107,// Expected. Move on
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,109,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,110,"qcodec.decode(""=?UTF-8?Q?stuff"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,111,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,112,} catch(DecoderException e) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,113,// Expected. Move on
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,115,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,116,"qcodec.decode(""=??Q?stuff?="");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,117,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,118,} catch(DecoderException e) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,119,// Expected. Move on
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,121,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,122,"qcodec.decode(""=?UTF-8??stuff?="");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,123,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,124,} catch(DecoderException e) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,125,// Expected. Move on
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,127,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,128,"qcodec.decode(""=?UTF-8?W?stuff?="");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,129,"fail(""DecoderException should have been thrown"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,130,} catch(DecoderException e) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,131,// Expected. Move on
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,135,public void testEncodeStringWithNull() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,136,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,137,String test = null;
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,138,"String result = qcodec.encode( test, ""charset"" );"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,139,"assertEquals(""Result should be null"", null, result);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,142,public void testDecodeStringWithNull() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,143,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,144,String test = null;
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,145,String result = qcodec.decode( test );
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,146,"assertEquals(""Result should be null"", null, result);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,150,public void testEncodeObjects() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,151,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,152,"String plain = ""1+1 = 2"";"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,153,String encoded = (String) qcodec.encode((Object) plain);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,154,"assertEquals(""Basic Q encoding test"","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,155,"""=?UTF-8?Q?1+1 =3D 2?="", encoded);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,157,Object result = qcodec.encode((Object) null);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,158,"assertEquals( ""Encoding a null Object should return null"", null, result);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,160,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,161,Object dObj = new Double(3.0);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,162,qcodec.encode( dObj );
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,163,"fail( ""Trying to url encode a Double object should cause an exception."");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,164,} catch( EncoderException ee ) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,165,"// Exception expected, test segment passes."
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,170,public void testInvalidEncoding() {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,171,"QCodec qcodec = new QCodec(""NONSENSE"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,172,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,173,"qcodec.encode(""Hello there!"");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,174,"fail( ""We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,175,} catch( EncoderException ee ) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,176,"// Exception expected, test segment passes."
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,178,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,179,"qcodec.decode(""=?NONSENSE?Q?Hello there!?="");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,180,"fail( ""We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked."");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,181,} catch( DecoderException ee ) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,182,"// Exception expected, test segment passes."
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,186,public void testDecodeObjects() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,187,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,188,"String decoded = ""=?UTF-8?Q?1+1 =3D 2?="";"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,189,String plain = (String) qcodec.decode((Object) decoded);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,190,"assertEquals(""Basic Q decoding test"","
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,191,"""1+1 = 2"", plain);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,193,Object result = qcodec.decode((Object) null);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,194,"assertEquals( ""Decoding a null Object should return null"", null, result);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,196,try {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,197,Object dObj = new Double(3.0);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,198,qcodec.decode( dObj );
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,199,"fail( ""Trying to url encode a Double object should cause an exception."");"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,200,} catch( DecoderException ee ) {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,201,"// Exception expected, test segment passes."
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,206,public void testEncodeDecodeBlanks() throws Exception {
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,207,"String plain = ""Mind those pesky blanks"";"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,208,"String encoded1 = ""=?UTF-8?Q?Mind those pesky blanks?="";"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,209,"String encoded2 = ""=?UTF-8?Q?Mind_those_pesky_blanks?="";"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,210,QCodec qcodec = new QCodec();
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,211,qcodec.setEncodeBlanks(false);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,212,String s = qcodec.encode(plain);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,213,"assertEquals(""Blanks encoding with the Q codec test"", encoded1, s);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,214,qcodec.setEncodeBlanks(true);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,215,s = qcodec.encode(plain);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,216,"assertEquals(""Blanks encoding with the Q codec test"", encoded2, s);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,217,s = qcodec.decode(encoded1);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,218,"assertEquals(""Blanks decoding with the Q codec test"", plain, s);"
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,219,s = qcodec.decode(encoded2);
True,src/test/org/apache/commons/codec/net/QCodecTest.java,src/test/org/apache/commons/codec/net/QCodecTest.java,220,"assertEquals(""Blanks decoding with the Q codec test"", plain, s);"

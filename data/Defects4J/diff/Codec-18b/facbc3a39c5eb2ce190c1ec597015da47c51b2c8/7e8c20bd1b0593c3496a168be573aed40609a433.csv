is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,135,"his.engine = new PhoneticEngine(this.engine.getNameType(), this.engine.getRuleType(), concat);"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,135,"this.engine = new PhoneticEngine(this.engine.getNameType(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,136,"this.engine.getRuleType(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,137,"concat,"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,138,this.engine.getMaxPhonemes());
False,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,146,"his.engine = new PhoneticEngine(nameType, this.engine.getRuleType(), this.engine.isConcat());"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,149,"this.engine = new PhoneticEngine(nameType,"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,150,"this.engine.getRuleType(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,151,"this.engine.isConcat(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,152,this.engine.getMaxPhonemes());
False,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,156,"his.engine = new PhoneticEngine(this.engine.getNameType(), ruleType, this.engine.isConcat());"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,162,"this.engine = new PhoneticEngine(this.engine.getNameType(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,163,"ruleType,"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,164,"this.engine.isConcat(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,165,this.engine.getMaxPhonemes());
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,169,* Sets the number of maximum of phonemes that shall be considered by the engine.
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,171,* @param maxPhonemes
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,172,*            the maximum number of phonemes returned by the engine
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,174,public void setMaxPhonemes(int maxPhonemes) {
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,175,"this.engine = new PhoneticEngine(this.engine.getNameType(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,176,"this.engine.getRuleType(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,177,"this.engine.isConcat(),"
True,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java,178,maxPhonemes);
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,104,* @param maxPhonemes   the maximum number of phonemes to build up
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,107,ublic PhonemeBuilder apply(Rule.PhonemeExpr phonemeExpr) {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,108,"public PhonemeBuilder apply(Rule.PhonemeExpr phonemeExpr, int maxPhonemes) {"
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,110,or (Rule.Phoneme left : this.phonemes) {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,111,EXPR: for (Rule.Phoneme left : this.phonemes) {
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,114,ewPhonemes.add(join);
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,115,if (newPhonemes.size() < maxPhonemes) {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,116,newPhonemes.add(join);
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,117,} else {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,118,break EXPR;
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,176,private int maxPhonemes;
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,173,"ublic RulesApplication(List<Rule> finalRules, CharSequence input, PhonemeBuilder phonemeBuilder, int i) {"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,179,"public RulesApplication(List<Rule> finalRules, CharSequence input,"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,180,"PhonemeBuilder phonemeBuilder, int i, int maxPhonemes) {"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,188,this.maxPhonemes = maxPhonemes;
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,211,his.phonemeBuilder = this.phonemeBuilder.apply(rule.getPhoneme());
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,219,"this.phonemeBuilder = this.phonemeBuilder.apply(rule.getPhoneme(), maxPhonemes);"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,300,private static final int DEFAULT_MAX_PHONEMES = 20;
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,310,private final int maxPhonemes;
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,323,"this(nameType, ruleType, concat, DEFAULT_MAX_PHONEMES);"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,327,"* Generates a new, fully-configured phonetic engine."
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,329,* @param nameType
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,330,*            the type of names it will use
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,331,* @param ruleType
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,332,*            the type of rules it will apply
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,333,* @param concat
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,334,*            if it will concatenate multiple encodings
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,335,* @param maxPhonemes
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,336,*            the maximum number of phonemes that will be handled
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,338,"public PhoneticEngine(NameType nameType, RuleType ruleType, boolean concat, int maxPhonemes) {"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,346,this.maxPhonemes = maxPhonemes;
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,344,"ulesApplication rulesApplication = new RulesApplication(finalRules, phonemeText, subBuilder, i).invoke();"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,373,RulesApplication rulesApplication =
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,374,"new RulesApplication(finalRules, phonemeText, subBuilder, i, maxPhonemes).invoke();"
False,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,462,"ulesApplication rulesApplication = new RulesApplication(rules, inputCache, phonemeBuilder, i).invoke();"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,492,RulesApplication rulesApplication =
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,493,"new RulesApplication(rules, inputCache, phonemeBuilder, i, maxPhonemes).invoke();"
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,544,* Gets the maximum number of phonemes the engine will calculate for a given input.
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,546,* @return the maximum number of phonemes
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,548,public int getMaxPhonemes() {
True,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java,549,return this.maxPhonemes;
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,22,import static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,63,"mpm.encode("""" + c);"
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,64,bmpm.encode(Character.toString(c));
False,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,71,"inal String value = """" + c;"
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,72,final String value = Character.toString(c);
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,141,@Test
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,142,public void testOOM() throws EncoderException {
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,143,"String phrase = ""200697900'-->&#1913348150;</  bceaeef >aadaabcf\""aedfbff<!--\'-->?>cae"""
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,144,"+ ""cfaaa><?&#<!--</script>&lang&fc;aadeaf?>>&bdquo<    cc =\""abff\""    /></   afe  >"""
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,145,"+ ""<script><!-- f(';<    cf aefbeef = \""bfabadcf\"" ebbfeedd = fccabeb >"";"
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,147,BeiderMorseEncoder encoder = new BeiderMorseEncoder();
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,148,encoder.setNameType(NameType.GENERIC);
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,149,encoder.setRuleType(RuleType.EXACT);
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,150,encoder.setMaxPhonemes(10);
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,152,String phonemes = encoder.encode(phrase);
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,153,assertTrue(phonemes.length() > 0);
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,155,"String[] phonemeArr = phonemes.split(""\\|"");"
True,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,src/test/java/org/apache/commons/codec/language/bm/BeiderMorseEncoderTest.java,156,assertTrue(phonemeArr.length <= 10);
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,21,import static org.junit.Assert.assertTrue;
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,41,asList(new Object[] {
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,42,"Renault"","
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,43,"rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"","
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,44,"ameType.GENERIC,"
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,45,"uleType.APPROX,"
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,46,"rue },"
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,47,"ew Object[] { ""Renault"", ""rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult"", NameType.ASHKENAZI, RuleType.APPROX, true },"
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,48,"ew Object[] { ""Renault"", ""rinDlt"", NameType.SEPHARDIC, RuleType.APPROX, true },"
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,49,"ew Object[] { ""SntJohn-Smith"", ""sntjonsmit"", NameType.GENERIC, RuleType.EXACT, true },"
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,50,"ew Object[] { ""d'ortley"", ""(ortlaj|ortlej)-(dortlaj|dortlej)"", NameType.GENERIC, RuleType.EXACT, true },"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,42,".asList(new Object[] { ""Renault"", ""rinD|rinDlt|rina|rinalt|rino|rinolt|rinu|rinult"", NameType.GENERIC, RuleType.APPROX, true, 10 },"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,43,"new Object[] { ""Renault"", ""rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult"", NameType.ASHKENAZI, RuleType.APPROX, true, 10 },"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,44,"new Object[] { ""Renault"", ""rYnDlt"", NameType.ASHKENAZI, RuleType.APPROX, true, 1 },"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,45,"new Object[] { ""Renault"", ""rinDlt"", NameType.SEPHARDIC, RuleType.APPROX, true, 10 },"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,46,"new Object[] { ""SntJohn-Smith"", ""sntjonsmit"", NameType.GENERIC, RuleType.EXACT, true, 10 },"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,47,"new Object[] { ""d'ortley"", ""(ortlaj|ortlej)-(dortlaj|dortlej)"", NameType.GENERIC, RuleType.EXACT, true, 10 },"
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,56,alse });
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,53,"false, 10 });"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,61,private final int maxPhonemes;
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,65,"ublic PhoneticEngineTest(String name, String phoneticExpected, NameType nameType, RuleType ruleType, boolean concat) {"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,63,"public PhoneticEngineTest(String name, String phoneticExpected, NameType nameType,"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,64,"RuleType ruleType, boolean concat, int maxPhonemes) {"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,70,this.maxPhonemes = maxPhonemes;
False,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,75,"honeticEngine engine = new PhoneticEngine(this.nameType, this.ruleType, this.concat);"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,75,"PhoneticEngine engine = new PhoneticEngine(this.nameType, this.ruleType, this.concat, this.maxPhonemes);"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,83,if (this.concat) {
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,84,"String[] split = phoneticActual.split(""\\|"");"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,85,assertTrue(split.length <= this.maxPhonemes);
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,86,} else {
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,87,"String[] words = phoneticActual.split(""-"");"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,88,for (String word : words) {
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,89,"String[] split = word.split(""\\|"");"
True,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineTest.java,90,assertTrue(split.length <= this.maxPhonemes);

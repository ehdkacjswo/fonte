is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,1,package org.jsoup.helper;
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,3,import java.util.ArrayList;
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,4,import java.util.Collection;
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,7,* Implementation of ArrayList that watches out for changes to the contents.
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,9,public abstract class ChangeNotifyingArrayList<E> extends ArrayList<E> {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,10,public ChangeNotifyingArrayList(int initialCapacity) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,11,super(initialCapacity);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,14,public abstract void onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,16,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,17,"public E set(int index, E element) {"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,18,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,19,"return super.set(index, element);"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,22,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,23,public boolean add(E e) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,24,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,25,return super.add(e);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,28,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,29,"public void add(int index, E element) {"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,30,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,31,"super.add(index, element);"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,34,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,35,public E remove(int index) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,36,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,37,return super.remove(index);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,40,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,41,public boolean remove(Object o) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,42,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,43,return super.remove(o);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,46,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,47,public void clear() {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,48,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,49,super.clear();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,52,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,53,public boolean addAll(Collection<? extends E> c) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,54,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,55,return super.addAll(c);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,58,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,59,"public boolean addAll(int index, Collection<? extends E> c) {"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,60,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,61,"return super.addAll(index, c);"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,64,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,65,"protected void removeRange(int fromIndex, int toIndex) {"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,66,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,67,"super.removeRange(fromIndex, toIndex);"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,70,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,71,public boolean removeAll(Collection<?> c) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,72,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,73,return super.removeAll(c);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,76,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,77,public boolean retainAll(Collection<?> c) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,78,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,79,return super.retainAll(c);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,17,import java.lang.ref.SoftReference;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,39,private SoftReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,210,eturn children().get(index);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,212,return childElementsList().get(index);
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,218," @return child elements. If this element has no children, returns an"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,219, empty list.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,220,"* @return child elements. If this element has no children, returns an empty list."
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,223,"/ create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,224,ist<Element> elements = new ArrayList<Element>(childNodes.size());
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,225,or (Node node : childNodes) {
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,226,f (node instanceof Element)
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,227,lements.add((Element) node);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,224,return new Elements(childElementsList());
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,228,"* Maintains a shadow copy of this element's child elements. If the nodelist is changed, this cache is invalidated."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,229,* TODO - think about pulling this out as a helper as there are other shadow lists (like in Attributes) kept around.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,230,* @return a list of child elements
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,232,private List<Element> childElementsList() {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,233,List<Element> children;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,234,if (shadowChildrenRef == null || (children = shadowChildrenRef.get()) == null) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,235,children = new ArrayList<Element>(childNodes.size());
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,236,for (Node node : childNodes) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,237,if (node instanceof Element)
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,238,children.add((Element) node);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,240,shadowChildrenRef = new SoftReference<List<Element>>(children);
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,229,eturn new Elements(elements);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,242,return children;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,246,* Clears the cached shadow child elements.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,248,@Override
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,249,void nodelistChanged() {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,250,super.nodelistChanged();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,251,shadowChildrenRef = null;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,392,* Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,393,"* right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,395,"* @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,396,* end
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,397,* @param children child nodes to insert
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,398,"* @return this element, for chaining."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,400,"public Element insertChildren(int index, Node... children) {"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,401,"Validate.notNull(children, ""Children collection to be inserted must not be null."");"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,402,int currentSize = childNodeSize();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,403,if (index < 0) index += currentSize +1; // roll around
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,404,"Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,406,"addChildren(index, children);"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,407,return this;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,556,ist<Element> elements = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,597,List<Element> elements = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,575,ist<Element> siblings = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,616,List<Element> siblings = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,591,ist<Element> siblings = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,632,List<Element> siblings = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,606,ist<Element> siblings = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,647,List<Element> siblings = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,617,"eturn indexInList(this, parent().children());"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,658,"return indexInList(this, parent().childElementsList());"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,625,ist<Element> siblings = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,666,List<Element> siblings = parent().childElementsList();
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,4,import org.jsoup.helper.ChangeNotifyingArrayList;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,400,void nodelistChanged() {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,401,// Element overrides this to clear its shadow children elements
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,415,Validate.notNull(parentNode);
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,459,hildNodes = new ArrayList<Node>(4);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,465,childNodes = new NodeList(4);
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,668,lone.childNodes = new ArrayList<Node>(childNodes.size());
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,674,clone.childNodes = new NodeList(childNodes.size());
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,710,private final class NodeList extends ChangeNotifyingArrayList<Node> {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,711,NodeList(int initialCapacity) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,712,super(initialCapacity);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,715,public void onContentsChanged() {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,716,nodelistChanged();
False,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,753,"iv2.insertChildren(0, null);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,753,"div2.insertChildren(0, (Collection<? extends Node>) null);"
False,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1005,ublic void testChildrenElements() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1005,@Test public void testChildrenElements() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1034,@Test public void testShadowElementsAreUpdated() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1035,"String html = ""<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>"";"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1036,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1037,"Element div = doc.select(""div"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1038,Elements els = div.children();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1039,List<Node> nodes = div.childNodes();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1041,"assertEquals(2, els.size()); // the two Ps"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1042,"assertEquals(3, nodes.size()); // the ""Three"" textnode"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1044,"Element p3 = new Element(""p"").text(""P3"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1045,"Element p4 = new Element(""p"").text(""P4"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1046,"div.insertChildren(1, p3);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1047,"div.insertChildren(3, p4);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1048,Elements els2 = div.children();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1050,// first els should not have changed
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1051,"assertEquals(2, els.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1052,"assertEquals(4, els2.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1054,"assertEquals(""<p><a>One</a></p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1055,"""<p>P3</p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1056,"""<p><a>Two</a></p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1057,"""<p>P4</p>Three"", div.html());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1058,"assertEquals(""P3"", els2.get(1).text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1059,"assertEquals(""P4"", els2.get(3).text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1061,"p3.after(""<span>Another</span"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1063,Elements els3 = div.children();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1064,"assertEquals(5, els3.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1065,"assertEquals(""span"", els3.get(2).tagName());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1066,"assertEquals(""Another"", els3.get(2).text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1068,"assertEquals(""<p><a>One</a></p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1069,"""<p>P3</p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1070,"""<span>Another</span>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1071,"""<p><a>Two</a></p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1072,"""<p>P4</p>Three"", div.html());"

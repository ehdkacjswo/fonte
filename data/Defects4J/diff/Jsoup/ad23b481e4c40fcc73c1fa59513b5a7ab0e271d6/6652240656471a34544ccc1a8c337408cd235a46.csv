is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,1,package org.jsoup.select;
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,3,import org.jsoup.nodes.Node;
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,6,* Node filter interface. Provide an implementing class to {@link NodeTraversor} to iterate through nodes.
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,7,* <p>
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,8,"* This interface provides two methods, {@code head} and {@code tail}. The head method is called when the node is first"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,9,"* seen, and the tail method when all of the node's children have been visited. As an example, head can be used to"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,10,"* create a start tag for a node, and tail to create the end tag."
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,11,* </p>
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,12,* <p>
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,13,"* For every node, the filter has to decide whether to"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,14,* <ul>
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,15,"* <li>continue ({@link FilterResult#CONTINUE}),</li>"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,16,"* <li>skip all children ({@link FilterResult#SKIP_CHILDREN}),</li>"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,17,"* <li>skip node entirely ({@link FilterResult#SKIP_ENTIRELY}),</li>"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,18,"* <li>remove the subtree ({@link FilterResult#REMOVE}),</li>"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,19,* <li>interrupt the iteration and return ({@link FilterResult#STOP}).</li>
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,20,* </ul>
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,21,* The difference between {@link FilterResult#SKIP_CHILDREN} and {@link FilterResult#SKIP_ENTIRELY} is that the first
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,22,"* will invoke {@link NodeFilter#tail(Node, int)} on the node, while the latter will not."
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,23,"* Within {@link NodeFilter#tail(Node, int)}, both are equivalent to {@link FilterResult#CONTINUE}."
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,24,* </p>
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,26,public interface NodeFilter {
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,28,* Filter decision.
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,30,public enum FilterResult {
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,31,/** Continue processing the tree */
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,32,"CONTINUE,"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,33,"/** Skip the child nodes, but do call {@link NodeFilter#tail(Node, int)} next. */"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,34,"SKIP_CHILDREN,"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,35,"/** Skip the subtree, and do not call {@link NodeFilter#tail(Node, int)}. */"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,36,"SKIP_ENTIRELY,"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,37,/** Remove the node and its children */
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,38,"REMOVE,"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,39,/** Stop processing */
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,40,STOP
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,44,* Callback for when a node is first visited.
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,45,* @param node the node being visited.
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,46,"* @param depth the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1."
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,47,* @return Filter decision
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,49,"FilterResult head(Node node, int depth);"
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,52,"* Callback for when a node is last visited, after all of its descendants have been visited."
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,53,* @param node the node being visited.
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,54,"* @param depth the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node of that will have depth 1."
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,55,* @return Filter decision
True,src/main/java/org/jsoup/select/NodeFilter.java,src/main/java/org/jsoup/select/NodeFilter.java,57,"FilterResult tail(Node node, int depth);"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,3,import org.jsoup.helper.Validate;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,4,import org.jsoup.nodes.Element;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,6,import org.jsoup.select.NodeFilter.FilterResult;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,74,* Start a depth-first filtering of the root and all of its descendants.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,75,* @param filter Node visitor.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,76,* @param root the root node point to traverse.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,77,"* @return The filter result of the root node, or {@link FilterResult#STOP}."
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,79,"public static FilterResult filter(NodeFilter filter, Node root) {"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,80,Node node = root;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,81,int depth = 0;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,83,while (node != null) {
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,84,"FilterResult result = filter.head(node, depth);"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,85,if (result == FilterResult.STOP)
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,86,return result;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,87,// Descend into child nodes:
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,88,if (result == FilterResult.CONTINUE && node.childNodeSize() > 0) {
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,89,node = node.childNode(0);
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,90,++depth;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,91,continue;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,93,"// No siblings, move upwards:"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,94,while (node.nextSibling() == null && depth > 0) {
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,95,// 'tail' current node:
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,96,if (result == FilterResult.CONTINUE || result == FilterResult.SKIP_CHILDREN) {
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,97,"result = filter.tail(node, depth);"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,98,if (result == FilterResult.STOP)
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,99,return result;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,101,Node prev = node; // In case we need to remove it below.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,102,node = node.parentNode();
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,103,depth--;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,104,if (result == FilterResult.REMOVE)
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,105,prev.remove(); // Remove AFTER finding parent.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,106,result = FilterResult.CONTINUE; // Parent was not pruned.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,108,"// 'tail' current node, then proceed with siblings:"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,109,if (result == FilterResult.CONTINUE || result == FilterResult.SKIP_CHILDREN) {
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,110,"result = filter.tail(node, depth);"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,111,if (result == FilterResult.STOP)
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,112,return result;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,114,if (node == root)
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,115,return result;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,116,Node prev = node; // In case we need to remove it below.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,117,node = node.nextSibling();
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,118,if (result == FilterResult.REMOVE)
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,119,prev.remove(); // Remove AFTER finding sibling.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,121,// root == null?
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,122,return FilterResult.CONTINUE;
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,126,* Start a depth-first filtering of all elements.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,127,* @param filter Node filter.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,128,* @param elements Elements to filter.
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,130,"public static void filter(NodeFilter filter, Elements elements) {"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,131,Validate.notNull(filter);
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,132,Validate.notNull(elements);
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,133,for (Element el : elements)
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,134,"if (filter(filter, el) == FilterResult.STOP)"
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,135,break;

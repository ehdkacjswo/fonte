is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,20, <p>
False,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,21," The Connection interface is <b>currently in beta</b> and subject to change. Comments, suggestions, and bug reports are welcome."
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,60,"* Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed,"
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,61,* and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,62,* only by your patience and the memory available on your machine).
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,63,* @param bytes number of bytes to read from the input before truncating
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,64,"* @return this Connection, for chaining"
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,66,public Connection maxBodySize(int bytes);
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,353,"* Get the maximum body size, in milliseconds."
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,354,"* @return the maximum body size, in milliseconds."
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,356,public int maxBodySize();
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,359,"* Update the maximum body size, in milliseconds."
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,360,"* @param bytes maximum body size, in milliseconds."
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,361,"* @return this Request, for chaining"
True,src/main/java/org/jsoup/Connection.java,src/main/java/org/jsoup/Connection.java,363,public Request maxBodySize(int bytes);
False,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,108,tatic ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,109,* Read the input stream into a byte buffer.
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,110,* @param inStream the input stream to read from
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,111,* @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,112,* @return the filled byte buffer
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,113,* @throws IOException if an exception occurs whilst reading from the input stream.
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,115,"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {"
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,116,"Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");"
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,117,final boolean capped = maxSize > 0;
False,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,112,hile(true) {
False,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,113,ead  = inStream.read(buffer);
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,121,int remaining = maxSize;
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,123,while (true) {
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,124,read = inStream.read(buffer);
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,126,if (capped) {
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,127,if (read > remaining) {
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,128,"outStream.write(buffer, 0, remaining);"
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,129,break;
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,131,remaining -= read;
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,139,static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,140,"return readToByteBuffer(inStream, 0);"
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,71,public Connection maxBodySize(int bytes) {
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,72,req.maxBodySize(bytes);
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,73,return this;
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,301,private int maxBodySizeBytes;
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,310,maxBodySizeBytes = 1024 * 1024; // 1MB
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,328,public int maxBodySize() {
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,329,return maxBodySizeBytes;
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,332,public Connection.Request maxBodySize(int bytes) {
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,333,"Validate.isTrue(bytes >= 0, ""maxSize must be 0 (unlimited) or larger"");"
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,334,maxBodySizeBytes = bytes;
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,335,return this;
False,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,447,es.byteData = DataUtil.readToByteBuffer(bodyStream);
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,464,"res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,7,mport org.jsoup.select.Collector;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,8,mport org.jsoup.select.Elements;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,9,mport org.jsoup.select.Evaluator;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,10,mport org.jsoup.select.Selector;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,7,import org.jsoup.select.*;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,170," @return the child element, if it exists, or {@code null} if absent."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,167,"* @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,261, @param child node to add. Must not already have a parent.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,258,* @param child node to add.
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,274, @param child node to add. Must not already have a parent.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,271,* @param child node to add.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,283,* Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,284,"* right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,286,"* @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,287,* end
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,288,* @param children child nodes to insert
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,289,"* @return this element, for chaining."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,291,"public Element insertChildren(int index, Collection<? extends Node> children) {"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,292,"Validate.notNull(children, ""Children collection to be inserted must not be null."");"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,293,int currentSize = childNodeSize();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,294,if (index < 0) index += currentSize +1; // roll around
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,295,"Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,297,ArrayList<Node> nodes = new ArrayList<Node>(children);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,298,Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,299,"addChildren(index, nodeArray);"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,300,return this;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,799,tringBuilder sb = new StringBuilder();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,800,ext(sb);
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,801,eturn sb.toString().trim();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,818,final StringBuilder accum = new StringBuilder();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,819,new NodeTraversor(new NodeVisitor() {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,820,"public void head(Node node, int depth) {"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,821,if (node instanceof TextNode) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,822,TextNode textNode = (TextNode) node;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,823,"appendNormalisedText(accum, textNode);"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,824,} else if (node instanceof Element) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,825,Element element = (Element) node;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,826,if (accum.length() > 0 &&
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,827,"(element.isBlock() || element.tag.getName().equals(""br"")) &&"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,828,!TextNode.lastCharIsWhitespace(accum))
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,829,"accum.append("" "");"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,804,rivate void text(StringBuilder accum) {
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,805,"ppendWhitespaceIfBr(this, accum);"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,807,or (Node child : childNodes) {
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,808,f (child instanceof TextNode) {
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,809,extNode textNode = (TextNode) child;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,810,"ppendNormalisedText(accum, textNode);"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,811, else if (child instanceof Element) {
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,812,lement element = (Element) child;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,813,f (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,814,"ccum.append("" "");"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,815,lement.text(accum);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,833,"public void tail(Node node, int depth) {"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,835,}).traverse(this);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,836,return accum.toString().trim();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,848,"rivate void appendNormalisedText(StringBuilder accum, TextNode textNode) {"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,867,"private static void appendNormalisedText(StringBuilder accum, TextNode textNode) {"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,851,f (!preserveWhitespace()) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,870,if (!preserveWhitespace(textNode.parent())) {
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,864,oolean preserveWhitespace() {
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,865,eturn tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,883,static boolean preserveWhitespace(Node node) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,884,"// looks only at this element and one level up, to prevent recursion & needless stack searches"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,885,if (node != null && node instanceof Element) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,886,Element element = (Element) node;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,887,return element.tag.preserveWhitespace() ||
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,888,element.parent() != null && element.parent().tag.preserveWhitespace();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,890,return false;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1116,lone.classNames(); // creates linked set of class names from class attribute
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1141,"clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames"
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,199,et a child node by index
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,199,Get a child node by its 0-based index.
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,201,return the child node at this index.
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,201,@return the child node at this index. Throws a {@code IndexOutOfBoundsException} if the index is out of bounds.
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,213,"/ actually returns the real list, as this method is hit many times during selection, and so is a GC time-sink"
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,214,/ leaving the documentation as is (warning of unmodifiability) to discourage out-of-API modifications
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,215,eturn childNodes;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,213,return Collections.unmodifiableList(childNodes);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,217,* Returns a deep copy of this node's children. Changes made to these nodes will not be reflected in the original
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,218,* nodes
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,219,* @return a deep copy of this node's children
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,221,public List<Node> childNodesCopy() {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,222,List<Node> children = new ArrayList<Node>(childNodes.size());
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,223,for (Node node : childNodes) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,224,children.add(node.clone());
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,226,return children;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,230,* Get the number of child nodes that this node holds.
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,231,* @return the number of child nodes that this node holds.
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,233,public final int childNodeSize() {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,234,return childNodes.size();
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,219,eturn childNodes.toArray(new Node[childNodes().size()]);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,238,return childNodes.toArray(new Node[childNodeSize()]);
False,src/main/java/org/jsoup/nodes/TextNode.java,src/main/java/org/jsoup/nodes/TextNode.java,94,f (out.prettyPrint() && parent() instanceof Element && !((Element) parent()).preserveWhitespace()) {
True,src/main/java/org/jsoup/nodes/TextNode.java,src/main/java/org/jsoup/nodes/TextNode.java,94,if (out.prettyPrint() && parent() instanceof Element && !Element.preserveWhitespace((Element) parent())) {
False,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,667,or (int si = 0; si < stack.size(); si++) {
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,667,"// the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents"
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,668,// run-aways
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,669,for (int si = 0; si < stack.size() && si < 64; si++) {
False,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,724,ode[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodes().size()]);
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,726,Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,109,* Parse a fragment of XML into a list of nodes.
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,111,* @param fragmentXml the fragment of XML to parse
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,112,"* @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs."
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,113,* @return list of nodes parsed from the input XML.
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,115,"public static List<Node> parseXmlFragment(String fragmentXml, String baseUri) {"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,116,XmlTreeBuilder treeBuilder = new XmlTreeBuilder();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,117,"return treeBuilder.parseFragment(fragmentXml, baseUri, ParseErrorList.noTracking());"
True,src/main/java/org/jsoup/parser/TokeniserState.java,src/main/java/org/jsoup/parser/TokeniserState.java,287,r.unconsume();
True,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,7,import java.util.List;
True,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,121,"List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors) {"
True,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,122,"initialiseParse(inputFragment, baseUri, errors);"
True,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,123,runParser();
True,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,src/main/java/org/jsoup/parser/XmlTreeBuilder.java,124,return doc.childNodes();
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,39,* Creates a deep copy of these elements.
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,40,* @return a deep copy
False,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,458,"return The first matched element, or <code>null</code> if contents is empty;"
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,462,"@return The first matched element, or <code>null</code> if contents is empty."
False,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,31,f (node.childNodes().size() > 0) {
True,src/main/java/org/jsoup/select/NodeTraversor.java,src/main/java/org/jsoup/select/NodeTraversor.java,31,if (node.childNodeSize() > 0) {
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,225,@Test
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,226,public void maxBodySize() throws IOException {
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,227,"String url = ""http://direct.infohound.net/tools/large.html""; // 280 K"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,229,Connection.Response defaultRes = Jsoup.connect(url).execute();
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,230,Connection.Response smallRes = Jsoup.connect(url).maxBodySize(50 * 1024).execute(); // crops
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,231,Connection.Response mediumRes = Jsoup.connect(url).maxBodySize(200 * 1024).execute(); // crops
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,232,Connection.Response largeRes = Jsoup.connect(url).maxBodySize(300 * 1024).execute(); // does not crop
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,233,Connection.Response unlimitedRes = Jsoup.connect(url).maxBodySize(0).execute();
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,235,int actualString = 280735;
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,236,"assertEquals(actualString, defaultRes.body().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,237,"assertEquals(50 * 1024, smallRes.body().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,238,"assertEquals(200 * 1024, mediumRes.body().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,239,"assertEquals(actualString, largeRes.body().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,240,"assertEquals(actualString, unlimitedRes.body().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,242,int actualDocText = 269541;
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,243,"assertEquals(actualDocText, defaultRes.parse().text().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,244,"assertEquals(49165, smallRes.parse().text().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,245,"assertEquals(196577, mediumRes.parse().text().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,246,"assertEquals(actualDocText, largeRes.parse().text().length());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,247,"assertEquals(actualDocText, unlimitedRes.parse().text().length());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,5,import org.jsoup.helper.StringUtil;
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,6,import org.jsoup.parser.Tag;
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,12,import java.util.ArrayList;
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,477,@Test public void testClonesClassnames() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,478,"Document doc = Jsoup.parse(""<div class='one two'></div>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,479,"Element div = doc.select(""div"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,480,Set<String> classes = div.classNames();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,481,"assertEquals(2, classes.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,482,"assertTrue(classes.contains(""one""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,483,"assertTrue(classes.contains(""two""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,485,Element copy = div.clone();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,486,Set<String> copyClasses = copy.classNames();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,487,"assertEquals(2, copyClasses.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,488,"assertTrue(copyClasses.contains(""one""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,489,"assertTrue(copyClasses.contains(""two""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,490,"copyClasses.add(""three"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,491,"copyClasses.remove(""one"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,493,"assertTrue(classes.contains(""one""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,494,"assertFalse(classes.contains(""three""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,495,"assertFalse(copyClasses.contains(""one""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,496,"assertTrue(copyClasses.contains(""three""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,498,"assertEquals("""", div.html());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,499,"assertEquals("""", copy.html());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,571,@Test public void testChildThrowsIndexOutOfBoundsOnMissing() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,572,"Document doc = Jsoup.parse(""<div><p>One</p><p>Two</p></div>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,573,"Element div = doc.select(""div"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,575,"assertEquals(2, div.children().size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,576,"assertEquals(""One"", div.child(0).text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,578,try {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,579,div.child(3);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,580,"fail(""Should throw index out of bounds"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,581,} catch (IndexOutOfBoundsException e) {}
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,584,@Test
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,585,public void moveByAppend() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,586,// test for https://github.com/jhy/jsoup/issues/239
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,587,// can empty an element and append its children to another element
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,588,"Document doc = Jsoup.parse(""<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,589,"Element div1 = doc.select(""div"").get(0);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,590,"Element div2 = doc.select(""div"").get(1);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,592,"assertEquals(4, div1.childNodeSize());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,593,List<Node> children = div1.childNodes();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,594,"assertEquals(4, children.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,596,"div2.insertChildren(0, children);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,598,"assertEquals(0, children.size()); // children is backed by div1.childNodes, moved, so should be 0 now"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,599,"assertEquals(0, div1.childNodeSize());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,600,"assertEquals(4, div2.childNodeSize());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,601,"assertEquals(""<div id=\""1\""></div>\n<div id=\""2\"">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>"","
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,602,doc.body().html());
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,605,@Test
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,606,public void insertChildrenArgumentValidation() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,607,"Document doc = Jsoup.parse(""<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,608,"Element div1 = doc.select(""div"").get(0);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,609,"Element div2 = doc.select(""div"").get(1);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,610,List<Node> children = div1.childNodes();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,612,try {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,613,"div2.insertChildren(6, children);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,614,fail();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,615,} catch (IllegalArgumentException e) {}
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,617,try {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,618,"div2.insertChildren(-5, children);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,619,fail();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,620,} catch (IllegalArgumentException e) {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,623,try {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,624,"div2.insertChildren(0, null);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,625,fail();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,626,} catch (IllegalArgumentException e) {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,630,@Test
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,631,public void insertChildrenAtPosition() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,632,"Document doc = Jsoup.parse(""<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,633,"Element div1 = doc.select(""div"").get(0);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,634,"Elements p1s = div1.select(""p"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,635,"Element div2 = doc.select(""div"").get(1);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,637,"assertEquals(2, div2.childNodeSize());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,638,"div2.insertChildren(-1, p1s);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,639,"assertEquals(2, div1.childNodeSize()); // moved two out"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,640,"assertEquals(4, div2.childNodeSize());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,641,"assertEquals(3, p1s.get(1).siblingIndex()); // should be last"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,643,List<Node> els = new ArrayList<Node>();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,644,"Element el1 = new Element(Tag.valueOf(""span""), """").text(""Span1"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,645,"Element el2 = new Element(Tag.valueOf(""span""), """").text(""Span2"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,646,"TextNode tn1 = new TextNode(""Text4"", """");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,647,els.add(el1);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,648,els.add(el2);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,649,els.add(tn1);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,651,assertNull(el1.parent());
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,652,"div2.insertChildren(-2, els);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,653,"assertEquals(div2, el1.parent());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,654,"assertEquals(7, div2.childNodeSize());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,655,"assertEquals(3, el1.siblingIndex());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,656,"assertEquals(4, el2.siblingIndex());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,657,"assertEquals(5, tn1.siblingIndex());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,660,@Test
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,661,public void insertChildrenAsCopy() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,662,"Document doc = Jsoup.parse(""<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,663,"Element div1 = doc.select(""div"").get(0);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,664,"Element div2 = doc.select(""div"").get(1);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,665,"Elements ps = doc.select(""p"").clone();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,666,"ps.first().text(""One cloned"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,667,"div2.insertChildren(-1, ps);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,669,"assertEquals(4, div1.childNodeSize()); // not moved -- cloned"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,670,"assertEquals(2, div2.childNodeSize());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,671,"assertEquals(""<div id=\""1\"">Text <p>One</p> Text <p>Two</p></div><div id=\""2\""><p>One cloned</p><p>Two</p></div>"","
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,672,TextUtil.stripNewlines(doc.body().html()));
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,86,@Test public void handleAbsOnFileUris() {
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,87,"Document doc = Jsoup.parse(""<a href='password'>One/a><a href='/var/log/messages'>Two</a>"", ""file:/etc/"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,88,"Element one = doc.select(""a"").first();"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,89,"assertEquals(""file:/etc/password"", one.absUrl(""href""));"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,90,"Element two = doc.select(""a"").get(1);"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,91,"assertEquals(""file:/var/log/messages"", two.absUrl(""href""));"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,94,@Test
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,95,public void handleAbsOnLocalhostFileUris() {
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,96,"Document doc = Jsoup.parse(""<a href='password'>One/a><a href='/var/log/messages'>Two</a>"", ""file://localhost/etc/"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,97,"Element one = doc.select(""a"").first();"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,98,"assertEquals(""file://localhost/etc/password"", one.absUrl(""href""));"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,226,@Test public void childNodesCopy() {
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,227,"Document doc = Jsoup.parse(""<div id=1>Text 1 <p>One</p> Text 2 <p>Two<p>Three</div><div id=2>"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,228,"Element div1 = doc.select(""#1"").first();"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,229,"Element div2 = doc.select(""#2"").first();"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,230,List<Node> divChildren = div1.childNodesCopy();
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,231,"assertEquals(5, divChildren.size());"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,232,TextNode tn1 = (TextNode) div1.childNode(0);
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,233,TextNode tn2 = (TextNode) divChildren.get(0);
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,234,"tn2.text(""Text 1 updated"");"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,235,"assertEquals(""Text 1 "", tn1.text());"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,236,"div2.insertChildren(-1, divChildren);"
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,237,"assertEquals(""<div id=\""1\"">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\""2\"">Text 1 updated"""
True,src/test/java/org/jsoup/nodes/NodeTest.java,src/test/java/org/jsoup/nodes/NodeTest.java,238,"+""<p>One</p> Text 2 <p>Two</p><p>Three</p></div>"", TextUtil.stripNewlines(doc.body().html()));"
False,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,287,"ssertEquals(1, div.childNodes().size()); // no elements, one text node"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,287,"assertEquals(1, div.childNodeSize()); // no elements, one text node"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,746,@Test public void handlesTagsInTextarea() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,747,"String html = ""<textarea><p>Jsoup</p></textarea>"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,748,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,749,"assertEquals(""<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,7,import org.jsoup.nodes.Element;
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,8,import org.jsoup.nodes.Node;
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,9,import org.jsoup.nodes.TextNode;
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,18,import java.util.List;
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,110,@Test public void xmlFragment() {
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,111,"String xml = ""<one src='/foo/' />Two<three><four /></three>"";"
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,112,"List<Node> nodes = Parser.parseXmlFragment(xml, ""http://example.com/"");"
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,113,"assertEquals(3, nodes.size());"
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,115,"assertEquals(""http://example.com/foo/"", nodes.get(0).absUrl(""src""));"
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,116,"assertEquals(""one"", nodes.get(0).nodeName());"
True,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,117,"assertEquals(""Two"", ((TextNode)nodes.get(1)).text());"
False,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,179,"ssertEquals(0, cleanDoc.body().childNodes().size());"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,179,"assertEquals(0, cleanDoc.body().childNodeSize());"

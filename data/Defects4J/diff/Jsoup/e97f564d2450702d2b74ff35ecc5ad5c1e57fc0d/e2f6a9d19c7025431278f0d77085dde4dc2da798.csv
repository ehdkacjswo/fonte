is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,11,rivate Element head;
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,12,rivate Element body;
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,16,"uper(new StartTag(Tag.valueOf(""html"")));"
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,17,"ead = new Element (new StartTag(Tag.valueOf(""head"")));"
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,18,"ody = new Element (new StartTag(Tag.valueOf(""body"")));"
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,20,his.addChild(head);
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,21,his.addChild(body);
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,14,"super(new StartTag(Tag.valueOf(""#root"")));"
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,25,eturn head;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,18,"return getElementsByTag(""head"").get(0);"
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,29,eturn body;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,22,"return getElementsByTag(""body"").get(0);"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,33,@Override
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,34,public String outerHtml() {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,35,return super.html(); // no outer wrapper tag
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,7,mport java.util.regex.Matcher;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,8,mport java.util.regex.Pattern;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,35,tack.add(doc.getHead());
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,61,/ TODO: this puts comments into nodes that should not hold the (e.g. img).
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,58,// TODO: this puts comments into nodes that should not hold them (e.g. img).
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,86,lement closed = popStackToClose(tag);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,83,popStackToClose(tag);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,105,oolean emptyTag;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,106,"f (tq.matchChomp(""/>"")) { // empty tag, don't add to stack"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,107,mptyTag = true;
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,108, else {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,109,"q.matchChomp("">""); // safe because checked above (or ran out of data)"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,110,mptyTag = false;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,102,"if (!tq.matchChomp(""/>"")) { // close empty element or tag"
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,103,"tq.matchChomp("">"");"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,124,"/ switch between html, head, body, to preserve doc structure"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,125,f (tag.equals(htmlTag)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,126,oc.getAttributes().mergeAttributes(attributes);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,127, else if (tag.equals(headTag)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,128,oc.getHead().getAttributes().mergeAttributes(attributes);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,129,"/ head is on stack from start, no action required"
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,130, else if (last().getTag().equals(headTag) && !headTag.canContain(tag)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,131,/ switch to body
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,132,tack.removeLast();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,133,tack.addLast(doc.getBody());
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,134,ast().addChild(child);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,135,f (!emptyTag)
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,136,tack.addLast(child);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,137, else if (tag.equals(bodyTag) && last().getTag().equals(htmlTag)) {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,138,oc.getBody().getAttributes().mergeAttributes(attributes);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,139,tack.removeLast();
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,140,tack.addLast(doc.getBody());
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,141, else {
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,142,lement parent = popStackToSuitableContainer(tag);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,143,arent.addChild(child);
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,144,f (!emptyTag && !tag.isData()) // TODO: only check for data here because last() == head is wrong; should be ancestor is head
False,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,145,tack.addLast(child);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,116,addChildToParent(child);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,156,private Element addChildToParent(Element child) {
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,157,Element parent = popStackToSuitableContainer(child.getTag());
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,158,Tag childTag = child.getTag();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,159,boolean validAncestor = stackHasValidParent(childTag);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,161,if (!validAncestor) {
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,162,// create implicit parent around this child
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,163,Tag parentTag = childTag.getImplicitParent();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,164,StartTag parentStart = new StartTag(parentTag);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,165,Element implicit = new Element(parentStart);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,166,// special case: make sure there's a head before putting in body
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,167,if (child.getTag().equals(bodyTag)) {
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,168,Element head = new Element(new StartTag(headTag));
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,169,implicit.addChild(head);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,171,implicit.addChild(child);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,173,// recurse to ensure somewhere to put parent
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,174,Element root = addChildToParent(implicit);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,175,stack.addLast(child);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,176,return root;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,179,parent.addChild(child);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,180,stack.addLast(child);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,181,return parent;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,184,private boolean stackHasValidParent(Tag childTag) {
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,185,if (stack.size() == 1 && childTag.equals(htmlTag))
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,186,return true; // root is valid for html node
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,188,for (int i = stack.size() -1; i > 0; i--) { // not all the way to end
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,189,Element el = stack.get(i);
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,190,Tag parent2 = el.getTag();
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,191,if (parent2.isValidParent(childTag)) {
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,192,return true;
True,src/main/java/org/jsoup/parser/Parser.java,src/main/java/org/jsoup/parser/Parser.java,195,return false;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,5,mport java.util.HashMap;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,6,mport java.util.Map;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,5,import java.util.*;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,14,private static final Tag defaultAncestor;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,15,static {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,16,"defaultAncestor = new Tag(""BODY"", true, true, true, false, false);"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,17,"tags.put(defaultAncestor.tagName, defaultAncestor);"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,26,private List<Tag> ancestors;
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,76,/ TODO: the optional closing may need more context to decide?
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,78,f (this.empty)
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,82,if (this.empty || this.isData())
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,115,public Tag getImplicitParent() {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,116,return (!ancestors.isEmpty()) ? ancestors.get(0) : null;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,119,public boolean isValidParent(Tag child) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,120,if (child.ancestors.isEmpty())
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,121,return true; // HTML tag
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,123,for (Tag tag : child.ancestors) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,124,if (this.equals(tag))
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,125,return true;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,127,return false;
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,169,// document
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,170,"createBlock(""HTML"").setAncestor(null); // specific includes not impl"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,171,"createBlock(""HEAD"").setAncestor(""HTML""); // specific includes not impl: SCRIPT, STYLE, META, LINK, OBJECT"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,172,"createBlock(""BODY"").setAncestor(""HTML""); // specific includes not impl"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,174,// head
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,175,"// all ancestors set to (head, body): so implicitly create head, but allow in body"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,176,"createInline(""SCRIPT"").setAncestor(""HEAD"", ""BODY"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,177,"createInline(""STYLE"").setAncestor(""HEAD"", ""BODY"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,178,"createInline(""META"").setAncestor(""HEAD"", ""BODY"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,179,"createBlock(""LINK"").setAncestor(""HEAD"", ""BODY"").setEmpty(); // only within head"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,180,"createInline(""OBJECT"").setAncestor(""HEAD"", ""BODY""); // flow (block/inline) or param"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,181,"createInline(""TITLE"").setAncestor(""HEAD"", ""BODY"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,182,"createInline(""BASE"").setAncestor(""HEAD"", ""BODY"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,172,"reateInline(""OBJECT""); // flow (block/inline) or param"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,174,"reateInline(""SCRIPT"").setContainDataOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,197,"reateBlock(""DL"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,201,"reateBlock(""FORM"").setOptionalClosing(); // can't contian self"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,203,"reateBlock(""TABLE""); // specific list of only includes (tr, td, thead etc) not implemented"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,204,"reateBlock(""FIELDSET"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,209,"reateInline(""INPUT"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,210,"reateInline(""SELECT""); // just optgroup or option"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,211,"reateInline(""TEXTAREA"").setContainDataOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,212,"reateInline(""LABEL"").setOptionalClosing(); // not self"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,213,"reateInline(""BUTTON""); // bunch of excludes not defined"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,214,"reateInline(""OPTGROUP""); // only in select, only contain option"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,215,"reateInline(""OPTION"").setContainDataOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,216,"reateInline(""LEGEND""); // only within fieldset (implicit?)"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,218,/ document
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,219,"reateBlock(""HTML""); // specific includes not impl"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,220,"reateBlock(""HEAD""); // specific includes not impl: SCRIPT, STYLE, META, LINK, OBJECT"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,221,"reateBlock(""BODY""); // specific includes not impl"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,239,"createBlock(""FORM"").setOptionalClosing(); // can't contian self"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,240,"createInline(""INPUT"").setAncestor(""FORM"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,241,"createInline(""SELECT"").setAncestor(""FORM""); // just contain optgroup or option"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,242,"createInline(""TEXTAREA"").setAncestor(""FORM"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,243,"createInline(""LABEL"").setAncestor(""FORM"").setOptionalClosing(); // not self"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,244,"createInline(""BUTTON"").setAncestor(""FORM""); // bunch of excludes not defined"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,245,"createInline(""OPTGROUP"").setAncestor(""SELECT""); //  only contain option"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,246,"createInline(""OPTION"").setAncestor(""SELECT"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,247,"createBlock(""FIELDSET"").setAncestor(""FORM"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,248,"createInline(""LEGEND"").setAncestor(""FIELDSET"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,225,"reateBlock(""LINK"").setEmpty(); // only within head"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,226,"reateInline(""PARAM"").setEmpty(); // only within object"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,252,"createInline(""PARAM"").setAncestor(""OBJECT"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,230,"reateInline(""DT"").setOptionalClosing(); // only within DL. Prolly should create implicit DL?"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,231,"reateInline(""DD"").setOptionalClosing(); // only within DL. Prolly should create implicit DL?"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,233,"reateBlock(""LI"").setOptionalClosing(); // only within OL or UL. Implicit?"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,256,"createBlock(""DL"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,257,"createInline(""DT"").setAncestor(""DL"").setOptionalClosing(); // only within DL."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,258,"createInline(""DD"").setAncestor(""DL"").setOptionalClosing(); // only within DL."
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,260,"createBlock(""LI"").setAncestor(""UL"", ""OL"").setOptionalClosing(); // only within OL or UL."
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,238,"reateInline(""CAPTION"");"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,239,"reateInline(""THEAD"").setOptionalClosing(); // just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,240,"reateInline(""TFOOT"").setOptionalClosing(); // just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,241,"reateInline(""TBODY"").setOptionalClosing(); // optional / implicit open too. just TR"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,242,"reateInline(""COLGROUP"").setOptionalClosing(); // just COL"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,243,"reateInline(""COL"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,244,"reateInline(""TR"").setOptionalClosing(); // just TH, TD"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,245,"reateBlock(""TD"").setOptionalClosing();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,247,/ head
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,248,"reateInline(""TITLE"").setContainDataOnly();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,249,"reateInline(""BASE"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,250,"reateInline(""META"").setEmpty();"
False,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,251,"reateInline(""STYLE"").setContainDataOnly();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,263,"createBlock(""TABLE""); // specific list of only includes (tr, td, thead etc) not implemented"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,264,"createBlock(""CAPTION"").setAncestor(""TABLE"");"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,265,"createBlock(""THEAD"").setAncestor(""TABLE"").setOptionalClosing(); // just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,266,"createBlock(""TFOOT"").setAncestor(""TABLE"").setOptionalClosing(); // just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,267,"createBlock(""TBODY"").setAncestor(""TABLE"").setOptionalClosing(); // optional / implicit open too. just TR"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,268,"createBlock(""COLGROUP"").setAncestor(""TABLE"").setOptionalClosing(); // just COL"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,269,"createBlock(""COL"").setAncestor(""COLGROUP"").setEmpty();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,270,"createBlock(""TR"").setAncestor(""TABLE"").setOptionalClosing(); // just TH, TD"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,271,"createBlock(""TH"").setAncestor(""TR"").setOptionalClosing();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,272,"createBlock(""TD"").setAncestor(""TR"").setOptionalClosing();"
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,284,tag.setAncestor(defaultAncestor.tagName);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,315,private Tag setAncestor(String... tagNames) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,316,if (tagNames == null) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,317,ancestors = Collections.emptyList();
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,318,} else {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,319,ancestors = new ArrayList<Tag>(tagNames.length);
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,320,for (String name : tagNames) {
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,321,ancestors.add(Tag.valueOf(name));
True,src/main/java/org/jsoup/parser/Tag.java,src/main/java/org/jsoup/parser/Tag.java,324,return this;
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,25,lement p = doc.child(1).child(0);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,25,Element p = doc.getBody().child(0);
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,37,lement p = doc.child(1).child(0);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,37,Element p = doc.getBody().child(0);
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,46,lement body = doc.child(1);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,46,Element body = doc.getBody();
False,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,92,"ssertEquals(2, doc.children().size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,92,"assertEquals(1, doc.children().size()); // root node: contains html node"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,93,"assertEquals(2, doc.child(0).children().size()); // html node: head and body"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,119,@Test public void createsImplicitLists() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,120,"String h = ""<li>Point one<li>Point two"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,121,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,122,"Elements ol = doc.select(""ul""); // should have created a default ul."
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,123,"assertEquals(1, ol.size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,124,"assertEquals(2, ol.get(0).children().size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,126,// no fiddling with non-implicit lists
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,127,"String h2 = ""<ol><li><p>Point the first<li><p>Point the second"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,128,Document doc2 = Jsoup.parse(h2);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,130,"assertEquals(0, doc2.select(""ul"").size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,131,"assertEquals(1, doc2.select(""ol"").size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,132,"assertEquals(2, doc2.select(""ol li"").size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,133,"assertEquals(2, doc2.select(""ol li p"").size());"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,134,"assertEquals(1, doc2.select(""ol li"").get(0).children().size()); // one p in first li"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,137,@Test public void createsImplicitTable() {
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,138,"String h = ""<td>Hello<td><p>There<p>now"";"
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,139,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/ParserTest.java,src/test/java/org/jsoup/parser/ParserTest.java,140,"assertEquals(""<table><tr><td>Hello</td><td><p>There</p><p>now</p></td></tr></table>"", doc.getBody().html());"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,1,package org.jsoup.helper;
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,3,import java.util.ArrayList;
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,4,import java.util.Collection;
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,7,* Implementation of ArrayList that watches out for changes to the contents.
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,9,public abstract class ChangeNotifyingArrayList<E> extends ArrayList<E> {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,10,public ChangeNotifyingArrayList(int initialCapacity) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,11,super(initialCapacity);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,14,public abstract void onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,16,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,17,"public E set(int index, E element) {"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,18,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,19,"return super.set(index, element);"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,22,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,23,public boolean add(E e) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,24,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,25,return super.add(e);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,28,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,29,"public void add(int index, E element) {"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,30,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,31,"super.add(index, element);"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,34,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,35,public E remove(int index) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,36,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,37,return super.remove(index);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,40,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,41,public boolean remove(Object o) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,42,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,43,return super.remove(o);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,46,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,47,public void clear() {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,48,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,49,super.clear();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,52,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,53,public boolean addAll(Collection<? extends E> c) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,54,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,55,return super.addAll(c);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,58,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,59,"public boolean addAll(int index, Collection<? extends E> c) {"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,60,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,61,"return super.addAll(index, c);"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,64,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,65,"protected void removeRange(int fromIndex, int toIndex) {"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,66,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,67,"super.removeRange(fromIndex, toIndex);"
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,70,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,71,public boolean removeAll(Collection<?> c) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,72,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,73,return super.removeAll(c);
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,76,@Override
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,77,public boolean retainAll(Collection<?> c) {
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,78,onContentsChanged();
True,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,src/main/java/org/jsoup/helper/ChangeNotifyingArrayList.java,79,return super.retainAll(c);
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,7,import org.jsoup.select.Elements;
False,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,104,"lement meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();"
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,105,"Elements metaElements = doc.select(""meta[http-equiv=content-type], meta[charset]"");"
False,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,106,f (meta != null) {
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,107,for (Element meta : metaElements) {
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,114,if (foundCharset != null) {
True,src/main/java/org/jsoup/helper/DataUtil.java,src/main/java/org/jsoup/helper/DataUtil.java,115,break;
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,666,req.requestBody(null);
True,src/main/java/org/jsoup/helper/HttpConnection.java,src/main/java/org/jsoup/helper/HttpConnection.java,667,req.removeHeader(CONTENT_TYPE);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,17,import java.lang.ref.SoftReference;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,41,private SoftReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,212,eturn children().get(index);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,214,return childElementsList().get(index);
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,220," @return child elements. If this element has no children, returns an"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,221, empty list.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,222,"* @return child elements. If this element has no children, returns an empty list."
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,225,"/ create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,226,ist<Element> elements = new ArrayList<Element>(childNodes.size());
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,227,or (Node node : childNodes) {
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,228,f (node instanceof Element)
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,229,lements.add((Element) node);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,226,return new Elements(childElementsList());
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,230,"* Maintains a shadow copy of this element's child elements. If the nodelist is changed, this cache is invalidated."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,231,* TODO - think about pulling this out as a helper as there are other shadow lists (like in Attributes) kept around.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,232,* @return a list of child elements
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,234,private List<Element> childElementsList() {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,235,List<Element> children;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,236,if (shadowChildrenRef == null || (children = shadowChildrenRef.get()) == null) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,237,children = new ArrayList<Element>(childNodes.size());
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,238,for (Node node : childNodes) {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,239,if (node instanceof Element)
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,240,children.add((Element) node);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,242,shadowChildrenRef = new SoftReference<List<Element>>(children);
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,231,eturn new Elements(elements);
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,244,return children;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,248,* Clears the cached shadow child elements.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,250,@Override
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,251,void nodelistChanged() {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,252,super.nodelistChanged();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,253,shadowChildrenRef = null;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,394,* Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,395,"* right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,397,"* @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,398,* end
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,399,* @param children child nodes to insert
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,400,"* @return this element, for chaining."
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,402,"public Element insertChildren(int index, Node... children) {"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,403,"Validate.notNull(children, ""Children collection to be inserted must not be null."");"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,404,int currentSize = childNodeSize();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,405,if (index < 0) index += currentSize +1; // roll around
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,406,"Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,408,"addChildren(index, children);"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,409,return this;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,558,ist<Element> elements = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,599,List<Element> elements = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,577,ist<Element> siblings = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,618,List<Element> siblings = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,593,ist<Element> siblings = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,634,List<Element> siblings = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,608,ist<Element> siblings = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,649,List<Element> siblings = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,619,"eturn indexInList(this, parent().children());"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,660,"return indexInList(this, parent().childElementsList());"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,627,ist<Element> siblings = parent().children();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,668,List<Element> siblings = parent().childElementsList();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1029, Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1070,* Get the combined data of this element. Data is e.g. the inside of a {@code script} tag. Note that data is NOT the
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1071,"* text of the element. Use {@link #text()} to get the text that would be visible to a user, and {@link #data()}"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1072,"* for the contents of scripts, comments, CSS styles, etc."
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,4,import org.jsoup.helper.ChangeNotifyingArrayList;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,14,import java.util.Iterator;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,137,* Clear (remove) all of the attributes in this node.
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,138,"* @return this, for chaining"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,140,public Node clearAttributes() {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,141,Iterator<Attribute> it = attributes.iterator();
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,142,while (it.hasNext()) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,143,it.next();
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,144,it.remove();
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,146,return this;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,416,void nodelistChanged() {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,417,// Element overrides this to clear its shadow children elements
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,431,Validate.notNull(parentNode);
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,461,hildNodes = new ArrayList<Node>(4);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,481,childNodes = new NodeList(4);
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,670,lone.childNodes = new ArrayList<Node>(childNodes.size());
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,690,clone.childNodes = new NodeList(childNodes.size());
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,726,private final class NodeList extends ChangeNotifyingArrayList<Node> {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,727,NodeList(int initialCapacity) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,728,super(initialCapacity);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,731,public void onContentsChanged() {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,732,nodelistChanged();
False,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,764,tring name = t.asEndTag().normalName();
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,764,String name = t.asEndTag().name(); // matches with case sensitivity if enabled
False,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,1232,"b.processEndTag(""option"");"
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,1232,"if (tb.currentElement().nodeName().equals(""option""))"
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,1233,"tb.processEndTag(""option"");"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,104,@Test
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,105,public void secondMetaElementWithContentTypeContainsCharsetParameter() throws Exception {
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,106,"ByteBuffer inBuffer = ByteBuffer.wrap((""<html><head>"" +"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,107,"""<meta http-equiv=\""Content-Type\"" content=\""text/html\"">"" +"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,108,"""<meta http-equiv=\""Content-Type\"" content=\""text/html; charset=euc-kr\"">"" +"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,109,"""</head><body>한국어</body></html>"").getBytes(""euc-kr""));"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,111,"Document doc = DataUtil.parseByteData(inBuffer, null, ""http://example.com"", Parser.htmlParser());"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,113,"assertEquals(""한국어"", doc.body().text());"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,116,@Test
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,117,public void firstMetaElementWithCharsetShouldBeUsedForDecoding() throws Exception {
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,118,"ByteBuffer inBuffer = ByteBuffer.wrap((""<html><head>"" +"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,119,"""<meta http-equiv=\""Content-Type\"" content=\""text/html; charset=iso-8859-1\"">"" +"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,120,"""<meta http-equiv=\""Content-Type\"" content=\""text/html; charset=koi8-u\"">"" +"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,121,"""</head><body>Übergrößenträger</body></html>"").getBytes(""iso-8859-1""));"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,123,"Document doc = DataUtil.parseByteData(inBuffer, null, ""http://example.com"", Parser.htmlParser());"
True,src/test/java/org/jsoup/helper/DataUtilTest.java,src/test/java/org/jsoup/helper/DataUtilTest.java,125,"assertEquals(""Übergrößenträger"", doc.body().text());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,817,@Test public void handlesUnicodeInQuery() throws IOException {
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,818,"Document doc = Jsoup.connect(""https://www.google.pl/search?q=gąska"").get();"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,819,"assertEquals(""gąska - Szukaj w Google"", doc.title());"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,821,"doc = Jsoup.connect(""http://mov-world.net/archiv/TV/A/%23No.Title/"").get();"
True,src/test/java/org/jsoup/integration/UrlConnectTest.java,src/test/java/org/jsoup/integration/UrlConnectTest.java,822,"assertEquals(""Index of /archiv/TV/A/%23No.Title"", doc.title());"
False,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,753,"iv2.insertChildren(0, null);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,753,"div2.insertChildren(0, (Collection<? extends Node>) null);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,976,@Test
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,977,public void testLoopedRemoveAttributes() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,978,"String html = ""<a one two three four>Text</a><p foo>Two</p>"";"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,979,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,980,for (Element el : doc.getAllElements()) {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,981,el.clearAttributes();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,984,"assertEquals(""<a>Text</a>\n<p>Two</p>"", doc.body().html());"
False,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1005,ublic void testChildrenElements() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1016,@Test public void testChildrenElements() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1045,@Test public void testShadowElementsAreUpdated() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1046,"String html = ""<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>"";"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1047,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1048,"Element div = doc.select(""div"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1049,Elements els = div.children();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1050,List<Node> nodes = div.childNodes();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1052,"assertEquals(2, els.size()); // the two Ps"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1053,"assertEquals(3, nodes.size()); // the ""Three"" textnode"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1055,"Element p3 = new Element(""p"").text(""P3"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1056,"Element p4 = new Element(""p"").text(""P4"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1057,"div.insertChildren(1, p3);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1058,"div.insertChildren(3, p4);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1059,Elements els2 = div.children();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1061,// first els should not have changed
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1062,"assertEquals(2, els.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1063,"assertEquals(4, els2.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1065,"assertEquals(""<p><a>One</a></p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1066,"""<p>P3</p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1067,"""<p><a>Two</a></p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1068,"""<p>P4</p>Three"", div.html());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1069,"assertEquals(""P3"", els2.get(1).text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1070,"assertEquals(""P4"", els2.get(3).text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1072,"p3.after(""<span>Another</span"");"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1074,Elements els3 = div.children();
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1075,"assertEquals(5, els3.size());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1076,"assertEquals(""span"", els3.get(2).tagName());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1077,"assertEquals(""Another"", els3.get(2).text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1079,"assertEquals(""<p><a>One</a></p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1080,"""<p>P3</p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1081,"""<span>Another</span>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1082,"""<p><a>Two</a></p>\n"" +"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1083,"""<p>P4</p>Three"", div.html());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1086,@Test public void classNamesAndAttributeNameIsCaseInsensitive() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1087,"String html = ""<p Class='SomeText AnotherText'>One</p>"";"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1088,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1089,"Element p = doc.select(""p"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1090,"assertEquals(""SomeText AnotherText"", p.className());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1091,"assertTrue(p.classNames().contains(""SomeText""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1092,"assertTrue(p.classNames().contains(""AnotherText""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1093,"assertTrue(p.hasClass(""SomeText""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1094,"assertTrue(p.hasClass(""sometext""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1095,"assertTrue(p.hasClass(""AnotherText""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1096,"assertTrue(p.hasClass(""anothertext""));"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1098,"Element p1 = doc.select("".SomeText"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1099,"Element p2 = doc.select("".sometext"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1100,"Element p3 = doc.select(""[class=SomeText AnotherText]"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1101,"Element p4 = doc.select(""[Class=SomeText AnotherText]"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1102,"Element p5 = doc.select(""[class=sometext anothertext]"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1103,"Element p6 = doc.select(""[class=SomeText AnotherText]"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1104,"Element p7 = doc.select(""[class^=sometext]"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1105,"Element p8 = doc.select(""[class$=nothertext]"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1106,"Element p9 = doc.select(""[class^=sometext]"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1107,"Element p10 = doc.select(""[class$=AnotherText]"").first();"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1109,"assertEquals(""One"", p1.text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1110,"assertEquals(p1, p2);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1111,"assertEquals(p1, p3);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1112,"assertEquals(p1, p4);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1113,"assertEquals(p1, p5);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1114,"assertEquals(p1, p6);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1115,"assertEquals(p1, p7);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1116,"assertEquals(p1, p8);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1117,"assertEquals(p1, p9);"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,1118,"assertEquals(p1, p10);"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,115,@Test public void testSelectWithOption() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,116,Parser parser = Parser.htmlParser();
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,117,parser.setTrackErrors(10);
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,118,"Document document = parser.parseInput(""<select><option>Option 1</option></select>"", ""http://jsoup.org"");"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,119,"assertEquals(0, parser.getErrors().size());"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,957,@Test public void caseSensitiveParseTree() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,958,"String html = ""<r><X>A</X><y>B</y></r>"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,959,Parser parser = Parser.htmlParser();
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,960,parser.settings(ParseSettings.preserveCase);
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,961,"Document doc = parser.parseInput(html, """");"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,962,"assertEquals(""<r> <X> A </X> <y> B </y> </r>"", StringUtil.normaliseWhitespace(doc.body().html()));"

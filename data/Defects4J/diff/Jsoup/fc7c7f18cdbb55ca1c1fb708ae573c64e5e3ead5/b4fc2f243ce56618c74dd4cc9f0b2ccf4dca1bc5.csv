is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,383,@Override
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,384,public boolean equals(Object o) {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,385,return super.equals(o);
True,src/main/java/org/jsoup/nodes/FormElement.java,src/main/java/org/jsoup/nodes/FormElement.java,95,@Override
True,src/main/java/org/jsoup/nodes/FormElement.java,src/main/java/org/jsoup/nodes/FormElement.java,96,public boolean equals(Object o) {
True,src/main/java/org/jsoup/nodes/FormElement.java,src/main/java/org/jsoup/nodes/FormElement.java,97,return super.equals(o);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,13,import java.util.LinkedList;
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,596,eturn doClone(null); // splits for orphan
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,597,Node thisClone = doClone(null); // splits for orphan
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,599,// Queue up nodes that need their children cloned (BFS).
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,600,LinkedList<Node> nodesToProcess = new LinkedList<Node>();
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,601,nodesToProcess.add(thisClone);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,603,while (!nodesToProcess.isEmpty()) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,604,Node currParent = nodesToProcess.remove();
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,606,for (int i = 0; i < currParent.childNodes.size(); i++) {
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,607,Node childClone = currParent.childNodes.get(i).doClone(currParent);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,608,"currParent.childNodes.set(i, childClone);"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,609,nodesToProcess.add(childClone);
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,613,return thisClone;
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,617,* Return a clone of the node using the given parent (which can be null).
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,618,* Not a deep copy of children.
False,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,613,"lone.childNodes.add(child.doClone(clone)); // clone() creates orphans, doClone() keeps parent"
True,src/main/java/org/jsoup/nodes/Node.java,src/main/java/org/jsoup/nodes/Node.java,636,clone.childNodes.add(child);
False,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,89,f (offset < length) {
False,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,90,nt i = offset + 1;
False,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,91,nt last = i + seq.length()-1;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,89,int i = offset + 1;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,90,int last = i + seq.length()-1;
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,91,if (offset < length && last <= length) {
True,src/main/java/org/jsoup/parser/HtmlTreeBuilder.java,src/main/java/org/jsoup/parser/HtmlTreeBuilder.java,162,"tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data"
False,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,130,b.insert(start);
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,134,tb.insert(start);
False,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,724,"lement adopter = new Element(Tag.valueOf(name), tb.getBaseUri());"
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,725,"Element adopter = new Element(formatEl.tag(), tb.getBaseUri());"
True,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java,726,adopter.attributes().addAll(formatEl.attributes());
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,157,".addProtocols(""cite"", ""cite"", ""http"", ""https"")"
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,45,Elements clone;
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,46,try {
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,47,clone = (Elements) super.clone();
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,48,} catch (CloneNotSupportedException e) {
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,49,throw new RuntimeException(e);
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,52,clone.contents = elements;
False,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,51,eturn new Elements(elements);
True,src/main/java/org/jsoup/select/Elements.java,src/main/java/org/jsoup/select/Elements.java,58,return clone;
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,6,import org.junit.Ignore;
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,86,// Ignored since this test can take awhile to run.
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,87,@Ignore
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,88,@Test public void testOverflowClone() {
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,89,StringBuilder builder = new StringBuilder();
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,90,for (int i = 0; i < 100000; i++) {
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,91,"builder.insert(0, ""<i>"");"
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,92,"builder.append(""</i>"");"
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,95,Document doc = Jsoup.parse(builder.toString());
True,src/test/java/org/jsoup/nodes/DocumentTest.java,src/test/java/org/jsoup/nodes/DocumentTest.java,96,doc.clone();
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,98,@Test public void nextIndexOfUnmatched() {
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,99,"CharacterReader r = new CharacterReader(""<[[one]]"");"
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,100,"assertEquals(-1, r.nextIndexOf(""]]>""));"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,290,@Test public void handlesUnclosedCdataAtEOF() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,291,"// https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,292,"String h = ""<![CDATA[]]"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,293,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,294,"assertEquals(1, doc.body().childNodeSize());"
False,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,329,"tring h = ""<div id='1' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,336,"String h = ""<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two"";"
False,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,331,"ssertEquals(""<div id=\""1\""></div><div id=\""2\""><img /><img /></div><a id=\""3\""></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,338,"assertEquals(""<div id=\""1\""></div><script src=\""/foo\""></script><div id=\""2\""><img /><img /></div><a id=\""3\""></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two"", TextUtil.stripNewlines(doc.body().html()));"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,525,@Test public void handlesUnclosedAnchors() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,526,"String h = ""<a href='http://example.com/'>Link<p>Error link</a>"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,527,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,528,"String want = ""<a href=\""http://example.com/\"">Link</a>\n<p><a href=\""http://example.com/\"">Error link</a></p>"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,529,"assertEquals(want, doc.body().html());"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,791,@Test public void handlesInputInTable() {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,792,"String h = ""<body>\n"" +"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,793,"""<input type=\""hidden\"" name=\""a\"" value=\""\"">\n"" +"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,794,"""<table>\n"" +"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,795,"""<input type=\""hidden\"" name=\""b\"" value=\""\"" />\n"" +"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,796,"""</table>\n"" +"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,797,"""</body>"";"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,798,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,799,"assertEquals(1, doc.select(""table input"").size());"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,800,"assertEquals(2, doc.select(""input"").size());"

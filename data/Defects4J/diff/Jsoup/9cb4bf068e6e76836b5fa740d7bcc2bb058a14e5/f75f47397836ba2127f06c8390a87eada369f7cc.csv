is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/jsoup/internal/Normalizer.java,src/main/java/org/jsoup/internal/Normalizer.java,11,eturn input.toLowerCase(Locale.ENGLISH);
True,src/main/java/org/jsoup/internal/Normalizer.java,src/main/java/org/jsoup/internal/Normalizer.java,11,"return input != null ? input.toLowerCase(Locale.ENGLISH) : """";"
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,374,harsetEncoder encoder; // initialized by start of OuterHtmlVisitor and cleared at end
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,374,private ThreadLocal<CharsetEncoder> encoderThreadLocal = new ThreadLocal<>(); // initialized by start of OuterHtmlVisitor
False,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,442,"ncoder = charset.newEncoder(); // created at start of OuterHtmlVisitor so each pass has own encoder, so OutputSettings can be shared among threads"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,442,"// created at start of OuterHtmlVisitor so each pass has own encoder, so OutputSettings can be shared among threads"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,443,CharsetEncoder encoder = charset.newEncoder();
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,444,encoderThreadLocal.set(encoder);
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,449,CharsetEncoder encoder() {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,450,CharsetEncoder encoder = encoderThreadLocal.get();
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,451,return encoder != null ? encoder : prepareEncoder();
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1088,"/ looks only at this element and one level up, to prevent recursion & needless stack searches"
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1088,"// looks only at this element and five levels up, to prevent recursion & needless stack searches"
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1090,lement element = (Element) node;
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1091,eturn element.tag.preserveWhitespace() ||
False,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1092,lement.parent() != null && element.parent().tag.preserveWhitespace();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1090,Element el = (Element) node;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1091,int i = 0;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1092,do {
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1093,if (el.tag.preserveWhitespace())
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1094,return true;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1095,el = el.parent();
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1096,i++;
True,src/main/java/org/jsoup/nodes/Element.java,src/main/java/org/jsoup/nodes/Element.java,1097,} while (i < 6 && el != null);
False,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,179,inal CharsetEncoder encoder = out.encoder != null ? out.encoder : out.prepareEncoder();
True,src/main/java/org/jsoup/nodes/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,179,final CharsetEncoder encoder = out.encoder();
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,1,package org.jsoup.nodes;
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,3,import org.jsoup.parser.Tag;
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,5,import java.io.IOException;
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,8,"* Represents a {@link TextNode} as an {@link Element}, to enable text nodes to be selected with"
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,9,* the {@link org.jsoup.select.Selector} {@code :matchText} syntax.
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,11,public class PseudoTextElement extends Element {
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,13,"public PseudoTextElement(Tag tag, String baseUri, Attributes attributes) {"
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,14,"super(tag, baseUri, attributes);"
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,17,@Override
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,18,"void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {"
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,21,@Override
True,src/main/java/org/jsoup/nodes/PseudoTextElement.java,src/main/java/org/jsoup/nodes/PseudoTextElement.java,22,"void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {"
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,427,if (count < 1)
True,src/main/java/org/jsoup/parser/CharacterReader.java,src/main/java/org/jsoup/parser/CharacterReader.java,428,"return """";"
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,9,import org.jsoup.nodes.PseudoTextElement;
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,10,import org.jsoup.nodes.TextNode;
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,756,public static final class MatchText extends Evaluator {
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,758,@Override
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,759,"public boolean matches(Element root, Element element) {"
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,760,if (element instanceof PseudoTextElement)
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,761,return true;
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,763,List<TextNode> textNodes = element.textNodes();
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,764,for (TextNode textNode : textNodes) {
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,765,PseudoTextElement pel = new PseudoTextElement(
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,766,"org.jsoup.parser.Tag.valueOf(element.tagName()), element.baseUri(), element.attributes());"
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,767,textNode.replaceWith(pel);
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,768,pel.appendChild(textNode);
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,770,return false;
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,773,@Override
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,774,public String toString() {
True,src/main/java/org/jsoup/select/Evaluator.java,src/main/java/org/jsoup/select/Evaluator.java,775,"return "":matchText"";"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,3,import org.jsoup.helper.StringUtil;
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,4,import org.jsoup.helper.Validate;
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,5,import org.jsoup.parser.TokenQueue;
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,8,mport org.jsoup.helper.StringUtil;
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,9,mport org.jsoup.helper.Validate;
False,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,10,mport org.jsoup.parser.TokenQueue;
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,203,"else if (tq.matchChomp("":matchText""))"
True,src/main/java/org/jsoup/select/QueryParser.java,src/main/java/org/jsoup/select/QueryParser.java,204,evals.add(new Evaluator.MatchText());
True,src/main/java/org/jsoup/select/Selector.java,src/main/java/org/jsoup/select/Selector.java,57,"* <tr><td><code>:matchText</code></td><td>treats text nodes as elements, and so allows you to match against and select text nodes.<p><b>Note</b> that using this selector will modify the DOM, so you may want to {@code clone} your document before using.</td><td>{@code p:matchText:firstChild} with input {@code <p>One<br />Two</p>} will return one {@link org.jsoup.nodes.PseudoTextElement} with text ""{@code One}"".</td></tr>"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,107,@Test public void testKeepsPreTextAtDepth() {
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,108,"String h = ""<pre><code><span><b>code\n\ncode</b></span></code></pre>"";"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,109,Document doc = Jsoup.parse(h);
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,110,"assertEquals(""code\n\ncode"", doc.text());"
True,src/test/java/org/jsoup/nodes/ElementTest.java,src/test/java/org/jsoup/nodes/ElementTest.java,111,"assertEquals(""<pre><code><span><b>code\n\ncode</b></span></code></pre>"", doc.body().html());"
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,259,@Test
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,260,public void consumeToNonexistentEndWhenAtAnd() {
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,261,"CharacterReader r = new CharacterReader(""<!"");"
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,262,"assertTrue(r.matchConsume(""<!""));"
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,263,assertTrue(r.isEmpty());
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,265,String after = r.consumeTo('>');
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,266,"assertEquals("""", after);"
True,src/test/java/org/jsoup/parser/CharacterReaderTest.java,src/test/java/org/jsoup/parser/CharacterReaderTest.java,268,assertTrue(r.isEmpty());
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,1085,@Test public void commentAtEnd() throws Exception {
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,1086,"Document doc = Jsoup.parse(""<!"");"
True,src/test/java/org/jsoup/parser/HtmlParserTest.java,src/test/java/org/jsoup/parser/HtmlParserTest.java,1087,assertTrue(doc.childNode(0) instanceof Comment);
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,302,@Test public void handlesAttributesWithNoValue() {
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,303,// https://github.com/jhy/jsoup/issues/973
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,304,"String clean = Jsoup.clean(""<a href>Clean</a>"", Whitelist.basic());"
True,src/test/java/org/jsoup/safety/CleanerTest.java,src/test/java/org/jsoup/safety/CleanerTest.java,306,"assertEquals(""<a rel=\""nofollow\"">Clean</a>"", clean);"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,770,@Test public void matchText() {
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,771,"String html = ""<p>One<br>Two</p>"";"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,772,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,773,String origHtml = doc.html();
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,775,"Elements one = doc.select(""p:matchText:first-child"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,776,"assertEquals(""One"", one.first().text());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,778,"Elements two = doc.select(""p:matchText:last-child"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,779,"assertEquals(""Two"", two.first().text());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,781,"assertEquals(origHtml, doc.html());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,783,"assertEquals(""Two"", doc.select(""p:matchText + br + *"").text());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,786,@Test public void splitOnBr() {
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,787,"String html = ""<div><p>One<br>Two<br>Three</p></div>"";"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,788,Document doc = Jsoup.parse(html);
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,790,"Elements els = doc.select(""p:matchText"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,791,"assertEquals(3, els.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,792,"assertEquals(""One"", els.get(0).text());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,793,"assertEquals(""Two"", els.get(1).text());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,794,"assertEquals(""Three"", els.get(2).toString());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,797,@Test public void matchTextAttributes() {
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,798,"Document doc = Jsoup.parse(""<div><p class=one>One<br>Two<p class=two>Three<br>Four"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,799,"Elements els = doc.select(""p.two:matchText:last-child"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,801,"assertEquals(1, els.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,802,"assertEquals(""Four"", els.text());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,805,@Test public void findBetweenSpan() {
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,806,"Document doc = Jsoup.parse(""<p><span>One</span> Two <span>Three</span>"");"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,807,"Elements els = doc.select(""span ~ p:matchText""); // the Two becomes its own p, sibling of the span"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,809,"assertEquals(1, els.size());"
True,src/test/java/org/jsoup/select/SelectorTest.java,src/test/java/org/jsoup/select/SelectorTest.java,810,"assertEquals(""Two"", els.text());"

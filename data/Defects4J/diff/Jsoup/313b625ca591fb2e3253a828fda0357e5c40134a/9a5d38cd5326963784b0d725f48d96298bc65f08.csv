is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,410,Remove allowed URL protocols for an element's URL attribute.
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,411,<p/>
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,412,"E.g.: <code>removeProtocols(""a"", ""href"", ""ftp"")</code>"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,414,@param tag       Tag the URL protocol is for
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,415,@param key       Attribute key
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,416,@param protocols List of invalid protocols
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,417,"@return this, for chaining"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,419,"public Whitelist removeProtocols(String tag, String key, String... protocols) {"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,420,Validate.notEmpty(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,421,Validate.notEmpty(key);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,422,Validate.notNull(protocols);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,424,TagName tagName = TagName.valueOf(tag);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,425,AttributeKey attrKey = AttributeKey.valueOf(key);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,427,if(this.protocols.containsKey(tagName)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,428,"Map<AttributeKey, Set<Protocol>> attrMap = this.protocols.get(tagName);"
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,429,if(attrMap.containsKey(attrKey)) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,430,Set<Protocol> protSet = attrMap.get(attrKey);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,431,for (String protocol : protocols) {
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,432,Validate.notEmpty(protocol);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,433,Protocol prot = Protocol.valueOf(protocol);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,434,protSet.remove(prot);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,437,if(protSet.isEmpty()) { // Remove protocol set if empty
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,438,attrMap.remove(attrKey);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,439,if(attrMap.isEmpty()) // Remove entry for tag if empty
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,440,this.protocols.remove(tagName);
True,src/main/java/org/jsoup/safety/Whitelist.java,src/main/java/org/jsoup/safety/Whitelist.java,444,return this;

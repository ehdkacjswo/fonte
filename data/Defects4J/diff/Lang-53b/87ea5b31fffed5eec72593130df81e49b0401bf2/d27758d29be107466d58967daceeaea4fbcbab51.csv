is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,56,mport java.util.Date;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,57,import java.text.DateFormat;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,58,import java.text.DateFormatSymbols;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,59,import java.text.FieldPosition;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,60,import java.text.Format;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,61,import java.text.ParsePosition;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,62,import java.text.SimpleDateFormat;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,63,import java.util.ArrayList;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,65,import java.util.Date;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,59,mport java.util.Locale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,60,mport java.util.TimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,67,import java.util.HashMap;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,62,mport java.util.ArrayList;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,69,import java.util.Locale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,64,mport java.util.HashMap;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,65,mport java.text.DateFormatSymbols;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,66,mport java.text.DateFormat;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,67,mport java.text.SimpleDateFormat;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,71,import java.util.TimeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,70," Similar to {@link java.text.SimpleDateFormat}, but faster and thread-safe."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,74,"* FastDateFormat is similar to {@link java.text.SimpleDateFormat}, but"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,75,* faster and thread-safe.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,76,* <p>
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,72, SimpleDateFormat. [Code originally taken from the open source TreeTrove
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,73, project.]
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,78,* SimpleDateFormat.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,79,* <p>
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,80,* NOTE: Code originally taken from the open source TreeTrove project.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,78, @since 2.1
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,79," @version $Id: FastDateFormat.java,v 1.4 2003/02/04 22:19:33 scolebourne Exp $"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,85,* @author Stephen Colebourne
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,86,* @since 2.0
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,87,"* @version $Id: FastDateFormat.java,v 1.5 2003/05/21 23:39:53 scolebourne Exp $"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,81,ublic class FastDateFormat {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,82,** Style pattern */
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,83,ublic static final Object
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,84,"ULL = new Integer(SimpleDateFormat.FULL),"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,85,"ONG = new Integer(SimpleDateFormat.LONG),"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,86,"EDIUM = new Integer(SimpleDateFormat.MEDIUM),"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,87,HORT = new Integer(SimpleDateFormat.SHORT);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,89,public class FastDateFormat extends Format {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,91,/** FULL date or time style */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,92,public static final int FULL = SimpleDateFormat.FULL;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,93,/** LONG date or time style */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,94,public static final int LONG = SimpleDateFormat.LONG;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,95,/** MEDIUM date or time style */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,96,public static final int MEDIUM = SimpleDateFormat.MEDIUM;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,97,/** SHORT date or time style */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,98,public static final int SHORT = SimpleDateFormat.SHORT;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,95,rivate static Map cTimeZoneDisplayCache = new HashMap();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,110,private static Map cTimeZoneDisplayCache = new HashMap(7);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,112,/** The pattern */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,113,private final String mPattern;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,114,/** The time zone */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,115,private final TimeZone mTimeZone;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,116,/** The locale */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,117,private final Locale mLocale;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,118,/** The parsed rules */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,119,private final Rule[] mRules;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,120,/** The estimated maximum length */
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,121,private final int mMaxLengthEstimate;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,125,* Gets a formatter instance using the default pattern in the default locale.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,127,* @return a date/time formatter
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,103,"/return getInstance(getDefaultPattern(), null, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,108, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,134,* Gets a formatter instance using the specified pattern in the default locale.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,136,* @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,137,* @return a pattern based date/time formatter
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,138,* @throws IllegalArgumentException if pattern is invalid
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,111,"/return getInstance(pattern, null, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,116, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,117," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,118, date
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,145,* Gets a formatter instance using the specified pattern and time zone.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,147,* @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,148,"* @param timeZone  optional time zone, overrides time zone of formatted date"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,149,* @return a pattern based date/time formatter
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,150,* @throws IllegalArgumentException if pattern is invalid
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,121,"/return getInstance(pattern, timeZone, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,126, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,127," @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,157,* Gets a formatter instance using the specified pattern and locale.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,159,* @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,160,"* @param locale  optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,161,* @return a pattern based date/time formatter
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,162,* @throws IllegalArgumentException if pattern is invalid
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,130,"/return getInstance(pattern, null, locale, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,135, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,136," @param symbols optional date format symbols, overrides symbols for"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,137, system locale
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,140,ublic static FastDateFormat getInstance
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,141,"String pattern, DateFormatSymbols symbols)"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,142,hrows IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,144,"eturn getInstance(pattern, null, null, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,149, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,150," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,151, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,152," @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,169,"* Gets a formatter instance using the specified pattern, time zone and locale."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,171,* @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,172,"* @param timeZone  optional time zone, overrides time zone of formatted date"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,173,"* @param locale  optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,174,* @return a pattern based date/time formatter
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,175,* @throws IllegalArgumentException if pattern is invalid
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,154,"ublic static FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,155,"/return getInstance(pattern, timeZone, locale, null);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,177,"public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,165,astDateFormat format = (FastDateFormat)cInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,186,FastDateFormat format = (FastDateFormat) cInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,178, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,179," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,180, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,181," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,182," @param symbols optional date format symbols, overrides symbols for"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,183, provided locale
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,186,ublic static synchronized FastDateFormat getInstance
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,187,"String pattern, TimeZone timeZone, Locale locale,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,188,ateFormatSymbols symbols)
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,189,hrows IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,191,bject key = pattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,193,f (timeZone != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,194,"ey = new Pair(key, timeZone);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,196,f (locale != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,197,"ey = new Pair(key, locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,199,f (symbols != null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,200,"ey = new Pair(key, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,203,astDateFormat format = (FastDateFormat)cInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,204,f (format == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,205,f (locale == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,206,ocale = Locale.getDefault();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,208,f (symbols == null) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,209,ymbols = new DateFormatSymbols(locale);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,211,"ormat = new FastDateFormat(pattern, timeZone, locale, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,212,"InstanceCache.put(key, format);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,214,eturn format;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,219," @param style date style: FULL, LONG, MEDIUM, or SHORT (corresponds to those in java.text.DateFormat)"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,220," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,221, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,222," @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,199,"* Gets a date formatter instance using the specified style, time zone and locale."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,201,"* @param style  date style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,202,"* @param timeZone  optional time zone, overrides time zone of formatted date"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,203,"* @param locale  optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,204,* @return a localized standard date formatter
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,205,* @throws IllegalArgumentException if the Locale has no date pattern defined
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,234,astDateFormat format = (FastDateFormat)cDateInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,216,FastDateFormat format = (FastDateFormat) cDateInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,242,"tring pattern = ((SimpleDateFormat)DateFormat.getDateInstance(style, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,223,"SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,224,String pattern = formatter.toPattern();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,246,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,247,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,248,"""No date pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,228,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,229,"throw new IllegalArgumentException(""No date pattern for locale: "" + locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,256," @param style time style: FULL, LONG, MEDIUM, or SHORT"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,257," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,258, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,259," @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,236,"* Gets a time formatter instance using the specified style, time zone and locale."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,238,"* @param style  time style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,239,"* @param timeZone  optional time zone, overrides time zone of formatted time"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,240,"* @param locale  optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,241,* @return a localized standard time formatter
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,242,* @throws IllegalArgumentException if the Locale has no time pattern defined
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,271,astDateFormat format = (FastDateFormat)cTimeInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,253,FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,280,"tring pattern = ((SimpleDateFormat)DateFormat.getTimeInstance(style, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,260,"SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,261,String pattern = formatter.toPattern();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,284,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,285,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,286,"""No date pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,265,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,266,"throw new IllegalArgumentException(""No date pattern for locale: "" + locale);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,294," @param dateStyle date style: FULL, LONG, MEDIUM, or SHORT"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,295," @param timeStyle time style: FULL, LONG, MEDIUM, or SHORT"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,296," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,297, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,298," @param locale optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,273,"* Gets a date/time formatter instance using the specified style, time zone and locale."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,275,"* @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,276,"* @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,277,"* @param timeZone  optional time zone, overrides time zone of formatted date"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,278,"* @param locale  optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,279,* @return a localized standard date/time formatter
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,280,* @throws IllegalArgumentException if the Locale has no date/time pattern defined
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,300,"ublic static synchronized FastDateFormat getDateTimeInstance(Object dateStyle, Object timeStyle,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,301,"imeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,303,"bject key = new Pair(dateStyle, timeStyle);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,282,public static synchronized FastDateFormat getDateTimeInstance(
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,283,"int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,285,"Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,312,astDateFormat format =
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,313,FastDateFormat)cDateTimeInstanceCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,293,FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,316,nt ds;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,317,ry {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,318,s = ((Integer)dateStyle).intValue();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,320,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,321,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,322,"""Illegal date style: "" + dateStyle);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,325,nt ts;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,326,ry {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,327,s = ((Integer)timeStyle).intValue();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,329,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,330,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,331,"""Illegal time style: "" + timeStyle);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,339,"tring pattern = ((SimpleDateFormat)DateFormat.getDateTimeInstance(ds, ts, locale)).toPattern();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,300,"SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,301,String pattern = formatter.toPattern();
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,343,atch (ClassCastException e) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,344,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,345,"""No date time pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,305,} catch (ClassCastException ex) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,306,"throw new IllegalArgumentException(""No date time pattern for locale: "" + locale);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,314,"* Gets the time zone display name, using a cache for performance."
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,316,* @param tz  the zone to query
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,317,* @param daylight  true if daylight savings
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,318,* @param style  the style to use TimeZone.LONG or TimeZone.SHORT
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,319,* @param locale  the locale to use
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,320,* @return the textual name of the time zone
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,354,tring value = (String)cTimeZoneDisplayCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,324,String value = (String) cTimeZoneDisplayCache.get(key);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,334,* Gets the default pattern.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,336,* @return the default pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,371, Returns a list of Rules.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,346,* Returns a list of Rules given a pattern.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,348,* @param pattern  the pattern to parse
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,349,* @param timeZone  the time zone to use
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,350,* @param locale  the locale to use
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,351,* @param symbols  the symbols to use
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,352,* @return a List of Rule objects
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,353,* @throws IllegalArgumentException if pattern is invalid
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,386,or (int i=0; i<length; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,368,for (int i = 0; i < length; i++) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,407,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,388,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,415,lse if (tokenLen == 3) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,395,} else if (tokenLen == 3) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,418,lse if (tokenLen == 2) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,397,} else if (tokenLen == 2) {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,421,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,399,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,429,ule = new TwelveHourField
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,430,"selectNumberRule(Calendar.HOUR, tokenLen));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,407,"rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,445,ule = new TextField
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,446,"Calendar.DAY_OF_WEEK,"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,447,okenLen < 4 ? shortWeekdays : weekdays);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,422,"rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,453,ule = selectNumberRule
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,454,"Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,428,"rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,466,ule = new TwentyFourHourField
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,467,"selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,440,"rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,476,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,448,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,485,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,456,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,490,hrow new IllegalArgumentException
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,491,"""Illegal pattern component: "" + token);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,461,"throw new IllegalArgumentException(""Illegal pattern component: "" + token);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,471,* Performs the parsing of tokens.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,473,* @param pattern  the pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,474,* @param indexRef  index references
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,475,* @return parsed token
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,518,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,494,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,523,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,498,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,538,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,512,} else {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,542,lse if (!inLiteral &&
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,515,} else if (!inLiteral &&
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,547,lse {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,519,} else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,530,* Gets an appropriate rule for the padding required.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,532,* @param field  the field to get a rule for
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,533,* @param padding  the padding required
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,534,* @return a new rule with the correct padding
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,568,rivate final String mPattern;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,569,rivate final TimeZone mTimeZone;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,570,rivate final Locale mLocale;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,571,rivate final Rule[] mRules;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,572,rivate final int mMaxLengthEstimate;
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,574,rivate FastDateFormat() {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,575,"his(getDefaultPattern(), null, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,579, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,581,rivate FastDateFormat(String pattern) throws IllegalArgumentException {
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,582,"his(pattern, null, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,586, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,587," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,588, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,590,"rivate FastDateFormat(String pattern, TimeZone timeZone) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,591,"his(pattern, timeZone, null, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,595, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,596," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,598,"rivate FastDateFormat(String pattern, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,599,"his(pattern, null, locale, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,603, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,604," @param symbols optional date format symbols, overrides symbols for"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,605, system locale
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,607,"rivate FastDateFormat(String pattern, DateFormatSymbols symbols) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,608,"his(pattern, null, null, symbols);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,612, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,613," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,614, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,615," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,617,"rivate FastDateFormat(String pattern, TimeZone timeZone, Locale locale) {"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,618,"his(pattern, timeZone, locale, null);"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,622, @param pattern {@link java.text.SimpleDateFormat} compatible pattern
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,623," @param timeZone optional time zone, overrides time zone of formatted"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,624, date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,625," @param locale optional locale, overrides system locale"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,626," @param symbols optional date format symbols, overrides symbols for"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,627, provided locale
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,549,* Constructs a new FastDateFormat.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,551,* @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,552,"* @param timeZone  optional time zone, overrides time zone of formatted date"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,553,"* @param locale  optional locale, overrides system locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,554,"* @param symbols  optional date format symbols, overrides symbols for provided locale"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,555,* @throws IllegalArgumentException if pattern is invalid
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,643,Rules = (Rule[])rulesList.toArray(new Rule[rulesList.size()]);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,571,mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,583,* Format either a Date or a Calendar object.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,585,* @param obj  the object to format
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,586,* @param toAppendTo  the buffer to append to
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,587,* @param pos  the position - ignored
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,588,* @return the buffer passed in
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,590,"public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,591,if (obj instanceof Date) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,592,"return format((Date) obj, toAppendTo);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,593,} else if (obj instanceof Calendar) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,594,"return format((Calendar) obj, toAppendTo);"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,595,} else {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,596,"throw new IllegalArgumentException(""Unknown class: "" +"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,597,"(obj == null ? ""<null>"" : obj.getClass().getName()));"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,602,* Formats a Date object.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,604,* @param date  the date to format
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,605,* @return the formatted string
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,617,* Formats a Calendar object.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,619,* @param calendar  the calendar to format
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,620,* @return the formatted string
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,663,"eturn format(calendar, new StringBuffer(mMaxLengthEstimate))"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,664,toString();
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,623,"return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,627,* Formats a Date object into the supplied StringBuffer.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,629,* @param date  the date to format
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,630,* @param buf  the buffer to format into
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,631,* @return the specified string buffer
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,643,* Formats a Calendar object into the supplied StringBuffer.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,645,* @param calendar  the calendar to format
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,646,* @param buf  the buffer to format into
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,647,* @return the specified string buffer
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,658,* Performs the formatting by applying the rules to the specified calendar.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,660,* @param calendar  the calendar to format
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,661,* @param buf  the buffer to format into
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,662,* @return the specified string buffer
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,687,or (int i=0; i<len; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,667,for (int i = 0; i < len; i++) {
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,675,* Parsing not supported.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,677,* @param source  the string to parse
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,678,* @param pos  the parsing position
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,679,* @return null as not supported
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,681,"public Object parseObject(String source, ParsePosition pos) {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,682,pos.setIndex(0);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,683,pos.setErrorIndex(0);
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,684,return null;
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,689,* Gets the pattern used by this formatter.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,691,"* @return the pattern, {@link java.text.SimpleDateFormat} compatible"
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,698," Returns the time zone used by this formatter, or null if time zone of"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,698,"* Gets the time zone used by this formatter, or null if time zone of"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,701,* @return the time zone
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,708,* Gets the locale used by this formatter.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,710,* @return the locale
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,710, Returns an estimate for the maximum length date that this date
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,711, formatter will produce. The actual formatted length will almost always
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,712, be less than or equal to this amount.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,717,* Gets  an estimate for the maximum string length that the formatter will produce.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,718,* The actual formatted length will almost always be less than or equal to this amount.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,720,* @return the maximum formatted length
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,728,* Inner class defining a rule.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,736,* Inner class defining a numeric rule.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,743,* Inner class to output a constant single character.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,762,* Inner class to output a constant string.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,781,* Inner class to output one of a set of values.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,809,* Inner class to output an unpadded number.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,841,* Inner class to output an unpadded month.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,867,* Inner class to output a padded number.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,915,* Inner class to output a two digit number.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,944,* Inner class to output a two digit year.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,965,* Inner class to output a two digit month.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,986,* Inner class to output the twelve hour field.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1013,* Inner class to output the twenty four hour field.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1040,* Inner class to output a time zone.
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1106,* Inner class that acts as a compound key for time zone names.
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1088,/ Pair
False,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1094,"rivate static class Pair implements Comparable, java.io.Serializable {"
True,src/java/org/apache/commons/lang/time/FastDateFormat.java,src/java/org/apache/commons/lang/time/FastDateFormat.java,1147,"private static class Pair implements Comparable, Serializable {"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4714, <p>This implementation of the Levenshtein distance algorithm
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4715," is from <a href=""http://www.merriampark.com/ld.htm"">http://www.merriampark.com/ld.htm</a></p>"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4714,* <p>The previous implementation of the Levenshtein distance algorithm
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4715,"* was from <a href=""http://www.merriampark.com/ld.htm"">http://www.merriampark.com/ld.htm</a></p>"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4717,"* <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4718,* which can occur when my Java implementation is used with very large strings.<br>
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4719,* This implementation of the Levenshtein distance algorithm
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4720,"* is from <a href=""http://www.merriampark.com/ldjava.htm"">http://www.merriampark.com/ldjava.htm</a></p>"
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4740,nt d[][]; // matrix
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4741,nt n; // length of s
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4742,nt m; // length of t
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4743,nt i; // iterates through s
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4744,nt j; // iterates through t
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4745,har s_i; // ith character of s
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4746,har t_j; // jth character of t
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4747,nt cost; // cost
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4749,/ Step 1
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4750, = s.length();
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4751, = t.length();
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4747,"The difference between this impl. and the previous is that, rather"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4748,"than creating and retaining a matrix of size s.length()+1 by t.length()+1,"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4749,"we maintain two single-dimensional arrays of length s.length()+1.  The first, d,"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4750,is the 'current working' distance array that maintains the newest distance cost
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4751,counts as we iterate through the characters of String s.  Each time we increment
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4752,"the index of String t we are comparing, d is copied to p, the second int[].  Doing so"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4753,allows us to retain the previous cost counts as required by the algorithm (taking
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4754,"the minimum of the cost count to the left, up one, and diagonally up and to the left"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4755,of the current cost count being calculated).  (Note that the arrays aren't really
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4756,"copied anymore, just switched...this is clearly much better than cloning an array"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4757,or doing a System.arraycopy() each time  through the outer loop.)
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4759,"Effectively, the difference between the two implementations is this one does not"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4760,cause an out of memory condition when calculating the LD over two very large strings.
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4763,int n = s.length(); // length of s
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4764,int m = t.length(); // length of t
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4755,f (m == 0) {
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4768,} else if (m == 0) {
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4758, = new int[n + 1][m + 1];
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4760,/ Step 2
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4761,or (i = 0; i <= n; i++) {
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4762,[i][0] = i;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4772,"int p[] = new int[n+1]; //'previous' cost array, horizontally"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4773,"int d[] = new int[n+1]; // cost array, horizontally"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4774,int _d[]; //placeholder to assist in swapping p and d
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4765,or (j = 0; j <= m; j++) {
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4766,[0][j] = j;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4776,// indexes into strings s and t
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4777,int i; // iterates through s
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4778,int j; // iterates through t
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4769,/ Step 3
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4770,or (i = 1; i <= n; i++) {
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4771,_i = s.charAt(i - 1);
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4780,char t_j; // jth character of t
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4773,/ Step 4
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4774,or (j = 1; j <= m; j++) {
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4775,_j = t.charAt(j - 1);
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4782,int cost; // cost
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4777,/ Step 5
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4778,f (s_i == t_j) {
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4779,ost = 0;
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4780, else {
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4781,ost = 1;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4784,for (i = 0; i<=n; i++) {
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4785,p[i] = i;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4788,for (j = 1; j<=m; j++) {
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4789,t_j = t.charAt(j-1);
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4790,d[0] = j;
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4784,/ Step 6
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4785,"[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4792,for (i=1; i<=n; i++) {
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4793,cost = s.charAt(i-1)==t_j ? 0 : 1;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4794,"// minimum of cell to the left+1, to the top+1, diagonally left and up +cost"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4795,"d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4798,// copy current distance counts to 'previous row' distance counts
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4799,_d = p;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4800,p = d;
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4801,d = _d;
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4789,/ Step 7
False,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4790,eturn d[n][m];
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4804,"// our last action in the above loop was to switch d and p, so p now"
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4805,// actually has the most recent cost counts
True,src/java/org/apache/commons/lang/StringUtils.java,src/java/org/apache/commons/lang/StringUtils.java,4806,return p[n];

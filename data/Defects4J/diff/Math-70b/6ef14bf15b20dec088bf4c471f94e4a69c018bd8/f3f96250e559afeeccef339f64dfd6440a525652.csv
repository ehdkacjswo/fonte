is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,5,* reserved.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,9,* are met:
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,17,*    distribution.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,57,* <p>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,58,* Provides a generic means to evaluate continued fractions.  Subclasses simply
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,59,* provided the a and b coefficients to evaluate the continued fraction.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,60,* </p>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,62,* <p>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,63,* Reference:<br/>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,64,"* <a href=""http://mathworld.wolfram.com/ContinuedFraction.html"">"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,65,* Continued Fraction</a>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,66,* </p>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,68,* @author Brent Worden
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,70,public abstract class ContinuedFraction {
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,71,/** Maximum allowed numerical error. */
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,72,private static final double DEFAULT_EPSILON = 10e-9;
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,75,* Default constructor.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,77,protected ContinuedFraction() {
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,78,super();
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,82,* Access the n-th a coefficient of the continued fraction.  Since a can be
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,83,"* a function of the evaluation point, x, that is passed in as well."
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,84,* @param n the coefficient index to retrieve.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,85,* @param x the evaluation point.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,86,* @return the n-th a coefficient.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,88,"protected abstract double getA(int n, double x);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,91,* Access the n-th b coefficient of the continued fraction.  Since b can be
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,92,"* a function of the evaluation point, x, that is passed in as well."
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,93,* @param n the coefficient index to retrieve.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,94,* @param x the evaluation point.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,95,* @return the n-th b coefficient.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,97,"protected abstract double getB(int n, double x);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,100,* Evaluates the continued fraction at the value x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,101,* @param x the evaluation point.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,102,* @return the value of the continued fraction evaluated at x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,104,public double evaluate(double x){
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,105,"return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,109,* Evaluates the continued fraction at the value x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,110,* @param x the evaluation point.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,111,* @param epsilon maximum error allowed.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,112,* @return the value of the continued fraction evaluated at x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,114,"public double evaluate(double x, double epsilon){"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,115,"return evaluate(x, epsilon, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,119,* Evaluates the continued fraction at the value x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,120,* @param x the evaluation point.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,121,* @param maxIterations maximum number of convergents
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,122,* @return the value of the continued fraction evaluated at x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,124,"public double evaluate(double x, int maxIterations){"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,125,"return evaluate(x, DEFAULT_EPSILON, maxIterations);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,129,* <p>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,130,* Evaluates the continued fraction at the value x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,131,* </p>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,133,* <p>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,134,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,135,* <ul>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,136,"* <li>O. E-gecio-glu, C . K. Koc, J. Rifa i Coma,"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,137,"* <a href=""http://citeseer.nj.nec.com/egecioglu91fast.html"">"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,138,"* Fast Computation of Continued Fractions</a>, Computers Math. Applic.,"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,139,"* 21(2--3), 1991, 167--169.</li>"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,140,* </ul>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,141,* </p>
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,143,* @param x the evaluation point.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,144,* @param epsilon maximum error allowed.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,145,* @param maxIterations maximum number of convergents
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,146,* @return the value of the continued fraction evaluated at x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,148,"public double evaluate(double x, double epsilon, int maxIterations) {"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,149,double[][] f = new double[2][2];
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,150,double[][] a = new double[2][2];
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,151,double[][] an = new double[2][2];
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,153,"a[0][0] = getA(0, x);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,154,a[0][1] = 1.0;
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,155,a[1][0] = 1.0;
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,156,a[1][1] = 0.0;
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,158,"return evaluate(1, x, a, an, f, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,162,"* Evaluates the n-th convergent, fn = pn / qn, for this continued fraction at the value x."
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,163,* @param n the convergent to compute.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,164,* @param x the evaluation point.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,165,* @param a (n-1)-th convergent matrix.  (Input)
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,166,* @param an the n-th coefficient matrix. (Output)
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,167,* @param f the n-th convergent matrix. (Output)
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,168,* @param epsilon maximum error allowed.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,169,* @param maxIterations maximum number of convergents
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,170,* @return the value of the the n-th convergent for this continued fraction evaluated at x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,172,"private double evaluate(int n, double x, double[][] a, double[][] an, double[][] f, double epsilon, int maxIterations) {"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,173,double ret;
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,175,// create next matrix
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,176,"an[0][0] = getA(n, x);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,177,an[0][1] = 1.0;
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,178,"an[1][0] = getB(n, x);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,179,an[1][1] = 0.0;
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,181,"// multiply a and an, save as f"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,182,f[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,183,f[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,184,f[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,185,f[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,187,// determine if we're close enough
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,188,if(Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) < Math.abs(epsilon * f[1][0] * f[1][1])){
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,189,ret = f[0][0] / f[1][0];
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,190,} else {
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,191,if(n >= maxIterations){
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,192,"throw new ConvergenceException(""Continued fraction convergents failed to converge."");"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,194,// compute next
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,195,"ret = evaluate(n + 1, x, f /* new a */, an /* reuse an */, a /* new f */, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,198,return ret;
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,62,* <li>F</li>
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,64,* <li>Student's t</li>
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,102,ouble degreesOfFreedom
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,104,double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,107,* Create a new F-distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,108,* @param numeratorDegreesOfFreedom numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,109,* @param denominatorDegreesOfFreedom denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,110,* @return a new F-distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,112,public abstract FDistribution createFDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,113,"double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom);"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,104,* Create a new F-distribution with the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,105,* @param numeratorDegreesOfFreedom numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,106,* @param denominatorDegreesOfFreedom denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,107,* @return a new F-distribution.
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,109,public FDistribution createFDistribution(
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,110,"double numeratorDegreesOfFreedom,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,111,double denominatorDegreesOfFreedom) {
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,112,"return new FDistributionImpl(numeratorDegreesOfFreedom,"
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,113,denominatorDegreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,57,* <p>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,58,* F-Distribution.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,59,* </p>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,61,* <p>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,62,* Instances of FDistribution objects should be created using
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,63,* {@link DistributionFactory#createFDistribution(double)}
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,64,* </p>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,66,* <p>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,67,* Reference:<br/>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,68,"* <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,69,* F-Distribution</a>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,70,* </p>
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,72,* @author Brent Worden
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,74,public interface FDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,76,* Modify the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,77,* @param degreesOfFreedom the new numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,79,void setNumeratorDegreesOfFreedom(double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,82,* Access the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,83,* @return the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,85,double getNumeratorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,88,* Modify the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,89,* @param degreesOfFreedom the new denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,91,void setDenominatorDegreesOfFreedom(double degreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,94,* Access the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,95,* @return the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,97,double getDenominatorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,54,package org.apache.commons.math.stat.distribution;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,56,import org.apache.commons.math.special.Beta;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,59,* Default implementation of
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,60,* {@link org.apache.commons.math.stat.distribution.TDistribution}.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,62,* @author Brent Worden
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,64,public class FDistributionImpl
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,65,extends AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,66,implements FDistribution {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,68,/** The numerator degrees of freedom*/
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,69,private double numeratorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,71,/** The numerator degrees of freedom*/
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,72,private double denominatorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,75,* Create a F distribution using the given degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,76,* @param degreesOfFreedom the degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,78,"public FDistributionImpl(double numeratorDegreesOfFreedom,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,79,double denominatorDegreesOfFreedom){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,80,super();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,81,setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,82,setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,86,* <p>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,87,"* For this disbution, X, this method returns P(X &lt; x)."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,88,* </p>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,90,* <p>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,91,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,92,* <ul>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,93,* <li>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,94,"* <a href=""http://mathworld.wolfram.com/F-Distribution.html"">"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,95,"* F-Distribution</a>, equation (4).</li>"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,96,* </p>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,98,* @param x the value at which the CDF is evaluated.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,99,* @return CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,101,public double cummulativeProbability(double x) {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,102,double ret;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,103,if(x <= 0.0){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,104,ret = 0.0;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,105,} else {
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,106,double n = getNumeratorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,107,double m = getDenominatorDegreesOfFreedom();
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,109,"ret = Beta.regularizedBeta((n * x) / (m + n * x),"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,110,"0.5 * n,"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,111,0.5 * m);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,113,return ret;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,117,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,118,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,119,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,121,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,122,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,123,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,125,protected double getDomainLowerBound(double p){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,126,return 0.0;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,130,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,131,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,132,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,134,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,135,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,136,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,138,protected double getDomainUpperBound(double p){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,139,return Double.MAX_VALUE;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,143,"* Access the initial domain value, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,144,* bracket a CDF root.  This method is used by
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,145,* {@link #inverseCummulativeProbability(double)} to find critical values.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,147,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,148,* @return initial domain value
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,150,protected double getInitialDomain(double p){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,151,return getDenominatorDegreesOfFreedom() / (getDenominatorDegreesOfFreedom() - 2.0);
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,155,* Modify the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,156,* @param degreesOfFreedom the new numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,158,public void setNumeratorDegreesOfFreedom(double degreesOfFreedom){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,159,if(degreesOfFreedom <= 0.0){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,160,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,161,"""degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,163,this.numeratorDegreesOfFreedom = degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,167,* Access the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,168,* @return the numerator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,170,public double getNumeratorDegreesOfFreedom(){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,171,return numeratorDegreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,175,* Modify the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,176,* @param degreesOfFreedom the new denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,178,public void setDenominatorDegreesOfFreedom(double degreesOfFreedom){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,179,if(degreesOfFreedom <= 0.0){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,180,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,181,"""degrees of freedom must be positive."");"
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,183,this.denominatorDegreesOfFreedom = degreesOfFreedom;
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,187,* Access the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,188,* @return the denominator degrees of freedom.
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,190,public double getDenominatorDegreesOfFreedom(){
True,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,src/java/org/apache/commons/math/distribution/FDistributionImpl.java,191,return denominatorDegreesOfFreedom;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,56,import org.apache.commons.math.ContinuedFraction;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,58, Gamma family of functions.
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,60,* Beta family of functions.
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,127," <a href=""http://mathworld.wolfram.com/IncompleteBetaFunction.html"">"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,128, Incomplete Beta Function</a>.</li>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,129,"* <a href=""http://functions.wolfram.com/06.21.10.0001.01"">"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,130,* Regularized Beta Function</a>.</li>
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,152,ouble n = 0.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,153,ouble an = 1.0 / a;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,154,ouble s = an;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,155,hile(Math.abs(an) > epsilon && n < maxIterations){
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,156, = n + 1.0;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,157,n = an * (n - b) / n * x / (a + n) * (a + n - 1);
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,158, = s + an;
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,160,"et = Math.exp(a * Math.log(x) - logBeta(a, b)) * s;"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,154,ContinuedFraction fraction = new ContinuedFraction() {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,155,"protected double getB(int n, double x) {"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,156,double ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,157,double m;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,158,switch (n) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,159,case 1 :
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,160,ret = 1.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,161,break;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,162,default :
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,163,if (n % 2 == 0) { // even
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,164,m = (n - 2.0) / 2.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,165,ret =
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,166,- ((a + m) * (a + b + m) * x)
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,167,/ ((a + (2 * m)) * (a + (2 * m) + 1.0));
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,168,} else {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,169,m = (n - 1.0) / 2.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,170,ret =
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,171,(m * (b - m) * x)
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,172,/ ((a + (2 * m) - 1) * (a + (2 * m)));
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,174,break;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,176,return ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,179,"protected double getA(int n, double x) {"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,180,double ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,181,switch (n) {
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,182,case 0 :
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,183,ret = 0.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,184,break;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,185,default :
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,186,ret = 1.0;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,187,break;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,189,return ret;
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,192,"ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) - Math.log(a) - logBeta(a, b, epsilon, maxIterations)) * fraction.evaluate(x, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,199,* <p>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,200,"* Returns the natural logarithm of the beta function B(a, b)."
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,201,* </p>
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,203,* @param a ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,204,* @param b ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,205,"* @return log(B(a, b))"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,207,"public static double logBeta(double a, double b) {"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,208,"return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,179, @param x ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,224,* @param a ???
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,225,* @param b ???
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,182,"ublic static double logBeta(double a, double b) {"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,228,"public static double logBeta(double a, double b, double epsilon, int maxIterations) {"
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,190,et = Gamma.logGamma(a) + Gamma.logGamma(b)
False,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,191, Gamma.logGamma(a + b);
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,236,"ret = Gamma.logGamma(a, epsilon, maxIterations) + Gamma.logGamma(b, epsilon, maxIterations)"
True,src/java/org/apache/commons/math/special/Beta.java,src/java/org/apache/commons/math/special/Beta.java,237,"- Gamma.logGamma(a + b, epsilon, maxIterations);"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,65,** Maximum number of iteration allowed for iterative methods. */
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,66,/ TODO: try to reduce this.  regularizedGammaP doesn't converge very
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,67,/ fast for large values of x.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,68,rivate static final int MAXIMUM_ITERATIONS = 100;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,71,rivate static final double EPSILON = 10e-9;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,66,private static final double DEFAULT_EPSILON = 10e-9;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,76,* <p>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,77,"* Returns the regularized gamma function P(a, x)."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,78,* </p>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,80,* @param a ???
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,81,* @param x ???
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,82,"* @return the regularized gamma function P(a, x)"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,84,"public static double regularizedGammaP(double a, double x) {"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,85,"return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,105,"ublic static double regularizedGammaP(double a, double x) {"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,113,"public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,117,hile (Math.abs(an) > EPSILON && n < MAXIMUM_ITERATIONS) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,125,while (Math.abs(an) > epsilon && n < maxIterations) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,125,f (n >= MAXIMUM_ITERATIONS) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,133,if (n >= maxIterations) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,129,et = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,137,"ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a, epsilon, maxIterations)) * sum;"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,157,ublic static double logGamma(double x) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,165,"public static double logGamma(double x, double epsilon, int maxIterations) {"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,9,* are met:
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,56,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,59,* @author Brent Worden
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,61,public class ContinuedFractionTest extends TestCase {
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,63,* Constructor for ContinuedFractionTest.
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,64,* @param name
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,66,public ContinuedFractionTest(String name) {
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,67,super(name);
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,70,public void testGoldenRation(){
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,71,ContinuedFraction cf = new ContinuedFraction() {
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,72,"public double getA(int n, double x) {"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,73,return 1.0;
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,76,"public double getB(int n, double x) {"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,77,return 1.0;
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,80,"double gr = cf.evaluate(0.0, 10e-9);"
True,src/test/org/apache/commons/math/ContinuedFractionTest.java,src/test/org/apache/commons/math/ContinuedFractionTest.java,81,"assertEquals(1.61803399, gr, 10e-9);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,61,public void testCreateFDistributionNegativePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,62,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,63,"factory.createFDistribution(-1.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,64,"fail(""negative degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,65,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,70,public void testCreateFDistributionZeroPositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,71,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,72,"factory.createFDistribution(0.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,73,"fail(""zero degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,74,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,79,public void testCreateFDistributionPositiveNegative(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,80,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,81,"factory.createFDistribution(1.0, -1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,82,"fail(""negative degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,83,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,88,public void testCreateFDistributionPositiveZero(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,89,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,90,"factory.createFDistribution(1.0, 0.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,91,"fail(""zero degrees of freedom.  IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,92,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,97,public void testCreateFDistributionPositivePositive(){
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,98,try {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,99,"factory.createFDistribution(1.0, 1.0);"
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,100,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,101,"fail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,5,* reserved.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,9,* are met:
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,54,package org.apache.commons.math.stat.distribution;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,56,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,59,* @author Brent Worden
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,61,public class FDistributionTest extends TestCase {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,62,private FDistribution f;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,65,* Constructor for ChiSquareDistributionTest.
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,66,* @param name
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,68,public FDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,69,super(name);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,73,* @see TestCase#setUp()
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,75,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,76,super.setUp();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,77,"f = DistributionFactory.newInstance().createFDistribution(5.0, 6.0);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,81,* @see TestCase#tearDown()
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,83,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,84,f = null;
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,85,super.tearDown();
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,88,public void testLowerTailProbability(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,89,"testProbability(1.0 / 10.67, .010);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,90,"testProbability(1.0 /  6.98, .025);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,91,"testProbability(1.0 /  4.95, .050);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,92,"testProbability(1.0 /  3.40, .100);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,95,public void testUpperTailProbability(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,96,"testProbability(8.75, .990);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,97,"testProbability(5.99, .975);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,98,"testProbability(4.39, .950);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,99,"testProbability(3.11, .900);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,102,public void testLowerTailValues(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,103,"testValue(1.0 / 10.67, .010);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,104,"testValue(1.0 /  6.98, .025);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,105,"testValue(1.0 /  4.95, .050);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,106,"testValue(1.0 /  3.40, .100);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,109,public void testUpperTailValues(){
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,110,"testValue(8.75, .990);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,111,"testValue(5.99, .975);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,112,"testValue(4.39, .950);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,113,"testValue(3.11, .900);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,116,"private void testProbability(double x, double expected){"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,117,double actual = f.cummulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,118,"assertEquals(""probability for "" + x, expected, actual, 1e-3);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,121,"private void testValue(double expected, double p){"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,122,double actual = f.inverseCummulativeProbability(p);
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,123,"assertEquals(""value for "" + p, expected, actual, 1e-2);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,386,// org.apache.commons.math.linear.decomposition.SingularValueDecompositionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,387,"{ ""cutoff singular value is {0}, should be at most {1}"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,388,"""la valeur singuli\u00e8re de coupure vaut {0}, elle ne devrait pas d\u00e9passer {1}"" },"
False,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,42,   <li>a {@link #getSolver() getSolver} method has been added.</li>
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,42,"*   <li>a {@link #getSolver() getSolver} method has been added,</li>"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,43,*   <li>a {@link #getCovariance(double) getCovariance} method has been added.</li>
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,101,* Returns the n &times; n covariance matrix.
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,102,* <p>The covariance matrix is V &times; J &times; V<sup>T</sup>
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,103,* where J is the diagonal matrix of the inverse of the squares of
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,104,* the singular values.</p>
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,105,* @param minSingularValue value below which singular values are ignored
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,106,* (a 0 or negative value implies all singular value will be used)
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,107,* @return covariance matrix
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,108,* @exception IllegalArgumentException if minSingularValue is larger than
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,109,"* the largest singular value, meaning all singular values are ignored"
True,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,src/java/org/apache/commons/math/linear/SingularValueDecomposition.java,111,RealMatrix getCovariance(double minSingularValue) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,259,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,260,public RealMatrix getCovariance(final double minSingularValue) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,262,// get the number of singular values to consider
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,263,int dimension = 0;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,264,while ((dimension < n) && (singularValues[dimension] >= minSingularValue)) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,265,++dimension;
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,268,if (dimension == 0) {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,269,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,270,"""cutoff singular value is {0}, should be at most {1}"","
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,271,"minSingularValue, singularValues[0]);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,274,final double[][] data = new double[dimension][n];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,275,getVT().walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,276,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,277,@Override
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,278,"public void visit(final int row, final int column, final double value) {"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,279,data[row][column] = value / singularValues[row];
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,281,"}, 0, dimension - 1, 0, n - 1);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,283,"RealMatrix jv = new Array2DRowRealMatrix(data, false);"
True,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java,284,return jv.transpose().multiply(jv);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,100,/** Test based on a dimension 4 Hadamard matrix. */
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,101,public void testHadamard() {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,102,RealMatrix matrix = new Array2DRowRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,103,"{15.0 / 2.0,  5.0 / 2.0,  9.0 / 2.0,  3.0 / 2.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,104,"{ 5.0 / 2.0, 15.0 / 2.0,  3.0 / 2.0,  9.0 / 2.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,105,"{ 9.0 / 2.0,  3.0 / 2.0, 15.0 / 2.0,  5.0 / 2.0 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,106,"{ 3.0 / 2.0,  9.0 / 2.0,  5.0 / 2.0, 15.0 / 2.0 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,107,"}, false);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,108,SingularValueDecomposition svd = new SingularValueDecompositionImpl(matrix);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,109,"assertEquals(16.0, svd.getSingularValues()[0], 1.0e-14);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,110,"assertEquals( 8.0, svd.getSingularValues()[1], 1.0e-14);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,111,"assertEquals( 4.0, svd.getSingularValues()[2], 1.0e-14);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,112,"assertEquals( 2.0, svd.getSingularValues()[3], 1.0e-14);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,114,RealMatrix fullCovariance = new Array2DRowRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,115,"{  85.0 / 1024, -51.0 / 1024, -75.0 / 1024,  45.0 / 1024 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,116,"{ -51.0 / 1024,  85.0 / 1024,  45.0 / 1024, -75.0 / 1024 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,117,"{ -75.0 / 1024,  45.0 / 1024,  85.0 / 1024, -51.0 / 1024 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,118,"{  45.0 / 1024, -75.0 / 1024, -51.0 / 1024,  85.0 / 1024 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,119,"}, false);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,120,"assertEquals(0.0,"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,121,"fullCovariance.subtract(svd.getCovariance(0.0)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,122,1.0e-14);
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,124,RealMatrix halfCovariance = new Array2DRowRealMatrix(new double[][] {
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,125,"{   5.0 / 1024,  -3.0 / 1024,   5.0 / 1024,  -3.0 / 1024 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,126,"{  -3.0 / 1024,   5.0 / 1024,  -3.0 / 1024,   5.0 / 1024 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,127,"{   5.0 / 1024,  -3.0 / 1024,   5.0 / 1024,  -3.0 / 1024 },"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,128,"{  -3.0 / 1024,   5.0 / 1024,  -3.0 / 1024,   5.0 / 1024 }"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,129,"}, false);"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,130,"assertEquals(0.0,"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,131,"halfCovariance.subtract(svd.getCovariance(6.0)).getNorm(),"
True,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,src/test/org/apache/commons/math/linear/SingularValueDecompositionImplTest.java,132,1.0e-14);

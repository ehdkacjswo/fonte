is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,71,"return sum(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,75,* The sum of the values that have been added to Univariate.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,76,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,77,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,78,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,79,* @return the sum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,81,"public static double sum(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,82,"testInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,72,or (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,84,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,96,"return sumSq(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,100,* Returns the sum of the squares of the available values.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,101,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,102,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,103,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,104,* @return the sum of the squared values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,106,"public static double sumSq(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,107,"testInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,85,or (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,109,for (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,97,ouble product = Double.NaN;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,98,f (values.length > 0) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,99,roduct = 1.0;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,100,or (int i = 0; i < values.length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,101,roduct *= values[i];
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,121,"return product(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,125,* Returns the product for this collection of values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,126,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,127,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,128,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,129,* @return the product values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,131,"public static double product(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,132,"testInput(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,133,double product = 1.0;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,134,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,135,product *= values[i];
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,113,ouble sumLog = Double.NaN;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,114,f (values.length > 0) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,115,umLog = 0.0;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,116,or (int i = 0; i < values.length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,117,umLog += Math.log(values[i]);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,146,"return sumLog(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,150,* Returns the sum of the natural logs for this collection of values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,151,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,152,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,153,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,154,* @return the sumLog value or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,156,"public static double sumLog(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,157,"testInput(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,158,double sumLog = 0.0;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,159,for (int i = begin; i < begin + length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,160,sumLog += Math.log(values[i]);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,130,eturn Math.exp(sumLog(values) / (double) values.length);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,172,"return geometricMean(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,176,* Returns the geometric mean for this collection of values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,177,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,178,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,179,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,180,* @return the geometric mean or Double.NaN if the array is empty or
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,181,* any of the values are &lt;= 0.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,183,"public static double geometricMean(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,184,"testInput(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,185,"return Math.exp(sumLog(values, begin, length) / (double) length );"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,199,* Returns the <a href=http://www.xycoon.com/arithmetic_mean.htm>
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,200,* arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,201,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,202,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,203,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,204,* @return the mean of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,206,"public static double mean(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,207,"testInput(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,208,"return sum(values, begin, length) / ((double) length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,218,"return standardDeviation(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,223,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,224,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,225,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,226,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,227,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,229,public static double standardDeviation(
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,230,"double[] values,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,231,"int begin,"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,232,int length) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,233,"testInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,152,tdDev = Math.sqrt(variance(values));
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,236,"stdDev = Math.sqrt(variance(values, begin, length));"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,171,ouble variance = Double.NaN;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,255,"return variance(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,259,* Returns the variance of the available values. This uses a corrected
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,260,* two pass algorithm of the following
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,261,"* <a href=""http://lib-www.lanl.gov/numerical/bookcpdf/c14-1.pdf"">"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,262,"* corrected two pass formula (14.1.8)</a>, and also referenced in:<p/>"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,263,"* ""Algorithms for Computing the Sample Variance: Analysis and"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,264,"* Recommendations"", Chan, T.F., Golub, G.H., and LeVeque, R.J."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,265,"* 1983, American Statistician, vol. 37, pp. 242?247."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,267,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,268,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,269,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,270,"* @return the result, Double.NaN if no values for an empty array"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,271,* or 0.0 for a single value set.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,273,"public static double variance(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,274,"testInput(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,276,double variance = Double.NaN;
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,176,ouble mean = mean(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,280,"double mean = mean(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,179,or (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,283,for (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,184,"accum - (Math.pow(accum2, 2) / (double) values.length))"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,185, (double) (values.length - 1);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,288,"(accum - (Math.pow(accum2, 2) / ((double)length)))"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,289,/ (double) (length - 1);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,301,"return skewness(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,304,* Returns the skewness of a collection of values.  Skewness is a
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,305,* measure of the assymetry of a given distribution.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,306,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,307,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,308,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,309,* @return the skewness of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,311,"public static double skewness(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,313,"testInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,201,ouble mean = mean(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,202,ouble stdDev = standardDeviation(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,319,"double mean = mean(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,320,"double stdDev = standardDeviation(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,207,or (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,325,for (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,212,ouble n = values.length;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,330,double n = length;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,345,"return kurtosis(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,349,* Returns the kurtosis for this collection of values. Kurtosis is a
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,350,"* measure of the ""peakedness"" of a distribution."
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,351,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,352,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,353,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,354,* @return the kurtosis of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,356,"public static double kurtosis(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,358,"testInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,231,ouble mean = mean(values);
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,232,ouble stdDev = standardDeviation(values);
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,364,"double mean = mean(values, begin, length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,365,"double stdDev = standardDeviation(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,237,or (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,370,for (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,242,ouble n = values.length;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,375,double n = length;
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,391,"return max(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,395,* Returns the maximum of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,396,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,397,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,398,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,399,* @return the maximum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,401,"public static double max(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,402,"testInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,259,or (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,404,for (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,263,"ax = Math.max(max, values[i]);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,408,max = (max > values[i]) ? max : values[i];
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,420,"return min(values, 0, values.length);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,424,* Returns the minimum of the available values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,425,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,426,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,427,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,428,* @return the minimum of the values or Double.NaN if the array is empty
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,430,"public static double min(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,431,"testInput(values, begin, length);"
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,276,or (int i = 0; i < values.length; i++) {
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,434,for (int i = begin; i < begin + length; i++) {
False,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,280,"in = Math.min(min, values[i]);"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,438,min = (min < values[i]) ? min : values[i];
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,445,* Private testInput method used by all methods to verify the content
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,446,* of the array and indicies are correct.
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,447,* @param values Is a double[] containing the values
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,448,* @param begin processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,449,* @param length processing at this point in the array
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,451,"private static void testInput(double[] values, int begin, int length) {"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,453,if (length > values.length)
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,454,"throw new IllegalArgumentException(""length > values.length"");"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,456,if (begin + length > values.length)
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,457,"throw new IllegalArgumentException(""begin + length > values.length"");"
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,459,if (values == null)
True,src/java/org/apache/commons/math/stat/StatUtils.java,src/java/org/apache/commons/math/stat/StatUtils.java,460,"throw new IllegalArgumentException(""input value array is null"");"
False,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,65, @version $Revision: 1.1 $ $Date: 2003/06/18 15:59:55 $
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,65,* @version $Revision: 1.2 $ $Date: 2003/06/24 14:03:31 $
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,190,public void testArrayIndexConditions() throws Exception {
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,191,"double[] values = { 1.0, 2.0, 3.0, 4.0 };"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,193,"assertEquals(""Sum not expected"", 5.0, StatUtils.sum(values,1,2),Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,194,"assertEquals(""Sum not expected"", 3.0, StatUtils.sum(values,0,2),Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/StatUtilsTest.java,src/test/org/apache/commons/math/stat/StatUtilsTest.java,195,"assertEquals(""Sum not expected"", 7.0, StatUtils.sum(values,2,2),Double.MIN_VALUE);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,17,package org.apache.commons.math.stat.descriptive;
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,20,* Implementation of
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,21,* {@link org.apache.commons.math.stat.descriptive.SummaryStatistics} that
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,22,* is safe to use in a multithreaded environment.  Multiple threads can safely
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,23,* operate on a single instance without causing runtime exceptions due to race
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,24,"* conditions.  In effect, this implementation makes modification and access"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,25,"* methods atomic operations for a single instance.  That is to say, as one"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,26,"* thread is computing a statistic from the instance, no other thread can modify"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,27,* the instance nor compute another statistic.
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,29,* @since 1.2
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,30,"* @version $Revision: 602304 $ $Date: 2007-12-08 03:48:39 +0100 (sam., 08 d√©c. 2007) $"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,32,public class SynchronizedSummaryStatistics extends SummaryStatistics {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,34,/** Serialization UID */
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,35,private static final long serialVersionUID = 1909861009042253704L;
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,38,* Construct a SynchronizedSummaryStatistics instance
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,40,public SynchronizedSummaryStatistics() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,41,super();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,45,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSummary()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,47,public synchronized StatisticalSummary getSummary() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,48,return super.getSummary();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,52,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#addValue(double)
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,54,public synchronized void addValue(double value) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,55,super.addValue(value);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,59,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getN()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,61,public synchronized long getN() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,62,return super.getN();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,66,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSum()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,68,public synchronized double getSum() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,69,return super.getSum();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,73,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getSumsq()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,75,public synchronized double getSumsq() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,76,return super.getSumsq();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,80,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMean()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,82,public synchronized double getMean() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,83,return super.getMean();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,87,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,89,public synchronized double getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,90,return super.getStandardDeviation();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,94,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getVariance()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,96,public synchronized double getVariance() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,97,return super.getVariance();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,101,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMax()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,103,public synchronized double getMax() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,104,return super.getMax();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,108,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getMin()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,110,public synchronized double getMin() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,111,return super.getMin();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,115,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#getGeometricMean()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,117,public synchronized double getGeometricMean() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,118,return super.getGeometricMean();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,122,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#toString()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,124,public synchronized String toString() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,125,return super.toString();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,129,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#clear()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,131,public synchronized void clear() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,132,super.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,136,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#equals(Object)
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,138,public synchronized boolean equals(Object object) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,139,return super.equals(object);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,143,* @see org.apache.commons.math.stat.descriptive.SummaryStatistics#hashCode()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,145,public synchronized int hashCode() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatistics.java,146,return super.hashCode();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,17,package org.apache.commons.math.stat.descriptive;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,22,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,24,* Test cases for the {@link SummaryStatisticsImpl} class.
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,26,"* @version $Revision: 602305 $ $Date: 2007-12-08 03:51:23 +0100 (sam., 08 d√©c. 2007) $"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,27,* @deprecated should be moved down into SummaryStatisticsTest
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,28,*   when SummaryStatisticsImpl is removed in 2.0
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,31,public abstract class SummaryStatisticsAbstractTest extends TestCase {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,32,private double one = 1;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,33,private float twoF = 2;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,34,private long twoL = 2;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,35,private int three = 3;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,36,private double mean = 2;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,37,private double sumSq = 18;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,38,private double sum = 8;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,39,private double var = 0.666666666666666666667;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,40,private double std = Math.sqrt(var);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,41,private double n = 4;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,42,private double min = 1;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,43,private double max = 3;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,44,private double tolerance = 10E-15;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,46,protected SummaryStatistics u = null;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,48,public SummaryStatisticsAbstractTest(String name) {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,49,super(name);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,52,protected abstract SummaryStatistics createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,54,public void setUp() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,55,u = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,58,/** test stats */
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,59,public void testStats() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,60,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,61,u.addValue(one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,62,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,63,u.addValue(twoL);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,64,u.addValue(three);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,65,"assertEquals(""N"",n,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,66,"assertEquals(""sum"",sum,u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,67,"assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,68,"assertEquals(""var"",var,u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,69,"assertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,70,"assertEquals(""mean"",mean,u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,71,"assertEquals(""min"",min,u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,72,"assertEquals(""max"",max,u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,73,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,74,"assertEquals(""total count"",0,u.getN(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,77,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,78,"assertTrue(""Mean of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,79,Double.isNaN( u.getMean() ) );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,80,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,81,Double.isNaN( u.getStandardDeviation() ) );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,82,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,83,Double.isNaN(u.getVariance() ) );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,85,/* n=1 */
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,86,u.addValue(one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,87,"assertTrue(""mean should be one (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,88,u.getMean() == one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,89,"assertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,90,u.getGeometricMean() == one);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,91,"assertTrue(""Std should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,92,u.getStandardDeviation() == 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,93,"assertTrue(""variance should be zero (n = 1)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,94,u.getVariance() == 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,96,/* n=2 */
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,97,u.addValue(twoF);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,98,"assertTrue(""Std should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,99,u.getStandardDeviation() != 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,100,"assertTrue(""variance should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,101,u.getVariance() != 0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,105,public void testProductAndGeometricMean() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,106,u.addValue( 1.0 );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,107,u.addValue( 2.0 );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,108,u.addValue( 3.0 );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,109,u.addValue( 4.0 );
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,111,"assertEquals( ""Geometric mean not expected"", 2.213364,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,112,"u.getGeometricMean(), 0.00001 );"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,115,public void testNaNContracts() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,116,"assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,117,"assertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,118,"assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,119,"assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,120,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,122,u.addValue(1.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,124,"assertEquals( ""mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,125,"u.getMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,126,"assertEquals( ""variance not expected"", 0.0,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,127,"u.getVariance(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,128,"assertEquals( ""geometric mean not expected"", 1.0,"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,129,"u.getGeometricMean(), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,131,u.addValue(-1.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,133,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,135,u.addValue(0.0);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,137,"assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,139,//FiXME: test all other NaN contract specs
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,142,public void testGetSummary() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,143,StatisticalSummary summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,144,verifySummary(summary);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,145,u.addValue(1d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,146,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,147,verifySummary(summary);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,148,u.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,149,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,150,verifySummary(summary);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,151,u.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,152,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,153,verifySummary(summary);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,156,public void testSerialization() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,157,// Empty test
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,158,TestUtils.checkSerializedEquality(u);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,159,SummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,160,StatisticalSummary summary = s.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,161,verifySummary(summary);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,163,// Add some data
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,164,u.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,165,u.addValue(1d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,166,u.addValue(3d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,167,u.addValue(4d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,168,u.addValue(5d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,170,// Test again
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,171,TestUtils.checkSerializedEquality(u);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,172,s = (SummaryStatistics) TestUtils.serializeAndRecover(u);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,173,summary = s.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,174,verifySummary(summary);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,178,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,179,SummaryStatistics t = null;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,180,int emptyHash = u.hashCode();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,181,"assertTrue(""reflexive"", u.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,182,"assertFalse(""non-null compared to null"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,183,"assertFalse(""wrong type"", u.equals(new Double(0)));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,184,t = createSummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,185,"assertTrue(""empty instances should be equal"", t.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,186,"assertTrue(""empty instances should be equal"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,187,"assertEquals(""empty hash code"", emptyHash, t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,189,// Add some data to u
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,190,u.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,191,u.addValue(1d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,192,u.addValue(3d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,193,u.addValue(4d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,194,"assertFalse(""different n's should make instances not equal"", t.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,195,"assertFalse(""different n's should make instances not equal"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,196,"assertTrue(""different n's should make hashcodes different"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,197,u.hashCode() != t.hashCode());
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,199,"//Add data in different order to t, should not affect identity or hashcode"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,200,t.addValue(4d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,201,t.addValue(2d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,202,t.addValue(3d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,203,t.addValue(1d);
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,204,"assertTrue(""summaries based on same data should be equal"", t.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,205,"assertTrue(""summaries based on same data should be equal"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,206,"assertEquals(""summaries based on same data should have same hashcodes"","
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,207,"u.hashCode(), t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,209,// Clear and make sure summaries are indistinguishable from empty summary
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,210,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,211,t.clear();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,212,"assertTrue(""empty instances should be equal"", t.equals(u));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,213,"assertTrue(""empty instances should be equal"", u.equals(t));"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,214,"assertEquals(""empty hash code"", emptyHash, t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,215,"assertEquals(""empty hash code"", emptyHash, u.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,218,private void verifySummary(StatisticalSummary s) {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,219,"assertEquals(""N"",s.getN(),u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,220,"TestUtils.assertEquals(""sum"",s.getSum(),u.getSum(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,221,"TestUtils.assertEquals(""var"",s.getVariance(),u.getVariance(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,222,"TestUtils.assertEquals(""std"",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,223,"TestUtils.assertEquals(""mean"",s.getMean(),u.getMean(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,224,"TestUtils.assertEquals(""min"",s.getMin(),u.getMin(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsAbstractTest.java,225,"TestUtils.assertEquals(""max"",s.getMax(),u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,24,mport org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,24,* @deprecated - to be removed in 2.0 with SummaryStatisticsImpl
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,31,ublic final class SummaryStatisticsImplTest extends TestCase {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,32,rivate double one = 1;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,33,rivate float twoF = 2;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,34,rivate long twoL = 2;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,35,rivate int three = 3;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,36,rivate double mean = 2;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,37,rivate double sumSq = 18;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,38,rivate double sum = 8;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,39,rivate double var = 0.666666666666666666667;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,40,rivate double std = Math.sqrt(var);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,41,rivate double n = 4;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,42,rivate double min = 1;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,43,rivate double max = 3;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,44,rivate double tolerance = 10E-15;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,46,rotected SummaryStatistics u = null;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,28,public final class SummaryStatisticsImplTest extends SummaryStatisticsAbstractTest {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,52,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,53, = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,58,"uite.setName(""Frequency Tests"");"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,36,"suite.setName(""SummaryStatisticsImpl Tests"");"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,62,** test stats */
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,63,ublic void testStats() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,64,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,65,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,66,.addValue(twoF);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,67,.addValue(twoL);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,68,.addValue(three);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,69,"ssertEquals(""N"",n,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,70,"ssertEquals(""sum"",sum,u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,71,"ssertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,72,"ssertEquals(""var"",var,u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,73,"ssertEquals(""std"",std,u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,74,"ssertEquals(""mean"",mean,u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,75,"ssertEquals(""min"",min,u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,76,"ssertEquals(""max"",max,u.getMax(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,77,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,78,"ssertEquals(""total count"",0,u.getN(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,81,ublic void testN0andN1Conditions() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,82,"ssertTrue(""Mean of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,83,ouble.isNaN( u.getMean() ) );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,84,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,85,ouble.isNaN( u.getStandardDeviation() ) );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,86,"ssertTrue(""Variance of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,87,ouble.isNaN(u.getVariance() ) );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,89,* n=1 */
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,90,.addValue(one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,91,"ssertTrue(""mean should be one (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,92,.getMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,93,"ssertTrue(""geometric should be one (n = 1) instead it is "" + u.getGeometricMean(),"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,94,.getGeometricMean() == one);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,95,"ssertTrue(""Std should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,96,.getStandardDeviation() == 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,97,"ssertTrue(""variance should be zero (n = 1)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,98,.getVariance() == 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,100,* n=2 */
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,101,.addValue(twoF);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,102,"ssertTrue(""Std should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,103,.getStandardDeviation() != 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,104,"ssertTrue(""variance should not be zero (n = 2)"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,105,.getVariance() != 0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,109,ublic void testProductAndGeometricMean() throws Exception {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,110,.addValue( 1.0 );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,111,.addValue( 2.0 );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,112,.addValue( 3.0 );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,113,.addValue( 4.0 );
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,115,"ssertEquals( ""Geometric mean not expected"", 2.213364,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,116,".getGeometricMean(), 0.00001 );"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,119,ublic void testNaNContracts() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,120,"ssertTrue(""mean not NaN"",Double.isNaN(u.getMean()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,121,"ssertTrue(""min not NaN"",Double.isNaN(u.getMin()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,122,"ssertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,123,"ssertTrue(""var not NaN"",Double.isNaN(u.getVariance()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,124,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,126,.addValue(1.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,128,"ssertEquals( ""mean not expected"", 1.0,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,129,".getMean(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,130,"ssertEquals( ""variance not expected"", 0.0,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,131,".getVariance(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,132,"ssertEquals( ""geometric mean not expected"", 1.0,"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,133,".getGeometricMean(), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,135,.addValue(-1.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,137,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,139,.addValue(0.0);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,141,"ssertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,143,/FiXME: test all other NaN contract specs
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,146,ublic void testGetSummary() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,147,tatisticalSummary summary = u.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,148,erifySummary(summary);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,149,.addValue(1d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,150,ummary = u.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,151,erifySummary(summary);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,152,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,153,ummary = u.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,154,erifySummary(summary);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,155,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,156,ummary = u.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,157,erifySummary(summary);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,160,ublic void testSerialization() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,161,/ Empty test
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,162,estUtils.checkSerializedEquality(u);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,163,ummaryStatistics s = (SummaryStatistics) TestUtils.serializeAndRecover(u);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,164,tatisticalSummary summary = s.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,165,erifySummary(summary);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,167,/ Add some data
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,168,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,169,.addValue(1d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,170,.addValue(3d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,171,.addValue(4d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,172,.addValue(5d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,174,/ Test again
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,175,estUtils.checkSerializedEquality(u);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,176, = (SummaryStatistics) TestUtils.serializeAndRecover(u);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,177,ummary = s.getSummary();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,178,erifySummary(summary);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,182,ublic void testEqualsAndHashCode() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,183,ummaryStatistics t = null;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,184,nt emptyHash = u.hashCode();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,185,"ssertTrue(""reflexive"", u.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,186,"ssertFalse(""non-null compared to null"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,187,"ssertFalse(""wrong type"", u.equals(new Double(0)));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,188, = SummaryStatistics.newInstance();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,189,"ssertTrue(""empty instances should be equal"", t.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,190,"ssertTrue(""empty instances should be equal"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,191,"ssertEquals(""empty hash code"", emptyHash, t.hashCode());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,193,/ Add some data to u
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,194,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,195,.addValue(1d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,196,.addValue(3d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,197,.addValue(4d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,198,"ssertFalse(""different n's should make instances not equal"", t.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,199,"ssertFalse(""different n's should make instances not equal"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,200,"ssertTrue(""different n's should make hashcodes different"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,201,.hashCode() != t.hashCode());
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,203,"/Add data in different order to t, should not affect identity or hashcode"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,204,.addValue(4d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,205,.addValue(2d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,206,.addValue(3d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,207,.addValue(1d);
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,208,"ssertTrue(""summaries based on same data should be equal"", t.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,209,"ssertTrue(""summaries based on same data should be equal"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,210,"ssertEquals(""summaries based on same data should have same hashcodes"","
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,211,".hashCode(), t.hashCode());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,213,/ Clear and make sure summaries are indistinguishable from empty summary
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,214,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,215,.clear();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,216,"ssertTrue(""empty instances should be equal"", t.equals(u));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,217,"ssertTrue(""empty instances should be equal"", u.equals(t));"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,218,"ssertEquals(""empty hash code"", emptyHash, t.hashCode());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,219,"ssertEquals(""empty hash code"", emptyHash, u.hashCode());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,222,rivate void verifySummary(StatisticalSummary s) {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,223,"ssertEquals(""N"",s.getN(),u.getN());"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,224,"estUtils.assertEquals(""sum"",s.getSum(),u.getSum(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,225,"estUtils.assertEquals(""var"",s.getVariance(),u.getVariance(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,226,"estUtils.assertEquals(""std"",s.getStandardDeviation(),u.getStandardDeviation(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,227,"estUtils.assertEquals(""mean"",s.getMean(),u.getMean(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,228,"estUtils.assertEquals(""min"",s.getMin(),u.getMin(),tolerance);"
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,229,"estUtils.assertEquals(""max"",s.getMax(),u.getMax(),tolerance);"
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,40,protected SummaryStatistics createSummaryStatistics() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsImplTest.java,41,return new SummaryStatisticsImpl();
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,24,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,34,ublic final class SummaryStatisticsTest extends TestCase {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,36,rotected SummaryStatistics u = null;
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,33,public final class SummaryStatisticsTest extends SummaryStatisticsAbstractTest {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,42,ublic void setUp() {
False,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,43, = new SummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,45,protected SummaryStatistics createSummaryStatistics() {
True,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,46,return new SummaryStatistics();
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,7,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,12,* governing permissions and limitations under the License.
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,14,package org.apache.commons.math.stat.descriptive;
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,16,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,17,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,20,* Test cases for the {@link SynchronizedSummaryStatisticsTest} class.
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,21,"* @version $Revision: 592121 $ $Date: 2007-08-16 15:36:33 -0500 (Thu, 16 Aug"
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,22,*          2007) $
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,24,public final class SynchronizedSummaryStatisticsTest extends SummaryStatisticsAbstractTest {
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,26,public SynchronizedSummaryStatisticsTest(String name) {
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,27,super(name);
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,30,public static Test suite() {
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,31,TestSuite suite = new TestSuite(SynchronizedSummaryStatisticsTest.class);
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,32,"suite.setName(""SynchronizedSummaryStatistics Tests"");"
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,33,return suite;
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,36,protected SummaryStatistics createSummaryStatistics() {
True,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java,37,return new SynchronizedSummaryStatistics();

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,2,* Copyright 2003-2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,19,import java.math.BigDecimal;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,22,"* Interface defining a real-valued matrix with basic algebraic operations, using"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,23,* BigDecimal representations for the entries.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,25,* @version $Revision: 1.1 $ $Date: 2004/06/06 04:20:45 $
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,27,public interface BigMatrix {
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,30,* Returns a (deep) copy of this.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,32,* @return matrix copy
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,34,BigMatrix copy();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,37,* Compute the sum of this and m.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,39,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,40,* @return     this + m
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,41,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,43,BigMatrix add(BigMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,46,* Compute this minus m.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,48,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,49,* @return     this + m
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,50,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,52,BigMatrix subtract(BigMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,55,* Returns the result of adding d to each entry of this.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,57,* @param d    value to be added to each entry
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,58,* @return     d + this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,60,BigMatrix scalarAdd(BigDecimal d);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,63,* Returns the result multiplying each entry of this by d.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,65,* @param d    value to multiply all entries by
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,66,* @return     d * this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,68,BigMatrix scalarMultiply(BigDecimal d);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,71,* Returns the result postmultiplying this by m.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,73,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,74,* @return     this * m
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,75,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,76,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,78,BigMatrix multiply(BigMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,81,* Returns the result premultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,82,* @param m    matrix to premultiply by
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,83,* @return     m * this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,84,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,85,*             if rowDimension(this) != columnDimension(m)
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,87,public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,90,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,92,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,94,BigDecimal[][] getData();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,97,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,99,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,101,double [][] getDataAsDoubleArray();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,104,* Overwrites the underlying data for the matrix with
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,105,* a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,107,* @param  data  2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,109,void setData(BigDecimal[][] data);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,112,* Overwrites the underlying data for the matrix with
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,113,* a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,115,* @param  data  2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,117,void setData(double[][] data);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,120,* Sets the rounding mode to use when dividing values
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,121,* @see java.math.BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,122,* @param roundingMode
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,124,void setRoundingMode(int roundingMode);
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,127,* Gets the rounding mode
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,128,* @return
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,130,int getRoundingMode();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,133,"* Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,134,* maximum absolute row sum norm</a> of the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,136,* @return norm
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,138,BigDecimal getNorm();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,141,* Returns the entries in row number <code>row</code> as an array.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,143,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,144,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,145,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,146,*                              than the number of rows in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,148,BigDecimal[] getRow(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,151,* Returns the entries in row number <code>row</code> as an array
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,152,* of double values.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,154,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,155,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,156,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,157,*                              than the number of rows in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,159,double [] getRowAsDoubleArray(int row) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,162,* Returns the entries in column number <code>col</code> as an array.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,164,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,165,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,166,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,167,*                              than the number of columns in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,169,BigDecimal[] getColumn(int col) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,172,* Returns the entries in column number <code>col</code> as an array
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,173,* of double values.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,175,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,176,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,177,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,178,*                              than the number of columns in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,180,double [] getColumnAsDoubleArray(int col) throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,183,* Returns the entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,185,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,186,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,187,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,188,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,189,*                              the dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,191,"BigDecimal getEntry(int row, int column) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,194,* Returns the entry in the specified row and column as a double
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,196,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,197,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,198,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,199,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,200,*                              the dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,202,"double getEntryAsDouble(int row, int column) throws MatrixIndexException;"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,205,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,207,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,208,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,209,* @param value  value to set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,210,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,211,*                              he dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,213,"void setEntry(int row, int column, BigDecimal value)"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,214,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,217,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,219,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,220,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,221,* @param value  value to set
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,222,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,223,*                              he dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,225,"void setEntry(int row, int column, double value)"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,226,throws MatrixIndexException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,229,* Returns the transpose of this matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,231,* @return transpose matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,233,BigMatrix transpose();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,236,* Returns the inverse of this matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,238,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,239,* @throws org.apache.commons.math.linear.InvalidMatrixException if  this is not invertible
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,241,BigMatrix inverse() throws InvalidMatrixException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,244,* Returns the determinant of this matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,246,* @return determinant
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,247,*@throws InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,249,BigDecimal getDeterminant();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,252,* Is this a square matrix?
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,253,* @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,255,boolean isSquare();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,258,* Is this a singular matrix?
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,259,* @return true if the matrix is singular
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,261,boolean isSingular();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,264,* Returns the number of rows in the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,266,* @return rowDimension
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,268,int getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,271,* Returns the number of columns in the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,273,* @return columnDimension
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,275,int getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,278,"* Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,279,* trace</a> of the matrix (the sum of the elements on the main diagonal).
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,281,* @return trace
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,283,BigDecimal getTrace();
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,286,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,288,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,289,* @return this*v
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,290,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,292,BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,295,* Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,297,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,298,* @return v*this
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,299,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,301,BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,304,* Returns the solution vector for a linear system with coefficient
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,305,* matrix = this and constant vector = <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,307,* @param b  constant vector
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,308,"* @return vector of solution values to AX = b, where A is *this"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,309,* @throws IllegalArgumentException if this.rowDimension != b.length
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,310,* @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,312,"BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,315,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,316,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,317,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,319,* @param b  matrix of constant vectors forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,320,* to solve
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,321,* @return matrix of solution vectors
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,322,* @throws IllegalArgumentException if this.rowDimension != row dimension
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,323,* @throws org.apache.commons.math.linear.InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrix.java,src/java/org/apache/commons/math/linear/BigMatrix.java,325,"BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,14,* limitations under the License.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,17,package org.apache.commons.math.linear;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,18,import java.io.Serializable;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,19,import java.math.BigDecimal;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,22,* Implementation for {@link BigMatrix} using a BigDecimal[][] array to store entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,23,"* and <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,24,* LU decompostion</a> to support linear system
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,25,* solution and inverse.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,26,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,27,"* The LU decompostion is performed as needed, to support the following operations: <ul>"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,28,* <li>solve</li>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,29,* <li>isSingular</li>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,30,* <li>getDeterminant</li>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,31,* <li>inverse</li> </ul>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,32,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,33,* <strong>Usage note</strong>:<br>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,34,* The LU decomposition is stored and reused on subsequent calls.  If matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,35,"* data are modified using any of the public setXxx methods, the saved"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,36,* decomposition is discarded.  If data are modified via references to the
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,37,"* underlying array obtained using <code>getDataRef()</code>, then the stored"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,38,"* LU decomposition will not be discarded.  In this case, you need to"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,39,* explicitly invoke <code>LUDecompose()</code> to recompute the decomposition
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,40,* before using any of the methods above.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,42,* @version $Revision: 1.1 $ $Date: 2004/06/06 04:20:45 $
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,44,"public class BigMatrixImpl implements BigMatrix, Serializable {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,46,/** Serialization id */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,47,static final long serialVersionUID = -1011428905656140431L;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,49,private static final BigDecimal ZERO = new BigDecimal(0);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,50,private static final BigDecimal ONE = new BigDecimal(1);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,52,/** Entries of the matrix */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,53,private BigDecimal data[][] = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,55,/** Entries of cached LU decomposition.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,56,*  All updates to data (other than luDecompose()) *must* set this to null
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,58,private BigDecimal lu[][] = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,60,/** Permutation associated with LU decompostion */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,61,private int[] permutation = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,63,/** Parity of the permutation associated with the LU decomposition */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,64,private int parity = 1;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,66,/** Rounding mode for divisions **/
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,67,private int roundingMode = BigDecimal.ROUND_HALF_UP;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,69,/*** BigDecimal scale ***/
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,70,private int scale = 64;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,72,/** Bound to determine effective singularity in LU decomposition */
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,73,protected static BigDecimal TOO_SMALL = new BigDecimal(10E-12);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,76,* Creates a matrix with no data
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,78,public BigMatrixImpl() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,82,* Create a new BigMatrix with the supplied row and column dimensions.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,84,* @param rowDimension      the number of rows in the new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,85,* @param columnDimension   the number of columns in the new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,87,"public BigMatrixImpl(int rowDimension, int columnDimension) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,88,data = new BigDecimal[rowDimension][columnDimension];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,89,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,93,* Create a new BigMatrix using the <code>data</code> as the underlying
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,94,* data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,95,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,96,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,98,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,100,public BigMatrixImpl(BigDecimal[][] d) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,101,this.copyIn(d);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,102,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,106,* Create a new BigMatrix using the <code>data</code> as the underlying
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,107,* data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,108,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,109,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,111,* @param d data for new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,113,public BigMatrixImpl(double[][] d) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,114,this.copyIn(d);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,115,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,119,* Create a new (column) BigMatrix using <code>v</code> as the
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,120,* data for the unique column of the <code>v.length x 1</code> matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,121,* created.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,122,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,123,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,125,* @param v column vector holding data for new matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,127,public BigMatrixImpl(BigDecimal[] v) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,128,int nRows = v.length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,129,data = new BigDecimal[nRows][1];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,130,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,131,data[row][0] = v[row];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,136,* Create a new BigMatrix which is a copy of this.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,138,* @return  the cloned matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,140,public BigMatrix copy() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,141,return new BigMatrixImpl(this.copyOut());
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,145,* Compute the sum of this and <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,147,* @param m    matrix to be added
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,148,* @return     this + m
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,149,* @exception  IllegalArgumentException if m is not the same size as this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,151,public BigMatrix add(BigMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,152,if (this.getColumnDimension() != m.getColumnDimension() ||
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,153,this.getRowDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,154,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,156,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,157,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,158,BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,159,BigDecimal[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,160,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,161,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,162,outData[row][col] = data[row][col].add(mData[row][col]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,165,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,169,* Compute  this minus <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,171,* @param m    matrix to be subtracted
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,172,* @return     this + m
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,173,* @exception  IllegalArgumentException if m is not the same size as *this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,175,public BigMatrix subtract(BigMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,176,if (this.getColumnDimension() != m.getColumnDimension() ||
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,177,this.getRowDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,178,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,180,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,181,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,182,BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,183,BigDecimal[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,184,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,185,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,186,outData[row][col] = data[row][col].subtract(mData[row][col]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,189,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,193,* Returns the result of adding d to each entry of this.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,195,* @param d    value to be added to each entry
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,196,* @return     d + this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,198,public BigMatrix scalarAdd(BigDecimal d) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,199,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,200,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,201,BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,202,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,203,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,204,outData[row][col] = data[row][col].add(d);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,207,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,211,* Returns the result multiplying each entry of this by <code>d</code>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,212,* @param d  value to multiply all entries by
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,213,* @return d * this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,215,public BigMatrix scalarMultiply(BigDecimal d) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,216,int rowCount = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,217,int columnCount = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,218,BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,219,for (int row = 0; row < rowCount; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,220,for (int col = 0; col < columnCount; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,221,outData[row][col] = data[row][col].multiply(d);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,224,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,228,* Returns the result postmultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,229,* @param m    matrix to postmultiply by
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,230,* @return     this*m
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,231,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,232,*             if columnDimension(this) != rowDimension(m)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,234,public BigMatrix multiply(BigMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,235,if (this.getColumnDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,236,"throw new IllegalArgumentException(""Matrices are not multiplication compatible."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,238,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,239,int nCols = m.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,240,int nSum = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,241,BigDecimal[][] mData = m.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,242,BigDecimal[][] outData = new BigDecimal[nRows][nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,243,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,244,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,245,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,246,sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,247,for (int i = 0; i < nSum; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,248,sum = sum.add(data[row][i].multiply(mData[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,250,outData[row][col] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,253,return new BigMatrixImpl(outData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,257,* Returns the result premultiplying this by <code>m</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,258,* @param m    matrix to premultiply by
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,259,* @return     m * this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,260,* @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,261,*             if rowDimension(this) != columnDimension(m)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,263,public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,264,return m.multiply(this);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,268,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,269,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,270,* Makes a fresh copy of the underlying data.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,272,* @return    2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,274,public BigDecimal[][] getData() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,275,return copyOut();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,278,public double[][] getDataAsDoubleArray() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,279,int nRows = getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,280,int nCols = getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,281,double d[][] = new double[nRows][nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,282,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,283,for (int j=0; j<nCols;j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,284,d[i][j] = data[i][j].doubleValue();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,287,return d;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,291,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,292,* with a fresh copy of <code>inData</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,294,* @param  inData 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,296,public void setData(BigDecimal[][] inData) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,297,copyIn(inData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,298,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,301,public void setData(double[][] inData) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,302,copyIn(inData);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,303,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,307,* Returns a reference to the underlying data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,308,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,309,* Does not make a fresh copy of the underlying data.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,311,* @return 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,313,public BigDecimal[][] getDataRef() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,314,return data;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,318,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,319,* with a reference to <code>inData</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,320,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,321,* Does not make a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,323,* @param  inData 2-dimensional array of entries
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,325,public void setDataRef(BigDecimal[][] inData) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,326,this.data = inData;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,327,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,331,* Gets the rounding mode for division operations
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,332,* The default is {@link BigDecimal.ROUND_HALF_UP}
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,333,* @see BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,334,* @return
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,336,public int getRoundingMode() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,337,return roundingMode;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,341,* Sets the rounding mode for decimal divisions.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,342,* @see BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,343,* @param roundingMode
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,345,public void setRoundingMode(int roundingMode) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,346,this.roundingMode = roundingMode;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,350,* Sets the scale for division operations.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,351,* The default is 64
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,352,* @see BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,353,* @return
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,355,public int getScale() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,356,return scale;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,360,* Sets the scale for division operations.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,361,* @see BigDecimal
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,362,* @param scale
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,364,public void setScale(int scale) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,365,this.scale = scale;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,369,"* Returns the <a href=""http://mathworld.wolfram.com/MaximumAbsoluteRowSumNorm.html"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,370,* maximum absolute row sum norm</a> of the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,372,* @return norm
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,374,public BigDecimal getNorm() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,375,BigDecimal maxColSum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,376,for (int col = 0; col < this.getColumnDimension(); col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,377,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,378,for (int row = 0; row < this.getRowDimension(); row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,379,sum = sum.add(data[row][col].abs());
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,381,maxColSum = maxColSum.max(sum);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,383,return maxColSum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,387,* Returns the entries in row number <code>row</code> as an array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,389,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,390,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,391,* @throws MatrixIndexException if the specified row is greater
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,392,*                              than the number of rows in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,394,public BigDecimal[] getRow(int row) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,395,"if ( !isValidCoordinate( row, 1 ) ) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,396,"throw new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,398,int ncols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,399,BigDecimal[] out = new BigDecimal[ncols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,400,"System.arraycopy(data[row - 1], 0, out, 0, ncols);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,401,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,405,* Returns the entries in row number <code>row</code> as an array
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,406,* of double values.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,408,* @param row the row to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,409,* @return array of entries in the row
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,410,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified row is greater
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,411,*                              than the number of rows in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,413,public double[] getRowAsDoubleArray(int row) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,414,"if ( !isValidCoordinate( row, 1 ) ) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,415,"throw new MatrixIndexException(""illegal row argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,417,int ncols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,418,double[] out = new double[ncols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,419,for (int i=0;i<ncols;i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,420,out[i] = data[row-1][i].doubleValue();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,422,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,426,* Returns the entries in column number <code>col</code> as an array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,428,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,429,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,430,* @throws MatrixIndexException if the specified column is greater
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,431,*                              than the number of columns in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,433,public BigDecimal[] getColumn(int col) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,434,"if ( !isValidCoordinate(1, col) ) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,435,"throw new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,437,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,438,BigDecimal[] out = new BigDecimal[nRows];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,439,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,440,out[i] = data[i][col - 1];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,442,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,446,* Returns the entries in column number <code>col</code> as an array
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,447,* of double values.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,449,* @param col  column to fetch
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,450,* @return array of entries in the column
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,451,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified column is greater
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,452,*                              than the number of columns in this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,454,public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,455,"if ( !isValidCoordinate( 1, col ) ) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,456,"throw new MatrixIndexException(""illegal column argument"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,458,int nrows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,459,double[] out = new double[nrows];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,460,for (int i=0;i<nrows;i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,461,out[i] = data[i][col-1].doubleValue();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,463,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,467,* Returns the entry in the specified row and column.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,469,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,470,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,471,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,472,* @throws MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,473,*                              the dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,475,"public BigDecimal getEntry(int row, int column)"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,476,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,477,"if (!isValidCoordinate(row,column)) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,478,"throw new MatrixIndexException(""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,480,return data[row - 1][column - 1];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,484,* Returns the entry in the specified row and column as a double
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,486,* @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,487,* @param column  column location of entry to be fetched
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,488,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,489,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,490,*                              the dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,492,"public double getEntryAsDouble(int row, int column) throws MatrixIndexException {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,493,"return getEntry(row,column).doubleValue();"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,497,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,499,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,500,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,501,* @param value  value to set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,502,* @throws MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,503,*                              he dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,505,"public void setEntry(int row, int column, BigDecimal value)"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,506,throws MatrixIndexException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,507,"if (!isValidCoordinate(row,column)) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,508,"throw new MatrixIndexException(""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,510,data[row - 1][column - 1] = value;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,511,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,515,* Sets the entry in the specified row and column to the specified value.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,517,* @param row    row location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,518,* @param column    column location of entry to be set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,519,* @param value  value to set
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,520,* @throws org.apache.commons.math.linear.MatrixIndexException if the specified coordinate is outside
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,521,*                              he dimensions of this matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,523,"public void setEntry(int row, int column, double value) throws MatrixIndexException {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,524,"setEntry(row, column, new BigDecimal(value));"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,528,* Returns the transpose matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,530,* @return transpose matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,532,public BigMatrix transpose() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,533,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,534,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,535,"BigMatrixImpl out = new BigMatrixImpl(nCols, nRows);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,536,BigDecimal[][] outData = out.getDataRef();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,537,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,538,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,539,outData[col][row] = data[row][col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,542,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,546,* Returns the inverse matrix if this matrix is invertible.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,548,* @return inverse matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,549,* @throws InvalidMatrixException if this is not invertible
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,551,public BigMatrix inverse() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,552,return solve(getIdentity(this.getRowDimension()));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,556,* Returns the determinant of this matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,558,* @return determinant
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,559,* @throws InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,561,public BigDecimal getDeterminant() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,562,if (!isSquare()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,563,"throw new InvalidMatrixException(""matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,565,if (isSingular()) {   // note: this has side effect of attempting LU decomp if lu == null
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,566,return ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,567,} else {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,568,BigDecimal det = (parity == 1) ? ONE : ONE.negate();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,569,for (int i = 0; i < this.getRowDimension(); i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,570,det = det.multiply(lu[i][i]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,572,return det;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,577,* Is this a square matrix?
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,578,* @return true if the matrix is square (rowDimension = columnDimension)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,580,public boolean isSquare() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,581,return (this.getColumnDimension() == this.getRowDimension());
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,585,* Is this a singular matrix?
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,586,* @return true if the matrix is singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,588,public boolean isSingular() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,589,if (lu == null) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,590,try {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,591,luDecompose();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,592,return false;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,593,} catch (InvalidMatrixException ex) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,594,return true;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,596,} else { // LU decomp must have been successfully performed
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,597,return false; // so the matrix is not singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,602,* Returns the number of rows in the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,604,* @return rowDimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,606,public int getRowDimension() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,607,return data.length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,611,* Returns the number of columns in the matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,613,* @return columnDimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,615,public int getColumnDimension() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,616,return data[0].length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,620,"* Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,621,* trace</a> of the matrix (the sum of the elements on the main diagonal).
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,623,* @return trace
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,625,public BigDecimal getTrace() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,626,if (!isSquare()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,627,"throw new IllegalArgumentException(""matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,629,BigDecimal trace = data[0][0];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,630,for (int i = 1; i < this.getRowDimension(); i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,631,trace = trace.add(data[i][i]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,633,return trace;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,637,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,639,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,640,* @return this*v
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,641,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,643,public BigDecimal[] operate(BigDecimal[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,644,if (v.length != this.getColumnDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,645,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,647,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,648,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,649,BigDecimal[] out = new BigDecimal[v.length];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,650,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,651,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,652,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,653,sum = sum.add(data[row][i].multiply(v[i]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,655,out[row] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,657,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,661,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,663,* @param v the vector to operate on
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,664,* @return this*v
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,665,* @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,667,public BigDecimal[] operate(double[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,668,BigDecimal bd[] = new BigDecimal[v.length];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,669,for (int i=0;i<bd.length;i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,670,bd[i] = new BigDecimal(v[i]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,672,return operate(bd);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,676,* Returns the (row) vector result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,678,* @param v the row vector to premultiply by
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,679,* @return v*this
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,680,* @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,682,public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,683,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,684,if (v.length != nRows) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,685,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,687,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,688,BigDecimal[] out = new BigDecimal[nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,689,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,690,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,691,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,692,sum = sum.add(data[i][col].multiply(v[i]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,694,out[col] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,696,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,700,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,701,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,702,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,704,* @param b  array of constants forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,705,* to solve
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,706,* @return solution array
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,707,* @throws IllegalArgumentException if this.rowDimension != row dimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,708,* @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,710,"public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,711,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,712,if (b.length != nRows) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,713,"throw new IllegalArgumentException(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,715,BigMatrix bMatrix = new BigMatrixImpl(b);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,716,BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,717,BigDecimal[] out = new BigDecimal[nRows];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,718,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,719,out[row] = solution[row][0];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,721,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,725,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,726,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,727,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,729,* @param b  array of constants forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,730,* to solve
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,731,* @return solution array
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,732,* @throws IllegalArgumentException if this.rowDimension != row dimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,733,* @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,735,"public BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,736,BigDecimal bd[] = new BigDecimal[b.length];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,737,for (int i=0;i<bd.length;i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,738,bd[i] = new BigDecimal(b[i]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,740,return solve(bd);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,744,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,745,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,746,* <code>b</code>.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,748,* @param b  matrix of constant vectors forming RHS of linear systems to
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,749,* to solve
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,750,* @return matrix of solution vectors
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,751,* @throws IllegalArgumentException if this.rowDimension != row dimension
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,752,* @throws InvalidMatrixException if this matrix is not square or is singular
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,754,"public BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException  {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,755,if (b.getRowDimension() != this.getRowDimension()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,756,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,758,if (!this.isSquare()) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,759,"throw new InvalidMatrixException(""coefficient matrix is not square"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,761,if (this.isSingular()) { // side effect: compute LU decomp
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,762,"throw new InvalidMatrixException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,765,int nCol = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,766,int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,767,int nRowB = b.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,769,// Apply permutations to b
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,770,BigDecimal[][] bv = b.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,771,BigDecimal[][] bp = new BigDecimal[nRowB][nColB];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,772,for (int row = 0; row < nRowB; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,773,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,774,bp[row][col] = bv[permutation[row]][col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,777,bv = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,779,// Solve LY = b
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,780,for (int col = 0; col < nCol; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,781,for (int i = col + 1; i < nCol; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,782,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,783,bp[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,788,// Solve UX = Y
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,789,for (int col = nCol - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,790,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,791,"bp[col][j] = bp[col][j].divide(lu[col][col], scale, roundingMode);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,793,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,794,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,795,bp[i][j] = bp[i][j].subtract(bp[col][j].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,800,BigMatrixImpl outMat = new BigMatrixImpl(bp);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,801,return outMat;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,805,* Computes a new
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,806,"* <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,807,"* LU decompostion</a> for this matrix, storing the result for use by other methods."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,808,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,809,* <strong>Implementation Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,810,"* Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm"">"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,811,"* Crout's algortithm</a>, with partial pivoting."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,812,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,813,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,814,* This method should rarely be invoked directly. Its only use is
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,815,* to force recomputation of the LU decomposition when changes have been
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,816,* made to the underlying data using direct array references. Changes
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,817,* made using setXxx methods will trigger recomputation when needed
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,818,* automatically.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,820,* @throws InvalidMatrixException if the matrix is non-square or singular.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,822,public void luDecompose() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,824,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,825,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,826,if (nRows != nCols) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,827,"throw new InvalidMatrixException(""LU decomposition requires that the matrix be square."");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,829,lu = this.getData();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,831,// Initialize permutation array and parity
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,832,permutation = new int[nRows];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,833,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,834,permutation[row] = row;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,836,parity = 1;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,838,// Loop over columns
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,839,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,841,BigDecimal sum = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,843,// upper
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,844,for (int row = 0; row < col; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,845,sum = lu[row][col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,846,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,847,sum = sum.subtract(lu[row][i].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,849,lu[row][col] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,852,// lower
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,853,int max = col; // permutation row
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,854,BigDecimal largest = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,855,for (int row = col; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,856,sum = lu[row][col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,857,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,858,sum = sum.subtract(lu[row][i].multiply(lu[i][col]));
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,860,lu[row][col] = sum;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,862,// maintain best permutation choice
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,863,if (sum.abs().compareTo(largest) == 1) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,864,largest = sum.abs();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,865,max = row;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,869,// Singularity check
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,870,if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,871,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,872,"throw new InvalidMatrixException(""matrix is singular"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,875,// Pivot if necessary
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,876,if (max != col) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,877,BigDecimal tmp = ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,878,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,879,tmp = lu[max][i];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,880,lu[max][i] = lu[col][i];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,881,lu[col][i] = tmp;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,883,int temp = permutation[max];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,884,permutation[max] = permutation[col];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,885,permutation[col] = temp;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,886,parity = -parity;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,889,"//Divide the lower elements by the ""winning"" diagonal elt."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,890,for (int row = col + 1; row < nRows; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,891,"lu[row][col] = lu[row][col].divide(lu[col][col], scale, roundingMode);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,900,* @see Object#toString()
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,902,public String toString() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,903,StringBuffer res = new StringBuffer();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,904,"res.append(""BigMatrixImpl{"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,905,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,906,if (i > 0)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,907,"res.append("","");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,908,"res.append(""{"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,909,for (int j = 0; j < data[0].length; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,910,if (j > 0)
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,911,"res.append("","");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,912,res.append(data[i][j]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,913,} //for
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,914,"res.append(""}"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,915,} //for
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,916,"res.append(""}"");"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,917,return res.toString();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,918,} //toString
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,920,//------------------------ Protected methods
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,923,* Returns <code>dimension x dimension</code> identity matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,925,* @param dimension dimension of identity matrix to generate
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,926,* @return identity matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,928,protected BigMatrix getIdentity(int dimension) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,929,"BigMatrixImpl out = new BigMatrixImpl(dimension, dimension);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,930,BigDecimal[][] d = out.getDataRef();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,931,for (int row = 0; row < dimension; row++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,932,for (int col = 0; col < dimension; col++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,933,d[row][col] = row == col ? ONE : ZERO;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,936,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,940,*  Returns the LU decomposition as a BigMatrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,941,*  Returns a fresh copy of the cached LU matrix if this has been computed;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,942,*  otherwise the composition is computed and cached for use by other methods.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,943,"*  Since a copy is returned in either case, changes to the returned matrix do not"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,944,*  affect the LU decomposition property.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,945,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,946,* The matrix returned is a compact representation of the LU decomposition.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,947,"* Elements below the main diagonal correspond to entries of the ""L"" matrix;"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,948,"* elements on and above the main diagonal correspond to entries of the ""U"""
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,949,* matrix.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,950,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,951,* Example: <pre>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,953,*     Returned matrix                L                  U
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,954,*         2  3  1                   1  0  0            2  3  1
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,955,*         5  4  6                   5  1  0            0  4  6
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,956,*         1  7  8                   1  7  1            0  0  8
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,957,* </pre>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,959,"* The L and U matrices satisfy the matrix equation LU = permuteRows(this), <br>"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,960,*  where permuteRows reorders the rows of the matrix to follow the order determined
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,961,*  by the <a href=#getPermutation()>permutation</a> property.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,963,* @return LU decomposition matrix
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,964,* @throws InvalidMatrixException if the matrix is non-square or singular.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,966,protected BigMatrix getLUMatrix() throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,967,if (lu == null) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,968,luDecompose();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,970,return new BigMatrixImpl(lu);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,974,* Returns the permutation associated with the lu decomposition.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,975,"* The entries of the array represent a permutation of the numbers 0, ... , nRows - 1."
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,976,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,977,* Example:
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,978,"* permutation = [1, 2, 0] means current 2nd row is first, current third row is second"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,979,* and current first row is last.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,980,* <p>
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,981,* Returns a fresh copy of the array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,983,* @return the permutation
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,985,protected int[] getPermutation() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,986,int[] out = new int[permutation.length];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,987,"System.arraycopy(permutation, 0, out, 0, permutation.length);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,988,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,991,//------------------------ Private methods
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,994,* Returns a fresh copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,996,* @return a copy of the underlying data array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,998,private BigDecimal[][] copyOut() {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,999,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1000,BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1001,"// can't copy 2-d array in one shot, otherwise get row references"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1002,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1003,"System.arraycopy(data[i], 0, out[i], 0, data[i].length);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1005,return out;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1009,* Replaces data with a fresh copy of the input array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1011,* @param in data to copy in
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1013,private void copyIn(BigDecimal[][] in) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1014,int nRows = in.length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1015,int nCols = in[0].length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1016,data = new BigDecimal[nRows][nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1017,"System.arraycopy(in, 0, data, 0, in.length);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1018,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1019,"System.arraycopy(in[i], 0, data[i], 0, nCols);"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1021,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1025,* Replaces data with a fresh copy of the input array.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1027,* @param in data to copy in
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1029,private void copyIn(double[][] in) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1030,int nRows = in.length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1031,int nCols = in[0].length;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1032,data = new BigDecimal[nRows][nCols];
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1033,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1034,for (int j=0; j < nCols; j++) {
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1035,data[i][j] = new BigDecimal(in[i][j]);
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1038,lu = null;
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1042,* Tests a given coordinate as being valid or invalid
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1044,* @param row the row index.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1045,* @param col the column index.
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1046,* @return true if the coordinate is with the current dimensions
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1048,"private boolean isValidCoordinate(int row, int col) {"
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1049,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1050,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,src/java/org/apache/commons/math/linear/BigMatrixImpl.java,1052,return !(row < 1 || row > nRows || col < 1 || col > nCols);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,2,* Copyright 2004 The Apache Software Foundation.
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,16,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,18,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,19,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,20,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,22,import java.math.BigDecimal;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,25,* Test cases for the {@link BigMatrixImpl} class.
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,27,* @version $Revision: 1.1 $ $Date: 2004/06/06 04:20:45 $
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,30,public final class BigMatrixImplTest extends TestCase {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,32,"private double[][] testData = { {1d,2d,3d}, {2d,5d,3d}, {1d,0d,8d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,33,"private double[][] testDataLU = {{2d, 5d, 3d}, {.5d, -2.5d, 6.5d}, {0.5d, 0.2d, .2d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,34,"private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,35,"private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,36,"{-1d,0d,-8d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,37,"private double[] testDataRow1 = {1d,2d,3d};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,38,"private double[] testDataCol3 = {3d,3d,8d};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,39,private double[][] testDataInv =
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,40,"{ {-40d,16d,9d}, {13d,-5d,-3d}, {5d,-2d,-1d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,41,"private double[] preMultTest = {8,12,33};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,42,"private double[][] testData2 ={ {1d,2d,3d}, {2d,5d,3d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,43,"private double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,44,private double[][] testDataPlusInv =
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,45,"{ {-39d,18d,12d}, {15d,0d,0d}, {6d,-2d,7d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,46,"private double[][] id = { {1d,0d,0d}, {0d,1d,0d}, {0d,0d,1d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,47,"private double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,48,"private double[][] luDataLUDecomposition = { {6d,9d,8d}, {0d,5d,7d}, {0.33333333333333,0d,0.33333333333333} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,49,"private double[][] singular = { {2d,3d}, {2d,3d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,50,"private double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,51,"{7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,52,"private double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,53,"private double[][] detData2 = { {1d, 3d}, {2d, 4d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,54,"private double[] testVector = {1,2,3};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,55,"private double[] testVector2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,56,private double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,57,private double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,59,public BigMatrixImplTest(String name) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,60,super(name);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,63,public void setUp() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,67,public static Test suite() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,68,TestSuite suite = new TestSuite(BigMatrixImplTest.class);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,69,"suite.setName(""BigMatrixImpl Tests"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,70,return suite;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,73,public static final double[] asDouble(BigDecimal[] data) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,74,double d[] = new double[data.length];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,75,for (int i=0;i<d.length;i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,76,d[i] = data[i].doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,78,return d;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,81,public static final double[][] asDouble(BigDecimal[][] data) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,82,double d[][] = new double[data.length][data[0].length];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,83,for (int i=0;i<d.length;i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,84,for (int j=0;j<d[i].length;j++)
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,85,d[i][j] = data[i][j].doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,87,return d;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,90,public static final BigDecimal[] asBigDecimal(double [] data) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,91,BigDecimal d[] = new BigDecimal[data.length];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,92,for (int i=0;i<d.length;i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,93,d[i] = new BigDecimal(data[i]);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,95,return d;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,98,public static final BigDecimal[][] asBigDecimal(double [][] data) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,99,BigDecimal d[][] = new BigDecimal[data.length][data[0].length];
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,100,for (int i=0;i<d.length;i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,101,for (int j=0;j<data[i].length;j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,102,d[i][j] = new BigDecimal(data[i][j]);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,105,return d;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,108,/** test dimensions */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,109,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,110,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,111,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,112,"assertEquals(""testData row dimension"",3,m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,113,"assertEquals(""testData column dimension"",3,m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,114,"assertTrue(""testData is square"",m.isSquare());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,115,"assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,116,"assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,117,"assertTrue(""testData2 is not square"",!m2.isSquare());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,118,BigMatrixImpl m3 = new BigMatrixImpl();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,119,m3.setData(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,122,/** test copy functions */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,123,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,124,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,125,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,126,m2.setData(m.getData());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,127,"assertClose(""getData"",m2,m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,128,// no dangling reference...
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,129,"m2.setEntry(1,1,2000d);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,130,BigMatrixImpl m3 = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,131,"assertClose(""no getData side effect"",m,m3,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,132,m3 = (BigMatrixImpl) m.copy();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,133,"double[][] stompMe = {{1d,2d,3d}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,134,m3.setDataRef(asBigDecimal(stompMe));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,135,"assertClose(""no copy side effect"",m,new BigMatrixImpl(testData),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,136,entryTolerance);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,139,/** test add */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,140,public void testAdd() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,141,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,142,BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,143,BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(mInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,144,double[][] sumEntries = asDouble(mPlusMInv.getData());
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,145,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,146,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,147,"assertEquals(""sum entry entry"","
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,148,"testDataPlusInv[row][col],sumEntries[row][col],"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,149,entryTolerance);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,154,/** test add failure */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,155,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,156,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,157,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,158,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,159,BigMatrixImpl mPlusMInv = (BigMatrixImpl)m.add(m2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,160,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,161,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,166,/** test norm */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,167,public void testNorm() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,168,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,169,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,170,"assertEquals(""testData norm"",14d,m.getNorm().doubleValue(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,171,"assertEquals(""testData2 norm"",7d,m2.getNorm().doubleValue(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,174,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,175,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,176,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,177,BigMatrixImpl m2 = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,178,"assertClose(""m-n = m + -n"",m.subtract(m2),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,179,"m2.scalarMultiply(new BigDecimal(-1d)).add(m),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,180,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,181,BigMatrix a = m.subtract(new BigMatrixImpl(testData2));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,182,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,183,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,188,/** test multiply */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,189,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,190,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,191,BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,192,BigMatrixImpl identity = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,193,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,194,"assertClose(""inverse multiply"",m.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,195,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,196,"assertClose(""inverse multiply"",mInv.multiply(m),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,197,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,198,"assertClose(""identity multiply"",m.multiply(identity),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,199,"m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,200,"assertClose(""identity multiply"",identity.multiply(mInv),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,201,"mInv,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,202,"assertClose(""identity multiply"",m2.multiply(identity),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,203,"m2,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,204,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,205,BigMatrix a = m.multiply(new BigMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,206,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,207,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,212,//Additional Test for BigMatrixImplTest.testMultiply
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,214,"private double[][] d3 = new double[][] {{1,2,3,4},{5,6,7,8}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,215,"private double[][] d4 = new double[][] {{1},{2},{3},{4}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,216,"private double[][] d5 = new double[][] {{30},{70}};"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,218,public void testMultiply2() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,219,BigMatrix m3 = new BigMatrixImpl(d3);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,220,BigMatrix m4 = new BigMatrixImpl(d4);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,221,BigMatrix m5 = new BigMatrixImpl(d5);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,222,"assertClose(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,225,/** test isSingular */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,226,public void testIsSingular() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,227,BigMatrixImpl m = new BigMatrixImpl(singular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,228,"assertTrue(""singular"",m.isSingular());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,229,m = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,230,"assertTrue(""big singular"",m.isSingular());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,231,m = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,232,"assertTrue(""identity nonsingular"",!m.isSingular());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,233,m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,234,"assertTrue(""testData nonsingular"",!m.isSingular());"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,237,/** test inverse */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,238,public void testInverse() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,239,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,240,BigMatrix mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,241,"assertClose(""inverse"",mInv,m.inverse(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,242,"assertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,244,// Not square
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,245,m = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,246,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,247,m.inverse();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,248,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,249,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,250,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,253,// Singular
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,254,m = new BigMatrixImpl(singular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,255,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,256,m.inverse();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,257,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,258,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,259,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,263,/** test solve */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,264,public void testSolve() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,265,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,266,BigMatrix mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,267,// being a bit slothful here -- actually testing that X = A^-1 * B
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,268,"assertClose(""inverse-operate"","
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,269,"asDouble(mInv.operate(asBigDecimal(testVector))),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,270,"asDouble(m.solve(asBigDecimal(testVector))),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,271,normTolerance);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,272,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,273,double[] x = asDouble(m.solve(asBigDecimal(testVector2)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,274,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,275,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,278,BigMatrix bs = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,279,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,280,BigMatrix a = bs.solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,281,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,282,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,285,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,286,BigMatrix a = m.solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,287,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,288,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,291,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,292,BigMatrix a = (new BigMatrixImpl(testData2)).solve(bs);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,293,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,294,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,297,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,298,(new BigMatrixImpl(testData2)).luDecompose();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,299,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,300,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,305,/** test determinant */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,306,public void testDeterminant() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,307,BigMatrix m = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,308,"assertEquals(""singular determinant"",0,m.getDeterminant().doubleValue(),0);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,309,m = new BigMatrixImpl(detData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,310,"assertEquals(""nonsingular test"",-3d,m.getDeterminant().doubleValue(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,312,"// Examples verified against R (version 1.8.1, Red Hat Linux 9)"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,313,m = new BigMatrixImpl(detData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,314,"assertEquals(""nonsingular R test 1"",-2d,m.getDeterminant().doubleValue(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,315,m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,316,"assertEquals(""nonsingular  R test 2"",-1d,m.getDeterminant().doubleValue(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,318,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,319,double a = new BigMatrixImpl(testData2).getDeterminant().doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,320,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,321,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,326,/** test trace */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,327,public void testTrace() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,328,BigMatrix m = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,329,"assertEquals(""identity trace"",3d,m.getTrace().doubleValue(),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,330,m = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,331,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,332,double x = m.getTrace().doubleValue();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,333,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,334,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,339,/** test sclarAdd */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,340,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,341,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,342,"assertClose(""scalar add"",new BigMatrixImpl(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,343,"m.scalarAdd(new BigDecimal(2d)),entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,346,/** test operate */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,347,public void testOperate() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,348,BigMatrix m = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,349,double[] x = asDouble(m.operate(asBigDecimal(testVector)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,350,"assertClose(""identity operate"",testVector,x,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,351,m = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,352,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,353,x = asDouble(m.operate(asBigDecimal(testVector)));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,354,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,355,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,360,/** test transpose */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,361,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,362,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,363,"assertClose(""inverse-transpose"",m.inverse().transpose(),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,364,"m.transpose().inverse(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,365,m = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,366,BigMatrix mt = new BigMatrixImpl(testData2T);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,367,"assertClose(""transpose"",mt,m.transpose(),normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,370,/** test preMultiply by vector */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,371,public void testPremultiplyVector() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,372,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,373,"assertClose(""premultiply"",asDouble(m.preMultiply(asBigDecimal(testVector))),preMultTest,normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,374,m = new BigMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,375,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,376,m.preMultiply(asBigDecimal(testVector));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,377,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,378,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,383,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,384,BigMatrix m3 = new BigMatrixImpl(d3);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,385,BigMatrix m4 = new BigMatrixImpl(d4);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,386,BigMatrix m5 = new BigMatrixImpl(d5);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,387,"assertClose(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,389,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,390,BigMatrixImpl mInv = new BigMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,391,BigMatrixImpl identity = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,392,BigMatrixImpl m2 = new BigMatrixImpl(testData2);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,393,"assertClose(""inverse multiply"",m.preMultiply(mInv),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,394,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,395,"assertClose(""inverse multiply"",mInv.preMultiply(m),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,396,"identity,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,397,"assertClose(""identity multiply"",m.preMultiply(identity),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,398,"m,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,399,"assertClose(""identity multiply"",identity.preMultiply(mInv),"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,400,"mInv,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,401,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,402,BigMatrix a = m.preMultiply(new BigMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,403,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,404,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,409,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,410,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,411,"assertClose(""get row"",m.getRowAsDoubleArray(1),testDataRow1,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,412,"assertClose(""get col"",m.getColumnAsDoubleArray(3),testDataCol3,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,413,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,414,double[] x = m.getRowAsDoubleArray(10);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,415,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,416,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,419,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,420,double[] x = m.getColumnAsDoubleArray(-1);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,421,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,422,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,427,public void testEntryMutators() {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,428,BigMatrix m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,429,"assertEquals(""get entry"",m.getEntry(1,2).doubleValue(),2d,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,430,"m.setEntry(1,2,100d);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,431,"assertEquals(""get entry"",m.getEntry(1,2).doubleValue(),100d,entryTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,432,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,433,"double x = m.getEntry(0,2).doubleValue();"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,434,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,435,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,438,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,439,"m.setEntry(1,4,200d);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,440,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,441,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,446,public void testLUDecomposition() throws Exception {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,447,BigMatrixImpl m = new BigMatrixImpl(testData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,448,BigMatrix lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,449,"assertClose(""LU decomposition"", lu, (BigMatrix) new BigMatrixImpl(testDataLU), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,450,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,451,m = new BigMatrixImpl(luData);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,452,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,453,"assertClose(""LU decomposition"", lu, (BigMatrix) new BigMatrixImpl(luDataLUDecomposition), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,454,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,455,m = new BigMatrixImpl(testDataMinus);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,456,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,457,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,458,m = new BigMatrixImpl(id);
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,459,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,460,"verifyDecomposition(m, lu);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,461,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,462,m = new BigMatrixImpl(bigSingular); // singular
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,463,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,464,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,465,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,466,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,468,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,469,m = new BigMatrixImpl(testData2);  // not square
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,470,lu = m.getLUMatrix();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,471,"fail(""Expecting InvalidMatrixException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,472,} catch (InvalidMatrixException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,473,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,477,//--------------- -----------------Protected methods
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,479,/** verifies that two matrices are close (1-norm) */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,480,"protected void assertClose(String msg, BigMatrix m, BigMatrix n,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,481,double tolerance) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,482,"assertTrue(msg,m.subtract(n).getNorm().doubleValue() < tolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,485,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,486,"protected void assertClose(String msg, double[] m, double[] n,"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,487,double tolerance) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,488,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,489,"fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,491,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,492,"assertEquals(msg + "" "" +  i + "" elements differ"","
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,493,"m[i],n[i],tolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,497,/** extracts the l  and u matrices from compact lu representation */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,498,"protected void splitLU(BigMatrix lu, BigMatrix lower, BigMatrix upper) throws InvalidMatrixException {"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,499,if (!lu.isSquare() || !lower.isSquare() || !upper.isSquare() ||
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,500,lower.getRowDimension() != upper.getRowDimension()
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,501,|| lower.getRowDimension() != lu.getRowDimension()) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,502,"throw new InvalidMatrixException(""incorrect dimensions"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,504,int n = lu.getRowDimension();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,505,for (int i = 1; i <= n; i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,506,for (int j = 1; j <= n; j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,507,if (j < i) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,508,"lower.setEntry(i, j, lu.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,509,"upper.setEntry(i, j, 0d);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,510,} else if (i == j) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,511,"lower.setEntry(i, j, 1d);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,512,"upper.setEntry(i, j, lu.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,513,} else {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,514,"lower.setEntry(i, j, 0d);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,515,"upper.setEntry(i, j, lu.getEntry(i, j));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,521,/** Returns the result of applying the given row permutation to the matrix */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,522,"protected BigMatrix permuteRows(BigMatrix matrix, int[] permutation) {"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,523,if (!matrix.isSquare() || matrix.getRowDimension() != permutation.length) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,524,"throw new IllegalArgumentException(""dimension mismatch"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,526,int n = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,527,"BigMatrix out = new BigMatrixImpl(n, n);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,528,for (int i =1; i <= n; i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,529,for (int j = 1; j <= n; j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,530,"out.setEntry(i, j, matrix.getEntry(permutation[i -1] + 1, j));"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,533,return out;
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,536,/** Extracts l and u matrices from lu and verifies that matrix = l times u modulo permutation */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,537,"protected void verifyDecomposition(BigMatrix matrix, BigMatrix lu) throws Exception{"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,538,int n = matrix.getRowDimension();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,539,"BigMatrix lower = new BigMatrixImpl(n, n);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,540,"BigMatrix upper = new BigMatrixImpl(n, n);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,541,"splitLU(lu, lower, upper);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,542,int[] permutation = ((BigMatrixImpl) matrix).getPermutation();
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,543,"BigMatrix permuted = permuteRows(matrix, permutation);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,544,"assertClose(""lu decomposition does not work"", permuted, lower.multiply(upper), normTolerance);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,548,/** Useful for debugging */
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,549,private void dumpMatrix(BigMatrix m) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,550,for (int i = 0; i < m.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,551,"String os = """";"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,552,for (int j = 0; j < m.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,553,"os += m.getEntry(i+1, j+1) + "" "";"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,555,System.out.println(os);

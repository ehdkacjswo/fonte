is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,32,   <li>a {@link #getSolver() getSolver} method has been added.</li>
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,33,   <li>the <code>det</code> method has been renamed as {@link #getDeterminant() getDeterminant}.</li>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,32,"*   <li>a {@link #getP() getP} method has been added,</li>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,33,*   <li>the <code>det</code> method has been renamed as {@link #getDeterminant()
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,34,"*   getDeterminant},</li>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,35,*   <li>the <code>getDoublePivot</code> method has been removed (but the int based
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,36,"*   {@link #getPivot() getPivot} method has been kept),</li>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,37,*   <li>the <code>solve</code> and <code>isNonSingular</code> methods have been replaced
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,38,*   by a {@link #getSolver() getSolver} method and the equivalent methods provided by
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,39,*   the returned {@link DecompositionSolver}.</li>
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,76, Get permutation parity.
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,77, @return true if there was an even number of permutations
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,79,oolean evenPermutation();
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,82, Get the singularity indicator.
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,83, @return singularity indicator
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,85,oolean isSingular();
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,94, Get a solver for A &times; X = B.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,88,* Get a solver for finding the A &times; X = B solution in exact linear sense.
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,227,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,228,ublic boolean isSingular() {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,229,eturn singular;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,232,** {@inheritDoc} */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,233,ublic boolean evenPermutation() {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,234,eturn even;
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,119,ssertTrue(lu.isSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,119,assertFalse(lu.getSolver().isNonSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,126,ssertTrue(lu.isSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,126,assertFalse(lu.getSolver().isNonSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,210,ssertFalse(lu.isSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,210,assertTrue(lu.getSolver().isNonSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,212,ssertTrue(lu.isSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,212,assertFalse(lu.getSolver().isNonSingular());
False,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,214,ssertTrue(lu.isSingular());
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,214,assertFalse(lu.getSolver().isNonSingular());

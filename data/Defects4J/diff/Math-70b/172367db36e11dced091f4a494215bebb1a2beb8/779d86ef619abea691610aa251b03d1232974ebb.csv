is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,61, algorithm. The various multi-start-enabled <code>minimizes</code>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,61,* algorithm. The various multi-start-enabled <code>minimize</code>
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,65," {@link #minimizes(CostFunction, int, ConvergenceChecker, double[],"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,66, double[]) minimizes} method).</p>
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,65,"* {@link #minimize(CostFunction, int, ConvergenceChecker, double[],"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,66,* double[]) minimize} method).</p>
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,110,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,111,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,112,"ouble[] vertexA, double[] vertexB)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,110,"public PointCostPair minimize(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,111,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,112,"double[] vertexA, double[] vertexB)"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,120,"eturn minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,120,"return minimize(f, maxEvaluations, checker);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,152,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,153,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,154,"ouble[] vertexA, double[] vertexB,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,155,"nt starts, long seed)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,152,"public PointCostPair minimize(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,153,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,154,"double[] vertexA, double[] vertexB,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,155,"int starts, long seed)"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,179,"eturn minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,179,"return minimize(f, maxEvaluations, checker);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,200,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,201,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,202,ouble[][] vertices)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,200,"public PointCostPair minimize(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,201,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,202,double[][] vertices)
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,210,"eturn minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,210,"return minimize(f, maxEvaluations, checker);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,237,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,238,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,239,"ouble[][] vertices,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,240,"nt starts, long seed)"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,237,"public PointCostPair minimize(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,238,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,239,"double[][] vertices,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,240,"int starts, long seed)"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,268,"eturn minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,268,"return minimize(f, maxEvaluations, checker);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,294,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,295,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,296,andomVectorGenerator generator)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,294,"public PointCostPair minimize(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,295,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,296,RandomVectorGenerator generator)
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,304,"eturn minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,304,"return minimize(f, maxEvaluations, checker);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,328,"ublic PointCostPair minimizes(CostFunction f, int maxEvaluations,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,329,"onvergenceChecker checker,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,330,"andomVectorGenerator generator,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,331,nt starts)
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,328,"public PointCostPair minimize(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,329,"ConvergenceChecker checker,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,330,"RandomVectorGenerator generator,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,331,int starts)
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,339,"eturn minimizes(f, maxEvaluations, checker);"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,339,"return minimize(f, maxEvaluations, checker);"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,429," #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,430, minimizes}.
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,429,"* #minimize(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,430,* minimize}.
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,433," #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,434, minimizes} method returns the best point only. This method
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,433,"* #minimize(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,434,* minimize} method returns the best point only. This method
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,436," the best one already returned by the {@link #minimizes(CostFunction,"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,437," int, ConvergenceChecker, double[], double[]) minimizes} method."
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,436,"* the best one already returned by the {@link #minimize(CostFunction,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,437,"* int, ConvergenceChecker, double[], double[]) minimize} method."
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,444," #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,445, minimizes} method did throw a {@link ConvergenceException
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,444,"* #minimize(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,445,* minimize} method did throw a {@link ConvergenceException
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,448," #minimizes(CostFunction, int, ConvergenceChecker, double[], double[])"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,449, minimizes} has not been called
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,448,"* #minimize(CostFunction, int, ConvergenceChecker, double[], double[])"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,449,* minimize} has not been called
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,469,"rivate PointCostPair minimizes(CostFunction f, int maxEvaluations,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,469,"private PointCostPair minimize(CostFunction f, int maxEvaluations,"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,50,"ew MultiDirectional(1.9, 0.4).minimizes(wrong, 10, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,51,"ew double[] { -0.5 }, new double[] { 0.5 });"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,50,"new MultiDirectional(1.9, 0.4).minimize(wrong, 10, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,51,"new double[] { -0.5 }, new double[] { 0.5 });"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,60,"ew MultiDirectional(1.9, 0.4).minimizes(wrong, 10, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,61,"ew double[] { 0.5 }, new double[] { 1.5 });"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,60,"new MultiDirectional(1.9, 0.4).minimize(wrong, 10, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,61,"new double[] { 0.5 }, new double[] { 1.5 });"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,86,"ew MultiDirectional().minimizes(rosenbrock, 100, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,87,ew double[][] {
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,88," -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,86,"new MultiDirectional().minimize(rosenbrock, 100, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,87,new double[][] {
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,88,"{ -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,113,"ew MultiDirectional().minimizes(powell, 1000, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,114,"ew double[] {  3.0, -1.0, 0.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,115,"ew double[] {  4.0,  0.0, 1.0, 2.0 });"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,113,"new MultiDirectional().minimize(powell, 1000, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,114,"new double[] {  3.0, -1.0, 0.0, 1.0 },"
True,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java,115,"new double[] {  4.0,  0.0, 1.0, 2.0 });"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,56,"ew NelderMead(0.9, 1.9, 0.4, 0.6).minimizes(wrong, 10, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,57,"ew double[] { -0.5 }, new double[] { 0.5 });"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,56,"new NelderMead(0.9, 1.9, 0.4, 0.6).minimize(wrong, 10, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,57,"new double[] { -0.5 }, new double[] { 0.5 });"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,66,"ew NelderMead(0.9, 1.9, 0.4, 0.6).minimizes(wrong, 10, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,67,"ew double[] { 0.5 }, new double[] { 1.5 });"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,66,"new NelderMead(0.9, 1.9, 0.4, 0.6).minimize(wrong, 10, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,67,"new double[] { 0.5 }, new double[] { 1.5 });"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,93,"m.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,94,ew double[][] {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,95," -1.2, 1.0 }, { 3.5, -2.3 }, { 0.4, 1.5 }"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,96,", 1, 5384353l);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,93,"nm.minimize(rosenbrock, 100, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,94,new double[][] {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,95,"{ -1.2, 1.0 }, { 3.5, -2.3 }, { 0.4, 1.5 }"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,96,"}, 1, 5384353l);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,106,"m.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,107,ew double[][] {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,108," -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 }"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,109,", 10, 1642738l);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,106,"nm.minimize(rosenbrock, 100, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,107,new double[][] {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,108,"{ -1.2, 1.0 }, { 0.9, 1.2 }, { 3.5, -2.3 }"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,109,"}, 10, 1642738l);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,140,"m.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3), rvg);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,140,"nm.minimize(rosenbrock, 100, new ValueChecker(1.0e-3), rvg);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,143,"m.minimizes(rosenbrock, 100, new ValueChecker(1.0e-3), rvg, 3);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,143,"nm.minimize(rosenbrock, 100, new ValueChecker(1.0e-3), rvg, 3);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,166,"m.minimizes(powell, 200, new ValueChecker(1.0e-3),"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,167,"ew double[] {  3.0, -1.0, 0.0, 1.0 },"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,168,"ew double[] {  4.0,  0.0, 1.0, 2.0 },"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,169,", 1642738l);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,166,"nm.minimize(powell, 200, new ValueChecker(1.0e-3),"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,167,"new double[] {  3.0, -1.0, 0.0, 1.0 },"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,168,"new double[] {  4.0,  0.0, 1.0, 2.0 },"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,169,"1, 1642738l);"

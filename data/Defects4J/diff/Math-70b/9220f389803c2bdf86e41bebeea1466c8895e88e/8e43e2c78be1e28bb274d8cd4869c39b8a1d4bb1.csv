is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32,ublic interface ChiSquaredDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,32,"public interface ChiSquaredDistribution extends ContinuousDistribution, HasDensity<Double> {"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,46,* Return the probability density for a particular point.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,47,* @param x  The point at which the density should be computed.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,48,* @return  The pdf at point x.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,50,double density(Double x);
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,75,* Return the probability density for a particular point.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,77,* @param x The point at which the density should be computed.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,78,* @return The pdf at point x.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,80,public double density(Double x) {
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,81,return gamma.density(x);
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,ublic interface ExponentialDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,32,"public interface ExponentialDistribution extends ContinuousDistribution, HasDensity<Double> {"
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,46,* Return the probability density for a particular point.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,47,* @param x  The point at which the density should be computed.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,48,* @return  The pdf at point x.
True,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,50,double density(Double x);
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,67,* Return the probability density for a particular point.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,69,* @param x The point at which the density should be computed.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,70,* @return The pdf at point x.
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,72,public double density(Double x) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,73,if (x < 0) {
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,74,return 0;
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,76,return Math.exp(-x / getMean()) / getMean();
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,173,// TODO: what should really happen here is not derive from AbstractContinuousDistribution
True,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,src/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java,174,// TODO: because the inverse cumulative distribution is simple.
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,32,ublic interface GammaDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,32,"public interface GammaDistribution extends ContinuousDistribution, HasDensity<Double> {"
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,58,* Return the probability density for a particular point.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,59,* @param x  The point at which the density should be computed.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,60,* @return  The pdf at point x.
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,62,double density(Double x);
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,146,* Return the probability density for a particular point.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,148,* @param x The point at which the density should be computed.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,149,* @return The pdf at point x.
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,151,public double density(Double x) {
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,152,if (x < 0) return 0;
True,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,src/java/org/apache/commons/math/distribution/GammaDistributionImpl.java,153,"return Math.pow(x / getBeta(), getAlpha() - 1) / getBeta() * Math.exp(-x / getBeta()) / Math.exp(Gamma.logGamma(getAlpha()));"
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,18,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,20,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,23,* Interface that signals that a distribution can compute the probability density function
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,24,* for a particular point.
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,25,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,27,public interface HasDensity<P> {
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,30,* Compute the probability density function.
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,31,* @param x point for which the probability density is requested
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,32,* @return probability density at point x
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,33,* @throws MathException if probability density cannot be computed at specifed point
True,src/java/org/apache/commons/math/distribution/HasDensity.java,src/java/org/apache/commons/math/distribution/HasDensity.java,35,double density(P x) throws MathException;
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,33,ublic interface NormalDistribution extends ContinuousDistribution {
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,33,"public interface NormalDistribution extends ContinuousDistribution, HasDensity<Double> {"
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,56,* Return the probability density for a particular point.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,57,* @param x  The point at which the density should be computed.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,58,* @return  The pdf at point x.
True,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,60,double density(Double x);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43,private static final double SQRT2PI = Math.sqrt(2 * Math.PI);
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,102,* Return the probability density for a particular point.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,104,* @param x The point at which the density should be computed.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,105,* @return The pdf at point x.
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,107,public double density(Double x) {
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,108,double x0 = x - getMean();
True,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,109,return Math.exp(-x0 * x0 / (2 * getStandardDeviation() * getStandardDeviation())) / (getStandardDeviation() * SQRT2PI);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,104,public void testDensity() {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,105,"double[] x = new double[]{-0.1, 1e-6, 0.5, 1, 2, 5};"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,106,"//R 2.5: print(dchisq(x, df=1), digits=10)"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,107,"checkDensity(1, x, new double[]{0.00000000000, 398.94208093034, 0.43939128947, 0.24197072452, 0.10377687436, 0.01464498256});"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,108,"//R 2.5: print(dchisq(x, df=0.1), digits=10)"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,109,"checkDensity(0.1, x, new double[]{0.000000000e+00, 2.486453997e+04, 7.464238732e-02, 3.009077718e-02, 9.447299159e-03, 8.827199396e-04});"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,110,"//R 2.5: print(dchisq(x, df=2), digits=10)"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,111,"checkDensity(2, x, new double[]{0.00000000000, 0.49999975000, 0.38940039154, 0.30326532986, 0.18393972059, 0.04104249931});"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,112,"//R 2.5: print(dchisq(x, df=10), digits=10)"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,113,"checkDensity(10, x, new double[]{0.000000000e+00, 1.302082682e-27, 6.337896998e-05, 7.897534632e-04, 7.664155024e-03, 6.680094289e-02});"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,116,"private void checkDensity(double df, double[] x, double[] expected) {"
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,117,ChiSquaredDistribution d = new ChiSquaredDistributionImpl(df);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,118,for (int i = 0; i < x.length; i++) {
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,119,"assertEquals(expected[i], d.density(x[i]), 1e-5);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,19,import org.apache.commons.math.MathException;
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,77,public void testDensity() throws MathException {
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,78,ExponentialDistribution d1 = new ExponentialDistributionImpl(1);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,79,"assertEquals(0.0, d1.density(-1e-9));"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,80,"assertEquals(1.0, d1.density(0.0));"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,81,"assertEquals(0.0, d1.density(1000.0));"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,82,"assertEquals(Math.exp(-1), d1.density(1.0));"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,83,"assertEquals(Math.exp(-2), d1.density(2.0));"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,85,ExponentialDistribution d2 = new ExponentialDistributionImpl(3);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,86,"assertEquals(1/3.0, d2.density(0.0));"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,87,"// computed using  print(dexp(1, rate=1/3), digits=10) in R 2.5"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,88,"assertEquals(0.2388437702, d2.density(1.0), 1e-8);"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,90,"// computed using  print(dexp(2, rate=1/3), digits=10) in R 2.5"
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,91,"assertEquals(0.1711390397, d2.density(2.0), 1e-8);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,55,".990d, 0.975d, 0.950d, 0.900d};"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,55,"0.990d, 0.975d, 0.950d, 0.900d};"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,114,public void testDensity() {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,115,"double[] x = new double[]{-0.1, 1e-6, 0.5, 1, 2, 5};"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,116,"// R2.5: print(dgamma(x, shape=1, rate=1), digits=10)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,117,"checkDensity(1, 1, x, new double[]{0.000000000000, 0.999999000001, 0.606530659713, 0.367879441171, 0.135335283237, 0.006737946999});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,118,"// R2.5: print(dgamma(x, shape=2, rate=1), digits=10)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,119,"checkDensity(2, 1, x, new double[]{0.000000000000, 0.000000999999, 0.303265329856, 0.367879441171, 0.270670566473, 0.033689734995});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,120,"// R2.5: print(dgamma(x, shape=4, rate=1), digits=10)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,121,"checkDensity(4, 1, x, new double[]{0.000000000e+00, 1.666665000e-19, 1.263605541e-02, 6.131324020e-02, 1.804470443e-01, 1.403738958e-01});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,122,"// R2.5: print(dgamma(x, shape=4, rate=10), digits=10)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,123,"checkDensity(4, 10, x, new double[]{0.000000000e+00, 1.666650000e-15, 1.403738958e+00, 7.566654960e-02, 2.748204830e-05, 4.018228850e-17});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,124,"// R2.5: print(dgamma(x, shape=.1, rate=10), digits=10)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,125,"checkDensity(0.1, 10, x, new double[]{0.000000000e+00, 3.323953832e+04, 1.663849010e-03, 6.007786726e-06, 1.461647647e-10, 5.996008322e-24});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,126,"// R2.5: print(dgamma(x, shape=.1, rate=20), digits=10)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,127,"checkDensity(0.1, 20, x, new double[]{0.000000000e+00, 3.562489883e+04, 1.201557345e-05, 2.923295295e-10, 3.228910843e-19, 1.239484589e-45});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,128,"// R2.5: print(dgamma(x, shape=.1, rate=4), digits=10)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,129,"checkDensity(0.1, 4, x, new double[]{0.000000000e+00, 3.032938388e+04, 3.049322494e-02, 2.211502311e-03, 2.170613371e-05, 5.846590589e-11});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,130,"// R2.5: print(dgamma(x, shape=.1, rate=1), digits=10)"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,131,"checkDensity(0.1, 1, x, new double[]{0.000000000e+00, 2.640334143e+04, 1.189704437e-01, 3.866916944e-02, 7.623306235e-03, 1.663849010e-04});"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,134,"private void checkDensity(double alpha, double rate, double[] x, double[] expected) {"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,135,"GammaDistribution d = new GammaDistributionImpl(alpha, 1 / rate);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,136,for (int i = 0; i < x.length; i++) {
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,137,"assertEquals(expected[i], d.density(x[i]), 1e-5);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,124,public void testDensity() {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,125,"double [] x = new double[]{-2, -1, 0, 1, 2};"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,126,"// R 2.5: print(dnorm(c(-2,-1,0,1,2)), digits=10)"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,127,"checkDensity(0, 1, x, new double[]{0.05399096651, 0.24197072452, 0.39894228040, 0.24197072452, 0.05399096651});"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,128,"// R 2.5: print(dnorm(c(-2,-1,0,1,2), mean=1.1), digits=10)"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,129,"checkDensity(1.1, 1, x, new double[]{0.003266819056,0.043983595980,0.217852177033,0.396952547477,0.266085249899});"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,132,"private void checkDensity(double mean, double sd, double[] x, double[] expected) {"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,133,"NormalDistribution d = new NormalDistributionImpl(mean, sd);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,134,for (int i = 0; i < x.length; i++) {
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,135,"assertEquals(expected[i], d.density(x[i]), 1e-9);"

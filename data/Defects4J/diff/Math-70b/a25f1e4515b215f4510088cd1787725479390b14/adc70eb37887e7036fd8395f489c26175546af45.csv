is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,22,import org.apache.commons.math.util.ContinuedFraction;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,27, @version $Revision: 1.18 $ $Date: 2004/04/23 19:30:47 $
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,28,* @version $Revision: 1.19 $ $Date: 2004/06/07 20:30:16 $
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,29,ublic class Gamma implements Serializable{
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,30,public class Gamma implements Serializable {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,64,* Returns the natural logarithm of the gamma function &#915;(x).
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,66,* The implementation of this method is based on:
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,67,* <ul>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,68,"* <li><a href=""http://mathworld.wolfram.com/GammaFunction.html"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,69,"* Gamma Function</a>, equation (28).</li>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,70,"* <li><a href=""http://mathworld.wolfram.com/LanczosApproximation.html"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,71,"* Lanczos Approximation</a>, equations (1) through (5).</li>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,72,"* <li><a href=""http://my.fit.edu/~gabdo/gamma.txt"">Paul Godfrey, A note on"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,73,* the computation of the convergent Lanczos complex Gamma approximation
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,74,* </a></li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,75,* </ul>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,77,* @param x the value.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,78,* @return log(&#915;(x))
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,80,public static double logGamma(double x) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,81,double ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,83,if (Double.isNaN(x) || (x <= 0.0)) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,84,ret = Double.NaN;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,85,} else {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,86,double g = 607.0 / 128.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,88,double sum = 0.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,89,for (int i = 1; i < lanczos.length; ++i) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,90,sum = sum + (lanczos[i] / (x + i));
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,92,sum = sum + lanczos[0];
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,94,double tmp = x + g + .5;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,95,ret = ((x + .5) * Math.log(tmp)) - tmp +
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,96,(.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,99,return ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,155,} else if (a > 1.0 && x > a) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,156,// use regularizedGammaQ because it should converge faster in this
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,157,// case.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,158,"ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,138, Returns the natural logarithm of the gamma function &#915;(x).
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,184,"* Returns the regularized gamma function Q(a, x) = 1 - P(a, x)."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,186,* @param a the a parameter.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,187,* @param x the value.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,188,"* @return the regularized gamma function Q(a, x)"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,189,* @throws MathException if the algorithm fails to converge.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,191,"public static double regularizedGammaQ(double a, double x)"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,192,throws MathException
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,194,"return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,198,"* Returns the regularized gamma function Q(a, x) = 1 - P(a, x)."
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,142," <li><a href=""http://mathworld.wolfram.com/GammaFunction.html"">"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,143," Gamma Function</a>, equation (28).</li>"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,144," <li><a href=""http://mathworld.wolfram.com/LanczosApproximation.html"">"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,145," Lanczos Approximation</a>, equations (1) through (5).</li>"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,146," <li><a href=""http://my.fit.edu/~gabdo/gamma.txt"">Paul Godfrey, A note on"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,147, the computation of the convergent Lanczos complex Gamma approximation
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,148, </a></li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,202,* <li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,203,"* <a href=""http://mathworld.wolfram.com/RegularizedGammaFunction.html"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,204,"* Regularized Gamma Function</a>, equation (1).</li>"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,205,* <li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,206,"* <a href=""    http://functions.wolfram.com/GammaBetaErf/GammaRegularized/10/0003/"">"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,207,* Regularized incomplete gamma function: Continued fraction representations  (formula 06.08.10.0003)</a></li>
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,210,* @param a the a parameter.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,152, @return log(&#915;(x))
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,212,* @param epsilon When the absolute value of the nth item in the
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,213,*                series is less than epsilon the approximation ceases
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,214,*                to calculate further elements in the series.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,215,"* @param maxIterations Maximum number of ""iterations"" to complete."
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,216,"* @return the regularized gamma function P(a, x)"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,217,* @throws MathException if the algorithm fails to converge.
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,154,ublic static double logGamma(double x) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,219,"public static double regularizedGammaQ(final double a,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,220,"double x,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,221,"double epsilon,"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,222,int maxIterations)
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,223,throws MathException
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,157,f (Double.isNaN(x) || (x <= 0.0)) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,227,if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,229,} else if (x == 0.0) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,230,ret = 1.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,231,} else if (x < a || a <= 1.0) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,232,// use regularizedGammaP because it should converge faster in this
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,233,// case.
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,234,"ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);"
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,160,ouble g = 607.0 / 128.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,236,// create continued fraction
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,237,ContinuedFraction cf = new ContinuedFraction() {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,238,"protected double getA(int n, double x) {"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,239,double ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,240,switch(n) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,241,case 0: ret = 0.0; break;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,242,default:
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,243,ret = ((2.0 * n) - 1.0) - a + x; break;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,245,return ret;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,162,ouble sum = 0.0;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,163,or (int i = 1; i < lanczos.length; ++i) {
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,164,um = sum + (lanczos[i] / (x + i));
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,166,um = sum + lanczos[0];
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,168,ouble tmp = x + g + .5;
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,169,et = ((x + .5) * Math.log(tmp)) - tmp +
False,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,170,.5 * Math.log(2.0 * Math.PI)) + Math.log(sum) - Math.log(x);
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,248,"protected double getB(int n, double x) {"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,249,double ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,250,double t;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,251,switch(n) {
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,252,case 1: ret = 1.0; break;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,253,default:
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,254,t = n - 1.0;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,255,ret = t * (a - t);
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,256,break;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,258,return ret;
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,262,"ret = cf.evaluate(x, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/special/Gamma.java,src/java/org/apache/commons/math/special/Gamma.java,263,ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,24, @version $Revision: 1.9 $ $Date: 2004/02/21 21:35:17 $
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,24,* @version $Revision: 1.10 $ $Date: 2004/06/07 20:30:16 $
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,37,"ouble actual = Gamma.regularizedGammaP(a, x);"
False,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,38,"estUtils.assertEquals(expected, actual, 10e-5);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,37,"double actualP = Gamma.regularizedGammaP(a, x);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,38,"double actualQ = Gamma.regularizedGammaQ(a, x);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,39,"TestUtils.assertEquals(expected, actualP, 10e-5);"
True,src/test/org/apache/commons/math/special/GammaTest.java,src/test/org/apache/commons/math/special/GammaTest.java,40,"TestUtils.assertEquals(actualP, 1.0 - actualQ, 10e-5);"
False,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,25, @version $Revision: 1.1 $ $Date: 2004/05/03 03:04:54 $
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,25,* @version $Revision: 1.2 $ $Date: 2004/06/07 20:30:16 $
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,131,public void testChiSquareLargeTestStatistic() throws Exception {
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,132,double[] exp = new double[] {
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,133,"3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0,"
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,134,"232921.0, 437665.75"
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,137,long[] obs = new long[] {
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,138,"2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899"
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,140,org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,141,new org.apache.commons.math.stat.inference.ChiSquareTestImpl();
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,142,"double cst = csti.chiSquareTest(exp, obs);"
True,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,143,"assertEquals(""chi-square p-value"", 0.0, cst, 1E-3);"

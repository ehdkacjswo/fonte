is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1487,* Calculates the L<sub>1</sub> (sum of abs) distance between two points.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1489,* @param p1 the first point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1490,* @param p2 the second point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1491,* @return the L<sub>1</sub> distance between the two points
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1493,"public static final double distance1(double[] p1, double[] p2) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1494,double sum = 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1495,for (int i = 0; i < p1.length; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1496,sum += Math.abs(p1[i] - p2[i]);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1498,return sum;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1502,* Calculates the L<sub>1</sub> (sum of abs) distance between two points.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1504,* @param p1 the first point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1505,* @param p2 the second point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1506,* @return the L<sub>1</sub> distance between the two points
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1508,"public static final int distance1(int[] p1, int[] p2) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1509,int sum = 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1510,for (int i = 0; i < p1.length; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1511,sum += Math.abs(p1[i] - p2[i]);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1513,return sum;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1517,* Calculates the L<sub>2</sub> (Euclidean) distance between two points.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1519,* @param p1 the first point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1520,* @param p2 the second point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1521,* @return the L<sub>2</sub> distance between the two points
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1523,"public static final double distance(double[] p1, double[] p2) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1524,double sum = 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1525,for (int i = 0; i < p1.length; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1526,final double dp = p1[i] - p2[i];
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1527,sum += dp * dp;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1529,return Math.sqrt(sum);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1533,* Calculates the L<sub>2</sub> (Euclidean) distance between two points.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1535,* @param p1 the first point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1536,* @param p2 the second point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1537,* @return the L<sub>2</sub> distance between the two points
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1539,"public static final double distance(int[] p1, int[] p2) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1540,int sum = 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1541,for (int i = 0; i < p1.length; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1542,final int dp = p1[i] - p2[i];
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1543,sum += dp * dp;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1545,return Math.sqrt(sum);
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1549,* Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1551,* @param p1 the first point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1552,* @param p2 the second point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1553,* @return the L<sub>&infin;</sub> distance between the two points
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1555,"public static final double distanceInf(double[] p1, double[] p2) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1556,double max = 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1557,for (int i = 0; i < p1.length; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1558,"max = Math.max(max, Math.abs(p1[i] - p2[i]));"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1560,return max;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1564,* Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1566,* @param p1 the first point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1567,* @param p2 the second point
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1568,* @return the L<sub>&infin;</sub> distance between the two points
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1570,"public static final int distanceInf(int[] p1, int[] p2) {"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1571,int max = 0;
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1572,for (int i = 0; i < p1.length; i++) {
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1573,"max = Math.max(max, Math.abs(p1[i] - p2[i]));"
True,src/java/org/apache/commons/math/util/MathUtils.java,src/java/org/apache/commons/math/util/MathUtils.java,1575,return max;
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1184,public void testL1DistanceDouble() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1185,"double[] p1 = { 2.5,  0.0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1186,"double[] p2 = { -0.5, 4.0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1187,"assertEquals(7.0, MathUtils.distance1(p1, p2));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1190,public void testL1DistanceInt() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1191,"int[] p1 = { 3, 0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1192,"int[] p2 = { 0, 4 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1193,"assertEquals(7, MathUtils.distance1(p1, p2));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1196,public void testL2DistanceDouble() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1197,"double[] p1 = { 2.5,  0.0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1198,"double[] p2 = { -0.5, 4.0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1199,"assertEquals(5.0, MathUtils.distance(p1, p2));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1202,public void testL2DistanceInt() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1203,"int[] p1 = { 3, 0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1204,"int[] p2 = { 0, 4 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1205,"assertEquals(5.0, MathUtils.distance(p1, p2));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1208,public void testLInfDistanceDouble() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1209,"double[] p1 = { 2.5,  0.0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1210,"double[] p2 = { -0.5, 4.0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1211,"assertEquals(4.0, MathUtils.distanceInf(p1, p2));"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1214,public void testLInfDistanceInt() {
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1215,"int[] p1 = { 3, 0 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1216,"int[] p2 = { 0, 4 };"
True,src/test/org/apache/commons/math/util/MathUtilsTest.java,src/test/org/apache/commons/math/util/MathUtilsTest.java,1217,"assertEquals(4, MathUtils.distanceInf(p1, p2));"

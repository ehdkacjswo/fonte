is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,1,/* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,3,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,4,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,5,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,7,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,9,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,10,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,11,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,12,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,13,* limitations under the License.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,16,package com.google.javascript.jscomp.regex;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,18,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,21,* Implements the EcmaScript 5
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,22,"* <a href=""http://es5.github.com/#Canonicalize"">Canonicalize</a> operation"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,23,* used to specify how case-insensitive regular expressions match.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,25,* <p>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,26,"* From section <a href=""http://es5.github.com/#x15.10.2.9"">15.10.2.9</a>,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,27,* <blockquote>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,28,* The abstract operation Canonicalize takes a character parameter ch and
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,29,* performs the following steps:
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,30,* <ul>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,31,"*   <li>If IgnoreCase is false, return ch."
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,32,*   <li>Let u be ch converted to upper case as if by calling the standard
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,33,*   built-in method {@code String.prototype.toUpperCase} on the one-character
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,34,*   String ch.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,35,"*   <li>If u does not consist of a single character, return ch."
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,36,*   <li>Let cu be u's character.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,37,*   <li>If ch's code unit value is greater than or equal to decimal 128 and
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,38,"*   cu's code unit value is less than decimal 128, then return ch."
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,39,*   <li>Return cu.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,40,* </ul>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,43,public final class CaseCanonicalize {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,45,private CaseCanonicalize() {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,46,// Uninstantiable.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,49,// Below are tables that implement the Canonicalize operation.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,50,// We cannot use java.lang.Character.toUpperCase since that is based on
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,51,// a more modern version of Unicode than that required by the EcmaScript spec.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,54,* Set of code units that are case-insensitively equivalent to some other
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,55,* code unit according to the EcmaScript
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,56,"* <a href=""http://es5.github.com/#Canonicalize"">Canonicalize</a> operation"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,57,* described in section 15.10.2.8.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,58,* The case sensitive characters are the ones that canonicalize to a character
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,59,* other than themselves or have a character that canonicalizes to them.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,60,* Canonicalize is based on the definition of
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,61,* {@code String.prototype.toUpperCase} which is itself based on Unicode 3.0.0
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,62,* as specified at
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,63,"* <a href=""ftp://ftp.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt"">"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,64,* UnicodeData-3.0.0
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,65,* </a>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,66,"* and <a href=""ftp://ftp.unicode.org/Public/3.0-Update/SpecialCasing-2.txt"">"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,67,* SpecialCasings-2.txt
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,68,* </a>.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,70,* <p>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,71,* This table was generated by running the below on Chrome:
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,72,* </p>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,73,* <pre>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,74,* for (var cc = 0; cc < 0x10000; ++cc) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,75,*   var ch = String.fromCharCode(cc);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,76,*   var u = ch.toUpperCase();
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,77,*   if (ch != u && u.length === 1) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,78,*     var cu = u.charCodeAt(0);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,79,*     if (cc <= 128 || u.charCodeAt(0) > 128) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,80,"*       print('0x' + cc.toString(16) + ', 0x' + cu.toString(16) + ',');"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,84,* </pre>
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,86,public static final CharRanges CASE_SENSITIVE = CharRanges.withRanges(
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,87,"0x41, 0x5b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,88,"0x61, 0x7b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,89,"0xb5, 0xb6,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,90,"0xc0, 0xd7,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,91,"0xd8, 0xdf,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,92,"0xe0, 0xf7,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,93,"0xf8, 0x130,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,94,"0x132, 0x138,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,95,"0x139, 0x149,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,96,"0x14a, 0x17f,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,97,"0x180, 0x18d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,98,"0x18e, 0x19b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,99,"0x19c, 0x1aa,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,100,"0x1ac, 0x1ba,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,101,"0x1bc, 0x1be,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,102,"0x1bf, 0x1c0,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,103,"0x1c4, 0x1f0,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,104,"0x1f1, 0x221,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,105,"0x222, 0x234,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,106,"0x23a, 0x23f,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,107,"0x241, 0x250,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,108,"0x253, 0x255,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,109,"0x256, 0x258,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,110,"0x259, 0x25a,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,111,"0x25b, 0x25c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,112,"0x260, 0x261,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,113,"0x263, 0x264,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,114,"0x268, 0x26a,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,115,"0x26b, 0x26c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,116,"0x26f, 0x270,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,117,"0x272, 0x273,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,118,"0x275, 0x276,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,119,"0x27d, 0x27e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,120,"0x280, 0x281,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,121,"0x283, 0x284,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,122,"0x288, 0x28d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,123,"0x292, 0x293,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,124,"0x345, 0x346,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,125,"0x37b, 0x37e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,126,"0x386, 0x387,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,127,"0x388, 0x38b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,128,"0x38c, 0x38d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,129,"0x38e, 0x390,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,130,"0x391, 0x3a2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,131,"0x3a3, 0x3b0,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,132,"0x3b1, 0x3cf,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,133,"0x3d0, 0x3d2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,134,"0x3d5, 0x3d7,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,135,"0x3d8, 0x3f3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,136,"0x3f5, 0x3f6,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,137,"0x3f7, 0x3fc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,138,"0x3fd, 0x482,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,139,"0x48a, 0x514,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,140,"0x531, 0x557,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,141,"0x561, 0x587,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,142,"0x10a0, 0x10c6,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,143,"0x1d7d, 0x1d7e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,144,"0x1e00, 0x1e96,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,145,"0x1e9b, 0x1e9c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,146,"0x1ea0, 0x1efa,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,147,"0x1f00, 0x1f16,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,148,"0x1f18, 0x1f1e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,149,"0x1f20, 0x1f46,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,150,"0x1f48, 0x1f4e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,151,"0x1f51, 0x1f52,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,152,"0x1f53, 0x1f54,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,153,"0x1f55, 0x1f56,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,154,"0x1f57, 0x1f58,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,155,"0x1f59, 0x1f5a,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,156,"0x1f5b, 0x1f5c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,157,"0x1f5d, 0x1f5e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,158,"0x1f5f, 0x1f7e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,159,"0x1fb0, 0x1fb2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,160,"0x1fb8, 0x1fbc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,161,"0x1fbe, 0x1fbf,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,162,"0x1fc8, 0x1fcc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,163,"0x1fd0, 0x1fd2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,164,"0x1fd8, 0x1fdc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,165,"0x1fe0, 0x1fe2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,166,"0x1fe5, 0x1fe6,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,167,"0x1fe8, 0x1fed,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,168,"0x1ff8, 0x1ffc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,169,"0x2132, 0x2133,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,170,"0x214e, 0x214f,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,171,"0x2160, 0x2180,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,172,"0x2183, 0x2185,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,173,"0x24b6, 0x24ea,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,174,"0x2c00, 0x2c2f,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,175,"0x2c30, 0x2c5f,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,176,"0x2c60, 0x2c6d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,177,"0x2c75, 0x2c77,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,178,"0x2c80, 0x2ce4,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,179,"0x2d00, 0x2d26,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,180,"0xff21, 0xff3b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,181,"0xff41, 0xff5b"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,186,* Returns the case canonical version of the given string.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,188,public static String caseCanonicalize(String s) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,189,"for (int i = 0, n = s.length(); i < n; ++i) {"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,190,char ch = s.charAt(i);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,191,char cu = caseCanonicalize(ch);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,192,if (cu != ch) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,193,StringBuilder sb = new StringBuilder(s);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,194,"sb.setCharAt(i, cu);"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,195,while (++i < n) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,196,"sb.setCharAt(i, caseCanonicalize(s.charAt(i)));"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,198,return sb.toString();
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,201,return s;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,205,* Returns the case canonical version of the given code-unit.  EcmaScript 5
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,206,* explicitly says that code-units are to be treated as their code-point
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,207,"* equivalent, even surrogates."
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,209,public static char caseCanonicalize(char ch) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,210,if (ch < 0x80) {  // Normal case.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,211,return ('A' <= ch && ch <= 'Z') ? (char) (ch | 32) : ch;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,213,// Non-ASCII case.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,214,if (CASE_SENSITIVE.contains(ch)) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,215,for (DeltaSet ds : CANON_DELTA_SETS) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,216,if (ds.codeUnits.contains(ch)) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,217,return (char) (ch - ds.delta);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,221,return ch;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,225,"* Given a character range that may include case sensitive code-units,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,226,"* such as {@code [0-9B-M]}, returns the character range that includes all"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,227,* the code-units in the input and those that are case-insensitively
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,228,* equivalent to a code-unit in the input.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,230,public static CharRanges expandToAllMatched(CharRanges ranges) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,231,CharRanges caseSensitive = ranges.intersection(CASE_SENSITIVE);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,232,if (caseSensitive.isEmpty()) { return ranges; }
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,233,CharRanges expanded = CharRanges.EMPTY;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,234,for (DeltaSet ds : DELTA_SETS) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,235,expanded = expanded.union(
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,236,caseSensitive.intersection(ds.codeUnits).shift(-ds.delta));
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,238,return ranges.union(expanded);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,242,private static final CharRanges UCASE_ASCII_LETTERS
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,243,"= CharRanges.inclusive('A', 'Z');"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,246,"* Given a character range that may include case sensitive code-units,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,247,"* such as {@code [0-9B-M]}, returns the character range that includes"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,248,* the minimal set of code units such that for every code unit in the
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,249,* input there is a case-sensitively equivalent canonical code unit in the
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,250,* output.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,252,public static CharRanges reduceToMinimum(CharRanges ranges) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,253,CharRanges caseSensitive = ranges.intersection(CASE_SENSITIVE);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,254,if (caseSensitive.isEmpty()) { return ranges; }
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,255,CharRanges expanded = CharRanges.EMPTY;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,256,for (DeltaSet ds : CANON_DELTA_SETS) {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,257,expanded = expanded.union(
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,258,caseSensitive.intersection(ds.codeUnits).shift(-ds.delta));
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,260,// Letters a-z gzip better than uppercase A-Z since JavaScript keywords
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,261,"// are lower-case, so, even though the definition of Canonicalize is"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,262,"// based on String.prototype.toUpperCase, we use lowercase ASCII characters"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,263,// in the minimal form.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,264,expanded = expanded.difference(UCASE_ASCII_LETTERS).union(
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,265,expanded.intersection(UCASE_ASCII_LETTERS).shift(32));
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,266,return ranges.difference(caseSensitive).union(expanded);
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,270,* Sets of code units broken down by delta that are case-insensitively
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,271,* equivalent to another code unit that differs from the first by that delta.
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,273,private static final ImmutableList<DeltaSet> DELTA_SETS = ImmutableList.of(
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,274,"new DeltaSet(-10795, CharRanges.withMembers(0x23a)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,275,"new DeltaSet(-10792, CharRanges.withMembers(0x23e)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,276,"new DeltaSet(-10743, CharRanges.withMembers(0x26b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,277,"new DeltaSet(-10727, CharRanges.withMembers(0x27d)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,278,"new DeltaSet(-7264, CharRanges.withRanges(0x10a0, 0x10c6)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,279,"new DeltaSet(-7205, CharRanges.withMembers(0x399)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,280,"new DeltaSet(-3814, CharRanges.withMembers(0x1d7d)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,281,"new DeltaSet(-743, CharRanges.withMembers(0xb5)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,282,"new DeltaSet(-219, CharRanges.withMembers(0x1b7)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,283,"new DeltaSet(-218, CharRanges.withMembers(0x1a6, 0x1a9, 0x1ae)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,284,"new DeltaSet(-217, CharRanges.withRanges(0x1b1, 0x1b3)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,285,"new DeltaSet(-214, CharRanges.withMembers(0x19f)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,286,"new DeltaSet(-213, CharRanges.withMembers(0x19d)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,287,"new DeltaSet(-211, CharRanges.withMembers(0x196, 0x19c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,288,"new DeltaSet(-210, CharRanges.withMembers(0x181)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,289,"new DeltaSet(-209, CharRanges.withMembers(0x197)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,290,"new DeltaSet(-207, CharRanges.withMembers(0x194)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,291,"new DeltaSet(-206, CharRanges.withMembers(0x186)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,292,"new DeltaSet(-205, CharRanges.withRanges(0x189, 0x18b, 0x193, 0x194)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,293,"new DeltaSet(-203, CharRanges.withMembers(0x190)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,294,"new DeltaSet(-202, CharRanges.withMembers(0x18f)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,295,"new DeltaSet(-195, CharRanges.withMembers(0x180)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,296,"new DeltaSet(-163, CharRanges.withMembers(0x19a)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,297,"new DeltaSet(-130, CharRanges.withRanges(0x19e, 0x19f, 0x37b, 0x37e)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,298,"new DeltaSet(-128, CharRanges.withRanges(0x1f78, 0x1f7a)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,299,"new DeltaSet(-126, CharRanges.withRanges(0x1f7c, 0x1f7e)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,300,"new DeltaSet(-121, CharRanges.withMembers(0xff)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,301,"new DeltaSet(-112, CharRanges.withRanges(0x1f7a, 0x1f7c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,302,"new DeltaSet(-100, CharRanges.withRanges(0x1f76, 0x1f78)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,303,"new DeltaSet(-97, CharRanges.withMembers(0x195)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,304,"new DeltaSet(-96, CharRanges.withMembers(0x395)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,305,"new DeltaSet(-86, CharRanges.withRanges(0x39a, 0x39b, 0x1f72, 0x1f76)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,306,"new DeltaSet(-84, CharRanges.withMembers(0x345)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,307,"new DeltaSet(-80, CharRanges.withRanges(0x3a1, 0x3a2, 0x400, 0x410)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,308,"new DeltaSet(-79, CharRanges.withMembers(0x18e)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,309,"new DeltaSet(-74, CharRanges.withRanges(0x1f70, 0x1f72)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,310,"new DeltaSet(-71, CharRanges.withMembers(0x245)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,311,"new DeltaSet(-69, CharRanges.withMembers(0x244)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,312,"new DeltaSet(-64, CharRanges.withMembers(0x38c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,313,"new DeltaSet(-63, CharRanges.withRanges(0x38e, 0x390)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,314,"new DeltaSet(-62, CharRanges.withMembers(0x392)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,315,"new DeltaSet(-59, CharRanges.withMembers(0x1e60)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,316,"new DeltaSet(-57, CharRanges.withMembers(0x398)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,317,"new DeltaSet(-56, CharRanges.withMembers(0x1bf)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,318,"new DeltaSet(-54, CharRanges.withMembers(0x3a0)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,319,"new DeltaSet(-48, CharRanges.withRanges(0x531, 0x557, 0x2c00, 0x2c2f)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,320,"new DeltaSet(-47, CharRanges.withMembers(0x3a6)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,321,"new DeltaSet(-38, CharRanges.withMembers(0x386)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,322,"new DeltaSet(-37, CharRanges.withRanges(0x388, 0x38b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,323,"new DeltaSet(-32, CharRanges.withRanges("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,324,"0x41, 0x5b, 0xc0, 0xd7, 0xd8, 0xdf, 0x391, 0x3a2, 0x3a3, 0x3ac,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,325,"0x410, 0x430, 0xff21, 0xff3b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,326,"new DeltaSet(-31, CharRanges.withMembers(0x3a3)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,327,"new DeltaSet(-28, CharRanges.withMembers(0x2132)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,328,"new DeltaSet(-26, CharRanges.withRanges(0x24b6, 0x24d0)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,329,"new DeltaSet(-16, CharRanges.withRanges(0x2160, 0x2170)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,330,"new DeltaSet(-15, CharRanges.withMembers(0x4c0)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,331,"new DeltaSet(-8, CharRanges.withRanges("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,332,"0x1f00, 0x1f08, 0x1f10, 0x1f16, 0x1f20, 0x1f28, 0x1f30, 0x1f38,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,333,"0x1f40, 0x1f46, 0x1f51, 0x1f52, 0x1f53, 0x1f54, 0x1f55, 0x1f56,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,334,"0x1f57, 0x1f58, 0x1f60, 0x1f68, 0x1fb0, 0x1fb2, 0x1fd0, 0x1fd2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,335,"0x1fe0, 0x1fe2)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,336,"new DeltaSet(-7, CharRanges.withMembers(0x3f2, 0x1fe5)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,337,"new DeltaSet(-2, CharRanges.withMembers(0x1c4, 0x1c7, 0x1ca, 0x1f1)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,338,"new DeltaSet(-1, CharRanges.withMembers("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,339,"0x100, 0x102, 0x104, 0x106, 0x108, 0x10a, 0x10c, 0x10e, 0x110, 0x112,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,340,"0x114, 0x116, 0x118, 0x11a, 0x11c, 0x11e, 0x120, 0x122, 0x124, 0x126,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,341,"0x128, 0x12a, 0x12c, 0x12e, 0x132, 0x134, 0x136, 0x139, 0x13b, 0x13d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,342,"0x13f, 0x141, 0x143, 0x145, 0x147, 0x14a, 0x14c, 0x14e, 0x150, 0x152,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,343,"0x154, 0x156, 0x158, 0x15a, 0x15c, 0x15e, 0x160, 0x162, 0x164, 0x166,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,344,"0x168, 0x16a, 0x16c, 0x16e, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,345,"0x17d, 0x182, 0x184, 0x187, 0x18b, 0x191, 0x198, 0x1a0, 0x1a2, 0x1a4,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,346,"0x1a7, 0x1ac, 0x1af, 0x1b3, 0x1b5, 0x1b8, 0x1bc, 0x1c4, 0x1c7, 0x1ca,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,347,"0x1cd, 0x1cf, 0x1d1, 0x1d3, 0x1d5, 0x1d7, 0x1d9, 0x1db, 0x1de, 0x1e0,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,348,"0x1e2, 0x1e4, 0x1e6, 0x1e8, 0x1ea, 0x1ec, 0x1ee, 0x1f1, 0x1f4, 0x1f8,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,349,"0x1fa, 0x1fc, 0x1fe, 0x200, 0x202, 0x204, 0x206, 0x208, 0x20a, 0x20c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,350,"0x20e, 0x210, 0x212, 0x214, 0x216, 0x218, 0x21a, 0x21c, 0x21e, 0x222,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,351,"0x224, 0x226, 0x228, 0x22a, 0x22c, 0x22e, 0x230, 0x232, 0x23b, 0x241,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,352,"0x246, 0x248, 0x24a, 0x24c, 0x24e, 0x3d8, 0x3da, 0x3dc, 0x3de, 0x3e0,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,353,"0x3e2, 0x3e4, 0x3e6, 0x3e8, 0x3ea, 0x3ec, 0x3ee, 0x3f7, 0x3fa, 0x460,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,354,"0x462, 0x464, 0x466, 0x468, 0x46a, 0x46c, 0x46e, 0x470, 0x472, 0x474,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,355,"0x476, 0x478, 0x47a, 0x47c, 0x47e, 0x480, 0x48a, 0x48c, 0x48e, 0x490,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,356,"0x492, 0x494, 0x496, 0x498, 0x49a, 0x49c, 0x49e, 0x4a0, 0x4a2, 0x4a4,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,357,"0x4a6, 0x4a8, 0x4aa, 0x4ac, 0x4ae, 0x4b0, 0x4b2, 0x4b4, 0x4b6, 0x4b8,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,358,"0x4ba, 0x4bc, 0x4be, 0x4c1, 0x4c3, 0x4c5, 0x4c7, 0x4c9, 0x4cb, 0x4cd,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,359,"0x4d0, 0x4d2, 0x4d4, 0x4d6, 0x4d8, 0x4da, 0x4dc, 0x4de, 0x4e0, 0x4e2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,360,"0x4e4, 0x4e6, 0x4e8, 0x4ea, 0x4ec, 0x4ee, 0x4f0, 0x4f2, 0x4f4, 0x4f6,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,361,"0x4f8, 0x4fa, 0x4fc, 0x4fe, 0x500, 0x502, 0x504, 0x506, 0x508, 0x50a,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,362,"0x50c, 0x50e, 0x510, 0x512, 0x1e00, 0x1e02, 0x1e04, 0x1e06, 0x1e08,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,363,"0x1e0a, 0x1e0c, 0x1e0e, 0x1e10, 0x1e12, 0x1e14, 0x1e16, 0x1e18,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,364,"0x1e1a, 0x1e1c, 0x1e1e, 0x1e20, 0x1e22, 0x1e24, 0x1e26, 0x1e28,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,365,"0x1e2a, 0x1e2c, 0x1e2e, 0x1e30, 0x1e32, 0x1e34, 0x1e36, 0x1e38,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,366,"0x1e3a, 0x1e3c, 0x1e3e, 0x1e40, 0x1e42, 0x1e44, 0x1e46, 0x1e48,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,367,"0x1e4a, 0x1e4c, 0x1e4e, 0x1e50, 0x1e52, 0x1e54, 0x1e56, 0x1e58,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,368,"0x1e5a, 0x1e5c, 0x1e5e, 0x1e60, 0x1e62, 0x1e64, 0x1e66, 0x1e68,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,369,"0x1e6a, 0x1e6c, 0x1e6e, 0x1e70, 0x1e72, 0x1e74, 0x1e76, 0x1e78,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,370,"0x1e7a, 0x1e7c, 0x1e7e, 0x1e80, 0x1e82, 0x1e84, 0x1e86, 0x1e88,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,371,"0x1e8a, 0x1e8c, 0x1e8e, 0x1e90, 0x1e92, 0x1e94, 0x1ea0, 0x1ea2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,372,"0x1ea4, 0x1ea6, 0x1ea8, 0x1eaa, 0x1eac, 0x1eae, 0x1eb0, 0x1eb2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,373,"0x1eb4, 0x1eb6, 0x1eb8, 0x1eba, 0x1ebc, 0x1ebe, 0x1ec0, 0x1ec2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,374,"0x1ec4, 0x1ec6, 0x1ec8, 0x1eca, 0x1ecc, 0x1ece, 0x1ed0, 0x1ed2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,375,"0x1ed4, 0x1ed6, 0x1ed8, 0x1eda, 0x1edc, 0x1ede, 0x1ee0, 0x1ee2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,376,"0x1ee4, 0x1ee6, 0x1ee8, 0x1eea, 0x1eec, 0x1eee, 0x1ef0, 0x1ef2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,377,"0x1ef4, 0x1ef6, 0x1ef8, 0x2183, 0x2c60, 0x2c67, 0x2c69, 0x2c6b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,378,"0x2c75, 0x2c80, 0x2c82, 0x2c84, 0x2c86, 0x2c88, 0x2c8a, 0x2c8c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,379,"0x2c8e, 0x2c90, 0x2c92, 0x2c94, 0x2c96, 0x2c98, 0x2c9a, 0x2c9c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,380,"0x2c9e, 0x2ca0, 0x2ca2, 0x2ca4, 0x2ca6, 0x2ca8, 0x2caa, 0x2cac,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,381,"0x2cae, 0x2cb0, 0x2cb2, 0x2cb4, 0x2cb6, 0x2cb8, 0x2cba, 0x2cbc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,382,"0x2cbe, 0x2cc0, 0x2cc2, 0x2cc4, 0x2cc6, 0x2cc8, 0x2cca, 0x2ccc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,383,"0x2cce, 0x2cd0, 0x2cd2, 0x2cd4, 0x2cd6, 0x2cd8, 0x2cda, 0x2cdc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,384,"0x2cde, 0x2ce0, 0x2ce2)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,385,"new DeltaSet(1, CharRanges.withMembers("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,386,"0x101, 0x103, 0x105, 0x107, 0x109, 0x10b, 0x10d, 0x10f, 0x111, 0x113,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,387,"0x115, 0x117, 0x119, 0x11b, 0x11d, 0x11f, 0x121, 0x123, 0x125, 0x127,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,388,"0x129, 0x12b, 0x12d, 0x12f, 0x133, 0x135, 0x137, 0x13a, 0x13c, 0x13e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,389,"0x140, 0x142, 0x144, 0x146, 0x148, 0x14b, 0x14d, 0x14f, 0x151, 0x153,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,390,"0x155, 0x157, 0x159, 0x15b, 0x15d, 0x15f, 0x161, 0x163, 0x165, 0x167,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,391,"0x169, 0x16b, 0x16d, 0x16f, 0x171, 0x173, 0x175, 0x177, 0x17a, 0x17c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,392,"0x17e, 0x183, 0x185, 0x188, 0x18c, 0x192, 0x199, 0x1a1, 0x1a3, 0x1a5,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,393,"0x1a8, 0x1ad, 0x1b0, 0x1b4, 0x1b6, 0x1b9, 0x1bd, 0x1c5, 0x1c8, 0x1cb,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,394,"0x1ce, 0x1d0, 0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1df, 0x1e1,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,395,"0x1e3, 0x1e5, 0x1e7, 0x1e9, 0x1eb, 0x1ed, 0x1ef, 0x1f2, 0x1f5, 0x1f9,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,396,"0x1fb, 0x1fd, 0x1ff, 0x201, 0x203, 0x205, 0x207, 0x209, 0x20b, 0x20d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,397,"0x20f, 0x211, 0x213, 0x215, 0x217, 0x219, 0x21b, 0x21d, 0x21f, 0x223,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,398,"0x225, 0x227, 0x229, 0x22b, 0x22d, 0x22f, 0x231, 0x233, 0x23c, 0x242,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,399,"0x247, 0x249, 0x24b, 0x24d, 0x24f, 0x3d9, 0x3db, 0x3dd, 0x3df, 0x3e1,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,400,"0x3e3, 0x3e5, 0x3e7, 0x3e9, 0x3eb, 0x3ed, 0x3ef, 0x3f8, 0x3fb, 0x461,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,401,"0x463, 0x465, 0x467, 0x469, 0x46b, 0x46d, 0x46f, 0x471, 0x473, 0x475,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,402,"0x477, 0x479, 0x47b, 0x47d, 0x47f, 0x481, 0x48b, 0x48d, 0x48f, 0x491,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,403,"0x493, 0x495, 0x497, 0x499, 0x49b, 0x49d, 0x49f, 0x4a1, 0x4a3, 0x4a5,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,404,"0x4a7, 0x4a9, 0x4ab, 0x4ad, 0x4af, 0x4b1, 0x4b3, 0x4b5, 0x4b7, 0x4b9,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,405,"0x4bb, 0x4bd, 0x4bf, 0x4c2, 0x4c4, 0x4c6, 0x4c8, 0x4ca, 0x4cc, 0x4ce,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,406,"0x4d1, 0x4d3, 0x4d5, 0x4d7, 0x4d9, 0x4db, 0x4dd, 0x4df, 0x4e1, 0x4e3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,407,"0x4e5, 0x4e7, 0x4e9, 0x4eb, 0x4ed, 0x4ef, 0x4f1, 0x4f3, 0x4f5, 0x4f7,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,408,"0x4f9, 0x4fb, 0x4fd, 0x4ff, 0x501, 0x503, 0x505, 0x507, 0x509, 0x50b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,409,"0x50d, 0x50f, 0x511, 0x513, 0x1e01, 0x1e03, 0x1e05, 0x1e07, 0x1e09,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,410,"0x1e0b, 0x1e0d, 0x1e0f, 0x1e11, 0x1e13, 0x1e15, 0x1e17, 0x1e19,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,411,"0x1e1b, 0x1e1d, 0x1e1f, 0x1e21, 0x1e23, 0x1e25, 0x1e27, 0x1e29,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,412,"0x1e2b, 0x1e2d, 0x1e2f, 0x1e31, 0x1e33, 0x1e35, 0x1e37, 0x1e39,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,413,"0x1e3b, 0x1e3d, 0x1e3f, 0x1e41, 0x1e43, 0x1e45, 0x1e47, 0x1e49,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,414,"0x1e4b, 0x1e4d, 0x1e4f, 0x1e51, 0x1e53, 0x1e55, 0x1e57, 0x1e59,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,415,"0x1e5b, 0x1e5d, 0x1e5f, 0x1e61, 0x1e63, 0x1e65, 0x1e67, 0x1e69,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,416,"0x1e6b, 0x1e6d, 0x1e6f, 0x1e71, 0x1e73, 0x1e75, 0x1e77, 0x1e79,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,417,"0x1e7b, 0x1e7d, 0x1e7f, 0x1e81, 0x1e83, 0x1e85, 0x1e87, 0x1e89,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,418,"0x1e8b, 0x1e8d, 0x1e8f, 0x1e91, 0x1e93, 0x1e95, 0x1ea1, 0x1ea3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,419,"0x1ea5, 0x1ea7, 0x1ea9, 0x1eab, 0x1ead, 0x1eaf, 0x1eb1, 0x1eb3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,420,"0x1eb5, 0x1eb7, 0x1eb9, 0x1ebb, 0x1ebd, 0x1ebf, 0x1ec1, 0x1ec3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,421,"0x1ec5, 0x1ec7, 0x1ec9, 0x1ecb, 0x1ecd, 0x1ecf, 0x1ed1, 0x1ed3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,422,"0x1ed5, 0x1ed7, 0x1ed9, 0x1edb, 0x1edd, 0x1edf, 0x1ee1, 0x1ee3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,423,"0x1ee5, 0x1ee7, 0x1ee9, 0x1eeb, 0x1eed, 0x1eef, 0x1ef1, 0x1ef3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,424,"0x1ef5, 0x1ef7, 0x1ef9, 0x2184, 0x2c61, 0x2c68, 0x2c6a, 0x2c6c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,425,"0x2c76, 0x2c81, 0x2c83, 0x2c85, 0x2c87, 0x2c89, 0x2c8b, 0x2c8d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,426,"0x2c8f, 0x2c91, 0x2c93, 0x2c95, 0x2c97, 0x2c99, 0x2c9b, 0x2c9d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,427,"0x2c9f, 0x2ca1, 0x2ca3, 0x2ca5, 0x2ca7, 0x2ca9, 0x2cab, 0x2cad,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,428,"0x2caf, 0x2cb1, 0x2cb3, 0x2cb5, 0x2cb7, 0x2cb9, 0x2cbb, 0x2cbd,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,429,"0x2cbf, 0x2cc1, 0x2cc3, 0x2cc5, 0x2cc7, 0x2cc9, 0x2ccb, 0x2ccd,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,430,"0x2ccf, 0x2cd1, 0x2cd3, 0x2cd5, 0x2cd7, 0x2cd9, 0x2cdb, 0x2cdd,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,431,"0x2cdf, 0x2ce1, 0x2ce3)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,432,"new DeltaSet(2, CharRanges.withMembers(0x1c6, 0x1c9, 0x1cc, 0x1f3)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,433,"new DeltaSet(7, CharRanges.withMembers(0x3f9, 0x1fec)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,434,"new DeltaSet(8, CharRanges.withRanges("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,435,"0x1f08, 0x1f10, 0x1f18, 0x1f1e, 0x1f28, 0x1f30, 0x1f38, 0x1f40,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,436,"0x1f48, 0x1f4e, 0x1f59, 0x1f5a, 0x1f5b, 0x1f5c, 0x1f5d, 0x1f5e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,437,"0x1f5f, 0x1f60, 0x1f68, 0x1f70, 0x1fb8, 0x1fba, 0x1fd8, 0x1fda,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,438,"0x1fe8, 0x1fea)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,439,"new DeltaSet(15, CharRanges.withMembers(0x4cf)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,440,"new DeltaSet(16, CharRanges.withRanges(0x2170, 0x2180)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,441,"new DeltaSet(26, CharRanges.withRanges(0x24d0, 0x24ea)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,442,"new DeltaSet(28, CharRanges.withMembers(0x214e)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,443,"new DeltaSet(31, CharRanges.withMembers(0x3c2)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,444,"new DeltaSet(32, CharRanges.withRanges("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,445,"0x61, 0x7b, 0xe0, 0xf7, 0xf8, 0xff, 0x3b1, 0x3c2, 0x3c3, 0x3cc,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,446,"0x430, 0x450, 0xff41, 0xff5b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,447,"new DeltaSet(37, CharRanges.withRanges(0x3ad, 0x3b0)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,448,"new DeltaSet(38, CharRanges.withMembers(0x3ac)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,449,"new DeltaSet(47, CharRanges.withMembers(0x3d5)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,450,"new DeltaSet(48, CharRanges.withRanges(0x561, 0x587, 0x2c30, 0x2c5f)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,451,"new DeltaSet(54, CharRanges.withMembers(0x3d6)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,452,"new DeltaSet(56, CharRanges.withMembers(0x1f7)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,453,"new DeltaSet(57, CharRanges.withMembers(0x3d1)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,454,"new DeltaSet(59, CharRanges.withMembers(0x1e9b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,455,"new DeltaSet(62, CharRanges.withMembers(0x3d0)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,456,"new DeltaSet(63, CharRanges.withRanges(0x3cd, 0x3cf)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,457,"new DeltaSet(64, CharRanges.withMembers(0x3cc)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,458,"new DeltaSet(69, CharRanges.withMembers(0x289)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,459,"new DeltaSet(71, CharRanges.withMembers(0x28c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,460,"new DeltaSet(74, CharRanges.withRanges(0x1fba, 0x1fbc)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,461,"new DeltaSet(79, CharRanges.withMembers(0x1dd)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,462,"new DeltaSet(80, CharRanges.withRanges(0x3f1, 0x3f2, 0x450, 0x460)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,463,"new DeltaSet(84, CharRanges.withMembers(0x399)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,464,"new DeltaSet(86, CharRanges.withRanges(0x3f0, 0x3f1, 0x1fc8, 0x1fcc)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,465,"new DeltaSet(96, CharRanges.withMembers(0x3f5)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,466,"new DeltaSet(97, CharRanges.withMembers(0x1f6)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,467,"new DeltaSet(100, CharRanges.withRanges(0x1fda, 0x1fdc)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,468,"new DeltaSet(112, CharRanges.withRanges(0x1fea, 0x1fec)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,469,"new DeltaSet(121, CharRanges.withMembers(0x178)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,470,"new DeltaSet(126, CharRanges.withRanges(0x1ffa, 0x1ffc)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,471,"new DeltaSet(128, CharRanges.withRanges(0x1ff8, 0x1ffa)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,472,"new DeltaSet(130, CharRanges.withRanges(0x220, 0x221, 0x3fd, 0x400)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,473,"new DeltaSet(163, CharRanges.withMembers(0x23d)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,474,"new DeltaSet(195, CharRanges.withMembers(0x243)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,475,"new DeltaSet(202, CharRanges.withMembers(0x259)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,476,"new DeltaSet(203, CharRanges.withMembers(0x25b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,477,"new DeltaSet(205, CharRanges.withRanges(0x256, 0x258, 0x260, 0x261)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,478,"new DeltaSet(206, CharRanges.withMembers(0x254)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,479,"new DeltaSet(207, CharRanges.withMembers(0x263)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,480,"new DeltaSet(209, CharRanges.withMembers(0x268)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,481,"new DeltaSet(210, CharRanges.withMembers(0x253)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,482,"new DeltaSet(211, CharRanges.withMembers(0x269, 0x26f)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,483,"new DeltaSet(213, CharRanges.withMembers(0x272)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,484,"new DeltaSet(214, CharRanges.withMembers(0x275)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,485,"new DeltaSet(217, CharRanges.withRanges(0x28a, 0x28c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,486,"new DeltaSet(218, CharRanges.withMembers(0x280, 0x283, 0x288)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,487,"new DeltaSet(219, CharRanges.withMembers(0x292)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,488,"new DeltaSet(743, CharRanges.withMembers(0x39c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,489,"new DeltaSet(3814, CharRanges.withMembers(0x2c63)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,490,"new DeltaSet(7205, CharRanges.withMembers(0x1fbe)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,491,"new DeltaSet(7264, CharRanges.withRanges(0x2d00, 0x2d26)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,492,"new DeltaSet(10727, CharRanges.withMembers(0x2c64)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,493,"new DeltaSet(10743, CharRanges.withMembers(0x2c62)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,494,"new DeltaSet(10792, CharRanges.withMembers(0x2c66)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,495,"new DeltaSet(10795, CharRanges.withMembers(0x2c65))"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,498,private static final ImmutableList<DeltaSet> CANON_DELTA_SETS
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,499,= ImmutableList.of(
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,500,"new DeltaSet(-10743, CharRanges.withMembers(0x26b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,501,"new DeltaSet(-10727, CharRanges.withMembers(0x27d)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,502,"new DeltaSet(-3814, CharRanges.withMembers(0x1d7d)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,503,"new DeltaSet(-743, CharRanges.withMembers(0xb5)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,504,"new DeltaSet(-195, CharRanges.withMembers(0x180)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,505,"new DeltaSet(-163, CharRanges.withMembers(0x19a)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,506,"new DeltaSet(-130, CharRanges.withRanges(0x19e, 0x19f, 0x37b, 0x37e)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,507,"new DeltaSet(-128, CharRanges.withRanges(0x1f78, 0x1f7a)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,508,"new DeltaSet(-126, CharRanges.withRanges(0x1f7c, 0x1f7e)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,509,"new DeltaSet(-121, CharRanges.withMembers(0xff)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,510,"new DeltaSet(-112, CharRanges.withRanges(0x1f7a, 0x1f7c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,511,"new DeltaSet(-100, CharRanges.withRanges(0x1f76, 0x1f78)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,512,"new DeltaSet(-97, CharRanges.withMembers(0x195)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,513,"new DeltaSet(-86, CharRanges.withRanges(0x1f72, 0x1f76)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,514,"new DeltaSet(-84, CharRanges.withMembers(0x345)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,515,"new DeltaSet(-74, CharRanges.withRanges(0x1f70, 0x1f72)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,516,"new DeltaSet(-56, CharRanges.withMembers(0x1bf)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,517,"new DeltaSet(-8, CharRanges.withRanges("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,518,"0x1f00, 0x1f08, 0x1f10, 0x1f16, 0x1f20, 0x1f28, 0x1f30, 0x1f38,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,519,"0x1f40, 0x1f46, 0x1f51, 0x1f52, 0x1f53, 0x1f54, 0x1f55, 0x1f56,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,520,"0x1f57, 0x1f58, 0x1f60, 0x1f68, 0x1fb0, 0x1fb2, 0x1fd0, 0x1fd2,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,521,"0x1fe0, 0x1fe2)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,522,"new DeltaSet(-7, CharRanges.withMembers(0x3f2, 0x1fe5)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,523,"new DeltaSet(1, CharRanges.withMembers("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,524,"0x101, 0x103, 0x105, 0x107, 0x109, 0x10b, 0x10d, 0x10f, 0x111, 0x113,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,525,"0x115, 0x117, 0x119, 0x11b, 0x11d, 0x11f, 0x121, 0x123, 0x125, 0x127,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,526,"0x129, 0x12b, 0x12d, 0x12f, 0x133, 0x135, 0x137, 0x13a, 0x13c, 0x13e,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,527,"0x140, 0x142, 0x144, 0x146, 0x148, 0x14b, 0x14d, 0x14f, 0x151, 0x153,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,528,"0x155, 0x157, 0x159, 0x15b, 0x15d, 0x15f, 0x161, 0x163, 0x165, 0x167,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,529,"0x169, 0x16b, 0x16d, 0x16f, 0x171, 0x173, 0x175, 0x177, 0x17a, 0x17c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,530,"0x17e, 0x183, 0x185, 0x188, 0x18c, 0x192, 0x199, 0x1a1, 0x1a3, 0x1a5,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,531,"0x1a8, 0x1ad, 0x1b0, 0x1b4, 0x1b6, 0x1b9, 0x1bd, 0x1c5, 0x1c8, 0x1cb,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,532,"0x1ce, 0x1d0, 0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 0x1df, 0x1e1,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,533,"0x1e3, 0x1e5, 0x1e7, 0x1e9, 0x1eb, 0x1ed, 0x1ef, 0x1f2, 0x1f5, 0x1f9,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,534,"0x1fb, 0x1fd, 0x1ff, 0x201, 0x203, 0x205, 0x207, 0x209, 0x20b, 0x20d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,535,"0x20f, 0x211, 0x213, 0x215, 0x217, 0x219, 0x21b, 0x21d, 0x21f, 0x223,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,536,"0x225, 0x227, 0x229, 0x22b, 0x22d, 0x22f, 0x231, 0x233, 0x23c, 0x242,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,537,"0x247, 0x249, 0x24b, 0x24d, 0x24f, 0x3d9, 0x3db, 0x3dd, 0x3df, 0x3e1,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,538,"0x3e3, 0x3e5, 0x3e7, 0x3e9, 0x3eb, 0x3ed, 0x3ef, 0x3f8, 0x3fb, 0x461,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,539,"0x463, 0x465, 0x467, 0x469, 0x46b, 0x46d, 0x46f, 0x471, 0x473, 0x475,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,540,"0x477, 0x479, 0x47b, 0x47d, 0x47f, 0x481, 0x48b, 0x48d, 0x48f, 0x491,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,541,"0x493, 0x495, 0x497, 0x499, 0x49b, 0x49d, 0x49f, 0x4a1, 0x4a3, 0x4a5,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,542,"0x4a7, 0x4a9, 0x4ab, 0x4ad, 0x4af, 0x4b1, 0x4b3, 0x4b5, 0x4b7, 0x4b9,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,543,"0x4bb, 0x4bd, 0x4bf, 0x4c2, 0x4c4, 0x4c6, 0x4c8, 0x4ca, 0x4cc, 0x4ce,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,544,"0x4d1, 0x4d3, 0x4d5, 0x4d7, 0x4d9, 0x4db, 0x4dd, 0x4df, 0x4e1, 0x4e3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,545,"0x4e5, 0x4e7, 0x4e9, 0x4eb, 0x4ed, 0x4ef, 0x4f1, 0x4f3, 0x4f5, 0x4f7,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,546,"0x4f9, 0x4fb, 0x4fd, 0x4ff, 0x501, 0x503, 0x505, 0x507, 0x509, 0x50b,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,547,"0x50d, 0x50f, 0x511, 0x513, 0x1e01, 0x1e03, 0x1e05, 0x1e07, 0x1e09,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,548,"0x1e0b, 0x1e0d, 0x1e0f, 0x1e11, 0x1e13, 0x1e15, 0x1e17, 0x1e19,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,549,"0x1e1b, 0x1e1d, 0x1e1f, 0x1e21, 0x1e23, 0x1e25, 0x1e27, 0x1e29,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,550,"0x1e2b, 0x1e2d, 0x1e2f, 0x1e31, 0x1e33, 0x1e35, 0x1e37, 0x1e39,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,551,"0x1e3b, 0x1e3d, 0x1e3f, 0x1e41, 0x1e43, 0x1e45, 0x1e47, 0x1e49,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,552,"0x1e4b, 0x1e4d, 0x1e4f, 0x1e51, 0x1e53, 0x1e55, 0x1e57, 0x1e59,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,553,"0x1e5b, 0x1e5d, 0x1e5f, 0x1e61, 0x1e63, 0x1e65, 0x1e67, 0x1e69,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,554,"0x1e6b, 0x1e6d, 0x1e6f, 0x1e71, 0x1e73, 0x1e75, 0x1e77, 0x1e79,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,555,"0x1e7b, 0x1e7d, 0x1e7f, 0x1e81, 0x1e83, 0x1e85, 0x1e87, 0x1e89,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,556,"0x1e8b, 0x1e8d, 0x1e8f, 0x1e91, 0x1e93, 0x1e95, 0x1ea1, 0x1ea3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,557,"0x1ea5, 0x1ea7, 0x1ea9, 0x1eab, 0x1ead, 0x1eaf, 0x1eb1, 0x1eb3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,558,"0x1eb5, 0x1eb7, 0x1eb9, 0x1ebb, 0x1ebd, 0x1ebf, 0x1ec1, 0x1ec3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,559,"0x1ec5, 0x1ec7, 0x1ec9, 0x1ecb, 0x1ecd, 0x1ecf, 0x1ed1, 0x1ed3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,560,"0x1ed5, 0x1ed7, 0x1ed9, 0x1edb, 0x1edd, 0x1edf, 0x1ee1, 0x1ee3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,561,"0x1ee5, 0x1ee7, 0x1ee9, 0x1eeb, 0x1eed, 0x1eef, 0x1ef1, 0x1ef3,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,562,"0x1ef5, 0x1ef7, 0x1ef9, 0x2184, 0x2c61, 0x2c68, 0x2c6a, 0x2c6c,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,563,"0x2c76, 0x2c81, 0x2c83, 0x2c85, 0x2c87, 0x2c89, 0x2c8b, 0x2c8d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,564,"0x2c8f, 0x2c91, 0x2c93, 0x2c95, 0x2c97, 0x2c99, 0x2c9b, 0x2c9d,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,565,"0x2c9f, 0x2ca1, 0x2ca3, 0x2ca5, 0x2ca7, 0x2ca9, 0x2cab, 0x2cad,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,566,"0x2caf, 0x2cb1, 0x2cb3, 0x2cb5, 0x2cb7, 0x2cb9, 0x2cbb, 0x2cbd,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,567,"0x2cbf, 0x2cc1, 0x2cc3, 0x2cc5, 0x2cc7, 0x2cc9, 0x2ccb, 0x2ccd,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,568,"0x2ccf, 0x2cd1, 0x2cd3, 0x2cd5, 0x2cd7, 0x2cd9, 0x2cdb, 0x2cdd,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,569,"0x2cdf, 0x2ce1, 0x2ce3)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,570,"new DeltaSet(2, CharRanges.withMembers(0x1c6, 0x1c9, 0x1cc, 0x1f3)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,571,"new DeltaSet(15, CharRanges.withMembers(0x4cf)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,572,"new DeltaSet(16, CharRanges.withRanges(0x2170, 0x2180)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,573,"new DeltaSet(26, CharRanges.withRanges(0x24d0, 0x24ea)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,574,"new DeltaSet(28, CharRanges.withMembers(0x214e)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,575,"new DeltaSet(31, CharRanges.withMembers(0x3c2)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,576,"new DeltaSet(32, CharRanges.withRanges("
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,577,"0x61, 0x7b, 0xe0, 0xf7, 0xf8, 0xff, 0x3b1, 0x3c2, 0x3c3, 0x3cc, 0x430,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,578,"0x450, 0xff41, 0xff5b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,579,"new DeltaSet(37, CharRanges.withRanges(0x3ad, 0x3b0)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,580,"new DeltaSet(38, CharRanges.withMembers(0x3ac)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,581,"new DeltaSet(47, CharRanges.withMembers(0x3d5)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,582,"new DeltaSet(48, CharRanges.withRanges(0x561, 0x587, 0x2c30, 0x2c5f)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,583,"new DeltaSet(54, CharRanges.withMembers(0x3d6)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,584,"new DeltaSet(57, CharRanges.withMembers(0x3d1)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,585,"new DeltaSet(59, CharRanges.withMembers(0x1e9b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,586,"new DeltaSet(62, CharRanges.withMembers(0x3d0)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,587,"new DeltaSet(63, CharRanges.withRanges(0x3cd, 0x3cf)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,588,"new DeltaSet(64, CharRanges.withMembers(0x3cc)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,589,"new DeltaSet(69, CharRanges.withMembers(0x289)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,590,"new DeltaSet(71, CharRanges.withMembers(0x28c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,591,"new DeltaSet(79, CharRanges.withMembers(0x1dd)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,592,"new DeltaSet(80, CharRanges.withRanges(0x3f1, 0x3f2, 0x450, 0x460)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,593,"new DeltaSet(86, CharRanges.withMembers(0x3f0)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,594,"new DeltaSet(96, CharRanges.withMembers(0x3f5)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,595,"new DeltaSet(202, CharRanges.withMembers(0x259)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,596,"new DeltaSet(203, CharRanges.withMembers(0x25b)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,597,"new DeltaSet(205, CharRanges.withRanges(0x256, 0x258, 0x260, 0x261)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,598,"new DeltaSet(206, CharRanges.withMembers(0x254)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,599,"new DeltaSet(207, CharRanges.withMembers(0x263)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,600,"new DeltaSet(209, CharRanges.withMembers(0x268)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,601,"new DeltaSet(210, CharRanges.withMembers(0x253)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,602,"new DeltaSet(211, CharRanges.withMembers(0x269, 0x26f)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,603,"new DeltaSet(213, CharRanges.withMembers(0x272)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,604,"new DeltaSet(214, CharRanges.withMembers(0x275)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,605,"new DeltaSet(217, CharRanges.withRanges(0x28a, 0x28c)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,606,"new DeltaSet(218, CharRanges.withMembers(0x280, 0x283, 0x288)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,607,"new DeltaSet(219, CharRanges.withMembers(0x292)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,608,"new DeltaSet(7205, CharRanges.withMembers(0x1fbe)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,609,"new DeltaSet(7264, CharRanges.withRanges(0x2d00, 0x2d26)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,610,"new DeltaSet(10792, CharRanges.withMembers(0x2c66)),"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,611,"new DeltaSet(10795, CharRanges.withMembers(0x2c65))"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,616,"* A group of code units such that for all cu in codeUnits, cu is equivalent,"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,617,"* case-insensitively, to cu + delta."
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,619,private static final class DeltaSet {
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,620,final int delta;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,621,final CharRanges codeUnits;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,623,"DeltaSet(int delta, CharRanges codeUnits) {"
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,624,this.delta = delta;
True,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,src/com/google/javascript/jscomp/regex/CaseCanonicalize.java,625,this.codeUnits = codeUnits;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,17,package com.google.javascript.jscomp.regex;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,19,import java.util.Arrays;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,22,* An immutable sparse bitset that deals well where the data is chunky:
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,23,"* where P(bit[x+1] == bit[x]).  E.g. [101,102,103,104,105,1001,1002,1003,1004]"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,24,* is chunky.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,27,final class CharRanges {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,29,* A strictly increasing set of bit indices where even members are the
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,30,"* inclusive starts of ranges, and odd members are the exclusive ends."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,31,* <p>
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,32,"* E.g., { 1, 5, 6, 10 } represents the set ( 1, 2, 3, 4, 6, 7, 8, 9 )."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,34,private final int[] ranges;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,36,public static final CharRanges EMPTY = new CharRanges(new int[0]);
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,38,public static final CharRanges ALL_CODE_UNITS
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,39,"= new CharRanges(new int[] { 0, 0x10000 });"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,41,"public static CharRanges inclusive(int start, int end) {"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,42,if (start > end) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,43,"throw new IndexOutOfBoundsException(start + "" > "" + end);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,45,"return new CharRanges(new int[] { start, end + 1 });"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,49,* Returns an instance containing all and only the given members.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,51,public static CharRanges withMembers(int... members) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,52,return new CharRanges(intArrayToRanges(members.clone()));
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,56,* Returns an instance containing the given ranges.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,57,"* @param ranges An even-length ordered sequence of non-overlapping,"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,58,"*     non-contiguous, [inclusive start, exclusive end) ranges."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,60,public static CharRanges withRanges(int... ranges) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,61,ranges = ranges.clone();
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,62,if ((ranges.length & 1) != 0) { throw new IllegalArgumentException(); }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,63,for (int i = 1; i < ranges.length; ++i) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,64,if (ranges[i] <= ranges[i - 1]) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,65,"throw new IllegalArgumentException(ranges[i] + "" > "" + ranges[i - 1]);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,68,return new CharRanges(ranges);
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,71,private CharRanges(int[] ranges) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,72,this.ranges = ranges;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,75,private static int[] intArrayToRanges(int[] members) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,76,int nMembers = members.length;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,77,if (nMembers == 0) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,78,return new int[0];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,81,Arrays.sort(members);
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,83,// Count the number of runs.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,84,int nRuns = 1;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,85,for (int i = 1; i < nMembers; ++i) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,86,"int current = members[i], last = members[i - 1];"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,87,if (current == last) { continue; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,88,if (current != last + 1) { ++nRuns; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,91,int[] ranges = new int[nRuns * 2];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,92,ranges[0] = members[0];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,93,int k = 0;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,94,for (int i = 1; k + 2 < ranges.length; ++i) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,95,"int current = members[i], last = members[i - 1];"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,96,if (current == last) { continue; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,97,if (current != last + 1) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,98,ranges[++k] = last + 1;  // add 1 to make end exclusive
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,99,ranges[++k] = current;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,102,ranges[++k] = members[nMembers - 1] + 1;  // add 1 to make end exclusive
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,103,return ranges;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,106,public boolean contains(int bit) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,107,"return (Arrays.binarySearch(ranges, bit) & 1) == 0;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,108,"// By the contract of Arrays.binarySearch, its result is either the position"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,109,// of bit in ranges or it is the bitwise inverse of the position of the
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,110,// least element greater than bit.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,112,// Two cases
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,113,// case (idx >= 0)
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,114,//     We ended up exactly on a range boundary.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,115,"//     Starts are inclusive and ends are both exclusive, so this contains"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,116,//     bit iff idx is even.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,118,// case (idx < 0)
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,119,"//     If the least element greater than bit is an odd element,"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,120,"//     then bit must be greater than a start and less than an end, so"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,121,//     contained.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,123,"//     If bit is greater than all elements, then idx will be past the end of"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,124,"//     the array, and will be even since ranges.length is even."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,126,"//     Otherwise bit must be in the space between two runs, so not"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,127,//     contained.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,129,"//     In all cases, oddness is equivalent to containedness."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,131,// Those two cases lead to
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,132,//     idx >= 0 ? ((idx & 1) == 0) : ((~idx & 1) == 1)
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,134,"// But ~n & bit == bit   <=>   n & bit == 0, so"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,135,//     idx >= 0 ? ((idx & 1) == 0) : ((~idx & 1) == 1)
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,136,// =>  idx >= 0 ? ((idx & 1) == 0) : ((idx & 1) == 0)
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,137,// =>  (idx & 1) == 0
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,140,public int minSetBit() {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,141,return ranges.length >= 0 ? ranges[0] : Integer.MIN_VALUE;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,144,public boolean isEmpty() {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,145,return ranges.length == 0;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,148,public int getNumRanges() { return ranges.length >> 1; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,150,public int start(int i) { return ranges[i << 1]; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,152,public int end(int i) { return ranges[(i << 1) | 1]; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,154,public CharRanges union(CharRanges other) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,155,// Index of the input ranges
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,156,"int[] q = this.ranges, r = other.ranges;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,157,// Lengths of the inputs
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,158,"int m = q.length, n = r.length;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,160,if (m == 0) { return other; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,161,if (n == 0) { return this; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,163,// The output array.  The length is m+n in the worst case when all the
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,164,// ranges in a are disjoint from the ranges in b.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,165,int[] out = new int[m + n];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,167,// Indexes into the various arrays
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,168,"int i = 0, j = 0, k = 0;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,169,"// Since there are three arrays, and indices into them the following"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,170,// should never occur in this function:
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,171,// (1) q[j] or q[k]                         -- q is indexed by i
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,172,// (2) r[i] or r[k]                         -- r is indexed by j
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,173,// (3) out[i] or out[j]                     -- out is indexed by k
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,174,// (4) i < n or j < m                       -- index compared to wrong limit
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,176,"// This loop exits because we always increment at least one of i,j."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,177,while (i < m && j < n) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,178,// Range starts and ends.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,179,"int a0 = q[i], a1 = q[i + 1],"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,180,"b0 = r[j], b1 = r[j + 1];"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,181,"if (a1 < b0) {  // [a0, a1) ends before [b0, b1) starts"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,182,out[k++] = a0;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,183,out[k++] = a1;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,184,i += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,185,"} else if (b1 < a0) {  // [b0, b1) ends before [a0, a1) starts"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,186,out[k++] = b0;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,187,out[k++] = b1;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,188,j += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,189,} else {  // ranges overlap
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,190,// We need to compute a new range based on the set of ranges that
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,191,// transitively overlap.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,192,//       AAAAAAAAA AAA
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,193,//     BBB  BBB* BBB
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,194,"// In the range above, the start comes from one set, and the end from"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,195,// another.  The range with the asterisk next to it is subsumed entirely
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,196,"// by a range from the other, and so not all ranges on the input"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,197,// contribute a value to the output.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,198,// The last BBB run serves only as a bridge -- it overlaps two
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,199,// disjoint ranges in the other one so establishes that they
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,200,// transitively overlap.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,201,"int start = Math.min(a0, b0);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,202,"// Guess at the end, and lookahead to come up with a more complete"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,203,// estimate.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,204,"int end = Math.max(a1, b1);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,205,i += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,206,j += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,207,while (i < m || j < n) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,208,if (i < m && q[i] <= end) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,209,"end = Math.max(end, q[i + 1]);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,210,i += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,211,} else if (j < n && r[j] <= end) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,212,"end = Math.max(end, r[j + 1]);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,213,j += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,214,} else {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,215,break;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,218,out[k++] = start;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,219,out[k++] = end;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,222,// There may be unprocessed ranges at the end of one of the inputs.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,223,if (i < m) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,224,"System.arraycopy(q, i, out, k, m - i);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,225,k += m - i;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,226,} else if (j < n) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,227,"System.arraycopy(r, j, out, k, n - j);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,228,k += n - j;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,230,// We guessed at the output length above.  Cut off the tail.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,231,if (k != out.length) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,232,int[] clipped = new int[k];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,233,"System.arraycopy(out, 0, clipped, 0, k);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,234,out = clipped;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,236,return new CharRanges(out);
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,239,public CharRanges intersection(CharRanges other) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,240,"int[] aRanges = ranges, bRanges = other.ranges;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,241,"int aLen = aRanges.length, bLen = bRanges.length;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,242,if (aLen == 0) { return this; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,243,if (bLen == 0) { return other; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,244,"int aIdx = 0, bIdx = 0;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,245,"int[] intersection = new int[Math.min(aLen, bLen)];"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,246,int intersectionIdx = 0;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,247,"int pos = Math.min(aRanges[0], bRanges[0]);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,248,while (aIdx < aLen && bIdx < bLen) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,249,if (aRanges[aIdx + 1] <= pos) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,250,aIdx += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,251,} else if (bRanges[bIdx + 1] <= pos) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,252,bIdx += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,253,} else {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,254,"int start = Math.max(aRanges[aIdx], bRanges[bIdx]);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,255,if (pos < start) {  // Advance to start of common block.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,256,pos = start;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,257,} else {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,258,// Now we know that pos is less than the ends of the two ranges and
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,259,// greater or equal to the starts of the two ranges.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,260,"int end = Math.min(aRanges[aIdx + 1], bRanges[bIdx + 1]);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,261,if (intersectionIdx != 0
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,262,&& pos == intersection[intersectionIdx - 1]) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,263,intersection[intersectionIdx - 1] = end;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,264,} else {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,265,if (intersectionIdx == intersection.length) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,266,int[] newArr = new int[intersectionIdx * 2];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,267,"System.arraycopy(intersection, 0, newArr, 0, intersectionIdx);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,268,intersection = newArr;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,270,intersection[intersectionIdx++] = pos;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,271,intersection[intersectionIdx++] = end;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,273,pos = end;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,277,if (intersectionIdx != intersection.length) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,278,int[] newArr = new int[intersectionIdx];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,279,"System.arraycopy(intersection, 0, newArr, 0, intersectionIdx);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,280,intersection = newArr;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,282,return new CharRanges(intersection);
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,285,public CharRanges difference(CharRanges subtrahendRanges) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,286,// difference = minuend - subtrahend
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,287,int[] minuend = this.ranges;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,288,int[] subtrahend = subtrahendRanges.ranges;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,290,"int mn = minuend.length, sn = subtrahend.length;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,291,if (mn == 0 || sn == 0) { return this; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,293,int[] difference = new int[minuend.length];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,295,"// Indices into minuend.ranges, subtrahend.ranges, and difference."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,296,"int mIdx = 0, sIdx = 0, dIdx = 0;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,298,int pos = minuend[0];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,299,while (mIdx < mn) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,300,if (pos >= minuend[mIdx + 1]) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,301,mIdx += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,302,} else if (pos < minuend[mIdx]) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,303,// Skip gaps in the minuend.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,304,pos = minuend[mIdx];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,305,} else if (sIdx < sn && pos >= subtrahend[sIdx]) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,306,// Skip over a removed part.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,307,pos = subtrahend[sIdx + 1];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,308,sIdx += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,309,} else {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,310,"// Now we know that pos is between [minuend[i], minuend[i + 1])"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,311,"// and outside [subtrahend[j], subtrahend[j + 1])."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,312,int end = sIdx < sn
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,313,"? Math.min(minuend[mIdx + 1], subtrahend[sIdx]) : minuend[mIdx + 1];"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,314,if (dIdx != 0 && difference[dIdx - 1] == pos) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,315,difference[dIdx - 1] = pos;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,316,} else {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,317,if (dIdx == difference.length) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,318,int[] newArr = new int[dIdx * 2];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,319,"System.arraycopy(difference, 0, newArr, 0, dIdx);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,320,difference = newArr;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,322,difference[dIdx++] = pos;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,323,difference[dIdx++] = end;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,325,pos = end;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,329,if (dIdx != difference.length) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,330,int[] newArr = new int[dIdx];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,331,"System.arraycopy(difference, 0, newArr, 0, dIdx);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,332,difference = newArr;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,335,return new CharRanges(difference);
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,338,public boolean containsAll(CharRanges sub) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,339,int[] superRanges = this.ranges;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,340,int[] subRanges = sub.ranges;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,342,"int superIdx = 0, subIdx = 0;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,343,"int superLen = superRanges.length, subLen = subRanges.length;"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,344,while (subIdx < subLen) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,345,if (superIdx == superLen) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,346,return false;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,348,if (superRanges[superIdx + 1] <= subRanges[subIdx]) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,349,// Super range ends before subRange starts.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,350,superIdx += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,351,} else if (superRanges[superIdx] > subRanges[subIdx]) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,352,// Uncontained portion at start of sub range.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,353,return false;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,354,} else if (superRanges[superIdx + 1] >= subRanges[subIdx + 1]) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,355,// A sub range is completely contained in the super range.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,356,// We know this because of the above condition and we have already
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,357,// ruled out that subRanges[subIdx] < superRanges[superIdx].
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,358,subIdx += 2;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,359,} else {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,360,// Uncontained portion at end of sub range.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,361,return false;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,364,return subIdx == subLen;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,368,* Shifts the bits matched by the given delta.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,369,"* So if this has the bits (a, b, c, ..., z) set then the result has the bits"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,370,"* ((a - delta), (b - delta), (c - delta), ...., (z - delta)) set."
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,372,* @throws IndexOutOfBoundsException if shifting by delta would cause an
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,373,*     overflow or underflow in a 32 bit {@code signed int} range boundary.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,374,"*     Since the end boundaries of ranges are exclusive, even if there is no"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,375,"*     range containing {@link Integer#MAX_VALUE}, shifting by a delta of 1"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,376,*     can cause an overflow.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,378,public CharRanges shift(int delta) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,379,int n = ranges.length;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,380,if (delta == 0 || n == 0) { return this; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,381,// Test overflow/underflow
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,382,if (delta < 0) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,383,long lmin = ranges[0] + delta;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,384,if (lmin < Integer.MIN_VALUE) { throw new IndexOutOfBoundsException(); }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,385,} else {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,386,long lmax = ranges[n - 1] + delta;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,387,if (lmax > Integer.MAX_VALUE) { throw new IndexOutOfBoundsException(); }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,389,// Create a shifted range.
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,390,int[] shiftedRanges = new int[n];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,391,for (int i = n; --i >= 0;) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,392,shiftedRanges[i] = ranges[i] + delta;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,394,return new CharRanges(shiftedRanges);
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,397,@Override
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,398,public String toString() {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,399,StringBuilder sb = new StringBuilder();
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,400,sb.append('[');
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,401,for (int i = 0; i < ranges.length; ++i) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,402,if ((i & 1) != 0 && ranges[i] == ranges[i - 1] + 1) { continue; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,403,if (i != 0) { sb.append((i & 1) == 0 ? ' ' : '-'); }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,404,"sb.append(""0x"").append(Integer.toString(ranges[i] - (i & 1), 16));"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,406,sb.append(']');
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,407,return sb.toString();
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,410,@Override
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,411,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,412,if (!(o instanceof CharRanges)) { return false; }
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,413,"return Arrays.equals(this.ranges, ((CharRanges) o).ranges);"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,416,@Override
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,417,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,418,int hc = 0;
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,419,"for (int i = 0, n = Math.min(16, ranges.length); i < n; ++i) {"
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,420,hc = (hc << 2) + ranges[i];
True,src/com/google/javascript/jscomp/regex/CharRanges.java,src/com/google/javascript/jscomp/regex/CharRanges.java,422,return hc;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,17,package com.google.javascript.jscomp.regex;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,20,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,21,import com.google.common.collect.ImmutableMap;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,22,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,23,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,25,import java.util.Iterator;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,26,import java.util.List;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,27,import java.util.Map;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,28,import java.util.Set;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,31,* An AST for JavaScript regular expressions.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,34,public abstract class RegExpTree {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,37,* Returns a simpler regular expression that is semantically the same assuming
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,38,* the given flags.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,39,"* @param flags Regular expression flags, e.g. {@code ""igm""}."
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,41,public abstract RegExpTree simplify(String flags);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,44,"* True if the presence or absence of an {@code ""i""} flag would change the"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,45,* meaning of this regular expression.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,47,public abstract boolean isCaseSensitive();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,50,* True if the regular expression contains an anchor : {@code ^} or {@code $}.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,52,public abstract boolean containsAnchor();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,55,* True if the regular expression contains capturing groups.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,57,public final boolean hasCapturingGroup() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,58,return numCapturingGroups() != 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,62,* The number of capturing groups.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,64,public abstract int numCapturingGroups();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,67,* The children of this node.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,69,public abstract List<? extends RegExpTree> children();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,72,* Appends this regular expression source to the given buffer.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,74,protected abstract void appendSourceCode(StringBuilder sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,76,protected abstract void appendDebugInfo(StringBuilder sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,78,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,79,public final String toString() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,80,StringBuilder sb = new StringBuilder();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,81,sb.append('/');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,82,appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,83,// Don't emit a regular expression that looks like a line comment start.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,84,if (sb.length() == 1) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,85,"sb.append(""(?:)"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,87,sb.append('/');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,88,return sb.toString();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,91,public final String toDebugString() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,92,StringBuilder sb = new StringBuilder();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,93,appendDebugString(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,94,return sb.toString();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,97,private void appendDebugString(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,98,sb.append('(').append(getClass().getSimpleName());
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,99,int len = sb.length();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,100,sb.append(' ');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,101,appendDebugInfo(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,102,if (sb.length() == len + 1) { sb.setLength(len); }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,103,for (RegExpTree child : children()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,104,sb.append(' ');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,105,child.appendDebugString(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,107,sb.append(')');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,110,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,111,public abstract boolean equals(Object o);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,113,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,114,public abstract int hashCode();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,118,* Parses a regular expression to an AST.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,120,* @param pattern The {@code foo} From {@code /foo/i}.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,121,* @param flags The {@code i} From {@code /foo/i}.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,123,public static RegExpTree parseRegExp(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,124,"final String pattern, final String flags) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,126,/** A recursive descent parser that closes over pattern and flags above. */
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,127,class Parser {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,128,/** The number of characters in pattern consumed. */
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,129,int pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,130,/** The number of capturing groups seen so far. */
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,131,int numCapturingGroups = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,132,/** The length of pattern. */
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,133,final int limit = pattern.length();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,135,RegExpTree parseTopLevel() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,136,this.pos = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,137,RegExpTree out = parse();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,138,if (pos < limit) {  // Unmatched closed paren maybe.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,139,throw new IllegalArgumentException(pattern.substring(pos));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,141,return out;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,144,RegExpTree parse() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,145,"// Collects [""foo"", ""bar"", ""baz""] for /foo|bar|baz/."
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,146,ImmutableList.Builder<RegExpTree> alternatives = null;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,147,// The last item parsed within an alternation.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,148,RegExpTree preceder = null;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,150,topLoop:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,151,while (pos < limit) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,152,char ch = pattern.charAt(pos);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,153,RegExpTree atom;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,154,switch (ch) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,155,case '[':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,156,atom = parseCharset();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,157,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,158,case '(':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,159,atom = parseParenthetical();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,160,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,161,case ')':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,162,break topLoop;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,163,case '\\':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,164,atom = parseEscape();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,165,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,166,case '^':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,167,case '$':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,168,atom = new Anchor(ch);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,169,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,170,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,171,case '.':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,172,// We represent . as a character set to make it easy to simplify
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,173,// things like /.|[\r\n]/.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,174,atom = DOT_CHARSET;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,175,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,176,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,177,case '|':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,178,// An alternative may be empty as in /foo||bar/.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,179,// The '|' is consumed below.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,180,atom = Empty.INSTANCE;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,181,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,182,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,183,// Find a run of concatenated characters to avoid building a
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,184,// tree node per literal character.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,185,int start = pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,186,int end = pos + 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,187,charsLoop:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,188,while (end < limit) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,189,switch (pattern.charAt(end)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,190,case '[':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,191,case '(':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,192,case ')':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,193,case '\\':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,194,case '^':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,195,case '$':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,196,case '|':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,197,case '.':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,198,case '*':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,199,case '+':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,200,case '?':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,201,case '{':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,202,break charsLoop;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,203,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,204,// Repetition binds more tightly than concatenation.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,205,"// Only consume up to ""foo"" in /foob*/ so that the suffix"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,206,// operator parser below has the right precedence.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,207,if (end + 1 >= limit
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,208,|| !isRepetitionStart(pattern.charAt(end + 1))) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,209,++end;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,210,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,211,break charsLoop;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,215,"atom = new Text(pattern.substring(start, end));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,216,pos = end;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,217,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,219,if (pos < limit && isRepetitionStart(pattern.charAt(pos))) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,220,atom = parseRepetition(atom);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,222,if (preceder == null) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,223,preceder = atom;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,224,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,225,"preceder = new Concatenation(preceder, atom);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,227,"// If this is an alternative in a alternation, then add it to the"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,228,"// list of complete alternatives, and reset the parser state for the"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,229,// next alternative.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,230,if (pos < limit && pattern.charAt(pos) == '|') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,231,if (alternatives == null) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,232,alternatives = ImmutableList.builder();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,234,alternatives.add(preceder);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,235,preceder = null;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,236,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,239,// An alternative may have no parsed content blank as in /foo|/.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,240,if (preceder == null) { preceder = Empty.INSTANCE; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,241,if (alternatives != null) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,242,alternatives.add(preceder);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,243,return new Alternation(alternatives.build());
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,244,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,245,return preceder;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,250,"* Handles capturing groups {@code (...)},"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,251,"* non-capturing groups {@code (?:...)}, and lookahead assertions"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,252,* {@code (?=...)}.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,254,private RegExpTree parseParenthetical() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,255,Preconditions.checkState(pattern.charAt(pos) == '(');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,256,int start = pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,257,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,258,boolean capturing = true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,259,int type = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,260,if (pos < limit && pattern.charAt(pos) == '?') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,261,if (pos + 1 < limit) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,262,capturing = false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,263,char ch = pattern.charAt(pos + 1);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,264,switch (ch) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,265,case ':':  // A (?:...) style non-capturing group.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,266,pos += 2;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,267,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,268,case '!':  // A lookahead assertion
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,269,case '=':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,270,pos += 2;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,271,type = ch;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,272,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,273,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,274,throw new IllegalArgumentException(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,275,"""Malformed parenthetical: "" + pattern.substring(start));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,279,RegExpTree body = parse();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,280,if (pos < limit && pattern.charAt(pos) == ')') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,281,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,282,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,283,throw new IllegalArgumentException(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,284,"""Unclosed parenthetical group: "" + pattern.substring(start));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,286,if (capturing) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,287,++numCapturingGroups;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,288,return new CapturingGroup(body);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,289,} else if (type != 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,290,"return new LookaheadAssertion(body, type == '=');"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,291,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,292,return body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,297,* Parses a square bracketed character set.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,298,* Standalone character groups (@code /\d/} are handled by
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,299,* {@link #parseEscape}.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,301,private RegExpTree parseCharset() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,302,Preconditions.checkState(pattern.charAt(pos) == '[');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,303,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,305,boolean isCaseInsensitive = flags.indexOf('i') >= 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,306,boolean inverse = pos < limit && pattern.charAt(pos) == '^';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,307,if (inverse) { ++pos; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,308,CharRanges ranges = CharRanges.EMPTY;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,309,CharRanges ieExplicits = CharRanges.EMPTY;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,310,while (pos < limit && pattern.charAt(pos) != ']') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,311,char ch = pattern.charAt(pos);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,312,char start;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,313,if (ch == '\\') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,314,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,315,char possibleGroupName = pattern.charAt(pos);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,316,CharRanges group = NAMED_CHAR_GROUPS.get(possibleGroupName);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,317,if (group != null) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,318,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,319,ranges = ranges.union(group);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,320,continue;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,322,start = parseEscapeChar();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,323,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,324,start = ch;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,325,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,327,char end = start;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,328,if (pos + 1 < limit && pattern.charAt(pos) == '-'
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,329,&& pattern.charAt(pos + 1) != ']') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,330,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,331,ch = pattern.charAt(pos);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,332,if (ch == '\\') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,333,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,334,end = parseEscapeChar();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,335,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,336,end = ch;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,337,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,340,"CharRanges range = CharRanges.inclusive(start, end);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,341,ranges = ranges.union(range);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,342,if (IE_SPEC_ERRORS.contains(start) && IE_SPEC_ERRORS.contains(end)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,343,ieExplicits = ieExplicits.union(range.intersection(IE_SPEC_ERRORS));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,345,if (isCaseInsensitive) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,346,"// If the flags contain the 'i' flag, then it is not correct to"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,347,"// say that [^a-z] contains the letter 'A', or that [a-z] does not"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,348,// contain the letter 'A'.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,349,// We expand out letter groups here so that parse returns something
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,350,// that is valid independent of flags.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,351,// Calls to simplify(flags) may later reintroduce flag assumptions.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,352,"// but without this step, later steps might conflate"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,353,//     /[a-z]/i
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,354,// and
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,355,//     /[^\0-`{-\uffff]/i
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,356,// which matches nothing because the information about whether the
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,357,// ^ is present has been lost during optimizations and charset
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,358,// unioning as in /[...]|[^...]/.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,359,ranges = CaseCanonicalize.expandToAllMatched(ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,362,++pos;  // Consume ']'
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,364,if (inverse) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,365,ranges = CharRanges.ALL_CODE_UNITS.difference(ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,368,"return new Charset(ranges, ieExplicits);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,372,* Parses an escape to a codepoint.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,373,* Some of the characters parsed here have special meanings in various
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,374,"* contexts, so contexts must filter those instead."
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,375,* E.g. '\b' means a different thing inside a charset than without.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,377,private char parseEscapeChar() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,378,char ch = pattern.charAt(pos++);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,379,switch (ch) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,380,case 'b': return '\b';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,381,case 'f': return '\f';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,382,case 'n': return '\n';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,383,case 'r': return '\r';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,384,case 't': return '\t';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,385,case 'u': return parseHex(4);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,386,case 'v': return '\u000b';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,387,case 'x': return parseHex(2);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,388,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,389,if ('0' <= ch && ch <= '7') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,390,char codeUnit = (char) (ch - '0');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,391,// Allow octal literals in the range \0-\377.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,392,"// \41 might be a group, but \041 is not a group."
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,393,"// We read, but do not emit octal literals since they"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,394,// are deprecated in ES5.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,395,int octLimit = Math.min(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,396,"limit, pos + (ch <= '3' ? 2 : 1) + (ch == '0' ? 1 : 0));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,397,while (pos < octLimit) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,398,ch = pattern.charAt(pos);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,399,if ('0' <= ch && ch <= '7') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,400,codeUnit = (char) ((codeUnit << 3) + (ch - '0'));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,401,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,402,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,403,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,406,return codeUnit;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,408,return ch;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,413,* Parses an escape that appears outside a charset.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,415,private RegExpTree parseEscape() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,416,Preconditions.checkState(pattern.charAt(pos) == '\\');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,417,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,418,char ch = pattern.charAt(pos);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,419,if (ch == 'b' || ch == 'B') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,420,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,421,return new WordBoundary(ch);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,422,} else if ('1' <= ch && ch <= '9') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,423,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,424,int possibleGroupIndex = ch - '0';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,425,if (numCapturingGroups >= possibleGroupIndex) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,426,if (pos < limit) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,427,char next = pattern.charAt(pos);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,428,if ('0' <= next && next <= '9') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,429,int twoDigitGroupIndex = possibleGroupIndex * 10 + (next - '0');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,430,if (numCapturingGroups >= twoDigitGroupIndex) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,431,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,432,possibleGroupIndex = twoDigitGroupIndex;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,436,return new BackReference(possibleGroupIndex);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,437,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,438,// \1 - \7 are octal escaps if there is no such group.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,439,// \8 and \9 are the literal characters '8' and '9' if there
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,440,// is no such group.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,441,return new Text(Character.toString(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,442,possibleGroupIndex <= 7 ? (char) possibleGroupIndex : ch));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,444,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,445,CharRanges charGroup = NAMED_CHAR_GROUPS.get(ch);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,446,"if (charGroup != null) {  // Handle \d, etc."
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,447,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,448,"return new Charset(charGroup, CharRanges.EMPTY);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,450,"return new Text("""" + parseEscapeChar());"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,455,* Parses n hex digits to a code-unit.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,457,private char parseHex(int n) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,458,if (pos + n > limit) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,459,throw new IllegalArgumentException(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,460,"""Abbreviated hex escape "" + pattern.substring(pos));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,462,int result = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,463,while (--n >= 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,464,char ch = pattern.charAt(pos);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,465,int digit;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,466,if ('0' <= ch && ch <= '9') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,467,digit = ch - '0';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,468,} else if ('a' <= ch && ch <= 'f') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,469,digit = ch + (10 - 'a');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,470,} else if ('A' <= ch && ch <= 'F') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,471,digit = ch + (10 - 'A');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,472,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,473,throw new IllegalArgumentException(pattern.substring(pos));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,475,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,476,result = (result << 4) | digit;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,478,return (char) result;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,481,private boolean isRepetitionStart(char ch) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,482,switch (ch) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,483,case '?':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,484,case '*':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,485,case '+':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,486,case '{':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,487,return true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,488,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,489,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,494,* Parse a repetition.  {@code x?} is treated as a repetition --
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,495,* an optional production can be matched 0 or 1 time.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,497,private RegExpTree parseRepetition(RegExpTree body) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,498,if (pos == limit) { return body; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,499,"int min, max;"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,500,switch (pattern.charAt(pos)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,501,case '+':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,502,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,503,min = 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,504,max = Integer.MAX_VALUE;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,505,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,506,case '*':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,507,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,508,min = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,509,max = Integer.MAX_VALUE;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,510,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,511,case '?':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,512,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,513,min = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,514,max = 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,515,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,516,case '{':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,517,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,518,int start = pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,519,"int end = pattern.indexOf('}', start);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,520,if (end < 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,521,pos = start - 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,522,return body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,524,"String counts = pattern.substring(start, end);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,525,pos = end + 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,526,"int comma = counts.indexOf(',');"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,527,try {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,528,min = Integer.parseInt(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,529,"comma >= 0 ? counts.substring(0, comma) : counts);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,530,max = comma >= 0
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,531,? comma + 1 != counts.length()
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,532,? Integer.parseInt(counts.substring(comma + 1))
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,533,: Integer.MAX_VALUE
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,534,: min;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,535,} catch (NumberFormatException ex) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,536,min = max = -1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,538,if (min < 0 || min > max) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,539,// Treat the open curly bracket literally.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,540,pos = start - 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,541,return body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,543,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,544,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,545,return body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,547,boolean greedy = true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,548,if (pos < limit && pattern.charAt(pos) == '?') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,549,greedy = false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,550,++pos;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,552,"return new Repetition(body, min, max, greedy);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,556,return new Parser().parseTopLevel();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,561,"* True if, but not necessarily always when the, given regular expression"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,562,* must match the whole input or none of it.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,564,"public static boolean matchesWholeInput(RegExpTree t, String flags) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,565,if (flags.indexOf('m') >= 0) { return false; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,567,if (!(t instanceof Concatenation)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,568,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,571,Concatenation c = (Concatenation) t;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,572,if (c.elements.isEmpty()) { return false; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,573,"RegExpTree first = c.elements.get(0),"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,574,last = c.elements.get(c.elements.size() - 1);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,575,if (!(first instanceof Anchor && last instanceof Anchor)) { return false; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,576,return ((Anchor) first).type == '^' && ((Anchor) last).type == '$';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,580,static abstract class RegExpTreeAtom extends RegExpTree {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,581,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,582,public boolean isCaseSensitive() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,583,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,586,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,587,public boolean containsAnchor() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,588,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,591,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,592,public final int numCapturingGroups() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,593,return 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,596,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,597,public final List<? extends RegExpTree> children() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,598,return ImmutableList.of();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,602,static final class Empty extends RegExpTreeAtom {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,603,static final Empty INSTANCE = new Empty();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,605,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,606,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,607,return this;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,610,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,611,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,612,// No output
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,615,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,616,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,617,// No output
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,620,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,621,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,622,return o instanceof Empty;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,625,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,626,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,627,return 0x7ee06141;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,631,static final class Anchor extends RegExpTreeAtom {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,632,final char type;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,633,Anchor(char type) { this.type = type; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,635,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,636,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,637,return this;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,640,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,641,public boolean containsAnchor() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,642,return true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,645,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,646,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,647,sb.append(type);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,650,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,651,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,652,sb.append(type);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,655,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,656,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,657,return o instanceof Anchor && type == ((Anchor) o).type;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,660,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,661,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,662,return type ^ 0xe85317ff;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,666,static final class WordBoundary extends RegExpTreeAtom {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,667,final char type;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,669,WordBoundary(char type) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,670,this.type = type;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,673,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,674,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,675,return this;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,678,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,679,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,680,sb.append('\\').append(type);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,683,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,684,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,685,sb.append(type);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,688,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,689,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,690,return o instanceof WordBoundary && type == ((WordBoundary) o).type;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,693,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,694,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,695,return 0x5673aa29 ^ type;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,699,static final class BackReference extends RegExpTreeAtom {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,700,final int groupIndex;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,702,BackReference(int groupIndex) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,703,Preconditions.checkArgument(groupIndex >= 0 && groupIndex <= 99);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,704,this.groupIndex = groupIndex;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,707,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,708,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,709,return this;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,712,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,713,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,714,sb.append('\\').append(groupIndex);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,717,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,718,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,719,sb.append(groupIndex);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,722,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,723,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,724,return o instanceof BackReference
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,725,&& groupIndex == ((BackReference) o).groupIndex;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,728,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,729,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,730,return 0xff072663 ^ groupIndex;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,734,static final class Text extends RegExpTreeAtom {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,735,final String text;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,737,Text(String text) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,738,this.text = text;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,741,"static void escapeRegularCharOnto(char ch, StringBuilder sb) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,742,switch (ch) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,743,case '$':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,744,case '^':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,745,case '*':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,746,case '(':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,747,case ')':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,748,case '+':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,749,case '{':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,750,case '[':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,751,case '|':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,752,case '.':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,753,case '/':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,754,case '?':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,755,sb.append('\\').append(ch);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,756,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,757,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,758,"escapeCharOnto(ch, sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,762,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,763,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,764,int n = text.length();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,765,if (n == 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,766,return Empty.INSTANCE;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,768,if (flags.indexOf('i') >= 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,769,String canonicalized = CaseCanonicalize.caseCanonicalize(text);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,770,if (text != canonicalized) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,771,return new Text(canonicalized);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,774,return this;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,777,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,778,public boolean isCaseSensitive() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,779,"for (int i = 0, n = text.length(); i < n; ++i) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,780,if (CaseCanonicalize.CASE_SENSITIVE.contains(text.charAt(i))) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,781,return true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,784,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,787,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,788,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,789,"for (int i = 0, n = text.length(); i < n; ++i) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,790,"escapeRegularCharOnto(text.charAt(i), sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,794,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,795,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,796,sb.append('`').append(text).append('`');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,799,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,800,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,801,return o instanceof Text && text.equals(((Text) o).text);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,804,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,805,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,806,return text.hashCode() ^ 0x617e310;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,810,static final class Repetition extends RegExpTree {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,811,final RegExpTree body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,812,"final int min, max;"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,813,final boolean greedy;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,815,"Repetition(RegExpTree body, int min, int max, boolean greedy) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,816,this.body = body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,817,this.min = min;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,818,this.max = max;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,819,this.greedy = greedy;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,822,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,823,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,824,RegExpTree body = this.body.simplify(flags);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,825,if (max == 0 && !body.hasCapturingGroup()) { return Empty.INSTANCE; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,826,if (body instanceof Empty || NEVER_MATCHES.equals(body)) { return body; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,827,int min = this.min;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,828,int max = this.max;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,829,if (body instanceof Repetition) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,830,Repetition rbody = (Repetition) body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,831,if (rbody.greedy == greedy) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,832,long lmin = ((long) min) * rbody.min;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,833,long lmax = ((long) max) * rbody.max;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,834,if (lmin < Integer.MAX_VALUE) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,835,body = rbody.body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,836,min = (int) lmin;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,837,max = lmax >= Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) lmax;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,841,if (min == 1 && max == 1) { return body; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,842,boolean greedy = this.greedy || min == max;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,843,return body.equals(this.body) && min == this.min && max == this.max
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,844,&& greedy == this.greedy
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,845,? this
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,846,": new Repetition(body, min, max, greedy).simplify(flags);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,849,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,850,public boolean isCaseSensitive() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,851,return body.isCaseSensitive();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,854,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,855,public boolean containsAnchor() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,856,return body.containsAnchor();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,859,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,860,public int numCapturingGroups() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,861,return body.numCapturingGroups();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,864,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,865,public List<? extends RegExpTree> children() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,866,return ImmutableList.of(body);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,869,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,870,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,871,if (body instanceof Alternation || body instanceof Concatenation
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,872,|| body instanceof Repetition
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,873,|| (body instanceof Text && ((Text) body).text.length() > 1)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,874,"sb.append(""(?:"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,875,body.appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,876,sb.append(')');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,877,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,878,body.appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,880,if (max == Integer.MAX_VALUE) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,881,switch (min) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,882,case 0: sb.append('*'); break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,883,case 1: sb.append('+'); break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,884,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,885,"sb.append('{').append(min).append("",}"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,887,} else if (min == 0 && max == 1) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,888,sb.append('?');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,889,} else if (min == max) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,890,sb.append('{').append(min).append('}');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,891,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,892,"sb.append('{').append(min).append(',').append(max).append('}');"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,894,if (!greedy) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,895,sb.append('?');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,899,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,900,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,901,"sb.append("" min="").append(min).append("", max="").append(max);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,902,"if (!greedy) { sb.append(""  not_greedy""); }"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,905,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,906,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,907,if (!(o instanceof Repetition)) { return false; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,908,Repetition that = (Repetition) o;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,909,return this.body.equals(that.body)
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,910,&& this.min == that.min
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,911,&& this.max == that.max
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,912,&& this.greedy == that.greedy;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,915,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,916,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,917,return min + 31 * (max + 31 * ((greedy ? 1 : 0) + 31 * body.hashCode()));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,921,static final class Alternation extends RegExpTree {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,922,final ImmutableList<RegExpTree> alternatives;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,924,Alternation(List<? extends RegExpTree> alternatives) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,925,this.alternatives = ImmutableList.copyOf(alternatives);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,928,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,929,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,930,List<RegExpTree> alternatives = Lists.newArrayList();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,931,for (RegExpTree alternative : this.alternatives) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,932,alternative = alternative.simplify(flags);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,933,if (alternative instanceof Alternation) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,934,alternatives.addAll(((Alternation) alternative).alternatives);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,935,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,936,alternatives.add(alternative);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,939,// Remove duplicates
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,940,RegExpTree last = null;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,941,for (Iterator<RegExpTree> it = alternatives.iterator(); it.hasNext();) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,942,RegExpTree alternative = it.next();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,943,if (alternative.equals(NEVER_MATCHES)) { continue; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,944,if (alternative.equals(last) && !alternative.hasCapturingGroup()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,945,it.remove();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,946,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,947,last = alternative;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,950,// Collapse character alternatives into character sets.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,951,"for (int i = 0, n = alternatives.size(); i < n; ++i) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,952,RegExpTree alternative = alternatives.get(i);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,953,if ((alternative instanceof Text
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,954,&& ((Text) alternative).text.length() == 1)
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,955,|| alternative instanceof Charset) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,956,int end = i;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,957,int nCharsets = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,958,while (end < n) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,959,RegExpTree follower = alternatives.get(end);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,960,if (follower instanceof Charset) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,961,++nCharsets;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,962,} else if (!(follower instanceof Text
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,963,&& ((Text) follower).text.length() == 1)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,964,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,966,++end;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,968,if (end - i >= 3 || (nCharsets != 0 && end - i >= 2)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,969,int[] members = new int[end - i - nCharsets];
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,970,int memberIdx = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,971,CharRanges chars = CharRanges.EMPTY;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,972,CharRanges ieExplicits = CharRanges.EMPTY;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,973,"List<RegExpTree> charAlternatives = alternatives.subList(i, end);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,974,for (RegExpTree charAlternative : charAlternatives) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,975,if (charAlternative instanceof Text) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,976,char ch = ((Text) charAlternative).text.charAt(0);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,977,members[memberIdx++] = ch;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,978,if (IE_SPEC_ERRORS.contains(ch)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,979,"ieExplicits = ieExplicits.union(CharRanges.inclusive(ch, ch));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,981,} else if (charAlternative instanceof Charset) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,982,Charset cs = (Charset) charAlternative;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,983,chars = chars.union(cs.ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,984,ieExplicits = ieExplicits.union(cs.ieExplicits);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,987,chars = chars.union(CharRanges.withMembers(members));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,988,charAlternatives.clear();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,989,charAlternatives.add(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,990,"new Charset(chars, ieExplicits).simplify(flags));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,991,n = alternatives.size();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,995,switch (alternatives.size()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,996,case 0: return Empty.INSTANCE;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,997,case 1: return alternatives.get(0);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,998,case 2:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,999,if (alternatives.get(1) instanceof Empty) {  // (?:a|) -> a?
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1000,"return new Repetition(alternatives.get(0), 0, 1, true);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1001,} else if (alternatives.get(0) instanceof Empty) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1002,"return new Repetition(alternatives.get(1), 0, 1, false);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1004,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1006,// TODO: maybe pull out common prefix or suffix
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1007,return alternatives.equals(this.alternatives)
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1008,? this : new Alternation(alternatives);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1011,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1012,public boolean isCaseSensitive() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1013,for (RegExpTree alternative : alternatives) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1014,if (alternative.isCaseSensitive()) { return true; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1016,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1019,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1020,public boolean containsAnchor() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1021,for (RegExpTree alternative : alternatives) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1022,if (alternative.containsAnchor()) { return true; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1024,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1027,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1028,public int numCapturingGroups() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1029,int n = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1030,for (RegExpTree alternative : alternatives) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1031,n += alternative.numCapturingGroups();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1033,return n;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1036,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1037,public List<? extends RegExpTree> children() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1038,return alternatives;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1041,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1042,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1043,"for (int i = 0, n = alternatives.size(); i < n; ++i) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1044,if (i != 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1045,sb.append('|');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1047,alternatives.get(i).appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1051,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1052,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1053,// Nothing besides children.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1056,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1057,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1058,return this == o || (
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1059,(o instanceof Alternation)
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1060,&& alternatives.equals(((Alternation) o).alternatives));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1063,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1064,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1065,return 0x51b57cd1 ^ alternatives.hashCode();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1069,private static final RegExpTree NEVER_MATCHES = new LookaheadAssertion(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1070,"Empty.INSTANCE, false);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1072,static final class LookaheadAssertion extends RegExpTree {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1073,final RegExpTree body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1074,final boolean positive;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1076,"LookaheadAssertion(RegExpTree body, boolean positive) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1077,this.body = body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1078,this.positive = positive;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1081,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1082,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1083,RegExpTree simpleBody = body.simplify(flags);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1084,if (simpleBody instanceof Empty) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1085,if (positive) {  // Always true
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1086,return simpleBody;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1089,"return new LookaheadAssertion(simpleBody, positive);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1092,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1093,public boolean isCaseSensitive() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1094,return body.isCaseSensitive();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1097,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1098,public boolean containsAnchor() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1099,return body.containsAnchor();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1102,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1103,public int numCapturingGroups() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1104,return body.numCapturingGroups();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1107,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1108,public List<? extends RegExpTree> children() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1109,return ImmutableList.of(body);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1112,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1113,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1114,"sb.append(positive ? ""(?="" : ""(?!"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1115,body.appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1116,sb.append(')');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1119,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1120,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1121,"sb.append(positive ? ""positive"" : ""negative"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1124,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1125,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1126,if (!(o instanceof LookaheadAssertion)) { return false; }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1127,LookaheadAssertion that = (LookaheadAssertion) o;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1128,return this.positive == that.positive && this.body.equals(that.body);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1131,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1132,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1133,return 0x723aba9 ^ body.hashCode();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1137,static final class CapturingGroup extends RegExpTree {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1138,final RegExpTree body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1140,CapturingGroup(RegExpTree body) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1141,this.body = body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1144,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1145,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1146,return new CapturingGroup(body.simplify(flags));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1149,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1150,public boolean isCaseSensitive() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1151,return body.isCaseSensitive();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1154,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1155,public boolean containsAnchor() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1156,return body.containsAnchor();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1159,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1160,public int numCapturingGroups() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1161,return 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1164,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1165,public List<? extends RegExpTree> children() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1166,return ImmutableList.of(body);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1169,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1170,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1171,sb.append('(');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1172,body.appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1173,sb.append(')');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1176,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1177,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1178,// Nothing besides children.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1181,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1182,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1183,return o instanceof CapturingGroup
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1184,&& body.equals(((CapturingGroup) o).body);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1187,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1188,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1189,return 0x55781738 ^ body.hashCode();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1193,"private static final CharRanges DIGITS = CharRanges.inclusive('0', '9');"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1195,private static final CharRanges UCASE_LETTERS
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1196,"= CharRanges.inclusive('A', 'Z');"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1198,private static final CharRanges LCASE_LETTERS
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1199,"= CharRanges.inclusive('a', 'z');"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1201,private static final CharRanges LETTERS = UCASE_LETTERS.union(LCASE_LETTERS);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1203,private static final CharRanges WORD_CHARS = DIGITS
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1204,.union(LETTERS).union(CharRanges.withMembers('_'));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1206,private static final CharRanges INVERSE_WORD_CHARS
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1207,= CharRanges.ALL_CODE_UNITS.difference(WORD_CHARS);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1209,private static final CharRanges SPACE_CHARS = CharRanges.withMembers(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1210,"'\t', '\n', '\u000b', '\u000c', '\r', ' ', '\u00a0',"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1211,// Unicode 3.0 Zs
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1212,"'\u1680', '\u180e', '\u2000', '\u2001',"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1213,"'\u2002', '\u2003', '\u2004', '\u2005',"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1214,"'\u2006', '\u2007', '\u2008', '\u2009',"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1215,"'\u200a',"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1216,// Line terminator chars
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1217,"'\u2028', '\u2029',"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1218,// Unicode 3.0 Zs
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1219,"'\u202f', '\u205f', '\u3000',"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1220,// Byte order marker is a space character in ES5 but not ES3.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1221,'\ufeff'
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1224,"/** IE is broken around \s.  IE (6, 7, 8 at least), only recognize these. */"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1225,private static final CharRanges IE_SPACE_CHARS = CharRanges.withMembers(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1226,"'\t', '\n', '\u000b', '\u000c', '\r', ' '"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1229,"/** IE is broken around \s.  IE (6, 7, 8 at least), only recognize these. */"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1230,private static final CharRanges IE_SPEC_ERRORS = SPACE_CHARS.difference(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1231,IE_SPACE_CHARS);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1233,"private static final ImmutableMap<Character, CharRanges> NAMED_CHAR_GROUPS"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1234,"= ImmutableMap.<Character, CharRanges>builder()"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1235,".put('d', DIGITS)"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1236,".put('D', CharRanges.ALL_CODE_UNITS.difference(DIGITS))"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1237,".put('s', SPACE_CHARS)"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1238,".put('S', CharRanges.ALL_CODE_UNITS.difference(SPACE_CHARS))"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1239,".put('w', WORD_CHARS)"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1240,".put('W', INVERSE_WORD_CHARS)"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1241,.build();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1243,private static final Charset DOT_CHARSET = new Charset(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1244,CharRanges.ALL_CODE_UNITS.difference(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1245,"CharRanges.withMembers('\n', '\r', '\u2028', '\u2029')),"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1246,CharRanges.EMPTY);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1248,static final class Charset extends RegExpTreeAtom {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1249,final CharRanges ranges;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1251,* Code units that were mentioned explicitly and that might be matched by
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1252,* a group according to EcmaScript 5 but would not because of specification
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1253,* violations in IE.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1255,final CharRanges ieExplicits;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1257,"Charset(CharRanges ranges, CharRanges ieExplicits) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1258,this.ranges = ranges;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1259,this.ieExplicits = ieExplicits;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1262,private static int complexityWordFolded(CharRanges ranges) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1263,return Math.min(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1264,"complexityWordFoldedHelper(ranges),"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1265,1 + complexityWordFoldedHelper(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1266,CharRanges.ALL_CODE_UNITS.difference(ranges)));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1269,private static int complexityWordFoldedHelper(CharRanges ranges) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1270,int complexity = DecomposedCharset.complexity(ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1271,if (ranges.containsAll(WORD_CHARS)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1272,complexity = Math.min(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1273,"complexity,"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1274,1 + DecomposedCharset.complexity(ranges.difference(WORD_CHARS)));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1276,if (ranges.containsAll(INVERSE_WORD_CHARS)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1277,complexity = Math.min(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1278,"complexity,"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1279,1 + DecomposedCharset.complexity(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1280,ranges.difference(INVERSE_WORD_CHARS)));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1282,return complexity;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1285,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1286,public RegExpTree simplify(String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1287,if (ranges.isEmpty()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1288,return NEVER_MATCHES;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1290,CharRanges best = ranges;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1291,if (flags.indexOf('i') >= 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1292,Set<CharRanges> options = Sets.newLinkedHashSet();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1293,options.add(CaseCanonicalize.expandToAllMatched(ranges));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1294,options.add(CaseCanonicalize.reduceToMinimum(ranges));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1296,CharRanges lcaseLetters = ranges.intersection(LCASE_LETTERS);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1297,CharRanges ucaseLetters = ranges.intersection(UCASE_LETTERS);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1299,CharRanges lcaseLettersToUpper = lcaseLetters.shift(-32);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1300,CharRanges ucaseLettersToLower = ucaseLetters.shift(32);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1302,options.add(ranges.union(ucaseLettersToLower));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1303,options.add(ranges.union(lcaseLettersToUpper));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1304,options.add(ranges.union(lcaseLettersToUpper)
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1305,.union(ucaseLettersToLower));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1307,options.add(ranges.union(ucaseLettersToLower).difference(ucaseLetters));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1308,options.add(ranges.union(lcaseLettersToUpper).difference(lcaseLetters));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1310,int bestComplexity = complexityWordFolded(ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1312,for (CharRanges option : options) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1313,int complexity = complexityWordFolded(option);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1314,if (complexity < bestComplexity) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1315,bestComplexity = complexity;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1316,best = option;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1321,if (best.getNumRanges() == 1
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1322,&& best.end(0) - best.start(0) == 1) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1323,return new Text(Character.toString((char) best.start(0)));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1326,if (!best.equals(ranges)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1327,"return new Charset(best, ieExplicits);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1330,return this;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1333,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1334,public boolean isCaseSensitive() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1335,// We could test
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1336,//     !ranges.equals(CaseCanonicalize.expandToAllMatched(ranges))
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1337,// but we get better optimizations by leaving the 'i' flag on in most
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1338,// cases.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1340,// Check whether skipping all the character groups that are known
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1341,// case-insensitive leaves us with something that matches the above
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1342,// definition.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1343,CharRanges withoutNamedGroups = decompose().ranges;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1344,return !withoutNamedGroups.equals(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1345,CaseCanonicalize.expandToAllMatched(withoutNamedGroups));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1348,"private DecomposedCharset decompose(CharRanges ranges, boolean inverted) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1349,StringBuilder namedGroups = new StringBuilder();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1350,CharRanges rangesInterIeExplicits = ranges.intersection(ieExplicits);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1351,while (true) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1352,char groupName = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1353,CharRanges simplest = null;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1354,int minComplexity = DecomposedCharset.complexity(ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1355,"for (Map.Entry<Character, CharRanges> namedGroup"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1356,: NAMED_CHAR_GROUPS.entrySet()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1357,CharRanges group = namedGroup.getValue();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1358,if (ranges.containsAll(group)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1359,CharRanges withoutGroup = ranges.difference(group).union(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1360,rangesInterIeExplicits);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1361,int complexity = DecomposedCharset.complexity(withoutGroup);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1362,if (complexity < minComplexity) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1363,simplest = withoutGroup;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1364,groupName = namedGroup.getKey().charValue();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1365,minComplexity = complexity;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1369,if (simplest != null) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1370,namedGroups.append('\\').append(groupName);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1371,ranges = simplest;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1372,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1373,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1376,"return new DecomposedCharset(inverted, ranges, namedGroups.toString());"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1379,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1380,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1381,if (DOT_CHARSET.ranges.equals(ranges)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1382,sb.append('.');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1383,return;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1385,decompose().appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1388,DecomposedCharset decompose() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1389,CharRanges negRanges = CharRanges.ALL_CODE_UNITS.difference(ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1390,if (!ieExplicits.isEmpty()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1391,if (negRanges.intersection(ieExplicits).isEmpty()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1392,"return decompose(ranges, false);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1393,} else if (ranges.intersection(ieExplicits).isEmpty()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1394,"return decompose(negRanges, true);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1397,"DecomposedCharset positive = decompose(ranges, false);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1398,"DecomposedCharset negative = decompose(negRanges, true);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1399,return positive.complexity() <= negative.complexity()
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1400,? positive : negative;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1403,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1404,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1405,sb.append(ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1408,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1409,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1410,return o instanceof Charset && ranges.equals(((Charset) o).ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1413,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1414,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1415,return ranges.hashCode() ^ 0xdede2246;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1419,static final class DecomposedCharset {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1420,boolean inverted;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1421,final CharRanges ranges;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1422,final String namedGroups;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1424,DecomposedCharset(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1425,"boolean inverted, CharRanges ranges, String namedGroups) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1426,this.inverted = inverted;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1427,this.ranges = ranges;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1428,this.namedGroups = namedGroups;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1431,int complexity() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1432,return (inverted ? 1 : 0) + namedGroups.length() + complexity(ranges);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1435,void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1436,if (ranges.isEmpty()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1437,if (!inverted && namedGroups.length() == 2) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1438,sb.append(namedGroups);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1439,return;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1440,} else if (ranges.isEmpty() && namedGroups.length() == 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1441,"sb.append(inverted ? ""[\\S\\s]"" : ""(?!)"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1442,return;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1445,sb.append('[');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1446,if (inverted) { sb.append('^'); }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1447,sb.append(namedGroups);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1448,boolean rangesStartCharset = !inverted && namedGroups.length() == 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1449,boolean emitDashAtEnd = false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1450,"for (int i = 0, n = ranges.getNumRanges(); i < n; ++i) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1451,char start = (char) ranges.start(i);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1452,char end = (char) (ranges.end(i) - 1);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1453,switch (end - start) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1454,case 0:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1455,if (start == '-') {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1456,// Put it at the end where it doesn't need escaping.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1457,emitDashAtEnd = true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1458,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1459,escapeRangeCharOnto(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1460,"start, rangesStartCharset, i == 0, i + 1 == n, sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1462,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1463,case 1:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1464,"escapeRangeCharOnto(start, rangesStartCharset, i == 0, false, sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1465,escapeRangeCharOnto(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1466,"end, rangesStartCharset, false, i + 1 == n, sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1467,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1468,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1469,"escapeRangeCharOnto(start, rangesStartCharset, i == 0, false, sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1470,sb.append('-');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1471,"escapeRangeCharOnto(end, rangesStartCharset, false, true, sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1472,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1475,if (emitDashAtEnd) { sb.append('-'); }
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1476,sb.append(']');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1479,static void escapeRangeCharOnto(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1480,"char ch, boolean startIsFlush, boolean atStart, boolean atEnd,"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1481,StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1482,switch (ch) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1483,case '\b':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1484,"sb.append(""\\b"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1485,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1486,case '^':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1487,"sb.append(atStart && startIsFlush ? ""\\^"" : ""^"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1488,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1489,case '-':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1490,"sb.append(atStart || atEnd ? ""-"" : ""\\-"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1491,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1492,case '\\':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1493,case ']':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1494,sb.append('\\').append(ch);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1495,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1496,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1497,"escapeCharOnto(ch, sb);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1501,static int complexity(CharRanges ranges) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1502,int complexity = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1503,"for (int i = 0, n = ranges.getNumRanges(); i < n; ++i) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1504,int start = ranges.start(i);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1505,int end = ranges.end(i) - 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1506,if (start < 0x20 || start >= 0x7f) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1507,complexity += start >= 0x100 ? 6 : 4;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1508,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1509,++complexity;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1511,switch (end - start) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1512,case 0: continue;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1513,case 1: break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1514,default: complexity += 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1516,if (end < 0x20 || end >= 0x7f) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1517,complexity += end >= 0x100 ? 6 : 4;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1518,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1519,++complexity;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1522,return complexity;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1525,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1526,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1527,if (!(o instanceof DecomposedCharset)) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1528,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1530,DecomposedCharset that = (DecomposedCharset) o;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1531,return this.inverted = that.inverted
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1532,&& this.ranges.equals(that.ranges)
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1533,&& this.namedGroups.equals(that.namedGroups);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1536,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1537,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1538,return ranges.hashCode()
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1539,+ 31 * (namedGroups.hashCode() + (inverted ? 1 : 0));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1543,static final class Concatenation extends RegExpTree {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1544,final ImmutableList<RegExpTree> elements;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1546,"Concatenation(RegExpTree a, RegExpTree b) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1547,"elements = ImmutableList.of(a, b);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1550,Concatenation(List<? extends RegExpTree> elements) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1551,this.elements = ImmutableList.copyOf(elements);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1554,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1555,public RegExpTree simplify(final String flags) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1556,class Simplifier {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1557,final List<RegExpTree> simplified = Lists.newArrayList();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1559,void simplify(RegExpTree t) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1560,if (t instanceof Concatenation) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1561,for (RegExpTree child : ((Concatenation) t).elements) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1562,simplify(child);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1564,} else if (t instanceof Empty) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1565,// Do nothing
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1566,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1567,int lastIndex = simplified.size() - 1;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1568,if (lastIndex >= 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1569,RegExpTree pairwise = simplifyPairwise(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1570,"simplified.get(lastIndex), t);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1571,if (pairwise != null) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1572,"simplified.set(lastIndex, pairwise);"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1573,return;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1576,simplified.add(t);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1580,"RegExpTree simplifyPairwise(RegExpTree before, RegExpTree after) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1581,if (before instanceof Text && after instanceof Text) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1582,return new Text(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1583,((Text) before).text + ((Text) after).text).simplify(flags);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1585,// Fold adjacent repetitions.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1586,"int beforeMin = 1, beforeMax = 1;"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1587,RegExpTree beforeBody = before;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1588,boolean beforeGreedy = false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1589,if (before instanceof Repetition) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1590,Repetition r = (Repetition) before;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1591,beforeMin = r.min;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1592,beforeMax = r.max;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1593,beforeBody = r.body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1594,beforeGreedy = r.greedy;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1596,"int afterMin = 1, afterMax = 1;"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1597,RegExpTree afterBody = after;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1598,boolean afterGreedy = false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1599,if (after instanceof Repetition) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1600,Repetition r = (Repetition) after;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1601,afterMin = r.min;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1602,afterMax = r.max;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1603,afterBody = r.body;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1604,afterGreedy = r.greedy;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1606,if (beforeBody.equals(afterBody)
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1607,&& !beforeBody.hasCapturingGroup()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1608,long lmin = ((long) beforeMin) + afterMin;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1609,long lmax = ((long) beforeMax) + afterMax;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1610,if (lmin < Integer.MAX_VALUE) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1611,int min = (int) lmin;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1612,int max = lmax >= Integer.MAX_VALUE
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1613,? Integer.MAX_VALUE : (int) lmax;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1614,return new Repetition(
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1615,"beforeBody, min, max,"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1616,beforeGreedy || afterGreedy || min == max);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1619,return null;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1623,Simplifier s = new Simplifier();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1624,for (RegExpTree element : elements) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1625,s.simplify(element.simplify(flags));
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1628,switch (s.simplified.size()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1629,case 0: return Empty.INSTANCE;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1630,case 1: return s.simplified.get(0);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1631,default: return new Concatenation(s.simplified);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1635,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1636,public boolean isCaseSensitive() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1637,for (RegExpTree element : elements) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1638,if (element.isCaseSensitive()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1639,return true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1642,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1645,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1646,public boolean containsAnchor() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1647,for (RegExpTree element : elements) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1648,if (element.containsAnchor()) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1649,return true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1652,return false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1655,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1656,public int numCapturingGroups() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1657,int n = 0;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1658,for (RegExpTree element : elements) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1659,n += element.numCapturingGroups();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1661,return n;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1664,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1665,public List<? extends RegExpTree> children() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1666,return elements;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1669,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1670,protected void appendSourceCode(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1671,boolean digitsMightBleed = false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1672,for (RegExpTree element : elements) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1673,boolean parenthesize = false;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1674,if (element instanceof Alternation
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1675,|| element instanceof Concatenation) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1676,parenthesize = true;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1677,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1678,digitsMightBleed = element instanceof Text;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1679,if (digitsMightBleed) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1680,Text text = (Text) element;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1681,if (text.text.length() != 0) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1682,char first = text.text.charAt(0);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1683,parenthesize = '0' <= first && first <= '9';
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1687,if (parenthesize) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1688,"sb.append(""(?:"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1689,element.appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1690,sb.append(')');
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1691,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1692,element.appendSourceCode(sb);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1694,digitsMightBleed = element instanceof BackReference
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1695,&& ((BackReference) element).groupIndex < 10;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1699,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1700,protected void appendDebugInfo(StringBuilder sb) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1701,// Nothing besides children.
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1704,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1705,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1706,return o instanceof Concatenation
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1707,&& elements.equals(((Concatenation) o).elements);
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1710,@Override
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1711,public int hashCode() {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1712,return 0x20997e3e ^ elements.hashCode();
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1716,"static void escapeCharOnto(char ch, StringBuilder sb) {"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1717,switch (ch) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1718,case '\u0000':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1719,"sb.append(""\\0"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1720,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1721,case '\f':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1722,"sb.append(""\\f"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1723,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1724,case '\t':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1725,"sb.append(""\\t"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1726,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1727,case '\n':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1728,"sb.append(""\\n"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1729,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1730,case '\r':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1731,"sb.append(""\\r"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1732,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1733,case '\\':
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1734,"sb.append(""\\\\"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1735,break;
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1736,default:
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1737,if (ch < 0x20 || ch >= 0x7f) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1738,if (ch >= 0x100) {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1739,"sb.append(""\\u"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1740,"sb.append(""0123456789abcdef"".charAt((ch >> 12) & 0xf));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1741,"sb.append(""0123456789abcdef"".charAt((ch >> 8) & 0xf));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1742,"sb.append(""0123456789abcdef"".charAt((ch >> 4) & 0xf));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1743,"sb.append(""0123456789abcdef"".charAt((ch) & 0xf));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1744,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1745,"sb.append(""\\x"");"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1746,"sb.append(""0123456789abcdef"".charAt((ch >> 4) & 0xf));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1747,"sb.append(""0123456789abcdef"".charAt((ch) & 0xf));"
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1749,} else {
True,src/com/google/javascript/jscomp/regex/RegExpTree.java,src/com/google/javascript/jscomp/regex/RegExpTree.java,1750,sb.append(ch);

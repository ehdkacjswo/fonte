is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,28,lass ReorderConstantExpression implements CompilerPass {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,28,class ReorderConstantExpression extends AbstractPeepholeOptimization {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,32,// TODO(user): Rename this pass to PeepholeReorderConstantExpression
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,33,// to follow our naming convention.
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,37,"ublic void process(Node externs, Node node) {"
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,39,Node optimizeSubtree(Node subtree) {
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,39,f (NodeUtil.isSymmetricOperation(node)
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,40,| NodeUtil.isRelationalOperation(node)) {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,41,if (NodeUtil.isSymmetricOperation(subtree)
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,42,|| NodeUtil.isRelationalOperation(subtree)) {
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,42,f (NodeUtil.isImmutableValue(node.getLastChild())
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,43,& !NodeUtil.isImmutableValue(node.getFirstChild())) {
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,44,if (NodeUtil.isImmutableValue(subtree.getLastChild())
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,45,&& !NodeUtil.isImmutableValue(subtree.getFirstChild())) {
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,46,f (NodeUtil.isRelationalOperation(node)){
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,47,nt inverseOperator = NodeUtil.getInverseOperator(node.getType());
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,48,ode.setType(inverseOperator);
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,48,if (NodeUtil.isRelationalOperation(subtree)){
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,49,int inverseOperator = NodeUtil.getInverseOperator(subtree.getType());
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,50,subtree.setType(inverseOperator);
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,52,ode firstNode = node.getFirstChild().detachFromParent();
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,53,ode lastNode = node.getLastChild().detachFromParent();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,54,Node firstNode = subtree.getFirstChild().detachFromParent();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,55,Node lastNode = subtree.getLastChild().detachFromParent();
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,55,ode.addChildrenToFront(lastNode);
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,56,ode.addChildrenToBack(firstNode);
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,57,subtree.addChildrenToFront(lastNode);
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,58,subtree.addChildrenToBack(firstNode);
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,61,/ process children then siblings.
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,62,f (node.hasChildren()) {
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,63,ode child = node.getFirstChild();
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,64,hile (child != null) {
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,65,"rocess(externs, child);"
False,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,66,hild = child.getNext();
True,src/com/google/javascript/jscomp/ReorderConstantExpression.java,src/com/google/javascript/jscomp/ReorderConstantExpression.java,62,return subtree;
False,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,26,rotected CompilerPass getProcessor(Compiler compiler) {
False,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,27,eturn new ReorderConstantExpression(compiler);
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,26,protected CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,27,"return new PeepholeOptimizationsPass(compiler,"
True,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java,28,new ReorderConstantExpression(compiler));

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,278,f (parent.isVar()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,279,f (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,280,tring name = n.getString();
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,281,ar aliasVar = scope.getVar(name);
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,282,"liases.put(name, aliasVar);"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,284,tring qualifiedName =
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,285,liasVar.getInitialValue().getQualifiedName();
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,286,"ransformation.addAlias(name, qualifiedName);"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,287, else {
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,288,/ TODO(robbyw): Support using locals for private variables.
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,289,"eport(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,278,if (parent.isVar() &&
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,279,n.hasChildren() && n.getFirstChild().isQualifiedName()) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,280,String name = n.getString();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,281,Var aliasVar = scope.getVar(name);
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,282,"aliases.put(name, aliasVar);"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,284,String qualifiedName =
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,285,aliasVar.getInitialValue().getQualifiedName();
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,286,"transformation.addAlias(name, qualifiedName);"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,287,} else if (v.isBleedingFunction()) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,288,"// Bleeding functions already get a BAD_PARAMETERS error, so just"
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,289,// do nothing.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,290,} else if (parent.getType() == Token.LP) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,291,// Parameters of the scope function also get a BAD_PARAMETERS
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,292,// error.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,293,} else {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,294,// TODO(robbyw): Support using locals for private variables.
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,295,"report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());"
False,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,316,"/** @param {Foo.Bar} x */ function actual(x) {3}"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,316,"""/** @param {Foo.Bar} x */ foo.Foo.actual = function(x) {3};"" +"
False,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,319,"/** @param {foo.Foo.Bar} x */ function expected(x) {}"","
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,319,"""/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};"","
False,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,325,"/** @param {foo.Foo.Bar} x */ function actual(x) {3}"" +"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,325,"""/** @param {foo.Foo.Bar} x */ foo.Foo.actual = function(x) {3};"" +"
False,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,327,"/** @param {foo.Foo.Bar} x */ function expected(x) {}"");"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,327,"""/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};"");"
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,413,"testScopedFailure(""function f() {}"","
True,test/com/google/javascript/jscomp/ScopedAliasesTest.java,test/com/google/javascript/jscomp/ScopedAliasesTest.java,414,ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);

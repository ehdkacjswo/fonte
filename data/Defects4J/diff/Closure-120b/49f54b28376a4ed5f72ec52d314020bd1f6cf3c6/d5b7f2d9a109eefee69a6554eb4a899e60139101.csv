is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,207,@Override
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,208,public String toString() {
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,209,"String s = ""CFG:\n"";"
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,210,for (GraphvizEdge e : getGraphvizEdges()) {
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,211,s += e.toString() + '\n';
True,src/com/google/javascript/jscomp/ControlFlowGraph.java,src/com/google/javascript/jscomp/ControlFlowGraph.java,213,return s;
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,259,/ Number of uses of the variable within the CFG node that represented the
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,260,/ use in the CFG.
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,261,rivate int numUseWithinUseCfgNode;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,259,// Number of uses of the variable within the current CFG node.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,260,private int numUsesWithinCfgNode;
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,331,f (numUseWithinUseCfgNode != 1) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,330,if (numUsesWithinCfgNode != 1) {
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,475,rivate void getNumUseInUseCfgNode(Node n) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,474,private void getNumUseInUseCfgNode(final Node cfgNode) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,476,numUsesWithinCfgNode = 0;
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,482,f (n.isName() && n.getString().equals(varName) &&
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,483,/ do not count in if it is left child of an assignment operator
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,484,(parent.isAssign() &&
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,485,parent.getFirstChild() == n))) {
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,486,umUseWithinUseCfgNode++;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,482,if (n.isName() && n.getString().equals(varName)) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,483,// We make a special exception when the entire cfgNode is a chain
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,484,"// of assignments, since in that case the assignment statements"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,485,// will happen after the inlining of the right hand side.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,486,// TODO(blickly): Make the SIDE_EFFECT_PREDICATE check more exact
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,487,//   and remove this special case.
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,488,if (parent.isAssign() && (parent.getFirstChild() == n)
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,489,"&& isAssignChain(parent, cfgNode)) {"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,490,// Don't count lhs of top-level assignment chain
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,491,return;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,492,} else {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,493,numUsesWithinCfgNode++;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,498,"private boolean isAssignChain(Node child, Node ancestor) {"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,499,for (Node n = child; n != ancestor; n = n.getParent()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,500,if (!n.isAssign()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,501,return false;
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,504,return true;
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,491,"odeTraversal.traverse(compiler, n, gatherCb);"
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,508,"NodeTraversal.traverse(compiler, cfgNode, gatherCb);"
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,525,or (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,542,for (Node p = n; p != expressionRoot; p = p.getParent()) {
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,88,@Override
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,89,public String toString() {
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,90,"return ""Definition@"" + node.toString();"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,577,public void testVarAssinInsideHookIssue965() {
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,578,"noInline(""var i = 0; return 1 ? (i = 5) : 0, i;"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,579,"noInline(""var i = 0; return (1 ? (i = 5) : 0) ? i : 0;"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,580,"noInline(""var i = 0; return (1 ? (i = 5) : 0) || i;"");"
True,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,581,"noInline(""var i = 0; return (1 ? (i = 5) : 0) * i;"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,93,rivate ImmutableList<String> classTypeParameterNames = ImmutableList.of();;
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,93,private ImmutableList<TemplateType> classTemplateTypeNames = ImmutableList.of();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,334,"// Class template types, which can be used in the scope of a constructor"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,335,// definition.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,336,ImmutableList<String> typeParameters = info.getClassTemplateTypeNames();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,337,if (!typeParameters.isEmpty()) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,338,if (isConstructor || isInterface) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,339,ImmutableList.Builder<TemplateType> builder = ImmutableList.builder();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,340,for (String typeParameter : typeParameters) {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,341,builder.add(typeRegistry.createTemplateType(typeParameter));
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,343,classTemplateTypeNames = builder.build();
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,344,typeRegistry.setTemplateTypeNames(classTemplateTypeNames);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,345,} else {
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,346,"reportWarning(CLASS_TEMPLATE_WITHOUT_CONSTRUCTOR,"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,347,formatFnName());
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,380,mmutableList<String> typeParameters = info.getClassTemplateTypeNames();
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,381,f (!typeParameters.isEmpty()) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,382,f (isConstructor || isInterface) {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,383,his.classTypeParameterNames = typeParameters;
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,384, else {
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,385,"eportWarning(CLASS_TEMPLATE_WITHOUT_CONSTRUCTOR,"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,386,ormatFnName());
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,662,"nName, contents.getSourceNode(), classTypeParameterNames);"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,669,"fnName, contents.getSourceNode(), classTemplateTypeNames);"
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,714,lassTypeParameterNames);
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,721,classTemplateTypeNames);
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,2,* Copyright 2013 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,19,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,20,import com.google.javascript.rhino.jstype.JSTypeRegistry;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,21,import com.google.javascript.rhino.jstype.ModificationVisitor;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,22,import com.google.javascript.rhino.jstype.TemplateType;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,23,import com.google.javascript.rhino.jstype.TemplateTypeMap;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,25,import java.util.ArrayDeque;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,28,* Uses a TemplateTypeMap to replace TemplateTypes with their associated JSType
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,29,* values.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,31,* @author izaakr@google.com (Izaak Rubin)
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,33,public class TemplateTypeMapReplacer extends ModificationVisitor {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,34,private final TemplateTypeMap replacements;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,35,private ArrayDeque<TemplateType> visitedTypes;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,37,TemplateTypeMapReplacer(
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,38,"JSTypeRegistry registry, TemplateTypeMap replacements) {"
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,39,super(registry);
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,40,this.replacements = replacements;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,41,this.visitedTypes = new ArrayDeque<TemplateType>();
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,44,@Override
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,45,public JSType caseTemplateType(TemplateType type) {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,46,if (replacements.hasTemplateKey(type)) {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,47,if (hasVisitedType(type)) {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,48,// If we have already encountered this TemplateType during replacement
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,49,"// (i.e. there is a reference loop), return the type itself."
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,50,return type;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,51,} else {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,52,JSType replacement = replacements.getTemplateType(type);
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,54,visitedTypes.push(type);
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,55,JSType visitedReplacement = replacement.visit(this);
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,56,visitedTypes.pop();
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,58,return visitedReplacement;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,60,} else {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,61,return type;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,66,* Checks if the specified type has already been visited during the Visitor's
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,67,* traversal of a JSType.
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,69,private boolean hasVisitedType(TemplateType type) {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,70,for (TemplateType visitedType : visitedTypes) {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,71,if (visitedType == type) {
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,72,return true;
True,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,src/com/google/javascript/jscomp/TemplateTypeMapReplacer.java,75,return false;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1162,rivate static class TemplateTypeMapReplacer extends ModificationVisitor {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1163,rivate final TemplateTypeMap replacements;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1164,oolean madeChanges = false;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1166,emplateTypeMapReplacer(
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1167,"STypeRegistry registry, TemplateTypeMap replacements) {"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1168,uper(registry);
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1169,his.replacements = replacements;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1172,Override
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1173,ublic JSType caseTemplateType(TemplateType type) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1174,f (replacements.hasTemplateKey(type)) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1175,adeChanges = true;
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1176,SType replacement = replacements.getTemplateType(type);
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1177,eturn replacements.getTemplateType(type);
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1178, else {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,1179,eturn type;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,42,import com.google.javascript.rhino.jstype.TemplateTypeMap;
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,622,found = found.restrictByNotNullOrUndefined();
False,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,623,ound = found.restrictByNotNullOrUndefined();
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,626,TemplateTypeMap typeMap = implementedInterface.getTemplateTypeMap();
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,627,if (!typeMap.isEmpty()) {
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,628,TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,629,"typeRegistry, typeMap);"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,630,required = required.visit(replacer);
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,420,typeOfThis.extendTemplateTypeMap(baseType.getTemplateTypeMap());
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,583,for (ObjectType extendedInterface : this.extendedInterfaces) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,584,typeOfThis.extendTemplateTypeMap(
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,585,extendedInterface.getTemplateTypeMap());
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,72,rotected final TemplateTypeMap templateTypeMap;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,72,protected TemplateTypeMap templateTypeMap;
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,461,"* Extends the template type map associated with this type, merging in the"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,462,* keys and values of the specified map.
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,464,public void extendTemplateTypeMap(TemplateTypeMap otherMap) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,465,templateTypeMap = templateTypeMap.extend(otherMap);
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1482, @param templateKeyNames the templatized type keys for the class.
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1482,* @param templateKeys the templatized types for the class.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1485,"ode parameters, JSType returnType, ImmutableList<String> templateKeyNames) {"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1486,"eturn createConstructorTypeInternal(name, source, parameters, returnType,"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1487,reateTemplateMapKeys(templateKeyNames));
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1490,"rivate FunctionType createConstructorTypeInternal(String name, Node source,"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1506,* @param templateKeys the templatized types for the interface.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1514,mmutableList<String> typeParameters) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1515,"eturn createInterfaceTypeInternal(name, source,"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1516,reateTemplateMapKeys(typeParameters));
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1519,"rivate FunctionType createInterfaceTypeInternal(String name, Node source,"
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1520,mmutableList<TemplateType> typeParameters) {
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1509,ImmutableList<TemplateType> templateKeys) {
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1522,"reateTemplateTypeMap(typeParameters, null));"
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1511,"createTemplateTypeMap(templateKeys, null));"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,73,* Returns true if the map is empty; false otherwise.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,75,public boolean isEmpty() {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,76,return templateKeys.isEmpty();
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,179, Returns a new TemplateTypeMap whose keys have been extended with the
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,180, specified list.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,186,* Extends this TemplateTypeMap with the contents of the specified map.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,187,* UNKNOWN_TYPE will be used as the value for any missing values in the
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,188,* specified map.
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,182,emplateTypeMap extendKeys(ImmutableList<TemplateType> newKeys) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,190,TemplateTypeMap extend(TemplateTypeMap thatMap) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,191,thatMap = thatMap.addUnknownValues();
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,184,"oncatImmutableLists(templateKeys, newKeys), templateValues);"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,193,"concatImmutableLists(thatMap.templateKeys, templateKeys),"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,194,"concatImmutableLists(thatMap.templateValues, templateValues));"
False,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,191,emplateTypeMap extendValues(ImmutableList<JSType> newValues) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,201,TemplateTypeMap addValues(ImmutableList<JSType> newValues) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,214,"* Returns a new TemplateTypeMap, where all unfilled values have been filled"
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,215,* with UNKNOWN_TYPE.
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,217,private TemplateTypeMap addUnknownValues() {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,218,int numUnfilledTemplateKeys = numUnfilledTemplateKeys();
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,219,if (numUnfilledTemplateKeys == 0) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,220,return this;
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,223,ImmutableList.Builder<JSType> builder = ImmutableList.builder();
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,224,for (int i = 0; i < numUnfilledTemplateKeys; i++) {
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,225,builder.add(registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));
True,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,src/com/google/javascript/rhino/jstype/TemplateTypeMap.java,227,return addValues(builder.build());
False,src/com/google/javascript/rhino/jstype/TemplatizedType.java,src/com/google/javascript/rhino/jstype/TemplatizedType.java,59,"uper(registry, objectType, objectType.getTemplateTypeMap().extendValues("
True,src/com/google/javascript/rhino/jstype/TemplatizedType.java,src/com/google/javascript/rhino/jstype/TemplatizedType.java,59,"super(registry, objectType, objectType.getTemplateTypeMap().addValues("
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8885,* Verify that templatized interfaces can extend one another and share
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8886,* template values.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8888,public void testInterfaceInheritanceCheck14() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8889,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8890,"""/** @interface\n @classTemplate T */function A() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8891,"""/** @desc description\n @return {T} */A.prototype.foo = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8892,"""/** @interface\n @classTemplate U\n @extends {A.<U>} */function B() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8893,"""/** @desc description\n @return {U} */B.prototype.bar = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8894,"""/** @constructor\n @implements {B.<string>} */function C() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8895,"""/** @return {string}\n @override */C.prototype.foo = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8896,"""/** @return {string}\n @override */C.prototype.bar = function() {};"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8900,* Verify that templatized instances can correctly implement templatized
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8901,* interfaces.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8903,public void testInterfaceInheritanceCheck15() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8904,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8905,"""/** @interface\n @classTemplate T */function A() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8906,"""/** @desc description\n @return {T} */A.prototype.foo = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8907,"""/** @interface\n @classTemplate U\n @extends {A.<U>} */function B() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8908,"""/** @desc description\n @return {U} */B.prototype.bar = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8909,"""/** @constructor\n @classTemplate V\n @implements {B.<V>}\n */function C() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8910,"""/** @return {V}\n @override */C.prototype.foo = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8911,"""/** @return {V}\n @override */C.prototype.bar = function() {};"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8932,* Verify that templatized interfaces enforce their template type values.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8934,public void testInterfacePropertyNotImplemented3() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8935,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8936,"""/** @interface\n @classTemplate T */function Int() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8937,"""/** @desc description\n @return {T} */Int.prototype.foo = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8938,"""/** @constructor\n @implements {Int.<string>} */function Foo() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8939,"""/** @return {number}\n @override */Foo.prototype.foo = function() {};"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8940,"""mismatch of the foo property type and the type of the property it "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8941,"""overrides from interface Int\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8942,"""original: function (this:Int): string\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,8943,"""override: function (this:Foo): number"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1360,public void testClassTemplateInheritance1() {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1361,// Verify that template type inheritance works for prototype properties.
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1362,testSame(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1363,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1364,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1365,""" * @classTemplate T\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1366,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1367,"""function C() {};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1369,"""/** @type {T} */"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1370,"""C.prototype.foo = 1;\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1372,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1373,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1374,""" * @classTemplate T, U\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1375,""" * @extends {C.<U>}"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1376,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1377,"""function D() {};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1379,"""/** @type {T} */"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1380,"""D.prototype.bar;\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1382,"""/** @type {D.<string, number>} */ var x = new D();\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1383,"""var result1 = x.foo;\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1384,"""var result2 = x.bar;\n"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1385,"assertEquals(""number"", findNameType(""result1"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1386,"assertEquals(""string"", findNameType(""result2"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1389,public void testClassTemplateInheritance2() {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1390,// Verify that template type inheritance works for properties and methods.
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1391,testSame(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1392,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1393,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1394,""" * @classTemplate T\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1395,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1396,"""function C() {};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1398,"""/** @return {T} */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1399,"""C.prototype.method1 = function() {}\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1401,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1402,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1403,""" * @classTemplate T, U\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1404,""" * @extends {C.<U>}"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1405,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1406,"""function D() {};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1408,"""/** @return {T} */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1409,"""D.prototype.method2 = function() {}\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1411,"""/** @type {D.<boolean, string>} */ var x = new D();\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1412,"""var result1 = x.method1();\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1413,"""var result2 = x.method2();\n"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1414,"assertEquals(""string"", findNameType(""result1"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1415,"assertEquals(""boolean"", findNameType(""result2"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1418,public void testClassTemplateInheritance3() {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1419,// Verify that template type inheritance works when the superclass template
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1420,// types are not specified.
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1421,testSame(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1422,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1423,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1424,""" * @classTemplate T\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1425,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1426,"""function C() {\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1427,"""  /** @type {T} */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1428,"""  this.foo;"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1429,"""};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1431,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1432,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1433,""" * @classTemplate T\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1434,""" * @extends {C}"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1435,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1436,"""function D() {\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1437,"""  /** @type {T} */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1438,"""  this.bar;"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1439,"""};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1441,"""/** @type {D.<boolean>} */ var x = new D();\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1442,"""var result1 = x.foo;\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1443,"""var result2 = x.bar;\n"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1444,"assertEquals(""?"", findNameType(""result1"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1445,"assertEquals(""boolean"", findNameType(""result2"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1448,public void testClassTemplateInheritance4() {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1449,// Verify that overriding methods works with template type inheritance.
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1450,testSame(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1451,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1452,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1453,""" * @classTemplate T\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1454,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1455,"""function C() {};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1457,"""/** @return {T} */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1458,"""C.prototype.method = function() {}\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1460,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1461,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1462,""" * @classTemplate T, U\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1463,""" * @extends {C.<U>}"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1464,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1465,"""function D() {};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1467,"""/** @override */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1468,"""D.prototype.method = function() {}\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1470,"""/** @type {D.<boolean, string>} */ var x = new D();\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1471,"""var result = x.method();\n"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1472,"assertEquals(""string"", findNameType(""result"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1475,public void testClassTemplateInheritance5() {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1476,// Verify that overriding methods works with template type inheritance.
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1477,testSame(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1478,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1479,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1480,""" * @classTemplate T\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1481,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1482,"""function C() {};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1484,"""/** @return {T} */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1485,"""C.prototype.method1 = function() {}\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1487,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1488,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1489,""" * @classTemplate T, U\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1490,""" * @extends {C.<U>}"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1491,""" */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1492,"""function D() {};\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1494,"""/** @return {T} */\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1495,"""D.prototype.method2 = function() {}\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1497,"""/** @type {D.<string, boolean>} */ var x = new D();\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1498,"""/** @type {C.<boolean>} */ var y = x;\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1499,"""/** @type {C} */ var z = y;\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1500,"""var result1 = x.method2();\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1501,"""var result2 = y.method1();\n"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1502,"""var result3 = z.method1();\n"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1503,"assertEquals(""string"", findNameType(""result1"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1504,"assertEquals(""boolean"", findNameType(""result2"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,1505,"assertEquals(""T"", findNameType(""result3"", globalScope).toString());"
False,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,158,mmutableList.<String>of());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,158,ImmutableList.<TemplateType>of());
False,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,201,mmutableList.<String>of());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,201,ImmutableList.<TemplateType>of());
False,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,212,mmutableList.<String>of());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,212,ImmutableList.<TemplateType>of());
False,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,217,mmutableList.<String>of());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,217,ImmutableList.<TemplateType>of());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,233,public void testInterfacePrototypeChain3() {
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,234,"TemplateType templateT = registry.createTemplateType(""T"");"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,235,"FunctionType iface = registry.createInterfaceType(""I"", null,"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,236,ImmutableList.of(templateT));
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,237,iface.getPrototype().defineDeclaredProperty(
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,238,"""genericProp"", templateT, null);"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,240,"FunctionType subIface = registry.createInterfaceType(""SubI"", null,"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,241,ImmutableList.<TemplateType>of());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,242,subIface.setExtendedInterfaces(
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,243,Lists.<ObjectType>newArrayList(iface.getInstanceType()));
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,244,assertTypeEquals(
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,245,"subIface.getPrototype(),"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,246,subIface.getInstanceType().getImplicitPrototype());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,247,assertTypeEquals(
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,248,"OBJECT_TYPE,"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,249,subIface.getPrototype().getImplicitPrototype());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,251,ObjectType subIfaceInst = subIface.getInstanceType();
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,252,"assertTrue(subIfaceInst.hasProperty(""genericProp""));"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,253,"assertTrue(subIfaceInst.isPropertyTypeDeclared(""genericProp""));"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,254,"assertFalse(subIfaceInst.isPropertyTypeInferred(""genericProp""));"
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,255,"assertEquals(templateT, subIfaceInst.getPropertyType(""genericProp""));"
False,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,357,mmutableList.<String>of());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,382,ImmutableList.<TemplateType>of());
False,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,359,mmutableList.<String>of());
True,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,384,ImmutableList.<TemplateType>of());
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,6106,"TestingType"", null, null, UNKNOWN_TYPE, ImmutableList.of(""A"", ""B""));"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,6106,"""TestingType"", null, null, UNKNOWN_TYPE, ImmutableList.of("
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,6107,"registry.createTemplateType(""A""),"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,6108,"registry.createTemplateType(""B"")));"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,6134,"TestingType"", null, null, UNKNOWN_TYPE, ImmutableList.of(""A"", ""B""));"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,6136,"""TestingType"", null, null, UNKNOWN_TYPE, ImmutableList.of("
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,6137,"registry.createTemplateType(""A""),"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,6138,"registry.createTemplateType(""B"")));"
False,test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java,test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java,113,"Foo"", null, null, null, ImmutableList.of(""T"", ""U""));"
True,test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java,test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java,113,"""Foo"", null, null, null, ImmutableList.of("
True,test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java,test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java,114,"registry.createTemplateType(""T""),"
True,test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java,test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java,115,"registry.createTemplateType(""U"")));"

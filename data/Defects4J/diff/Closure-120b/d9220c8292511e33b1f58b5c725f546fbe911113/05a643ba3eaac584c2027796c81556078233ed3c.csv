is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,57, there will not no overhead unless we are debugging.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,57,* there will be no overhead unless we are debugging.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,420,// If prevUsedRenameMap had duplicate values then this pass would be
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,421,// non-deterministic.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,422,"// In such a case, the following will throw an IllegalArgumentException."
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,423,Preconditions.checkState(
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,424,prevUsedRenameMap.getNewNameToOriginalNameMap() instanceof Map);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,438,rivate void assignNames(Set<Assignment> varsToRename) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,443,private void assignNames(SortedSet<Assignment> varsToRename) {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,475,public void testPrevUsedMapWithDuplicates() {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,476,"previouslyUsedMap = makeVariableMap(""Foo"", ""z"", ""Bar"", ""z"");"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,477,try {
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,478,"testSame("""");"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,479,fail();
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,480,} catch (java.lang.IllegalArgumentException expected) {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,27,private RenameVars pass = null;
False,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,29,eturn new RenameVars(
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,31,pass = new RenameVars(
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,34,return  pass;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,48,@Override
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,49,protected void tearDown() throws Exception {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,50,super.tearDown();
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,51,pass = null;
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,251,public void testRenameMapHasNoDuplicates() {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,252,"test(""function foo(x) { return function (y) {} }"","
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,253,"""function   b(a) { return function (a) {} }"");"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,255,VariableMap vm = pass.getVariableMap();
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,256,try {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,257,vm.getNewNameToOriginalNameMap();
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,258,} catch (java.lang.IllegalArgumentException unexpected) {
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,259,"fail(""Invalid VariableMap generated: "" +"
True,test/com/google/javascript/jscomp/ShadowVariablesTest.java,test/com/google/javascript/jscomp/ShadowVariablesTest.java,260,vm.getOriginalNameToNewNameMap().toString());
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,140,public void testReverseThrowsErrorOnDuplicate() throws ParseException {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,141,"VariableMap vm = new VariableMap(ImmutableMap.of(""AA"", ""b"", ""BB"", ""b""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,142,try {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,143,vm.getNewNameToOriginalNameMap();
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,144,fail();
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,145,} catch (java.lang.IllegalArgumentException expected) {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,149,public void testReverseLookupOfNullFindsNoName() throws ParseException {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,150,"VariableMap vm = new VariableMap(ImmutableMap.of(""AA"", ""a"", ""BB"", ""b""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,151,assertNull(vm.lookupSourceName(null));

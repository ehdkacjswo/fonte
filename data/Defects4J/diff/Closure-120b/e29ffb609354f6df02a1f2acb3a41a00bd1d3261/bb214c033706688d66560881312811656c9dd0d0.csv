is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,357,ublic Bind describeFunctionBind(Node n) {
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,358,ind result = super.describeFunctionBind(n);
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,357,"public Bind describeFunctionBind(Node n, boolean useTypeInfo) {"
True,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,358,"Bind result = super.describeFunctionBind(n, useTypeInfo);"
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,363,/ It would be nice to be able to identify a fn.bind call
False,src/com/google/javascript/jscomp/ClosureCodingConvention.java,src/com/google/javascript/jscomp/ClosureCodingConvention.java,364,"/ but that requires knowing the type of ""fn""."
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,247,* A Bind instance or null.
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,248,* @param useTypeInfo If we believe type information is reliable enough
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,249,*     to use to figure out what the bind function is.
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,251,"public Bind describeFunctionBind(Node n, boolean useTypeInfo);"
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,268,* The number of parameters bound (not including the 'this' value).
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,270,int getBoundParameterCount() {
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,271,if (parameters == null) {
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,272,return 0;
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,274,Node paramParent = parameters.getParent();
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,275,return paramParent.getChildCount() -
True,src/com/google/javascript/jscomp/CodingConvention.java,src/com/google/javascript/jscomp/CodingConvention.java,276,paramParent.getIndexOfChild(parameters);
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,214,eturn nextConvention.describeFunctionBind(n);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,214,"return describeFunctionBind(n, false);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,217,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,218,"public Bind describeFunctionBind(Node n, boolean useTypeInfo) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,219,"return nextConvention.describeFunctionBind(n, useTypeInfo);"
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,409,/ It would be nice to be able to identify a fn.bind call
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,410,"/ but that requires knowing the type of ""fn""."
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,414,"return describeFunctionBind(n, false);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,417,@Override
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,418,"public Bind describeFunctionBind(Node n, boolean useTypeInfo) {"
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,432,"& callTarget.getLastChild().getString().equals(""bind"")"
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,433,& callTarget.getFirstChild().isFunction()) {
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,434,"/ (function(){}).bind(self, args...);"
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,435,ode fn = callTarget.getFirstChild();
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,436,ode thisValue = callTarget.getNext();
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,437,ode parameters = safeNext(thisValue);
False,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,438,"eturn new Bind(fn, thisValue, parameters);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,439,"&& callTarget.getLastChild().getString().equals(""bind"")) {"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,440,Node maybeFn = callTarget.getFirstChild();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,441,JSType maybeFnType = maybeFn.getJSType();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,442,FunctionType fnType = null;
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,443,if (useTypeInfo && maybeFnType != null) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,444,fnType = maybeFnType.restrictByNotNullOrUndefined()
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,445,.toMaybeFunctionType();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,448,if (fnType != null || maybeFn.isFunction()) {
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,449,"// (function(){}).bind(self, args...);"
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,450,Node thisValue = callTarget.getNext();
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,451,Node parameters = safeNext(thisValue);
True,src/com/google/javascript/jscomp/CodingConventions.java,src/com/google/javascript/jscomp/CodingConventions.java,452,"return new Bind(maybeFn, thisValue, parameters);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,231,ind bind = getCodingConvention().describeFunctionBind(callTarget);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,231,"Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,892,"/ TODO(nicksantos): Use the coding convention, so that we get goog.bind"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,893,/ for free.
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,894,ode calledFn = n.getFirstChild();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,895,oolean looksLikeBind = calledFn.isGetProp()
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,896,"& calledFn.getLastChild().getString().equals(""bind"");"
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,897,f (!looksLikeBind) {
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,892,CodingConvention.Bind bind =
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,893,"compiler.getCodingConvention().describeFunctionBind(n, true);"
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,894,if (bind == null) {
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,901,ode callTarget = calledFn.getFirstChild();
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,902,unctionType callTargetFn = getJSType(callTarget)
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,898,FunctionType callTargetFn = getJSType(bind.target)
False,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,908,.setJSType(callTargetFn.getBindReturnType(n.getChildCount() - 1));
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,904,n.setJSType(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,905,callTargetFn.getBindReturnType(
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,906,// getBindReturnType expects the 'this' argument to be included.
True,src/com/google/javascript/jscomp/TypeInference.java,src/com/google/javascript/jscomp/TypeInference.java,907,bind.getBoundParameterCount() + 1));
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6702,/ We currently do not support goog.bind natively.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6707,"""actual parameter 1 of f does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6708,"""found   : boolean\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6709,"""required: number"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6712,public void testGoogBind2() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6713,// TODO(nicksantos): We do not currently type-check the arguments
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6714,// of the goog.bind.
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6715,testClosureTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6716,"""var goog = {}; goog.bind = function(var_args) {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6717,"""/** @type {function(boolean): boolean} */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6718,"""function f(x, y) { return true; }"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6719,"""f(goog.bind(f, null, 'x')());"","

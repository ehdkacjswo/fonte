is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,20,mport com.google.common.collect.Sets;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,23,mport com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,24,mport com.google.javascript.jscomp.graph.Graph.GraphEdge;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,25,mport com.google.javascript.jscomp.graph.LinkedUndirectedGraph;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,26,mport com.google.javascript.jscomp.graph.UndiGraph;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,31,mport java.util.ArrayList;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,32,mport java.util.Arrays;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,33,mport java.util.Collection;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,34,mport java.util.Comparator;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,35,mport java.util.HashMap;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,36,mport java.util.HashSet;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,37,mport java.util.List;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,38,mport java.util.Map;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,39,mport java.util.Set;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,40,mport java.util.TreeSet;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,26,import java.util.*;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,81, A graph of property affinity information.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,83, Suppose property X and Y are access in the same function N times.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,85, The graph would have X -> Y with the edge of N.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,87,"rivate final UndiGraph<Property, PropertyAffinity> affinityGraph ="
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,88,inkedUndirectedGraph.createWithoutAnnotations();
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,74,"* Sorts Property objects by their count, breaking ties alphabetically to"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,75,* ensure a deterministic total ordering.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,98,ew Comparator<Property>() {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,99,"ublic int compare(Property p1, Property p2) {"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,102, First a frequently used names would always be picked first.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,104,f (p1.numOccurrences != p2.numOccurrences) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,105,eturn p2.numOccurrences - p1.numOccurrences;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,108, If both properties are used equally frequent. We'll let the property
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,109, with a high affinity score get a name first.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,111, see #computeAffinityScores() for how the score is computed.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,113, else if (p1.affinityScore != p2.affinityScore) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,114,eturn p2.affinityScore - p1.affinityScore;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,78,new Comparator<Property>() {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,79,"public int compare(Property p1, Property p2) {"
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,80,if (p1.numOccurrences != p2.numOccurrences) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,81,return p2.numOccurrences - p1.numOccurrences;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,83,return p1.oldName.compareTo(p2.oldName);
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,118," Finally, for determinism, we compare them based on the old name."
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,120,eturn p1.oldName.compareTo(p2.oldName);
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,211,omputeAffinityScores();
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,286, A X property gets an affinity score:
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,288, score = sum (# of times X appears Y * frequency(Y)) for all Y where
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,289,   frequency(Y) > frequency (X).
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,291, This way a property would have a name closer to all high frequency names.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,292, Also two property of the same frequency would have very close names if
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,293, they always appear together.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,295,rivate void computeAffinityScores() {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,296,or (Property p : propertyMap.values()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,297,or (Property other : propertyMap.values()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,298,f (p != other && p.numOccurrences < other.numOccurrences) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,299,"ist<GraphEdge<Property,PropertyAffinity>> edges ="
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,300,"ffinityGraph.getEdges(p, other);"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,301,f (!edges.isEmpty()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,302,.affinityScore += edges.get(0)
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,303,getValue().affinity + other.numOccurrences;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,385,rivate class ProcessProperties extends AbstractPostOrderCallback implements
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,386,copedCallback {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,388,rivate Set<Property> currentHighAffinityProperties = null;
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,323,private class ProcessProperties extends AbstractPostOrderCallback {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,510,ffinityGraph.createNode(prop);
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,513,f (currentHighAffinityProperties != null) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,514,urrentHighAffinityProperties.add(prop);
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,518,Override
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,519,ublic void enterScope(NodeTraversal t) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,520,f (!t.inGlobalScope() && t.getScope().getParent().isGlobal()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,521,urrentHighAffinityProperties = Sets.newHashSet();
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,525,Override
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,526,ublic void exitScope(NodeTraversal t) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,527,f (!t.inGlobalScope() && t.getScope().getParent().isGlobal()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,528,or (Property p1 : currentHighAffinityProperties) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,529,or (Property p2 : currentHighAffinityProperties) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,530,f (p1.oldName.compareTo(p2.oldName) < 0) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,531,"ist<GraphEdge<Property,PropertyAffinity>> edges ="
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,532,"ffinityGraph.getEdges(p1, p2);"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,533,f (edges.isEmpty()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,534,"ffinityGraph.connect(p1, new PropertyAffinity(1), p2);"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,535, else {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,536,dges.get(0).getValue().increase();
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,541,urrentHighAffinityProperties = null;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,555,nt affinityScore = 0;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,562,rivate class PropertyAffinity {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,563,rivate int affinity = 0;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,565,rivate PropertyAffinity(int affinity) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,566,his.affinity = affinity;
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,569,rivate void increase() {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,570,ffinity++;
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,256,ublic void testPropertyAffinity() {
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,257,/ 'y' gets to be 'b' because it appears with z often.
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,258,"/ Other wise, 'x' gets to be 'b' because of alphabetical ordering."
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,260,"est(""var foo={};foo.x=1;foo.y=2;foo.z=3;"" +"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,261,"function f1() { foo.z; foo.z; foo.z; foo.y}"" +"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,262,"function f2() {                      foo.x}"","
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,265,"var foo={};foo.c=1;foo.b=2;foo.a=3;"" +"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,266,"function f1() { foo.a; foo.a; foo.a; foo.b}"" +"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,267,"function f2() {                      foo.c}"");"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,269,"est(""var foo={};foo.x=1;foo.y=2;foo.z=3;"" +"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,270,"function f1() { foo.z; foo.z; foo.z; foo.y}"" +"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,271,"function f2() { foo.z; foo.z; foo.z; foo.x}"","
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,274,"var foo={};foo.b=1;foo.c=2;foo.a=3;"" +"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,275,"function f1() { foo.a; foo.a; foo.a; foo.c}"" +"
False,test/com/google/javascript/jscomp/RenamePropertiesTest.java,test/com/google/javascript/jscomp/RenamePropertiesTest.java,276,"function f2() { foo.a; foo.a; foo.a; foo.b}"");"

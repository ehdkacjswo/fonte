is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/rhino/jstype/AllType.java,src/com/google/javascript/rhino/jstype/AllType.java,58, another except itself or the Unknown type.
True,src/com/google/javascript/rhino/jstype/AllType.java,src/com/google/javascript/rhino/jstype/AllType.java,58,* another except itself or the Unknown type or a named alias.
False,src/com/google/javascript/rhino/jstype/AllType.java,src/com/google/javascript/rhino/jstype/AllType.java,63,eturn that.isAllType() || that.isUnknownType();
True,src/com/google/javascript/rhino/jstype/AllType.java,src/com/google/javascript/rhino/jstype/AllType.java,63,"return JSType.isSubtype(this, that);"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,684,f (this.isEquivalentTo(that)) {
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,684,"if (JSType.isSubtype(this, that)) {"
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,709,f (that instanceof UnionType) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,710,nionType union = (UnionType) that;
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,711,or (JSType element : union.alternates) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,712,f (this.isSubtype(element)) {
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,713,eturn true;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4736,"JSType namedTypeI = getNamedWrapper(""TypeI"", typeI);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4737,"JSType namedTypeJ = getNamedWrapper(""TypeJ"", typeJ);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4742,"assertTrue(""Named "" + typeI + "" should equal itself"","
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4743,namedTypeI.isEquivalentTo(namedTypeI));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4747,"assertFalse(""Named "" + typeI + "" should not equal "" + typeJ,"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4748,namedTypeI.isEquivalentTo(namedTypeJ));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4755,assertTrue(
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4756,"""Named "" + typeJ + "" should be a subtype of Named "" + typeI,"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4757,namedTypeJ.isSubtype(namedTypeI));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4761,assertFalse(
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4762,"""Named "" + typeJ + "" should not be a subtype of Named "" + typeI,"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4763,namedTypeJ.isSubtype(namedTypeI));
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4781,"JSType getNamedWrapper(String name, JSType jstype) {"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4782,"// Normally, there is no way to create a Named NoType alias so"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4783,// avoid confusing things by doing it here..
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4784,if (!jstype.isNoType()) {
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4785,NamedType namedWrapper = new NamedType(
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4786,"registry, name, ""[testcode]"", -1, -1);"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4787,namedWrapper.setReferencedType(jstype);
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4788,return namedWrapper;
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4789,} else {
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4790,return jstype;

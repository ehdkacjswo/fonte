is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,75, <p>Globals that are lvalues are not aliased.</p>
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,75,* <p>Globals that are l-values are not aliased.</p>
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,80,** Number of times a proprety needs to be accessed in order to alias */
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,80,/** Number of times a property needs to be accessed in order to alias */
False,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,86,** Minimium property size to be worth renaming */
True,src/com/google/javascript/jscomp/AliasExternals.java,src/com/google/javascript/jscomp/AliasExternals.java,86,/** Minimum property size to be worth renaming */
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,343,/ of definitions whose lhs doesn't correspond to a node that
True,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,343,// of definitions whose LHS doesn't correspond to a node that
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,92,/ passes one of the dependent variable to a non-sideeffect free
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,92,// passes one of the dependent variable to a non-side-effect free
False,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,292,/ TODO(user): Side-effect is ok sometimes. As long as there are no
True,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java,292,// TODO(user): Side-effect is OK sometimes. As long as there are no
False,src/com/google/javascript/jscomp/MaybeReachingVariableUse.java,src/com/google/javascript/jscomp/MaybeReachingVariableUse.java,56,/ TODO(user): May be comute it somewhere else and re-use the escape
True,src/com/google/javascript/jscomp/MaybeReachingVariableUse.java,src/com/google/javascript/jscomp/MaybeReachingVariableUse.java,56,// TODO(user): Maybe compute it somewhere else and re-use the escape
False,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,293,/ ie: We know exactly what arguments[x] is if x is a constant
True,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,src/com/google/javascript/jscomp/MustBeReachingVariableDef.java,293,// i.e. We know exactly what arguments[x] is if x is a constant
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,47,/ recording which field names are assigned to debug types in each js input.
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,47,// recording which field names are assigned to debug types in each JS input.
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1209,/ TODO(user): only keep functions that match the js type.
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1209,// TODO(user): only keep functions that match the JS type.
False,src/com/google/javascript/jscomp/TransformAMDToCJSModule.java,src/com/google/javascript/jscomp/TransformAMDToCJSModule.java,27, Common JS module. See {@link ProcessCommonJSModules} for follow up processing
True,src/com/google/javascript/jscomp/TransformAMDToCJSModule.java,src/com/google/javascript/jscomp/TransformAMDToCJSModule.java,27,* CommonJS module. See {@link ProcessCommonJSModules} for follow up processing
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1814,/ to bail out on recusive typedefs. We'll eventually need
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,1814,// to bail out on recursive typedefs. We'll eventually need
False,src/com/google/javascript/rhino/ErrorReporter.java,src/com/google/javascript/rhino/ErrorReporter.java,59, where the warning occured; typically a filename or URL
True,src/com/google/javascript/rhino/ErrorReporter.java,src/com/google/javascript/rhino/ErrorReporter.java,59,* where the warning occurred; typically a filename or URL
False,src/com/google/javascript/rhino/ErrorReporter.java,src/com/google/javascript/rhino/ErrorReporter.java,78, where the error occured; typically a filename or URL
True,src/com/google/javascript/rhino/ErrorReporter.java,src/com/google/javascript/rhino/ErrorReporter.java,78,* where the error occurred; typically a filename or URL
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,313,rivate static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispath
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,313,private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispatch
False,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,575, Returns whether the {@code @javadispath} annotation is present on this
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,575,* Returns whether the {@code @javadispatch} annotation is present on this
False,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,50," Represents a type expression as a miniture Rhino AST, so that the"
True,src/com/google/javascript/rhino/JSTypeExpression.java,src/com/google/javascript/rhino/JSTypeExpression.java,50,"* Represents a type expression as a miniature Rhino AST, so that the"
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,769, the property object.  The recieving node may not have any
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,769,* the property object.  The receiving node may not have any
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1233, <p>Return an iterable object that iterates over this nodes's children.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1233,* <p>Return an iterable object that iterates over this node's children.
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1250, <p>Return an iterable object that iterates over this nodes's siblings.
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1250,* <p>Return an iterable object that iterates over this node's siblings.
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1843, meant to be used for top level script nodes where the
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1843,* meant to be used for top-level script nodes where the
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1845," be able to append directly to the top level node, not just the"
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1845,"* be able to append directly to the top-level node, not just the"
False,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,54, This is the class that implements the runtime.
True,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,54,* This is the class that implements the run-time.
False,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,68,/ Optimization for faster check for eol character:
True,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,68,// Optimization for faster check for EOL character:
False,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,325, Othewise return -1L;
True,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,325,"* Otherwise, return -1L;"
False,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,375,* OPT there's a noticable delay for the first error!  Maybe it'd
True,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,375,/* OPT there's a noticeable delay for the first error!  Maybe it'd
False,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,385,/ ResourceBundle does cacheing.
True,src/com/google/javascript/rhino/ScriptRuntime.java,src/com/google/javascript/rhino/ScriptRuntime.java,385,// ResourceBundle does caching.
False,src/com/google/javascript/rhino/TokenStream.java,src/com/google/javascript/rhino/TokenStream.java,184,/ patial match validate the entire string the one possiblity
True,src/com/google/javascript/rhino/TokenStream.java,src/com/google/javascript/rhino/TokenStream.java,184,// partial match validate the entire string the one possibility
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,49, seen in typical functional programming languages.  It is used soley for
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,49,* seen in typical functional programming languages.  It is used solely for
False,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,163,"/ ""that"" can't be a supertype, because it's missing a required arguement."
True,src/com/google/javascript/rhino/jstype/ArrowType.java,src/com/google/javascript/rhino/jstype/ArrowType.java,163,"// ""that"" can't be a supertype, because it's missing a required argument."
False,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,76,     undefineable.
True,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,76,*     undefine-able.
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,113, The interfaces directly extendeded by this function (for interfaces)
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,113,* The interfaces directly extended by this function (for interfaces)
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,534,/ Ecma-262 says that apply's second argument must be an Array
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,534,// ECMA-262 says that apply's second argument must be an Array
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,640,     {@code that}. Otherwise compute the infimum.
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,640,"*     {@code that}. Otherwise, compute the infimum."
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,917,/ Remove the optionalness from the var arg.
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,917,// Remove the optionality from the var arg.
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,929,/ Remove the optionalness from the var arg.
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,929,// Remove the optionality from the var arg.
False,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1114,"/ TODO(nicksantos): In ES3, the runtime coerces ""null"" to the global"
True,src/com/google/javascript/rhino/jstype/FunctionType.java,src/com/google/javascript/rhino/jstype/FunctionType.java,1114,"// TODO(nicksantos): In ES3, the run-time coerces ""null"" to the global"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,771," When computing infimums, we may get a situation like"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,771,"* When computing infima, we may get a situation like"
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1178, infer that an object literal matches its contraint (much like
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1178,* infer that an object literal matches its constraint (much like
False,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1181,ublic void matchConstraint(ObjectType contraint) {}
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,1181,public void matchConstraint(ObjectType constraint) {}
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,802, InterfaceInstance}.
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,802,* interfaceInstance}.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,921, Flushes out the current resolved and unresovled Named Types from
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,921,* Flushes out the current resolved and unresolved Named Types from
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,990, Creates a nullabel and undefine-able value of the given type.
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,990,* Creates a nullable and undefine-able value of the given type.
False,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1010, Creates a union type whose variants are the builtin types specified
True,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,src/com/google/javascript/rhino/jstype/JSTypeRegistry.java,1010,* Creates a union type whose variants are the built-in types specified
False,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,54, resolved.  It is also useful for representing type names in jsdoc type
True,src/com/google/javascript/rhino/jstype/NamedType.java,src/com/google/javascript/rhino/jstype/NamedType.java,54,* resolved.  It is also useful for representing type names in JsDoc type
False,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,578, Intended to be overriden by subclasses.
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,578,* Intended to be overridden by subclasses.
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,78,"/ Modelling this is a bear. Always call getImplicitPrototype(), because"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,78,"// Modeling this is a bear. Always call getImplicitPrototype(), because"
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,243,"/ This is to keep previously inferred jsdoc info, e.g., in a"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,243,"// This is to keep previously inferred JsDoc info, e.g., in a"
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,557,/ We only want to match contraints on anonymous types.
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,557,// We only want to match constraints on anonymous types.
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,424,ublic void matchConstraint(ObjectType contraint) {
False,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,425,eferencedType.matchConstraint(contraint);
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,424,public void matchConstraint(ObjectType constraint) {
True,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,src/com/google/javascript/rhino/jstype/ProxyObjectType.java,425,referencedType.matchConstraint(constraint);
False,src/com/google/javascript/rhino/jstype/StaticScope.java,src/com/google/javascript/rhino/jstype/StaticScope.java,48, runtime scope.
True,src/com/google/javascript/rhino/jstype/StaticScope.java,src/com/google/javascript/rhino/jstype/StaticScope.java,48,* run-time scope.
False,src/com/google/javascript/rhino/jstype/TernaryValue.java,src/com/google/javascript/rhino/jstype/TernaryValue.java,51, with typical boolean logic if the {@link #UNKNOWN} value is not
True,src/com/google/javascript/rhino/jstype/TernaryValue.java,src/com/google/javascript/rhino/jstype/TernaryValue.java,51,* with typical Boolean logic if the {@link #UNKNOWN} value is not
False,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,59," JavaScript always knows the runtime type of an object value, this is safer"
True,src/com/google/javascript/rhino/jstype/UnionType.java,src/com/google/javascript/rhino/jstype/UnionType.java,59,"* JavaScript always knows the run-time type of an object value, this is safer"
False,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,148,/ own bizarro sub-lattice. See the commants on
True,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java,148,// own bizarre sub-lattice. See the comments on
False,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,432, javascript/externs/es3.js. This is used to check that the builtin types
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,432,* javascript/externs/es3.js. This is used to check that the built-in types
False,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,434, externs. It can also be used for any tests that want to use builtin types
True,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java,434,* externs. It can also be used for any tests that want to use built-in types
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7896,/ redefining type error in the TypeValidator. May be it needs
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,7896,// redefining type error in the TypeValidator. Maybe it needs
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,395, Tests the behavior of the Bottom Object yype.
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,395,* Tests the behavior of the Bottom Object type.
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,2744, Tests the getGreastestSubtype method for record types.
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,2744,* Tests the getGreatestSubtype method for record types.
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3122,** Tests assigning jsdoc on a prototype property. */
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,3122,/** Tests assigning JsDoc on a prototype property. */
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4671,** Tests the subclass of an unresolve named type */
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,4671,/** Tests the subclass of an unresolved named type */

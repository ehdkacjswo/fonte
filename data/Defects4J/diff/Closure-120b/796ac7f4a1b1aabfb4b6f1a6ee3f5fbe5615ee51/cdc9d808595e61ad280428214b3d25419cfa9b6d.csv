is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,38,// TODO(user): canFuseIntoOnestatement needs to be rewritten to
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,39,// allow more aggressve use of comma's.
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,40,useIntoOneStatement(n);
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,43,Node start = n.getFirstChild();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,44,Node end = n.getChildBefore(n.getLastChild());
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,45,"Node result = fuseIntoOneStatement(n, start, end);"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,46,"fuseExpressionIntoControlFlowStatement(result, n.getLastChild());"
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,85,rivate void fuseIntoOneStatement(Node block) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,86,ode cur = block.removeFirstChild();
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,88,/ Starts building a tree.
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,89,ode commaTree = cur.removeFirstChild();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,92,"* Given a block, fuse a list of statements with comma's."
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,94,* @param parent The parent that contains the statements.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,95,* @param first The first statement to fuse (inclusive)
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,96,* @param last The last statement to fuse (inclusive)
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,97,* @return A single statement that contains all the fused statement as one.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,99,"private Node fuseIntoOneStatement(Node parent, Node first, Node last) {"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,100,// Nothing to fuse if there is only one statement.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,101,if (first == last) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,102,return first;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,105,// Step one: Create a comma tree that contains all the statements.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,106,Node commaTree = first.removeFirstChild();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,107,Node onePastLast = last.getNext();
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,92,hile (block.hasMoreThanOneChild()) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,93,ode next = block.removeFirstChild().removeFirstChild();
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,94,"ommaTree = fuseExpressionIntoExpression(commaTree, next);"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,109,Node next = null;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,110,for (Node cur = first.getNext(); cur != onePastLast; cur = next) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,111,commaTree = fuseExpressionIntoExpression(
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,112,"commaTree, cur.removeFirstChild());"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,113,next = cur.getNext();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,114,parent.removeChild(cur);
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,97,reconditions.checkState(block.hasOneChild());
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,98,ode last = block.getLastChild();
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,117,// Step two: The last EXPR_RESULT will now hold the comma tree with all
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,118,// the fused statements.
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,119,first.addChildToBack(commaTree);
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,120,return first;
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,123,private void fuseExpressionIntoControlFlowStatement(
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,124,"Node before, Node control) {"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,125,"Preconditions.checkArgument(before.isExprResult(),"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,126,"""before must be expression result"");"
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,103,witch(last.getType()) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,131,switch(control.getType()) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,109,"useExpresssonIntoFirstChild(commaTree, last);"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,137,before.getParent().removeChild(before);
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,138,"fuseExpresssonIntoFirstChild(before.removeFirstChild(), control);"
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,112,f (NodeUtil.isForIn(last)) {
False,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,113,"useExpresssonIntoSecondChild(commaTree, last);"
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,141,before.getParent().removeChild(before);
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,142,if (NodeUtil.isForIn(control)) {
True,src/com/google/javascript/jscomp/StatementFusion.java,src/com/google/javascript/jscomp/StatementFusion.java,143,"fuseExpresssonIntoSecondChild(before.removeFirstChild(), control);"

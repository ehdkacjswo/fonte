is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,21,import com.google.common.base.Splitter;
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,22,mport com.google.common.io.ByteStreams;
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,23,mport com.google.common.io.CharStreams;
True,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,133,private static final Splitter LINE_SPLITTER
True,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,134,"= Splitter.onPattern(""\\r?\\n"").omitEmptyStrings();"
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,139,terable<String> lines;
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,140,ry {
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,141,ines = CharStreams.readLines(CharStreams.newReaderSupplier(
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,142,"yteStreams.newInputStreamSupplier(bytes), Charsets.UTF_8));"
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,143, catch (IOException e) {
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,144,/ Note: An IOException is never thrown while reading from a byte array.
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,145,/ This try/catch is just here to appease the Java compiler.
False,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,146,hrow new RuntimeException(e);
True,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,141,Iterable<String> lines = LINE_SPLITTER.split(
True,src/com/google/javascript/jscomp/VariableMap.java,src/com/google/javascript/jscomp/VariableMap.java,142,"new String(bytes, Charsets.UTF_8));"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,29,import com.google.common.io.CharSource;
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,31,mport com.google.common.io.InputSupplier;
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,133,"iles.newReaderSupplier(file, Charsets.UTF_8));"
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,133,"Files.asCharSource(file, Charsets.UTF_8));"
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,140,rotected static Set<String> loadWhitelistedJsWarnings(
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,141,nputSupplier<? extends Reader> supplier) {
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,140,protected static Set<String> loadWhitelistedJsWarnings(CharSource supplier) {
False,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,143,eturn loadWhitelistedJsWarnings(supplier.getInput());
True,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,src/com/google/javascript/jscomp/WhitelistWarningsGuard.java,142,return loadWhitelistedJsWarnings(supplier.openStream());

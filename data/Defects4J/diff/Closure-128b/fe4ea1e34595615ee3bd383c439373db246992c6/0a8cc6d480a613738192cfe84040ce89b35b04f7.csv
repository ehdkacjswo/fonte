is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,95,// Used in PerformanceTracker
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,96,"static final String PARSING_PASS_NAME = ""parseInputs"";"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1308,"racer tracer = newTracer(""parseInputs"");"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1311,Tracer tracer = newTracer(PARSING_PASS_NAME);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1401,"topTracer(tracer, ""parseInputs"");"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1404,"stopTracer(tracer, PARSING_PASS_NAME);"
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,19,import com.google.common.base.Preconditions;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,46,rivate final boolean trackGzippedSize;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,47,private final boolean trackGzSize;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,52,rivate int curCodeSizeEstimate = -1;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,53,rivate int curZippedCodeSizeEstimate = -1;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,53,private int codeSize = 0;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,54,private int gzCodeSize = 0;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,55,private int initCodeSize = 0;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,56,private int initGzCodeSize = 0;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,86,his.trackGzippedSize = false;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,89,this.trackGzSize = false;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,91,his.trackGzippedSize = false;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,94,this.trackGzSize = false;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,96,his.trackGzippedSize = true;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,99,this.trackGzSize = true;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,121,tring currentPassName = currentRunningPass.pop();
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,122,f (!passName.equals(currentPassName)) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,124,if (!passName.equals(currentRunningPass.pop())) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,126,odeSizeEstimatePrinter printer = null;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,127,f (codeChange.hasCodeChanged() && (trackSize || trackGzippedSize)) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,128,rinter = estimateCodeSize(jsRoot);
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,128,"// After parsing, initialize codeSize and gzCodeSize"
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,129,if (passName.equals(Compiler.PARSING_PASS_NAME) && trackSize) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,130,CodeSizeEstimatePrinter printer = new CodeSizeEstimatePrinter();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,131,CodeGenerator.forCostEstimation(printer).add(jsRoot);
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,132,initCodeSize = codeSize = printer.calcSize();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,133,if (this.trackGzSize) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,134,initGzCodeSize = gzCodeSize = printer.calcZippedSize();
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,131,tats logStats = new Stats(currentPassName);
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,138,// Initialize logStats and summaryStats
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,139,Stats logStats = new Stats(passName);
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,133,"pdateStats(logStats, result, printer);"
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,140,"pdateStats(summaryStats, result, printer);"
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,142,f (printer != null) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,143,f (trackSize) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,144,urCodeSizeEstimate = printer.calcSize();
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,146,f (trackGzippedSize) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,147,urZippedCodeSizeEstimate = printer.calcZippedSize();
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,152,"rivate void updateStats(Stats stats,"
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,153,"ong result, CodeSizeEstimatePrinter printer) {"
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,154,tats.runtime += result;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,155,tats.runs += 1;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,147,// Update fields that aren't related to code size
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,148,logStats.runtime = result;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,149,logStats.runs = 1;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,150,summaryStats.runtime += result;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,151,summaryStats.runs += 1;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,157,tats.changes += 1;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,153,logStats.changes = 1;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,154,summaryStats.changes += 1;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,160,f (printer != null) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,161,ecordSizeChange(
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,162,"urCodeSizeEstimate, printer.calcSize(), stats);"
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,163,ecordGzSizeChange(
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,164,"urZippedCodeSizeEstimate, printer.calcZippedSize(), stats);"
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,169, Record the size change in the given record for that given pass.
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,171,"rivate static void recordSizeChange(int oldSize, int newSize, Stats record) {"
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,172,f (oldSize != -1) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,173,nt delta = oldSize - newSize;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,174,f (delta > 0) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,175,ecord.diff += delta;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,157,// Update fields related to code size
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,158,if (codeChange.hasCodeChanged() && trackSize) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,159,int newSize = 0;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,160,CodeSizeEstimatePrinter printer = new CodeSizeEstimatePrinter();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,161,CodeGenerator.forCostEstimation(printer).add(jsRoot);
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,162,if (trackSize) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,163,newSize = printer.calcSize();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,164,logStats.diff = codeSize - newSize;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,165,summaryStats.diff += logStats.diff;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,166,codeSize = summaryStats.size = logStats.size = newSize;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,178,f (newSize != -1) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,179,ecord.size = newSize;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,184, Record the gzip size change in the given record for that given pass.
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,186,rivate static void recordGzSizeChange(
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,187,"nt oldSize, int newSize, Stats record) {"
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,188,f (oldSize != -1) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,189,nt delta = oldSize - newSize;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,190,f (delta > 0) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,191,ecord.gzDiff += delta;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,168,if (trackGzSize) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,169,newSize = printer.calcZippedSize();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,170,logStats.gzDiff = gzCodeSize - newSize;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,171,summaryStats.gzDiff += logStats.gzDiff;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,172,gzCodeSize = summaryStats.gzSize = logStats.gzSize = newSize;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,194,f (newSize != -1) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,195,ecord.gzSize = newSize;
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,199,rivate final CodeSizeEstimatePrinter estimateCodeSize(Node root) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,200,odeSizeEstimatePrinter cp = new CodeSizeEstimatePrinter(trackGzippedSize);
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,201,odeGenerator cg = CodeGenerator.forCostEstimation(cp);
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,202,g.add(root);
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,203,eturn cp;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,233,Preconditions.checkState(!trackSize || initCodeSize == diff + codeSize);
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,234,Preconditions.checkState(!trackGzSize ||
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,235,initGzCodeSize == gzDiff + gzCodeSize);
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,307,rivate static final class CodeSizeEstimatePrinter extends CodeConsumer {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,308,rivate final boolean trackGzippedSize;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,282,private final class CodeSizeEstimatePrinter extends CodeConsumer {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,314,rivate CodeSizeEstimatePrinter(boolean trackGzippedSize) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,315,his.trackGzippedSize = trackGzippedSize;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,288,private CodeSizeEstimatePrinter() {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,330,f (trackGzippedSize) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,302,if (trackGzSize) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,321,// Called iff trackGzSize is true
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,350,f (trackGzippedSize) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,351,ry {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,352,tream.finish();
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,353,tream.flush();
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,354,tream.close();
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,355,eturn output.size();
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,356, catch (IOException e) {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,357,hrow new RuntimeException(e);
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,359, else {
False,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,360,eturn -1;
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,323,try {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,324,stream.finish();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,325,stream.flush();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,326,stream.close();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,327,return output.size();
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,328,} catch (IOException e) {
True,src/com/google/javascript/jscomp/PerformanceTracker.java,src/com/google/javascript/jscomp/PerformanceTracker.java,329,throw new RuntimeException(e);
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,22,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,25,import com.google.javascript.jscomp.CompilerOptions.TracerMode;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,29,import java.io.ByteArrayOutputStream;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,30,import java.io.PrintStream;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,31,import java.util.List;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,32,import java.util.regex.Pattern;
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2397,// Checks that the summary and the log in the output of PerformanceTracker
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2398,// have the expected number of columns
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2399,public void testPerfTracker() {
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2400,ByteArrayOutputStream output = new ByteArrayOutputStream();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2401,PrintStream outstream = new PrintStream(output);
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2402,Compiler compiler = new Compiler(outstream);
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2403,CompilerOptions options = new CompilerOptions();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2404,List<SourceFile> inputs = Lists.newArrayList();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2405,List<SourceFile> externs = Lists.newArrayList();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2407,options.setTracerMode(TracerMode.ALL);
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2408,"inputs.add(SourceFile.fromCode(""foo"", ""function fun(){}""));"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2409,"compiler.compile(externs, inputs, options);"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2410,outstream.flush();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2411,outstream.close();
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2412,Pattern p = Pattern.compile(
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2413,""".*Summary:.pass,runtime,runs,changingRuns,reduction,gzReduction"" +"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2414,""".*TOTAL,[0-9]+,[0-9]+,[0-9]+,[0-9]+,[0-9]+[^,]"" +"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2415,""".*Log:."" +"
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2416,"""pass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize.*"","
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2417,Pattern.DOTALL);
True,test/com/google/javascript/jscomp/IntegrationTest.java,test/com/google/javascript/jscomp/IntegrationTest.java,2418,assertTrue(p.matcher(output.toString()).matches());

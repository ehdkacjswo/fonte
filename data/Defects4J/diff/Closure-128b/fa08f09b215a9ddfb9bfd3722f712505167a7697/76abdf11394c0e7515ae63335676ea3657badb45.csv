is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,129,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/CheckAccessControls.java,src/com/google/javascript/jscomp/CheckAccessControls.java,129,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,49,otSwapScript(root);
True,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,49,"hotSwapScript(root, null);"
False,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,53,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/CheckProvides.java,src/com/google/javascript/jscomp/CheckProvides.java,53,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,66,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,src/com/google/javascript/jscomp/CheckRequiresForConstructors.java,66,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,158,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/CombinedCompilerPass.java,src/com/google/javascript/jscomp/CombinedCompilerPass.java,158,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,45,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,45,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,838,ublic void hotSwapScript(Node scriptRoot) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,839,ass.hotSwapScript(scriptRoot);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,838,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,839,"pass.hotSwapScript(scriptRoot, originalRoot);"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1034,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1034,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1055,ublic void hotSwapScript(Node scriptRoot) {
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1056,akeInferJsDocInfo(compiler).hotSwapScript(scriptRoot);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1055,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1056,"makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1079,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1079,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1141,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1141,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,19,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,22,* A CleanupPass implementation that will remove all field declarations on
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,23,* JSTypes contributed by the original file.
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,24,* <p>
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,25,"* This pass is expected to clear out declarations contributed to any JSType,"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,26,* even if the constructor declaration is not provided in the file being
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,27,* updated.
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,29,* @author tylerg@google.com (Tyler Goodwin)
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,31,public class FieldCleanupPass implements HotSwapCompilerPass {
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,33,@Override
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,34,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,37,@Override
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,38,"public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/FieldCleanupPass.java,src/com/google/javascript/jscomp/FieldCleanupPass.java,39,// FieldCleanupPass should not do work during process.
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,24, <p>The additional method is {@code hotSwapScript} which runs this pass on
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,25, a subtree of the AST. Each pass that is intended to support hot-swap
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,26, style should implement this interface.
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,28, <p>It is assumed that {@code Node} argument of {@code hotSwapScript} is the
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,29, root of a sub-tree in AST that represents a js file and so is of type
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,30, {@code Token.SCRIPT}.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,23,* <p>
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,24,* The additional method is {@code hotSwapScript} which runs this pass on a
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,25,* subtree of the AST. Each pass that is intended to support hot-swap style
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,26,* should implement this interface.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,27,* <p>
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,28,* It is assumed that {@code Node} argument of {@code hotSwapScript} is the root
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,29,* of a sub-tree in AST that represents a js file and so is of type {@code
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,30,* Token.SCRIPT}.
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,40,     should be of type {@code Token.SCRIPT}.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,41,*        should be of type {@code Token.SCRIPT}.
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,42,* @param originalRoot Root node corresponding to the original version of the
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,43,*        file that is modified. Should be of type {@code token.SCRIPT}.
False,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,42,oid hotSwapScript(Node scriptRoot);
True,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,src/com/google/javascript/jscomp/HotSwapCompilerPass.java,45,"void hotSwapScript(Node scriptRoot, Node originalRoot);"
False,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,86,ublic void hotSwapScript(Node root) {
True,src/com/google/javascript/jscomp/InferJSDocInfo.java,src/com/google/javascript/jscomp/InferJSDocInfo.java,86,"public void hotSwapScript(Node root, Node originalRoot) {"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,163,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,163,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,118,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,118,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,94,otSwapScript(root);
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,94,"hotSwapScript(root, null);"
False,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,98,ublic void hotSwapScript(Node root) {
True,src/com/google/javascript/jscomp/ScopedAliases.java,src/com/google/javascript/jscomp/ScopedAliases.java,98,"public void hotSwapScript(Node root, Node originalRoot) {"
False,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,116,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/VarCheck.java,src/com/google/javascript/jscomp/VarCheck.java,116,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,75,ublic void hotSwapScript(Node scriptRoot) {
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,75,"public void hotSwapScript(Node scriptRoot, Node originalRoot) {"
False,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,78,allback.hotSwapScript(scriptRoot);
True,src/com/google/javascript/jscomp/VariableReferenceCheck.java,src/com/google/javascript/jscomp/VariableReferenceCheck.java,78,"callback.hotSwapScript(scriptRoot, originalRoot);"
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,329,* Removes the declared or inferred property from this ObjectType.
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,331,* @param propertyName the property's name
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,332,* @return true if the property was removed successfully. False if the
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,333,"*         property did not exist, or could not be removed."
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,335,boolean removeProperty(String propertyName) {
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,336,return false;

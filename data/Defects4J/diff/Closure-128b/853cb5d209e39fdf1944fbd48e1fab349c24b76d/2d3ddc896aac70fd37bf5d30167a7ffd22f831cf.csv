is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,164,rivate static class ThrowAliasSpecification extends AliasSpecification {
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,164,private class ThrowAliasSpecification extends AliasSpecification {
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,171,"ode name = NodeUtil.newName(getAliasName(), throwNode, getAliasName());"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,171,Node name = NodeUtil.newName(
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,172,"compiler.getCodingConvention(),"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,173,"getAliasName(), throwNode, getAliasName());"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,191, Calculates the minimum number of occurrences of throw needed to alias
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,192, throw.
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,194,tatic int estimateMinOccurrencesRequriedToAlias() {
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,195,"/ Assuming that the alias function name is two bytes in length, two bytes"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,196,/ will be saved per occurrence of throw:
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,197,"/   <code>throw e;</code>, compared to"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,198,/   <code>TT(e);</code>.
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,199,"/ However, the alias definition is some length, N, e.g.,"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,200,/   <code>function TT(t){throw t;}</code>
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,201,/ Hence there must be more than N/2 occurrences of throw to reduce
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,202,/ the code size.
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,203,"ode alias = createAliasFunctionNode(""TT"");"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,204,eturn InlineCostEstimator.getCost(alias) / 2 + 1;
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,194,* Calculates the minimum number of occurrences of throw needed to alias
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,195,* throw.
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,197,static int estimateMinOccurrencesRequriedToAlias() {
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,198,"// Assuming that the alias function name is two bytes in length, two bytes"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,199,// will be saved per occurrence of throw:
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,200,"//   <code>throw e;</code>, compared to"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,201,//   <code>TT(e);</code>.
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,202,"// However, the alias definition is some length, N, e.g.,"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,203,//   <code>function TT(t){throw t;}</code>
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,204,// Hence there must be more than N/2 occurrences of throw to reduce
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,205,// the code size.
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,206,"Node alias = createAliasFunctionNode(""TT"");"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,207,return InlineCostEstimator.getCost(alias) / 2 + 1;
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,208," Creates a function node that takes a single argument, the object to"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,209, throw. The function throws the object.
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,211,rivate static Node createAliasFunctionNode(String aliasName) {
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,212,"ode parameterName = Node.newString(Token.NAME, ""jscomp_throw_param"");"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,213,ist<Node> parameters = Lists.newArrayList(parameterName.cloneNode());
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,214,"ode throwStatement = new Node(Token.THROW, parameterName);"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,215,"ode body = new Node(Token.BLOCK, throwStatement);"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,216,"eturn NodeUtil.newFunctionNode(aliasName, parameters, body, -1, -1);"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,211,"* Creates a function node that takes a single argument, the object to"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,212,* throw. The function throws the object.
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,214,private static Node createAliasFunctionNode(String aliasName) {
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,215,"Node parameterName = Node.newString(Token.NAME, ""jscomp_throw_param"");"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,216,List<Node> parameters = Lists.newArrayList(parameterName.cloneNode());
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,217,"Node throwStatement = new Node(Token.THROW, parameterName);"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,218,"Node body = new Node(Token.BLOCK, throwStatement);"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,219,"return NodeUtil.newFunctionNode(aliasName, parameters, body, -1, -1);"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,221,rivate static class KeywordAliasSpecification extends AliasSpecification {
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,223,private class KeywordAliasSpecification extends AliasSpecification {
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,233,"ode aliasNode = NodeUtil.newName(getAliasName(), n, getAliasName());"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,235,Node aliasNode = NodeUtil.newName(
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,236,"compiler.getCodingConvention(), getAliasName(), n, getAliasName());"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,244,"ode name = NodeUtil.newName(getAliasName(), varNode, getAliasName());"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,247,Node name = NodeUtil.newName(
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,248,"compiler.getCodingConvention(), getAliasName(),"
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,249,"varNode, getAliasName());"
False,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,285,hrowAliasSpecification.estimateMinOccurrencesRequriedToAlias();
True,src/com/google/javascript/jscomp/AliasKeywords.java,src/com/google/javascript/jscomp/AliasKeywords.java,290,estimateMinOccurrencesRequriedToAlias();
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,426,"ode ref = NodeUtil.newName(alias, n, originalName);"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,426,Node ref = NodeUtil.newName(
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,427,"compiler.getCodingConvention(), alias, n, originalName);"
False,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,484,"ode nameNode = NodeUtil.newName(alias, gramps.getFirstChild(),"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,485,Node nameNode = NodeUtil.newName(
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,486,"compiler.getCodingConvention(), alias, gramps.getFirstChild(),"
True,src/com/google/javascript/jscomp/CollapseProperties.java,src/com/google/javascript/jscomp/CollapseProperties.java,599,"compiler.getCodingConvention(),"
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,101,"compiler.getCodingConvention(),"
True,src/com/google/javascript/jscomp/ExportTestFunctions.java,src/com/google/javascript/jscomp/ExportTestFunctions.java,105,"compiler.getCodingConvention(),"
False,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,175,"ode qualifiedPath = NodeUtil.newQualifiedNameNode(path, -1, -1);"
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,175,Node qualifiedPath = NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/ExternExportsPass.java,src/com/google/javascript/jscomp/ExternExportsPass.java,176,"compiler.getCodingConvention(), path, -1, -1);"
False,src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java,src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java,140,"odeUtil.newQualifiedNameNode(className + "".prototype"","
True,src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java,src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java,140,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java,src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java,141,"compiler.getCodingConvention(), className + "".prototype"","
True,src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java,src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java,164,"compiler.getCodingConvention(),"
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,96,"odeUtil.newQualifiedNameNode(exportSymbolFunction,"
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,96,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,97,"compiler.getCodingConvention(), exportSymbolFunction,"
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,99,"all.addChildToBack(NodeUtil.newQualifiedNameNode(export,"
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,100,call.addChildToBack(NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,101,"compiler.getCodingConvention(), export,"
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,106,"odeUtil.newQualifiedNameNode(exportPropertyFunction,"
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,108,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,109,"compiler.getCodingConvention(), exportPropertyFunction,"
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,108,"odeUtil.newQualifiedNameNode(parent,"
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,111,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,112,"compiler.getCodingConvention(), parent,"
False,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,111,"odeUtil.newQualifiedNameNode(export,"
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,115,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/GenerateExports.java,src/com/google/javascript/jscomp/GenerateExports.java,116,"compiler.getCodingConvention(), export,"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1731,"ublic static Node newQualifiedNameNode(String name, int lineno, int charno) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1731,public static Node newQualifiedNameNode(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1732,"CodingConvention convention, String name, int lineno, int charno) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1734,"eturn Node.newString(Token.NAME, name, lineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1735,"return newName(convention, name, lineno, charno);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1736,"ode node = Node.newString(Token.NAME, name.substring(0, endPos),"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1737,"ineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1737,Node node = newName(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1738,"convention, name.substring(0, endPos), lineno, charno);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1745,"ode = new Node(Token.GETPROP, node,"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1746,"ode.newString(Token.STRING, part, lineno, charno),"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1747,"ineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1746,"Node propNode = Node.newString(Token.STRING, part, lineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1747,if (convention.isConstantKey(part)) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1748,"propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1750,"node = new Node(Token.GETPROP, node, propNode, lineno, charno);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1766,"tatic Node newQualifiedNameNode(String name, Node basisNode,"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1769,static Node newQualifiedNameNode(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1770,"CodingConvention convention, String name, Node basisNode,"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1768,"ode node = newQualifiedNameNode(name, -1, -1);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1772,"Node node = newQualifiedNameNode(convention, name, -1, -1);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1805,private static Node newName(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1806,"CodingConvention convention, String name, int lineno, int charno) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1807,"Node nameNode = Node.newString(Token.NAME, name, lineno, charno);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1808,if (convention.isConstant(name)) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1809,"nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1811,return nameNode;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1811,"tatic Node newName(String name, Node basisNode) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1824,static Node newName(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1825,"CodingConvention convention, String name, Node basisNode) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1827,if (convention.isConstantKey(name)) {
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1828,"nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1830,"tatic Node newName(String name, Node basisNode, String originalName) {"
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1831,"ode nameNode = newName(name, basisNode);"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1847,static Node newName(
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1848,"CodingConvention convention, String name,"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1849,"Node basisNode, String originalName) {"
True,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,1850,"Node nameNode = newName(convention, name, basisNode);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,186,".putBooleanProp(Node.IS_CONSTANT_NAME, true);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,192,"  gramps:"" + n.getParent().getParent().toStringTree());"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,191,"""  parent:"" + n.getParent().toStringTree());"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,193,"n.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,223,"rivate Map<String,Boolean> constantMap = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,223,"private Map<String, Boolean> constantMap = Maps.newHashMap();"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352,f (NodeUtil.isConstantByConvention(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,352,boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME);
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,353,if (!isMarkedConstant &&
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,354,NodeUtil.isConstantByConvention(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,356,if (assertOnChange) {
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,357,String name = n.getString();
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,358,throw new IllegalStateException(
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,359,"""Unexpected const change.\n"" +"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,360,"""  name: ""+ name + ""\n"" +"
True,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,361,"""  parent:"" + n.getParent().toStringTree());"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,355,/ TODO(nicksantos): Turn this on.
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,356,/ if (assertOnChange) {
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,357,/   String name = n.getString();
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,358,/   throw new IllegalStateException(
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,359,"/       ""Unexpected const change.\n"" +"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,360,"/       ""  name: ""+ name + ""\n"" +"
False,src/com/google/javascript/jscomp/Normalize.java,src/com/google/javascript/jscomp/Normalize.java,361,"/       ""  gramps:"" + n.getParent().getParent().toStringTree());"
True,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,122,"compiler.getCodingConvention(),"
True,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,src/com/google/javascript/jscomp/ObjectPropertyStringPreprocess.java,126,"compiler.getCodingConvention(),"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,396,"compiler.getCodingConvention(),"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,423,"compiler.getCodingConvention(),"
False,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,869,"odeUtil.newQualifiedNameNode(namespace, node, namespace),"
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,871,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,src/com/google/javascript/jscomp/ProcessClosurePrimitives.java,872,"compiler.getCodingConvention(), namespace, node, namespace),"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,154,"ode classNode = NodeUtil.newQualifiedNameNode(className, -1, -1);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,154,Node classNode = NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,155,"compiler.getCodingConvention(), className, -1, -1);"
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,216,rivate static class AddChecks
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,217,private class AddChecks
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,379,rivate static Node jsCode(String prop) {
False,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,380,"eturn NodeUtil.newQualifiedNameNode(""jscomp.typecheck."" + prop, -1, -1);"
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,380,private Node jsCode(String prop) {
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,381,return NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,src/com/google/javascript/jscomp/RuntimeTypeCheck.java,382,"compiler.getCodingConvention(), ""jscomp.typecheck."" + prop, -1, -1);"
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,48," (recording which functions have been specialized), put it back in the AST,"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,48,"* (recording which functions have been specialized), put it back in the AST,"
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,73, - OptimizeParameters
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,73,* - OptimizeParameters
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,145,impleFunctionAliasAnalysis initialModuleFunctionAliasAnalysis =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,145,SimpleFunctionAliasAnalysis initialModuleFunctionAliasAnalysis =
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,148,nitialModuleFunctionAliasAnalysis.analyze(defFinder);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,148,initialModuleFunctionAliasAnalysis.analyze(defFinder);
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,160, while(specializationState.hasChanged());
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,160,} while(specializationState.hasChanged());
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,164,eplaceOriginalModuleInputsWithSpecialized();
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,165,ddOriginalFunctionVersionsToDependentModules(module);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,164,replaceOriginalModuleInputsWithSpecialized();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,165,addOriginalFunctionVersionsToDependentModules(module);
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,171,rivate Collection<SpecializationAwareCompilerPass>
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,171,private Collection<SpecializationAwareCompilerPass>
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,179,reconditions.checkState(pass instanceof
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,179,Preconditions.checkState(pass instanceof
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,235, @param toBeSpecialized A copy of the input root (the copy to be
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,235,* @param toBeSpecialized A copy of the input root (the copy to be
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,238,"rivate void matchTopLevelFunctions(Node original, Node toBeSpecialized) {"
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,239,ew NodeMatcher() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,238,"private void matchTopLevelFunctions(Node original, Node toBeSpecialized) {"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,239,new NodeMatcher() {
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,243,riginalFunctionInformation functionInfo =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,243,OriginalFunctionInformation functionInfo =
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,281, Adds dummy variable declarations for all the function declarations we've
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,281,* Adds dummy variable declarations for all the function declarations we've
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,292,unctionInfoBySpecializedFunctionNode.keySet()) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,292,functionInfoBySpecializedFunctionNode.keySet()) {
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,340,or (Node modifiedFunction : possiblyModifiedFunctions) {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,340,for (Node modifiedFunction : possiblyModifiedFunctions) {
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,345,oolean declarationWasRemoved =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,345,boolean declarationWasRemoved =
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,355,ode newDefinition =
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,355,Node newDefinition =
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,376,irectDependents.add(possibleDependent);
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,376,directDependents.add(possibleDependent);
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,419, @param n1 A node from the AST passed as ast1 in
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,419,* @param n1 A node from the AST passed as ast1 in
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,421, @param n2 A node from the AST passed as ast1 in
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,421,* @param n2 A node from the AST passed as ast1 in
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,443,rivate static class OriginalFunctionInformation {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,443,private class OriginalFunctionInformation {
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,447,  a = function() {} if true;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,447,*  a = function() {} if true;
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,450,rivate boolean isAssignFunction;
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,450,private boolean isAssignFunction;
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,507,rivate Node generateFixupDefinition() {
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,507,private Node generateFixupDefinition() {
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,514,"odeUtil.newQualifiedNameNode(name, functionCopy, name);"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,514,NodeUtil.newQualifiedNameNode(
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,515,"compiler.getCodingConvention(), name, functionCopy, name);"
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,520,"odeUtil.newName("""", nameNode));"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,521,"NodeUtil.newName(compiler.getCodingConvention(), """", nameNode));"
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,548, SpecializationAware optimizations are required to keep track of the
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,549,* SpecializationAware optimizations are required to keep track of the
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,552, Specialization-aware classes *must* call
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,553,* Specialization-aware classes *must* call
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,559," This two-way communication, is the reason we don't use"
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,560,"* This two-way communication, is the reason we don't use"
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,574, The functions that the pass has removed. These functions will be
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,575,* The functions that the pass has removed. These functions will be
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,588,ublic SpecializationState(SimpleFunctionAliasAnalysis
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,589,public SpecializationState(SimpleFunctionAliasAnalysis
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,685, however we do not currently support this.
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,686,* however we do not currently support this.
False,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,700,ode parent = functionNode.getParent();
True,src/com/google/javascript/jscomp/SpecializeModule.java,src/com/google/javascript/jscomp/SpecializeModule.java,701,Node parent = functionNode.getParent();

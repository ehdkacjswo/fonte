is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,21,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,37,import java.util.List;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,181,List<ExtendedTypeInfo> extendedTypes = Lists.newArrayList();
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,411,f (!jsdocBuilder.recordBaseType(type)) {
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,412,arser.addTypeWarning(
False,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,413,"msg.jsdoc.incompat.type"", lineno, charno);"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,415,"// record the extended type, check later"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,416,extendedTypes.add(new ExtendedTypeInfo(
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,417,"type, stream.getLineno(), stream.getCharno()));"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,881,checkExtendedTypes(extendedTypes);
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,889,checkExtendedTypes(extendedTypes);
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,915,private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,916,for (ExtendedTypeInfo typeInfo : extendedTypes) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,917,"// If interface, record the multiple extended interfaces"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,918,if (jsdocBuilder.isInterfaceRecorded()) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,919,if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,920,"parser.addParserWarning(""msg.jsdoc.extends.duplicate"","
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,921,"typeInfo.lineno, typeInfo.charno);"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,925,"// For interfaces, still record the first extended type as base type"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,926,// It's the temporary setting and will be changed when multiple
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,927,// extends for interfaces are done
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,928,if (!jsdocBuilder.recordBaseType(typeInfo.type) &&
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,929,!jsdocBuilder.isInterfaceRecorded()) {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,930,"parser.addTypeWarning(""msg.jsdoc.incompat.type"","
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,931,"typeInfo.lineno, typeInfo.charno);"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1235,* Tuple for recording extended types
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1237,private static class ExtendedTypeInfo {
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1238,final JSTypeExpression type;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1239,final int lineno;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1240,final int charno;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1242,"public ExtendedTypeInfo(JSTypeExpression type, int lineno, int charno) {"
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1243,this.type = type;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1244,this.lineno = lineno;
True,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java,1245,this.charno = charno;
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,91,List<JSTypeExpression> extendedInterfaces = null;
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1130,* Adds an extended interface (for interface only).
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1131,* Returns whether the type was added.
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1132,"* if the type was already present in the list, it won't get added again."
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1134,boolean addExtendedInterface(JSTypeExpression type) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1135,lazyInitInfo();
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1136,if (info.extendedInterfaces == null) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1137,info.extendedInterfaces = Lists.newArrayListWithCapacity(2);
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1139,if (info.extendedInterfaces.contains(type)) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1140,return false;
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1142,info.extendedInterfaces.add(type);
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1143,return true;
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1147,* Returns the interfaces extended by an interface
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1149,* @return An immutable list of JSTypeExpression objects that can
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1150,*    be resolved to types.
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1152,public List<JSTypeExpression> getExtendedInterfaces() {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1153,if (info == null || info.extendedInterfaces == null) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1154,return ImmutableList.of();
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1156,return Collections.unmodifiableList(info.extendedInterfaces);
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1160,* Gets the number of extended interfaces specified
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1162,public int getExtendedInterfacesCount() {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1163,if (info == null || info.extendedInterfaces == null) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1164,return 0;
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1166,return info.extendedInterfaces.size();
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1311,if (info.extendedInterfaces != null) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1312,for (JSTypeExpression interfaceType : info.extendedInterfaces) {
True,src/com/google/javascript/rhino/JSDocInfo.java,src/com/google/javascript/rhino/JSDocInfo.java,1313,nodes.add(interfaceType.getRoot());
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,848,* Records an extended interface type.
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,850,public boolean recordExtendedInterface(JSTypeExpression interfaceType) {
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,851,if (currentInfo.addExtendedInterface(interfaceType)) {
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,852,populated = true;
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,853,return true;
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,854,} else {
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,855,return false;
True,src/com/google/javascript/rhino/JSDocInfoBuilder.java,src/com/google/javascript/rhino/JSDocInfoBuilder.java,882,currentInfo.getExtendedInterfacesCount() > 0 ||
False,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,506,"rivate Property(JSType type, boolean inferred, boolean inExterns, Node propertyNode) {"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,506,"private Property(JSType type, boolean inferred, boolean inExterns,"
True,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,src/com/google/javascript/rhino/jstype/PrototypeObjectType.java,507,Node propertyNode) {
False,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,967," ""/** @interface \n @implements I */ function I2() {};\n"""
True,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,967,"+ ""/** @interface \n @extends I */ function I2() {};\n"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1792,"assertEquals(1, jsdoc.getExtendedInterfacesCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1793,List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();
False,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1793,sdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1795,types.get(0));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1798,public void testInterfaceMultiExtends1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1799,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1800,""" * @interface \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1801,""" * @extends {Extended1} \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1802,""" * @extends {Extended2} */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1803,assertTrue(jsdoc.isInterface());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1804,"assertEquals(2, jsdoc.getExtendedInterfacesCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1805,List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1806,"assertTypeEquals(registry.createNamedType(""Extended1"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1807,types.get(0));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1808,"assertTypeEquals(registry.createNamedType(""Extended2"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1809,types.get(1));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1812,public void testInterfaceMultiExtends2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1813,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1814,""" * @extends {Extended1} \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1815,""" * @interface \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1816,""" * @extends {Extended2} \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1817,""" * @extends {Extended3} */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1818,assertTrue(jsdoc.isInterface());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1819,"assertEquals(3, jsdoc.getExtendedInterfacesCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1820,List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1821,"assertTypeEquals(registry.createNamedType(""Extended1"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1822,types.get(0));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1823,"assertTypeEquals(registry.createNamedType(""Extended2"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1824,types.get(1));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1825,"assertTypeEquals(registry.createNamedType(""Extended3"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1826,types.get(2));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1829,public void testBadClassMultiExtends() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1830,"parse("" * @extends {Extended1} \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1831,""" * @constructor \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1832,""" * @extends {Extended2} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1833,"""Bad type annotation. type annotation incompatible with other "" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1834,"""annotations"");"

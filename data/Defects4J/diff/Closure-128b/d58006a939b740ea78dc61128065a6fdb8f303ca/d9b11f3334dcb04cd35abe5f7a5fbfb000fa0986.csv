is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,298,f (merged != null &&
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,299,(leftIsRefineable && merged.typeA != null) ||
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,300,rightIsRefineable && merged.typeB != null))) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,301,lowScope informed = blindScope.createChildFlowScope();
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,302,f (leftIsRefineable && merged.typeA != null) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,303,"eclareNameInScope(informed, left, merged.typeA);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,305,f (rightIsRefineable && merged.typeB != null) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,306,"eclareNameInScope(informed, right, merged.typeB);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,308,eturn informed;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,298,if (merged != null) {
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,299,return maybeRestrictTwoNames(
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,300,"blindScope,"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,301,"left, leftType, leftIsRefineable ? merged.typeA : null,"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,302,"right, rightType, rightIsRefineable ? merged.typeB : null);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,328,eftType = (leftType == null) ? null :
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,322,JSType restrictedLeftType = (leftType == null) ? null :
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,330,f (leftType == null) {
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,324,if (restrictedLeftType == null) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,348,ightType = (rightType == null) ? null :
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,342,JSType restrictedRightType = (rightType == null) ? null :
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,352,f ((leftType != null && leftIsRefineable) ||
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,353,rightType != null && rightIsRefineable)) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,354,lowScope informed = blindScope.createChildFlowScope();
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,355,f (leftIsRefineable && leftType != null) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,356,"eclareNameInScope(informed, left, leftType);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,358,f (rightIsRefineable && rightType != null) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,359,"eclareNameInScope(informed, right, rightType);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,361,eturn informed;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,346,return maybeRestrictTwoNames(
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,347,"blindScope,"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,348,"left, leftType, leftIsRefineable ? restrictedLeftType : null,"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,349,"right, rightType, rightIsRefineable ? restrictedRightType : null);"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,377,"* If the restrictedType differs from the originalType, then we should"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,378,* branch the current flow scope and create a new flow scope with the name
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,379,* declared with the new type.
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,381,* We try not to create spurious child flow scopes as this makes type
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,382,* inference slower.
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,384,"* We also do not want spurious slots around in type inference, because"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,385,"* we use these as a signal for ""checked unknown"" types. A ""checked unknown"""
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,386,* type is a symbol that the programmer has already checked and verified that
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,387,"* it's defined, even if we don't know what it is."
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,389,"* It is OK to pass non-name nodes into this method, as long as you pass"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,390,* in {@code null} for a restricted type.
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,392,private FlowScope maybeRestrictName(
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,393,"FlowScope blindScope, Node node, JSType originalType, JSType restrictedType) {"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,394,if (restrictedType != null && restrictedType != originalType) {
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,395,FlowScope informed = blindScope.createChildFlowScope();
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,396,"declareNameInScope(informed, node, restrictedType);"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,397,return informed;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,399,return blindScope;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,403,* @see maybeRestrictName
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,405,private FlowScope maybeRestrictTwoNames(
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,406,"FlowScope blindScope,"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,407,"Node left, JSType originalLeftType, JSType restrictedLeftType,"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,408,"Node right, JSType originalRightType, JSType restrictedRightType) {"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,409,boolean shouldRefineLeft =
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,410,restrictedLeftType != null && restrictedLeftType != originalLeftType;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,411,boolean shouldRefineRight =
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,412,restrictedRightType != null && restrictedRightType != originalRightType;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,413,if (shouldRefineLeft || shouldRefineRight) {
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,414,FlowScope informed = blindScope.createChildFlowScope();
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,415,if (shouldRefineLeft) {
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,416,"declareNameInScope(informed, left, restrictedLeftType);"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,418,if (shouldRefineRight) {
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,419,"declareNameInScope(informed, right, restrictedRightType);"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,421,return informed;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,423,return blindScope;
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,393,SType restrictedType =
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,394,ype.getRestrictedTypeGivenToBooleanOutcome(outcome);
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,395,lowScope informed = blindScope.createChildFlowScope();
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,396,"eclareNameInScope(informed, name, restrictedType);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,397,eturn informed;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,430,return maybeRestrictName(
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,431,"blindScope, name, type,"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,432,type.getRestrictedTypeGivenToBooleanOutcome(outcome));
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,404,SType restrictedType =
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,405,"etRestrictedByTypeOfResult(type, value, resultEqualsValue);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,406,f (restrictedType == null) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,407,eturn blindScope;
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,409,lowScope informed = blindScope.createChildFlowScope();
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,410,"eclareNameInScope(informed, node, restrictedType);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,411,eturn informed;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,439,return maybeRestrictName(
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,440,"blindScope, node, type,"
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,441,"getRestrictedByTypeOfResult(type, value, resultEqualsValue));"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,432,SType restrictedLeftType = leftType.visit(visitor);
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,433,f (restrictedLeftType != null && !restrictedLeftType.equals(leftType)) {
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,434,lowScope informed = blindScope.createChildFlowScope();
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,435,"eclareNameInScope(informed, left, restrictedLeftType);"
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,436,eturn informed;
False,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,438,eturn blindScope;
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,462,return maybeRestrictName(
True,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java,463,"blindScope, left, leftType, leftType.visit(visitor));"
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,883,if (outcome && this == getNativeType(JSTypeNative.UNKNOWN_TYPE)) {
True,src/com/google/javascript/rhino/jstype/JSType.java,src/com/google/javascript/rhino/jstype/JSType.java,884,return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE);
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6715,ublic void testMissingProperty20() throws Exception {
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6716,"/ NOTE(nicksantos): In the else branch, we know that x.foo is a"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6717,/ CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6718,"/ do some more sophisticated analysis here. Obviously, if x.foo is false,"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6719,"/ then x.foo cannot possibly be called. For example, you could imagine a"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6720,"/ VagueType that was like UnknownType, but had some constraints on it"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6721,/ so that we knew it could never be a function.
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6723,"/ For now, we just punt on this issue."
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6724,estTypes(
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6725,"/** @param {Object} x */"" +"
False,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,test/com/google/javascript/jscomp/LooseTypeCheckTest.java,6726,"function f(x) { if (x.foo) { } else { x.foo(); } }"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5996,public void testIssue783() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5997,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5998,"""/** @constructor */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,5999,"""var Type = function () {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6000,"""  /** @type {Type} */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6001,"""  this.me_ = this;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6003,"""Type.prototype.doIt = function() {"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6004,"""  var me = this.me_;"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6005,"""  for (var i = 0; i < me.unknownProp; i++) {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,6007,"""Property unknownProp never defined on Type"");"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9101,"/ NOTE(nicksantos): In the else branch, we know that x.foo is a"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9102,/ CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9103,"/ do some more sophisticated analysis here. Obviously, if x.foo is false,"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9104,"/ then x.foo cannot possibly be called. For example, you could imagine a"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9105,"/ VagueType that was like UnknownType, but had some constraints on it"
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9106,/ so that we knew it could never be a function.
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9108,"/ For now, we just punt on this issue."
False,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9111,"function f(x) { if (x.foo) { } else { x.foo(); } }"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9117,"""function f(x) { if (x.foo) { } else { x.foo(); } }"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,9118,"""Property foo never defined on Object"");"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5263,"ssertTypeEquals(UNKNOWN_TYPE,"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,5263,"assertTypeEquals(CHECKED_UNKNOWN_TYPE,"

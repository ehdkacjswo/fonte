
Experimental: type-based constant property inlining.

This pass uses type information to invalidate candidates and find candidate property references.
Candidate properties must meet these requirements:
* they must be assigned to a known, named, and valid type (those not invalidated by the type checker)
* they must be only be defined unconditional either in the constructor or on the prototype
* they must be assigned an immuatable constant

References to these properties will only be replaced if referencing type is known, not invalidated by the type checker, and an inclusive subtype of the defining type.

R=nicksantos
DELTA=580  (577 added, 0 deleted, 3 changed)


Revision created by MOE tool push_codebase.
MOE_MIGRATION=4680


git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1951 b0f006be-c8cd-11de-a2e8-8d36a3108c74

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,19,mport javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,20,import com.google.common.collect.Maps;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,26,mport java.util.*;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,26,import java.util.ArrayList;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,27,import java.util.Comparator;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,28,import java.util.HashMap;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,29,import java.util.HashSet;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,30,import java.util.List;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,31,import java.util.Map;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,32,import java.util.Set;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,33,import java.util.SortedMap;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,34,import java.util.SortedSet;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,35,import java.util.TreeMap;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,36,import java.util.TreeSet;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,38,import javax.annotation.Nullable;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,45,** List of local names that corresponds to the localNameNodes */
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,46,rivate final ArrayList<String> localTempNames = new ArrayList<String>();
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,58,"* Maps a name node to its pseudo name, null if we are not generating so"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,59,* there will not no overhead unless we are debugging.
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,61,"private final Map<Node, String> pseudoNameMap;"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,109,** Generate pseudo names for variables for debugging purposes */
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,110,rivate boolean generatePseudoNames;
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,130,his.generatePseudoNames = generatePseudoNames;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,142,if (generatePseudoNames) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,143,this.pseudoNameMap = Maps.newHashMap();
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,144,} else {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,145,this.pseudoNameMap = null;
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,239,if (pseudoNameMap != null) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,240,recordPseudoName(n);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,228,ocalTempNames.add(tempName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,248,n.setString(tempName);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,314,"tring newName = getNewLocalName(n, count);"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,334,String newName = getNewLocalName(n);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,335,f (generatePseudoNames) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,336,eturn getPseudoName(oldName);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,355,if (pseudoNameMap != null) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,356,return pseudoNameMap.get(n);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,344,"rivate String getNewLocalName(Node n, int index) {"
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,345,tring oldTempName = localTempNames.get(index);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,364,private String getNewLocalName(Node n) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,365,String oldTempName = n.getString();
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,348,f (generatePseudoNames) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,349,eturn getPseudoName(n.getString());
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,368,if (pseudoNameMap != null) {
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,369,return pseudoNameMap.get(n);
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,356,rivate String getPseudoName(String s) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,357,reconditions.checkState(generatePseudoNames);
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,376,private void recordPseudoName(Node n) {
False,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,360,"eturn '$' + s + ""$$"";"
True,src/com/google/javascript/jscomp/RenameVars.java,src/com/google/javascript/jscomp/RenameVars.java,379,"pseudoNameMap.put(n, '$' + n.getString() + ""$$"" );"
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,492,"test(""var a = function(a, b, c){}"","
True,test/com/google/javascript/jscomp/RenameVarsTest.java,test/com/google/javascript/jscomp/RenameVarsTest.java,493,"""var $a$$ = function($a$$, $b$$, $c$$){}"");"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1055,copeCreator getTypedScopeCreator() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1055,MemoizedScopeCreator getTypedScopeCreator() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1059,"@SuppressWarnings(""unchecked"")"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1060,DefaultPassConfig ensureDefaultPassConfig() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1061,PassConfig passes = getPassConfig().getBasePassConfig();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1062,"Preconditions.checkState(passes instanceof DefaultPassConfig,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1063,"""PassConfigs must eventually delegate to the DefaultPassConfig"");"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1064,return (DefaultPassConfig) passes;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1067,SymbolTable buildKnownSymbolTable() {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1068,SymbolTable symbolTable = new SymbolTable();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1070,MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1071,if (typedScopeCreator != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1072,symbolTable.addSymbolsFrom(typedScopeCreator);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1075,GlobalNamespace globalNamespace =
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1076,ensureDefaultPassConfig().getGlobalNamespace();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1077,if (globalNamespace != null) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1078,symbolTable.addSymbolsFrom(globalNamespace);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1081,return symbolTable;
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,91, TODO(nicksantos): This is a hack until I can get the namespace into
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,92, the symbol table.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,162,GlobalNamespace getGlobalNamespace() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,163,return namespaceForChecks;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,314,passes.add(garbageCollectChecks);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1204,/ Kill the namespace in the other class
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1205,/ so that it can be garbage collected after all passes
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1206,/ are through with it.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1211,/** Release references to data that is only needed during checks. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1212,final PassFactory garbageCollectChecks =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1213,"new PassFactory(""garbageCollectChecks"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1214,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1215,protected CompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1216,return new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1217,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1218,"public void process(Node externs, Node jsRoot) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1219,// Kill the global namespace so that it can be garbage collected
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1220,// after all passes are through with it.
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,99,@Override
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,100,public Node getRootNode() {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,101,return root.getParent();
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,130,@Override
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,131,public StaticScope<JSType> getScope(Name slot) {
True,src/com/google/javascript/jscomp/GlobalNamespace.java,src/com/google/javascript/jscomp/GlobalNamespace.java,132,return this;
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,24,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,132,@Override
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,133,public Node getRootNode() {
True,src/com/google/javascript/jscomp/LinkedFlowScope.java,src/com/google/javascript/jscomp/LinkedFlowScope.java,134,return getFunctionScope().getRootNode();
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,20,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,21,import com.google.common.collect.Iterables;
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,22,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,24,import com.google.javascript.jscomp.Scope.Var;
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,26,import com.google.javascript.rhino.jstype.StaticSymbolTable;
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,28,import java.util.List;
False,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,37,lass MemoizedScopeCreator implements ScopeCreator {
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,43,class MemoizedScopeCreator
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,44,"implements ScopeCreator, StaticSymbolTable<Var, Var> {"
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,56,@Override
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,57,public Iterable<Var> getReferences(Var var) {
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,58,return ImmutableList.of(var);
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,61,@Override
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,62,public Scope getScope(Var var) {
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,63,return var.scope;
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,66,@Override
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,67,public Iterable<Var> getAllSymbols() {
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,68,List<Var> vars = Lists.newArrayList();
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,69,for (Scope s : scopes.values()) {
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,70,"Iterables.addAll(vars, s.getAllSymbols());"
True,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,src/com/google/javascript/jscomp/MemoizedScopeCreator.java,72,return vars;
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,86,copeCreator getTypedScopeCreator() {
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,86,MemoizedScopeCreator getTypedScopeCreator() {
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,256,Override ScopeCreator getTypedScopeCreator() {
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,256,@Override MemoizedScopeCreator getTypedScopeCreator() {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,130,@Override
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,131,public Scope getScope(Var var) {
True,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,src/com/google/javascript/jscomp/ReferenceCollectingCallback.java,132,return var.scope;
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,23,import com.google.common.collect.ImmutableList;
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,36,import com.google.javascript.rhino.jstype.StaticSymbolTable;
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,38,import java.util.Collections;
False,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,55,ublic class Scope implements StaticScope<JSType> {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,58,public class Scope
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,59,"implements StaticScope<JSType>, StaticSymbolTable<Scope.Var, Scope.Var> {"
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,424,@Override
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,556,@Override
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,557,public Iterable<Var> getReferences(Var var) {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,558,return ImmutableList.of(var);
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,561,@Override
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,562,public StaticScope<JSType> getScope(Var var) {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,563,return var.scope;
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,566,@Override
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,567,public Iterable<Var> getAllSymbols() {
True,src/com/google/javascript/jscomp/Scope.java,src/com/google/javascript/jscomp/Scope.java,568,return Collections.unmodifiableCollection(vars.values());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,20,import com.google.common.collect.Maps;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,21,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,22,import com.google.javascript.rhino.jstype.JSType;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,23,import com.google.javascript.rhino.jstype.SimpleSlot;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,24,import com.google.javascript.rhino.jstype.StaticReference;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,25,import com.google.javascript.rhino.jstype.StaticScope;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,26,import com.google.javascript.rhino.jstype.StaticSlot;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,27,import com.google.javascript.rhino.jstype.StaticSourceFile;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,28,import com.google.javascript.rhino.jstype.StaticSymbolTable;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,30,import java.util.Collections;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,31,import java.util.Map;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,33,import javax.annotation.Nullable;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,36,* A symbol table for people that want to use Closure Compiler as an indexer.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,38,* Contains an index of all the symbols in the code within a compilation
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,39,"* job. The API is designed for people who want to visit all the symbols, rather"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,40,* than people who want to lookup a specific symbol by a certain key.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,42,"* We can use this to combine different types of symbol tables. For example,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,43,"* one class might have a {@code StaticSymbolTable} of all variable references,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,44,* and another class might have a {@code StaticSymbolTable} of all type names
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,45,* in JSDoc comments. This class allows you to combine them into a unified
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,46,* index.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,48,"* Most passes build their own ""partial"" symbol table that implements the same"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,49,"* interface (StaticSymbolTable, StaticSlot, and friends). Individual compiler"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,50,* passes usually need more or less metadata about the certainty of symbol
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,51,* information. Building a complete symbol table with all the necessary metadata
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,52,"* for all passes would be too slow. However, as long as these ""partial"" symbol"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,53,"* tables implement the proper interfaces, we should be able to add them to this"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,54,* symbol table to make it more complete.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,56,"* If clients want fast lookup, they should build their own wrapper around"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,57,* this symbol table that indexes symbols or references by the desired lookup
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,58,* key.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,60,* @see #addSymbolsFrom For more information on how to write plugins for this
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,61,*    symbol table.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,63,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,65,public final class SymbolTable
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,66,"implements StaticSymbolTable<SymbolTable.Symbol, SymbolTable.Reference> {"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,69,"* All symbols in the program, uniquely identified by the node where"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,70,* they're declared.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,72,"private final Map<Node, Symbol> symbols = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,75,"* All scopes in the program, uniquely identified by the node where"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,76,* they're declared.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,78,"private final Map<Node, SymbolScope> scopes = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,81,* Clients should get a symbol table by asking the compiler at the end
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,82,* of a compilation job.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,84,SymbolTable() {}
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,86,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,87,public Iterable<Reference> getReferences(Symbol symbol) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,88,return Collections.unmodifiableCollection(symbol.references.values());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,91,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,92,public Iterable<Symbol> getAllSymbols() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,93,return Collections.unmodifiableCollection(symbols.values());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,96,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,97,public StaticScope<JSType> getScope(Symbol slot) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,98,return slot.scope;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,102,* Make sure all the symbols and references in {@code otherSymbolTable}
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,103,* are in this symbol table.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,105,* Uniqueness of symbols and references is determined by the associated
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,106,* node.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,108,"* If multiple symbol tables are mixed in, we do not check for consistency"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,109,* between symbol tables. The first symbol we see dictates the type
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,110,* information for that symbol.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,112,"<S extends StaticSlot<JSType>, R extends StaticReference<JSType>>"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,113,"void addSymbolsFrom(StaticSymbolTable<S, R> otherSymbolTable) {"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,114,for (S otherSymbol : otherSymbolTable.getAllSymbols()) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,115,SymbolScope myScope = createScopeFrom(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,116,otherSymbolTable.getScope(otherSymbol));
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,118,StaticReference<JSType> decl = otherSymbol.getDeclaration();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,119,if (decl == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,120,continue;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,123,Node declNode = decl.getNode();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,125,Symbol mySymbol = symbols.get(declNode);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,126,if (mySymbol == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,127,mySymbol = new Symbol(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,128,"otherSymbol.getName(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,129,"otherSymbol.getType(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,130,"otherSymbol.isTypeInferred(),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,131,myScope);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,132,"symbols.put(declNode, mySymbol);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,133,"myScope.ownSymbols.put(mySymbol.getName(), mySymbol);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,135,"mySymbol.setDeclaration(new Reference(mySymbol, declNode));"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,138,for (R otherRef : otherSymbolTable.getReferences(otherSymbol)) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,139,Node otherRefNode = otherRef.getNode();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,140,if (!mySymbol.references.containsKey(otherRefNode)) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,141,mySymbol.references.put(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,142,"otherRefNode, new Reference(mySymbol, otherRefNode));"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,149,"* Given a scope from another symbol table, returns the {@code SymbolScope}"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,150,* rooted at the same node. Creates one if it doesn't exist yet.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,152,private SymbolScope createScopeFrom(StaticScope<JSType> otherScope) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,153,Node otherScopeRoot = otherScope.getRootNode();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,154,SymbolScope myScope = scopes.get(otherScopeRoot);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,155,if (myScope == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,156,StaticScope<JSType> otherScopeParent = otherScope.getParentScope();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,158,"// If otherScope is a global scope, and we already have a global scope,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,159,// then something has gone seriously wrong.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,161,"// Not all symbol tables are rooted at the same global node, and"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,162,// we do not want to mix and match symbol tables that are rooted
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,163,// differently.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,165,if (otherScopeParent == null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,166,// The global scope must be created before any local scopes.
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,167,Preconditions.checkState(scopes.isEmpty());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,170,myScope = new SymbolScope(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,171,"otherScopeRoot,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,172,"otherScopeParent == null ? null : createScopeFrom(otherScopeParent),"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,173,otherScope.getTypeOfThis());
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,174,"scopes.put(otherScopeRoot, myScope);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,176,return myScope;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,179,public static final class Symbol extends SimpleSlot {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,180,"// Use a linked hash map, so that the results are deterministic"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,181,// (and so the declaration always comes first).
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,182,"private final Map<Node, Reference> references = Maps.newLinkedHashMap();"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,184,private final SymbolScope scope;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,186,private Reference declaration = null;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,188,"Symbol(String name, JSType type, boolean inferred, SymbolScope scope) {"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,189,"super(name, type, inferred);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,190,this.scope = scope;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,193,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,194,public Reference getDeclaration() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,195,return declaration;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,198,/** Sets the declaration node. May only be called once. */
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,199,void setDeclaration(Reference ref) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,200,Preconditions.checkState(this.declaration == null);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,201,this.declaration = ref;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,202,"references.put(ref.getNode(), ref);"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,206,public static final class Reference implements StaticReference<JSType> {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,207,private final Symbol symbol;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,208,private final Node node;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,210,"Reference(Symbol symbol, Node node) {"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,211,this.symbol = symbol;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,212,this.node = node;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,215,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,216,public Symbol getSymbol() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,217,return symbol;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,220,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,221,public Node getNode() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,222,return node;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,225,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,226,public StaticSourceFile getSourceFile() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,227,return node.getStaticSourceFile();
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,231,public static final class SymbolScope implements StaticScope<JSType> {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,232,private final Node rootNode;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,233,private final SymbolScope parent;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,234,private final JSType typeOfThis;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,235,"private final Map<String, Symbol> ownSymbols = Maps.newHashMap();"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,237,SymbolScope(
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,238,"Node rootNode,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,239,"@Nullable SymbolScope parent,"
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,240,JSType typeOfThis) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,241,this.rootNode = rootNode;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,242,this.parent = parent;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,243,this.typeOfThis = typeOfThis;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,246,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,247,public Node getRootNode() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,248,return rootNode;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,251,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,252,public SymbolScope getParentScope() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,253,return parent;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,256,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,257,public Symbol getSlot(String name) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,258,Symbol own = getOwnSlot(name);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,259,if (own != null) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,260,return own;
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,263,return parent == null ? null : parent.getSlot(name);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,266,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,267,public Symbol getOwnSlot(String name) {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,268,return ownSymbols.get(name);
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,271,@Override
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,272,public JSType getTypeOfThis() {
True,src/com/google/javascript/jscomp/SymbolTable.java,src/com/google/javascript/jscomp/SymbolTable.java,273,return typeOfThis;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,187,@Override
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,188,public Node getRootNode() { return null; }
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,89,@Override
True,src/com/google/javascript/rhino/jstype/ObjectType.java,src/com/google/javascript/rhino/jstype/ObjectType.java,90,public Node getRootNode() { return null; }
True,src/com/google/javascript/rhino/jstype/StaticScope.java,src/com/google/javascript/rhino/jstype/StaticScope.java,42,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/rhino/jstype/StaticScope.java,src/com/google/javascript/rhino/jstype/StaticScope.java,54,* Returns the root node associated with this scope. May be null.
True,src/com/google/javascript/rhino/jstype/StaticScope.java,src/com/google/javascript/rhino/jstype/StaticScope.java,56,Node getRootNode();
True,src/com/google/javascript/rhino/jstype/StaticSymbolTable.java,src/com/google/javascript/rhino/jstype/StaticSymbolTable.java,54,* Returns the scope for a given symbol.
True,src/com/google/javascript/rhino/jstype/StaticSymbolTable.java,src/com/google/javascript/rhino/jstype/StaticSymbolTable.java,56,StaticScope<JSType> getScope(S symbol);
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,3,* ***** BEGIN LICENSE BLOCK *****
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,4,* Version: MPL 1.1/GPL 2.0
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,6,* The contents of this file are subject to the Mozilla Public License Version
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,7,"* 1.1 (the ""License""); you may not use this file except in compliance with"
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,8,* the License. You may obtain a copy of the License at
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,9,* http://www.mozilla.org/MPL/
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,11,"* Software distributed under the License is distributed on an ""AS IS"" basis,"
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,12,"* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License"
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,13,* for the specific language governing rights and limitations under the
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,14,* License.
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,16,"* The Original Code is Rhino code, released"
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,17,"* May 6, 1999."
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,19,* The Initial Developer of the Original Code is
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,20,* Netscape Communications Corporation.
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,21,* Portions created by the Initial Developer are Copyright (C) 1997-1999
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,22,* the Initial Developer. All Rights Reserved.
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,24,* Contributor(s):
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,25,*   Nick Santos
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,27,"* Alternatively, the contents of this file may be used under the terms of"
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,28,"* the GNU General Public License Version 2 or later (the ""GPL""), in which"
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,29,* case the provisions of the GPL are applicable instead of those above. If
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,30,* you wish to allow use of your version of this file only under the terms of
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,31,* the GPL and not to allow others to use your version of this file under the
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,32,"* MPL, indicate your decision by deleting the provisions above and replacing"
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,33,* them with the notice and other provisions required by the GPL. If you do
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,34,"* not delete the provisions above, a recipient may use your version of this"
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,35,* file under either the MPL or the GPL.
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,37,* ***** END LICENSE BLOCK ***** */
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,39,package com.google.javascript.rhino.testing;
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,41,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,42,import com.google.javascript.rhino.jstype.StaticScope;
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,43,import com.google.javascript.rhino.jstype.StaticSlot;
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,46,* A scope that just returns null for everything.
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,47,* @author nicksantos@google.com (Nick Santos)
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,49,public abstract class AbstractStaticScope<T> implements StaticScope<T> {
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,51,@Override
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,52,public Node getRootNode() {
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,53,return null;
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,56,@Override
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,57,public StaticScope<T> getParentScope() {
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,58,return null;
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,61,public abstract StaticSlot<T> getSlot(String name);
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,63,@Override
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,64,public StaticSlot<T> getOwnSlot(String name) {
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,65,return getSlot(name);
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,68,@Override
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,69,public T getTypeOfThis() {
True,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,src/com/google/javascript/rhino/testing/AbstractStaticScope.java,70,return null;
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,45,mport com.google.javascript.rhino.jstype.StaticScope;
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,54,ublic class MapBasedScope implements StaticScope<JSType> {
True,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,53,public class MapBasedScope extends AbstractStaticScope<JSType> {
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,69,Override
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,70,ublic StaticScope<JSType> getParentScope() {
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,71,eturn null;
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,79,Override
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,80,ublic StaticSlot<JSType> getOwnSlot(String name) {
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,81,eturn slots.get(name);
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,84,Override
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,85,ublic JSType getTypeOfThis() {
False,src/com/google/javascript/rhino/testing/MapBasedScope.java,src/com/google/javascript/rhino/testing/MapBasedScope.java,86,eturn null;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,39,import com.google.javascript.rhino.testing.AbstractStaticScope;
False,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,315,rivate class FakeScope implements StaticScope<ConcreteType> {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,316,private class FakeScope extends AbstractStaticScope<ConcreteType> {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,19,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,20,import com.google.javascript.jscomp.SymbolTable.Reference;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,21,import com.google.javascript.jscomp.SymbolTable.Symbol;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,22,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,24,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,26,import java.util.List;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,29,* @author nicksantos@google.com (Nick Santos)
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,31,public class SymbolTableTest extends TestCase {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,33,public void testGlobalVar() throws Exception {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,34,SymbolTable table = createSymbolTable(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,35,"""/** @type {number} */ var x = 5;"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,36,"assertNull(getGlobalVar(table, ""y""));"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,37,"assertNotNull(getGlobalVar(table, ""x""));"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,38,"assertEquals(""number"", getGlobalVar(table, ""x"").getType().toString());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,40,"assertEquals(1, getVars(table).size());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,43,public void testGlobalVarReferences() throws Exception {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,44,SymbolTable table = createSymbolTable(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,45,"""/** @type {number} */ var x = 5; x = 6;"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,46,"Symbol x = getGlobalVar(table, ""x"");"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,47,List<Reference> refs = Lists.newArrayList(table.getReferences(x));
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,49,"assertEquals(2, refs.size());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,50,"assertEquals(x.getDeclaration(), refs.get(0));"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,51,"assertEquals(Token.VAR, refs.get(0).getNode().getParent().getType());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,52,"assertEquals(Token.ASSIGN, refs.get(1).getNode().getParent().getType());"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,55,"private Symbol getGlobalVar(SymbolTable table, String name) {"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,56,for (Symbol symbol : table.getAllSymbols()) {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,57,if (symbol.getName().equals(name) &&
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,58,table.getScope(symbol).getParentScope() == null) {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,59,return symbol;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,62,return null;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,65,/** Returns all non-extern vars. */
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,66,private List<Symbol> getVars(SymbolTable table) {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,67,List<Symbol> result = Lists.newArrayList();
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,68,for (Symbol symbol : table.getAllSymbols()) {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,69,if (symbol.getDeclaration() != null &&
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,70,!symbol.getDeclaration().getSourceFile().isExtern()) {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,71,result.add(symbol);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,74,return result;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,77,private SymbolTable createSymbolTable(String input) {
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,78,List<JSSourceFile> inputs = Lists.newArrayList(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,79,"JSSourceFile.fromCode(""in1"", input));"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,80,List<JSSourceFile> externs = Lists.newArrayList(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,81,JSSourceFile.fromCode(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,82,"""externs1"", CompilerTypeTestCase.DEFAULT_EXTERNS));"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,83,CompilerOptions options = new CompilerOptions();
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,84,CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,85,options);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,86,WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,87,options.ideMode = true;
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,89,Compiler compiler = new Compiler();
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,90,"compiler.compile(externs, inputs, options);"
True,test/com/google/javascript/jscomp/SymbolTableTest.java,test/com/google/javascript/jscomp/SymbolTableTest.java,91,return compiler.buildKnownSymbolTable();
True,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,46,import com.google.javascript.rhino.testing.AbstractStaticScope;
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,108,taticScope<JSType> scope = new StaticScope<JSType>() {
True,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,109,StaticScope<JSType> scope = new AbstractStaticScope<JSType>() {
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,115,ublic StaticSlot<JSType> getOwnSlot(String name) {
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,116,eturn getSlot(name);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,118,ublic StaticScope<JSType> getParentScope() { return null; }
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,119,ublic JSType getTypeOfThis() { return null; }
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,154,taticScope<JSType> scope = new StaticScope<JSType>() {
True,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,150,StaticScope<JSType> scope = new AbstractStaticScope<JSType>() {
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,161,ublic StaticSlot<JSType> getOwnSlot(String name) {
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,162,eturn getSlot(name);
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,164,ublic StaticScope<JSType> getParentScope() { return null; }
False,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java,165,ublic JSType getTypeOfThis() { return null; }
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,58,import com.google.javascript.rhino.testing.AbstractStaticScope;
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,155,"amedGoogBar.resolve(null, new StaticScope<JSType>() {"
True,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,156,"namedGoogBar.resolve(null, new AbstractStaticScope<JSType>() {"
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,164,ublic StaticSlot<JSType> getOwnSlot(String name) {
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,165,eturn getSlot(name);
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,168,ublic StaticScope<JSType> getParentScope() {
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,169,eturn null;
False,test/com/google/javascript/rhino/jstype/JSTypeTest.java,test/com/google/javascript/rhino/jstype/JSTypeTest.java,172,ublic JSType getTypeOfThis() { return null; }

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,436,f (child.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,437,"/ Everything else are names: STRING, GET, SET"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,438,xternedNames.add(child.getString());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,436,"// names: STRING, GET, SET"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,437,externedNames.add(child.getString());
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,461,"/ We only want keys that are strings (not numbers), and only keys"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,462,/ that were unquoted.
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,463,f (key.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,464,"/ Everything else are names: STRING, GET, SET"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,465,f (!key.isQuotedString()) {
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,466,SType jstype = getJSType(n.getFirstChild());
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,467,"aybeMarkCandidate(key, jstype, t);"
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,468, else {
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,469,/ Ensure that we never rename some other property in a way
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,470,/ that could conflict with this quoted key.
False,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,471,uotedNames.add(key.getString());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,459,// We only want keys that were unquoted.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,460,"// Keys are STRING, GET, SET"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,461,if (!key.isQuotedString()) {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,462,JSType jstype = getJSType(n.getFirstChild());
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,463,"maybeMarkCandidate(key, jstype, t);"
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,464,} else {
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,465,// Ensure that we never rename some other property in a way
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,466,// that could conflict with this quoted key.
True,src/com/google/javascript/jscomp/AmbiguateProperties.java,src/com/google/javascript/jscomp/AmbiguateProperties.java,467,quotedNames.add(key.getString());
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,242,"/ May be NUMBER, STRING, GET, or SET, but NUMBER isn't interesting."
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,243,f (propNameNode.getType() != Token.NUMBER &&
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,244,propNameNode.isQuotedString()) {
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,242,"// May be STRING, GET, or SET, but NUMBER isn't interesting."
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,243,if (!propNameNode.isQuotedString()) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,393,"/ May be NUMBER, STRING, GET, or SET,"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,394,/ but NUMBER isn't interesting.
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,395,f (key.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,396,tring name = key.getString();
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,397,roperty prop = new LiteralProperty(
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,398,"ey, key.getFirstChild(), map, n, t.getModule());"
False,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,399,"etNameInfoForName(name, PROPERTY).getDeclarations().add(prop);"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,392,"// May be STRING, GET, or SET,"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,393,String name = key.getString();
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,394,Property prop = new LiteralProperty(
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,395,"key, key.getFirstChild(), map, n, t.getModule());"
True,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java,396,"getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);"
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,115,"/ Object literal keys may be STRING, GET, SET or NUMBER.  Numbers are"
False,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,116,/ skipped because name tokens may not start with a number. Get and Set
True,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,src/com/google/javascript/jscomp/AnonymousFunctionNamingCallback.java,115,"// Object literal keys may be STRING, GET, SET. Get and Set"
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,106,Type == Token.STRING ||
False,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,107,Type == Token.NUMBER)) {
True,src/com/google/javascript/jscomp/CheckGlobalThis.java,src/com/google/javascript/jscomp/CheckGlobalThis.java,106,pType == Token.STRING)) {
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,222,reconditions.checkState(
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,223,hildCount ==
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,224,(n.getParent() != null &&
False,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,225,.getParent().getType() == Token.OBJECTLIT) ? 1 : 0));
True,src/com/google/javascript/jscomp/CodeGenerator.java,src/com/google/javascript/jscomp/CodeGenerator.java,222,Preconditions.checkState(childCount == 0);
True,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,46,case Token.GET:
True,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,src/com/google/javascript/jscomp/ConvertToDottedProperties.java,47,case Token.SET:
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,357,ase Token.NUMBER:
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,358,"eturn new Node(Token.GETELEM,"
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,359,"ew Node(Token.OBJECTLIT),"
False,src/com/google/javascript/jscomp/DefinitionsRemover.java,src/com/google/javascript/jscomp/DefinitionsRemover.java,360,ame.cloneNode());
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,418,"/ Maybe STRING, NUMBER, GET, SET"
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,419,f (child.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,420,/ We should never see a mix of numbers and strings.
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,421,tring name = child.getString();
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,422," type = typeSystem.getType(getScope(), n, name);"
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,424,roperty prop = getProperty(name);
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,425,"f (!prop.scheduleRenaming(child,"
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,426,"rocessProperty(t, prop, type, null))) {"
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,427,f (showInvalidationWarnings) {
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,428,ompiler.report(JSError.make(
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,429,".getSourceName(), child, Warnings.INVALIDATION, name,"
False,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,430,"type == null ? ""null"" : type.toString()), n.toString()));"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,418,"// Maybe STRING, GET, SET"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,420,// We should never see a mix of numbers and strings.
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,421,String name = child.getString();
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,422,"T type = typeSystem.getType(getScope(), n, name);"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,424,Property prop = getProperty(name);
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,425,"if (!prop.scheduleRenaming(child,"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,426,"processProperty(t, prop, type, null))) {"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,427,if (showInvalidationWarnings) {
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,428,compiler.report(JSError.make(
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,429,"t.getSourceName(), child, Warnings.INVALIDATION, name,"
True,src/com/google/javascript/jscomp/DisambiguateProperties.java,src/com/google/javascript/jscomp/DisambiguateProperties.java,430,"(type == null ? ""null"" : type.toString()), n.toString()));"
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,159,f (key.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,160,ode value = key.getFirstChild();
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,161,tring name = key.getString();
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,162,f (key.getType() == Token.STRING
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,& value.getType() == Token.FUNCTION) {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,164,"ddSignature(name, value, t.getSourceName());"
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,165, else {
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,166,etSignatureStore().removeSignature(name);
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,167,xternMethodsWithoutSignatures.add(name);
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,169,xternMethods.add(name);
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,159,Node value = key.getFirstChild();
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,160,String name = key.getString();
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,161,if (key.getType() == Token.STRING
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,162,&& value.getType() == Token.FUNCTION) {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,163,"addSignature(name, value, t.getSourceName());"
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,164,} else {
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,165,getSignatureStore().removeSignature(name);
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,166,externMethodsWithoutSignatures.add(name);
True,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,168,externMethods.add(name);
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,218,ase Token.NUMBER:
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,219,/ Ignore numberic keys.
False,src/com/google/javascript/jscomp/MethodCompilerPass.java,src/com/google/javascript/jscomp/MethodCompilerPass.java,220,reak;
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2040,ase Token.NUMBER:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2057,ase Token.NUMBER:
False,src/com/google/javascript/jscomp/NodeUtil.java,src/com/google/javascript/jscomp/NodeUtil.java,2058,eturn NodeUtil.getStringValue(key);
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,385,"f (child.getType() != Token.NUMBER) { // expect STRING, GET, SET"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,386,xternedNames.add(child.getString());
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,385,externedNames.add(child.getString());
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,417,"/ We only want keys that are strings (not numbers), and only keys"
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,418,/ that were unquoted.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,419,f (key.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,420,f (!key.isQuotedString()) {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,421,aybeMarkCandidate(key);
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,422, else {
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,423,/ Ensure that we never rename some other property in a way
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,424,/ that could conflict with this quoted key.
False,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,425,uotedNames.add(key.getString());
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,415,if (!key.isQuotedString()) {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,416,maybeMarkCandidate(key);
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,417,} else {
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,418,// Ensure that we never rename some other property in a way
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,419,// that could conflict with this quoted key.
True,src/com/google/javascript/jscomp/RenameProperties.java,src/com/google/javascript/jscomp/RenameProperties.java,420,quotedNames.add(key.getString());
False,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,84,"/ We only want keys that are strings (not numbers), and only keys"
False,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,85,/ that were unquoted.
False,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,86,f (key.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,87,f (!key.isQuotedString()) {
False,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,88,"ey.putProp(Node.ORIGINALNAME_PROP, key.getString());"
True,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,84,// We only want keys were unquoted.
True,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,85,if (!key.isQuotedString()) {
True,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,src/com/google/javascript/jscomp/SourceInformationAnnotator.java,86,"key.putProp(Node.ORIGINALNAME_PROP, key.getString());"
False,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,182,"f (key.getType() != Token.NUMBER && key.getString().endsWith(""__"")) {"
True,src/com/google/javascript/jscomp/StrictModeCheck.java,src/com/google/javascript/jscomp/StrictModeCheck.java,182,"if (key.getString().endsWith(""__"")) {"
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,367,f (key.getType() != Token.NUMBER
False,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,368,& isStripName(key.getString())) {
True,src/com/google/javascript/jscomp/StripCode.java,src/com/google/javascript/jscomp/StripCode.java,367,if (isStripName(key.getString())) {
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,158,f (child.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,159,xternPropertyNames.add(child.getString());
True,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,158,externPropertyNames.add(child.getString());
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,213,f (child.getType() != Token.NUMBER) {
False,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,214,"ddWrite(child, t, true);"
True,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,src/com/google/javascript/jscomp/SuspiciousPropertiesCheck.java,211,"addWrite(child, t, true);"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,487,/ Object literal keys are handled with OBJECTLIT
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,488,"f (!NodeUtil.isObjectLitKey(n, n.getParent())) {"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,489,"nsureTyped(t, n, NUMBER_TYPE);"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,487,"ensureTyped(t, n, NUMBER_TYPE);"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,509,/ Defer keys to the Token.OBJECTLIT case
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,510,"f (!NodeUtil.isObjectLitKey(n, n.getParent())) {"
False,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,511,.setJSType(getNativeType(NUMBER_TYPE));
True,src/com/google/javascript/jscomp/TypedScopeCreator.java,src/com/google/javascript/jscomp/TypedScopeCreator.java,509,n.setJSType(getNativeType(NUMBER_TYPE));

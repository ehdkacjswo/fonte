is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,291,/ Clone any remaining params that aren't in the function literal.
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,291,"// Clone any remaining params that aren't in the function literal,"
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,292,// but make them optional.
False,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,293,aramBuilder.newParameterFromNode(oldParams.next());
True,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,src/com/google/javascript/jscomp/FunctionTypeBuilder.java,294,paramBuilder.newOptionalParameterFromNode(oldParams.next());
True,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,122,"* Copies the parameter specification from the given node,"
True,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,123,* but makes sure it's optional.
True,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,125,public Node newOptionalParameterFromNode(Node n) {
True,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,126,Node newParam = newParameterFromNode(n);
True,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,127,if (!newParam.isVarArgs() && !newParam.isOptionalArg()) {
True,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,128,newParam.setOptionalArg(true);
True,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java,130,return newParam;
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4676,public void testOverriddenParams5() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4677,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4678,"""/** @constructor */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4679,"""/** @param {number} x */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4680,"""Foo.prototype.bar = function(x) { };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4681,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4682,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4683,""" * @extends {Foo}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4684,""" */ function SubFoo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4685,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4686,""" * @override\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4688,"""SubFoo.prototype.bar = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4689,"""(new SubFoo()).bar();"");"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4692,public void testOverriddenParams6() throws Exception {
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4693,testTypes(
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4694,"""/** @constructor */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4695,"""/** @param {number} x */"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4696,"""Foo.prototype.bar = function(x) { };"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4697,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4698,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4699,""" * @extends {Foo}\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4700,""" */ function SubFoo() {}"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4701,"""/**\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4702,""" * @override\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4704,"""SubFoo.prototype.bar = function() {};"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4705,"""(new SubFoo()).bar(true);"","
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4706,"""actual parameter 1 of SubFoo.prototype.bar "" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4707,"""does not match formal parameter\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4708,"""found   : boolean\n"" +"
True,test/com/google/javascript/jscomp/TypeCheckTest.java,test/com/google/javascript/jscomp/TypeCheckTest.java,4709,"""required: number"");"

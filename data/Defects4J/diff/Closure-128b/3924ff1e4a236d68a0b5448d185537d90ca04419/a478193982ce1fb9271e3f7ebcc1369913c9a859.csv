is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,34,static final DiagnosticType READ_ERROR = DiagnosticType.error(
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,35,"""JSC_READ_ERROR"", ""Cannot read: {0}"");"
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,210,* Set if the normalization pass has been done.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,211,* Note: non-private to enable test cases that require the Normalize pass.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,213,abstract void setNormalized();
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,216,* Set once unnormalizing passes have been start.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,217,* Note: non-private to enable test cases that require the Normalize pass.
True,src/com/google/javascript/jscomp/AbstractCompiler.java,src/com/google/javascript/jscomp/AbstractCompiler.java,219,abstract void setUnnormalized();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,32,mport java.io.FileReader;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,36,mport java.text.ParseException;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,93,** Fully qualified function names and globally unique ids */
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,94,rivate FunctionNames functionNames_;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,96,** The variable renaming map */
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,97,rivate VariableMap variableMap_;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,99,** The property renaming map */
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,100,rivate VariableMap propertyMap_;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,123,** The naming map for anonymous functions */
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,124,rivate VariableMap anonFunctionNameMap_;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,151,ublic static final DiagnosticType READ_ERROR = DiagnosticType.error(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,152,"JSC_READ_ERROR"", ""Cannot read: {0}"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,159,rivate static final DiagnosticType INPUT_MAP_PROP_PARSE =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,160,"iagnosticType.error(""JSC_INPUT_MAP_PROP_PARSE"","
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,161,"Input property map parse error: {0}"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,162,rivate static final DiagnosticType INPUT_VAR_PROP_PARSE =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,163,"iagnosticType.error(""JSC_INPUT_MAP_VAR_PARSE"","
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,164,"Input variable map parse error: {0}"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,531,ameAnonymousFunctions(options_.anonymousFunctionNaming);
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,509,// TODO(nicksantos): Move this into an instrument() phase maybe?
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,510,check();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,617,f (options_.instrumentationTemplate != null ||
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,618,ptions_.recordFunctionInformation) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,619,omputeFunctionNames();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,596,// TODO(nicksantos): clean this up. The flow here is too hard to follow.
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,597,if (options_.nameAnonymousFunctionsOnly) {
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,598,return;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,705," Alias string literals with global variables, to avoid creating lots of"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,706, transient objects.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,708,"rivate void aliasStrings(Set<String> aliasableStrings,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,709,"oolean aliasAllStrings,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,710,"tring aliasStringsBlacklist,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,711,oolean outputStringUsage) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,712,"ogger_.info(""Aliasing strings"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,713,"tartPass(""aliasStrings"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,714,liasStrings aliasStrings = new AliasStrings(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,715,"his,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,716,"etModuleGraph(),"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,717,"liasAllStrings ? null : aliasableStrings,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,718,"liasStringsBlacklist,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,719,utputStringUsage);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,720,rocess(aliasStrings);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,721,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,724,rivate void aliasKeywords() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,725,"ogger_.info(""Aliasing true/false/null"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,726,"tartPass(""aliasKeywords"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,727,liasKeywords aliasKeywords = new AliasKeywords(this);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,728,rocess(aliasKeywords);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,729,ndPass();
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,748,PassConfig.State state = getPassConfig().getIntermediateState();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,798,"ariableMap_, propertyMap_, anonFunctionNameMap_,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,799,"unctionInformationMap_, sourceMap_, externExports_,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,800,etPassConfig().getCssNames());
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,750,"state.variableMap, state.propertyMap,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,751,"state.anonymousFunctionNameMap, functionInformationMap_,"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,752,"sourceMap_, externExports_, state.cssNames);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,812,@Override
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,821,@Override
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1311,f (options_.flowSensitiveInlineVariables) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1312,lowSensitiveInlineVariables();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1315,f (options_.collapseAnonymousFunctions) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1316,ollapseAnonymousFunctions();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1319,/ Move functions before extracting prototype member declarations.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1320,f (options_.moveFunctionDeclarations) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1321,oveFunctionDeclarations();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1324,f (options_.anonymousFunctionNaming ==
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1325,nonymousFunctionNamingPolicy.MAPPED) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1326,ameAnonymousFunctions(AnonymousFunctionNamingPolicy.MAPPED);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1329,/ The mapped name anonymous function pass makes use of information that
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1330,/ the extract prototype member declarations pass removes so the former
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1331,/ happens before the latter.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1333,/ Extracting prototype properties screws up the heuristic renaming
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1334,"/ policies, so never run it when those policies are requested."
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1335,f (options_.extractPrototypeMemberDeclarations &&
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1336,options_.propertyRenaming != PropertyRenamingPolicy.HEURISTIC &&
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1337,ptions_.propertyRenaming !=
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1338,ropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1339,xtractPrototypeMemberDeclarations();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1342,f (options_.coalesceVariableNames) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1343,oalesceVariableNames();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1346,ariableMap prevPropertyMap = null;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1347,f (options_.inputPropertyMapSerialized != null) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1348,ry {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1349,revPropertyMap =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1350,ariableMap.fromBytes(options_.inputPropertyMapSerialized);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1351, catch (ParseException e) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1352,"eport(JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1356,f (options_.ambiguateProperties && (options_.propertyRenaming
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1357,= PropertyRenamingPolicy.ALL_UNQUOTED)) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1358,mbiguateProperties(options_.anonymousFunctionNaming
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1359,getReservedCharacters());
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1362,witch (options_.propertyRenaming) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1363,ase HEURISTIC:
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1364,"enamePrototypes(false,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1365,"ptions_.anonymousFunctionNaming,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1366,revPropertyMap);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1367,reak;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1368,ase AGGRESSIVE_HEURISTIC:
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1369,"enamePrototypes(true,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1370,"ptions_.anonymousFunctionNaming,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1371,revPropertyMap);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1372,reak;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1373,ase ALL_UNQUOTED:
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1374,"enameProperties(options_.generatePseudoNames,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1375,"ptions_.anonymousFunctionNaming,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1376,revPropertyMap);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1377,reak;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1380,/ This comes after property renaming because quoted property names must
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1381,/ not be renamed.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1382,f (options_.convertToDottedProperties) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1383,onvertToDottedProperties();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1386,/ Property renaming must happen before this pass runs since this
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1387,/ pass may convert dotted properties into quoted properties.  It
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1388,"/ is beneficial to run before alias strings, alias keywords and"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1389,/ variable renaming.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1390,f (options_.rewriteFunctionExpressions) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1391,ewriteFunctionExpressions();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1394,/ This comes after converting quoted property accesses to dotted property
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1395,/ accesses in order to avoid aliasing property names.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1396,f (!options_.aliasableStrings.isEmpty() || options_.aliasAllStrings) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1397,"liasStrings(options_.aliasableStrings,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1398,"ptions_.aliasAllStrings,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1399,"ptions_.aliasStringsBlacklist,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1400,ptions_.outputJsStringUsage);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1403,f (options_.aliasExternals) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1404,liasExternals();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1407,f (options_.aliasKeywords) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1408,liasKeywords();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1411,f (options_.collapseVariableDeclarations) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1412,ollapseVariableDeclarations();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1415,enormalize();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1417,f (options_.instrumentationTemplate != null) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1418,nstrumentFunctions();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1421,f (options_.variableRenaming != VariableRenamingPolicy.ALL) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1422,"/ If we're leaving some (or all) variables with their old names,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1423,/ then we need to undo any of the markers we added for distinguishing
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1424,"/ local variables (""$$1"") or constants (""$$constant"")."
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1425,nvertContextualRenaming();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1428,f (options_.variableRenaming != VariableRenamingPolicy.OFF) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1429,ariableMap prevVariableMap = null;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1430,f (options_.inputVariableMapSerialized != null) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1431,ry {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1432,revVariableMap =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1433,ariableMap.fromBytes(options_.inputVariableMapSerialized);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1434, catch (ParseException e) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1435,"eport(JSError.make(INPUT_VAR_PROP_PARSE, e.getMessage()));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1439,"enameVars(options_.renamePrefix,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1440,"ptions_.variableRenaming == VariableRenamingPolicy.LOCAL,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1441,"ptions_.anonymousFunctionNaming,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1442,"ptions_.generatePseudoNames,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1443,revVariableMap);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1446,/ This pass should run after names stop changing.
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1447,f (options_.processObjectPropertyString) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1448,bjectPropertyStringPostprocess();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1451,f (options_.labelRenaming) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1452,enameLabels();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1455,f (options_.anonymousFunctionNaming ==
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1456,nonymousFunctionNamingPolicy.UNMAPPED) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1457,ameAnonymousFunctions(AnonymousFunctionNamingPolicy.UNMAPPED);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1460,/ Safety check
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1461,f (options_.checkSymbols) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1462,anityCheckVars();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1477,** Checks that all variables are defined. */
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1478,oid sanityCheckVars() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1479,"ogger_.info(""Checking for undefined vars"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1480,"tartPass(""sanityCheckVars"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1481,"arCheck v = new VarCheck(this, true);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1482,rocess(v);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1483,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1498,oid computeFunctionNames() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1499,"ogger_.info(""Computing fully-qualified function names and ids"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1500,"tartPass(""computeFunctionNames"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1501,unctionNames_ = new FunctionNames(this);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1502,rocess(functionNames_);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1503,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1506,oid flowSensitiveInlineVariables() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1507,"ogger_.info(""Flow Sensitive Inline Variables"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1508,"tartPass(""flowSensitiveInlineVariables"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1509,rocess(new FlowSensitiveInlineVariables(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1510,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1513,oid coalesceVariableNames() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1514,"ogger_.info(""Coalesce Variable Names"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1515,"tartPass(""coalesceVariableNames"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1516,rocess(new CoalesceVariableNames(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1517,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1520,oid collapseVariableDeclarations() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1521,"ogger_.info(""Collapsing variable declarations"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1522,"tartPass(""collapseVariableDeclarations"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1523,rocess(new CollapseVariableDeclarations(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1524,etUnnormalized();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1525,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1528,oid extractPrototypeMemberDeclarations() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1529,"ogger_.info(""Extracting Common Prototype Member Declarations"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1530,"tartPass(""extractPrototypeMemberDeclarations"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1531,rocess(new ExtractPrototypeMemberDeclarations(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1532,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1535,oid rewriteFunctionExpressions() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1536,"ogger_.info(""Rewrite function expressions"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1537,"tartPass(""rewriteFunctionExpressions"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1538,rocess(new FunctionRewriter(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1539,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1542,oid collapseAnonymousFunctions() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1543,"ogger_.info(""Collapsing anonymous functions"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1544,"tartPass(""collapseAnonymousFunctions"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1545,rocess(new CollapseAnonymousFunctions(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1546,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1551,oid moveFunctionDeclarations() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1552,"ogger_.info(""Move function declarations"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1553,"tartPass(""moveFunctionDeclarations"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1554,rocess(new MoveFunctionDeclarations(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1555,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1574,oid nameAnonymousFunctions(AnonymousFunctionNamingPolicy policy) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1575,"ogger_.info(""Naming anonymous functions"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1576,"tartPass(""nameAnonymousFunctions"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1577,f (policy == AnonymousFunctionNamingPolicy.UNMAPPED) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1578,rocess(new NameAnonymousFunctions(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1579, else if (policy == AnonymousFunctionNamingPolicy.MAPPED) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1580,ameAnonymousFunctionsMapped naf = new NameAnonymousFunctionsMapped(this);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1581,rocess(naf);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1582,nonFunctionNameMap_ = naf.getFunctionMap();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1584,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1587,oid aliasExternals() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1588,"ogger_.info(""Creating alias functions for externals"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1589,"tartPass(""aliasExternals"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1590,"liasExternals ae = new AliasExternals(this,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1591,"etModuleGraph(),"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1592,"ptions_.unaliasableGlobals,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1593,ptions_.aliasableGlobals);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1594,rocess(ae);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1595,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1598,oid objectPropertyStringPostprocess() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1599,"ogger_.info(""goog.testing.ObjectPropertyString postprocess"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1600,"tartPass(""ObjectPropertyStringPostprocess"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1601,rocess(new ObjectPropertyStringPostprocess(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1602,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1605,oid ambiguateProperties(char[] reservedCharacters) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1606,"ogger_.info(""Ambiguating properties"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1607,"tartPass(""ambiguateProperties"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1608,"rocess(new AmbiguateProperties(this, reservedCharacters));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1609,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1620,rivate void denormalize() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1621,"ogger_.info(""Denormalizing"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1622,"tartPass(""denormalize"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1623,rocess(new Denormalize(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1624,etUnnormalized();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1625,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1650,"oid renameVars(String renamePrefix, boolean renameLocalVarsOnly,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1651,"nonymousFunctionNamingPolicy anonFunctionNamePolicy,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1652,"oolean generatePseudoNames,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1653,ariableMap prevVariableMap) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1654,"ogger_.info(""Renaming vars"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1655,"tartPass(""renameVars"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1656,oolean preserveAnonymousFunctionNames =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1657,nonFunctionNamePolicy != AnonymousFunctionNamingPolicy.OFF;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1658,enameVars rn = new RenameVars(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1659,"his, renamePrefix,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1660,"enameLocalVarsOnly, preserveAnonymousFunctionNames,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1661,"eneratePseudoNames,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1662,"revVariableMap,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1663,"nonFunctionNamePolicy.getReservedCharacters(),"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1664,etPassConfig().getExportedNames());
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1665,rocess(rn);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1666,ariableMap_ = rn.getVariableMap();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1667,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1670,"oid renameProperties(boolean generatePseudoNames,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1671,"nonymousFunctionNamingPolicy anonFunctionNamePolicy,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1672,ariableMap prevPropertyMap) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1673,"ogger_.info(""Renaming properties"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1674,"tartPass(""renameProperties"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1675,enameProperties rp = new RenameProperties(
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1676,"his, generatePseudoNames, prevPropertyMap,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1677,nonFunctionNamePolicy.getReservedCharacters());
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1678,rocess(rp);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1679,ropertyMap_ = rp.getPropertyMap();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1680,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1683,oid invertContextualRenaming() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1684,"ogger_.info(""Denormalizing local names"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1685,"tartPass(""invertNames"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1686,rocess(MakeDeclaredNamesUnique.getContextualRenameInverter(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1687,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1690,"oid renamePrototypes(boolean aggressive,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1691,"nonymousFunctionNamingPolicy anonFunctionNamePolicy,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1692,ariableMap prevPropertyMap) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1693,"ogger_.info(""Renaming prototypes"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1694,"tartPass(""renamePrototypes"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1695,"enamePrototypes rp = new RenamePrototypes(this, aggressive,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1696,"nonFunctionNamePolicy.getReservedCharacters(),"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1697,revPropertyMap);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1698,rocess(rp);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1699,ropertyMap_ = rp.getPropertyMap();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1700,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1703,oid renameLabels() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1704,"ogger_.info(""Renaming labels"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1705,"tartPass(""renameLabels"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1706,enameLabels rn = new RenameLabels(this);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1707,rocess(rn);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1708,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1711,oid convertToDottedProperties() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1712,"ogger_.info(""Converting quoted property accesses to dot syntax"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1713,"tartPass(""convertToDottedProperties"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1714,rocess(new ConvertToDottedProperties(this));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1715,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1718,oid instrumentFunctions() {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1719,"ogger_.info(""Instrumenting functions"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1720,"tartPass(""instrumentFunctions"");"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1721,ry {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1722,ileReader templateFile =
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1723,ew FileReader(options_.instrumentationTemplate);
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1725,"rocess(new InstrumentFunctions(this,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1726,"unctionNames_,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1727,"ptions_.instrumentationTemplate,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1728,"ptions_.appNameStr,"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1729,emplateFile));
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1730, catch (IOException e) {
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1731,"eport(JSError.make(READ_ERROR, options_.instrumentationTemplate));"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1733,ndPass();
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1740,"ew RecordFunctionInformation(this, functionNames_);"
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1338,new RecordFunctionInformation(
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1339,"this, getPassConfig().getIntermediateState().functionNames);"
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1929,eturn variableMap_;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1528,return getPassConfig().getIntermediateState().variableMap;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1933,eturn propertyMap_;
True,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1532,return getPassConfig().getIntermediateState().propertyMap;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,1986,rivate FunctionNames functionNames;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2004,tate.functionNames = functionNames_;
False,src/com/google/javascript/jscomp/Compiler.java,src/com/google/javascript/jscomp/Compiler.java,2022,unctionNames_ = state.functionNames;
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,19,import com.google.javascript.rhino.JSDocInfo;
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,52,static final DiagnosticType USE_OF_WITH = DiagnosticType.warning(
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,53,"""JSC_USE_OF_WITH"","
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,54,"""The use of the 'with' structure should be avoided."");"
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,87,case Token.WITH:
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,88,JSDocInfo info = node.getJSDocInfo();
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,89,boolean allowWith =
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,90,"info != null && info.getSuppressions().contains(""with"");"
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,91,if (!allowWith) {
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,92,"report(node, USE_OF_WITH);"
True,src/com/google/javascript/jscomp/ControlStructureCheck.java,src/com/google/javascript/jscomp/ControlStructureCheck.java,94,break;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,24,import com.google.common.collect.Sets;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,32,import java.io.FileReader;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,34,import java.text.ParseException;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,36,import java.util.Collections;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,39,import java.util.Set;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,72,private static final DiagnosticType INPUT_MAP_PROP_PARSE =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,73,"DiagnosticType.error(""JSC_INPUT_MAP_PROP_PARSE"","
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,74,"""Input property map parse error: {0}"");"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,76,private static final DiagnosticType INPUT_MAP_VAR_PARSE =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,77,"DiagnosticType.error(""JSC_INPUT_MAP_VAR_PARSE"","
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,78,"""Input variable map parse error: {0}"");"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,92,/** Names exported by goog.exportSymbol. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,93,private Set<String> exportedNames = null;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,96,"* Ids for cross-module method stubbing, so that each method has"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,97,* a unique id.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,99,private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,100,new CrossModuleMethodMotion.IdGenerator();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,103,* Keys are arguments passed to getCssName() found during compilation; values
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,104,* are the number of times the key appeared as an argument to getCssName().
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,106,"private Map<String, Integer> cssNames = null;"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,108,/** The variable renaming map */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,109,private VariableMap variableMap = null;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,111,/** The property renaming map */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,112,private VariableMap propertyMap = null;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,114,/** The naming map for anonymous functions */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,115,private VariableMap anonymousFunctionNameMap = null;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,117,/** Fully qualified function names and globally unique ids */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,118,private FunctionNames functionNames = null;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,124,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,125,State getIntermediateState() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,126,return new State(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,127,"cssNames == null ? null : Maps.newHashMap(cssNames),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,128,exportedNames == null ? null :
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,129,"Collections.unmodifiableSet(exportedNames),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,130,"crossModuleIdGenerator, variableMap, propertyMap,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,131,"anonymousFunctionNameMap, functionNames);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,134,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,135,void setIntermediateState(State state) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,136,this.cssNames = state.cssNames == null ? null :
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,137,Maps.newHashMap(state.cssNames);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,138,this.exportedNames = state.exportedNames == null ? null :
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,139,Sets.newHashSet(state.exportedNames);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,140,this.crossModuleIdGenerator = state.crossModuleIdGenerator;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,141,this.variableMap = state.variableMap;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,142,this.propertyMap = state.propertyMap;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,143,this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,144,this.functionNames = state.functionNames;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,151,if (options.nameAnonymousFunctionsOnly) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,152,if (options.anonymousFunctionNaming ==
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,153,AnonymousFunctionNamingPolicy.MAPPED) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,154,checks.add(nameMappedAnonymousFunctions);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,155,} else if (options.anonymousFunctionNaming ==
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,156,AnonymousFunctionNamingPolicy.UNMAPPED) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,157,checks.add(nameUnmappedAnonymousFunctions);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,159,return checks;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,277,if (options.instrumentationTemplate != null ||
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,278,options.recordFunctionInformation) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,279,checks.add(computeFunctionNames);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,402,if (options.flowSensitiveInlineVariables) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,403,passes.add(flowSensitiveInlineVariables);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,406,if (options.collapseAnonymousFunctions) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,407,passes.add(collapseAnonymousFunctions);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,410,// Move functions before extracting prototype member declarations.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,411,if (options.moveFunctionDeclarations) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,412,passes.add(moveFunctionDeclarations);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,415,if (options.anonymousFunctionNaming ==
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,416,AnonymousFunctionNamingPolicy.MAPPED) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,417,passes.add(nameMappedAnonymousFunctions);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,420,// The mapped name anonymous function pass makes use of information that
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,421,// the extract prototype member declarations pass removes so the former
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,422,// happens before the latter.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,424,// Extracting prototype properties screws up the heuristic renaming
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,425,"// policies, so never run it when those policies are requested."
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,426,if (options.extractPrototypeMemberDeclarations &&
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,427,(options.propertyRenaming != PropertyRenamingPolicy.HEURISTIC &&
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,428,options.propertyRenaming !=
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,429,PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,430,passes.add(extractPrototypeMemberDeclarations);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,433,if (options.coalesceVariableNames) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,434,passes.add(coalesceVariableNames);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,437,if (options.ambiguateProperties &&
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,438,(options.propertyRenaming == PropertyRenamingPolicy.ALL_UNQUOTED)) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,439,passes.add(ambiguateProperties);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,442,if (options.propertyRenaming != PropertyRenamingPolicy.OFF) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,443,passes.add(renameProperties);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,446,// This comes after property renaming because quoted property names must
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,447,// not be renamed.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,448,if (options.convertToDottedProperties) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,449,passes.add(convertToDottedProperties);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,452,// Property renaming must happen before this pass runs since this
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,453,// pass may convert dotted properties into quoted properties.  It
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,454,"// is beneficial to run before alias strings, alias keywords and"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,455,// variable renaming.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,456,if (options.rewriteFunctionExpressions) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,457,passes.add(rewriteFunctionExpressions);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,460,// This comes after converting quoted property accesses to dotted property
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,461,// accesses in order to avoid aliasing property names.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,462,if (!options.aliasableStrings.isEmpty() || options.aliasAllStrings) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,463,passes.add(aliasStrings);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,466,if (options.aliasExternals) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,467,passes.add(aliasExternals);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,470,if (options.aliasKeywords) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,471,passes.add(aliasKeywords);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,474,if (options.collapseVariableDeclarations) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,475,passes.add(collapseVariableDeclarations);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,478,passes.add(denormalize);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,480,if (options.instrumentationTemplate != null) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,481,passes.add(instrumentFunctions);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,484,if (options.variableRenaming != VariableRenamingPolicy.ALL) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,485,"// If we're leaving some (or all) variables with their old names,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,486,// then we need to undo any of the markers we added for distinguishing
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,487,"// local variables (""$$1"") or constants (""$$constant"")."
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,488,passes.add(invertContextualRenaming);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,492,if (options.variableRenaming != VariableRenamingPolicy.OFF) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,493,passes.add(renameVars);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,496,// This pass should run after names stop changing.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,497,if (options.processObjectPropertyString) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,498,passes.add(objectPropertyStringPostprocess);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,501,if (options.labelRenaming) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,502,passes.add(renameLabels);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,505,if (options.anonymousFunctionNaming ==
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,506,AnonymousFunctionNamingPolicy.UNMAPPED) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,507,passes.add(nameUnmappedAnonymousFunctions);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,510,// Safety check
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,511,if (options.checkSymbols) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,512,passes.add(sanityCheckVars);
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,495,etExportedNames(pass.getExportedVariableNames());
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,689,exportedNames = pass.getExportedVariableNames();
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,526,"ap<String, Integer> cssNames = null;"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,720,"Map<String, Integer> newCssNames = null;"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,528,ssNames = Maps.newHashMap();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,722,newCssNames = Maps.newHashMap();
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,530,"new ReplaceCssNames(compiler, cssNames)).process("
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,724,"(new ReplaceCssNames(compiler, newCssNames)).process("
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,532,etCssNames(cssNames);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,726,cssNames = newCssNames;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,989,/** Computes the names of functions for later analysis. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,990,private final PassFactory computeFunctionNames =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,991,"new PassFactory(""computeFunctionNames"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,992,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,993,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,994,return ((functionNames = new FunctionNames(compiler)));
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1134,"ompiler, getCrossModuleIdGenerator(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1337,"compiler, crossModuleIdGenerator,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1344,/** A data-flow based variable inliner. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1345,private final PassFactory flowSensitiveInlineVariables =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1346,"new PassFactory(""flowSensitiveInlineVariables"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1347,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1348,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1349,return new FlowSensitiveInlineVariables(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1353,/** Uses register-allocation algorithms to use fewer variables. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1354,private final PassFactory coalesceVariableNames =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1355,"new PassFactory(""coalesceVariableNames"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1356,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1357,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1358,return new CoalesceVariableNames(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1363,"* Some simple, local collapses (e.g., {@code var x; var y;} becomes"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1364,"* {@code var x,y;}."
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1366,private final PassFactory collapseVariableDeclarations =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1367,"new PassFactory(""collapseVariableDeclarations"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1368,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1369,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1370,compiler.setUnnormalized();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1371,return new CollapseVariableDeclarations(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1376,* Extracts common sub-expressions.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1378,private final PassFactory extractPrototypeMemberDeclarations =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1379,"new PassFactory(""extractPrototypeMemberDeclarations"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1380,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1381,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1382,return new ExtractPrototypeMemberDeclarations(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1386,/** Rewrites common function definitions to be more compact. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1387,private final PassFactory rewriteFunctionExpressions =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1388,"new PassFactory(""rewriteFunctionExpressions"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1389,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1390,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1391,return new FunctionRewriter(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1395,/** Collapses functions to not use the VAR keyword. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1396,private final PassFactory collapseAnonymousFunctions =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1397,"new PassFactory(""collapseAnonymousFunctions"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1398,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1399,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1400,return new CollapseAnonymousFunctions(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1404,"/** Moves function declarations to the top, to simulate actual hoisting. */"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1405,private final PassFactory moveFunctionDeclarations =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1406,"new PassFactory(""moveFunctionDeclarations"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1407,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1408,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1409,return new MoveFunctionDeclarations(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1413,private final PassFactory nameUnmappedAnonymousFunctions =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1414,"new PassFactory(""nameAnonymousFunctions"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1415,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1416,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1417,return new NameAnonymousFunctions(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1421,private final PassFactory nameMappedAnonymousFunctions =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1422,"new PassFactory(""nameAnonymousFunctions"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1423,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1424,protected CompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1425,return new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1426,"@Override public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1427,NameAnonymousFunctionsMapped naf =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1428,new NameAnonymousFunctionsMapped(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1429,"naf.process(externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1430,anonymousFunctionNameMap = naf.getFunctionMap();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1436,/** Alias external symbols. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1437,private final PassFactory aliasExternals =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1438,"new PassFactory(""aliasExternals"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1439,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1440,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1441,"return new AliasExternals(compiler, compiler.getModuleGraph(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1442,"options.unaliasableGlobals, options.aliasableGlobals);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1447,"* Alias string literals with global variables, to avoid creating lots of"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1448,* transient objects.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1450,private final PassFactory aliasStrings =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1451,"new PassFactory(""aliasStrings"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1452,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1453,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1454,return new AliasStrings(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1455,"compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1456,"compiler.getModuleGraph(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1457,"options.aliasAllStrings ? null : options.aliasableStrings,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1458,"options.aliasStringsBlacklist,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1459,options.outputJsStringUsage);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1463,"/** Aliases common keywords (true, false) */"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1464,private final PassFactory aliasKeywords =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1465,"new PassFactory(""aliasKeywords"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1466,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1467,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1468,return new AliasKeywords(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1472,/** Handling for the ObjectPropertyString primitive. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1473,private final PassFactory objectPropertyStringPostprocess =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1474,"new PassFactory(""ObjectPropertyStringPostprocess"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1475,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1476,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1477,return new ObjectPropertyStringPostprocess(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1482,* Renames properties so that the two properties that never appear on
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1483,* the same object get the same name.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1485,private final PassFactory ambiguateProperties =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1486,"new PassFactory(""ambiguateProperties"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1487,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1488,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1489,return new AmbiguateProperties(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1490,"compiler, options.anonymousFunctionNaming.getReservedCharacters());"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1494,/** Normalizes the AST for optimizations. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1495,private final PassFactory normalize =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1496,"new PassFactory(""normalize"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1497,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1498,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1499,compiler.setNormalized();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1500,"return new Normalize(compiler, false);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1504,/** Denormalize the AST for code generation. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1505,private final PassFactory denormalize =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1506,"new PassFactory(""denormalize"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1507,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1508,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1509,compiler.setUnnormalized();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1510,return new Denormalize(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1514,/** Inverting name normalization. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1515,private final PassFactory invertContextualRenaming =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1516,"new PassFactory(""invertNames"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1517,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1518,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1519,return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1524,* Renames properties.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1526,private final PassFactory renameProperties =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1527,"new PassFactory(""renameProperties"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1528,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1529,protected CompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1530,VariableMap map = null;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1531,if (options.inputPropertyMapSerialized != null) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1532,try {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1533,map = VariableMap.fromBytes(options.inputPropertyMapSerialized);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1534,} catch (ParseException e) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1535,"return new ErrorPass(compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1536,"JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1540,final VariableMap prevPropertyMap = map;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1541,return new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1542,"@Override public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1543,propertyMap = runPropertyRenaming(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1544,"compiler, prevPropertyMap, externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1550,private VariableMap runPropertyRenaming(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1551,"AbstractCompiler compiler, VariableMap prevPropertyMap,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1552,"Node externs, Node root) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1553,char[] reservedChars =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1554,options.anonymousFunctionNaming.getReservedCharacters();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1555,switch (options.propertyRenaming) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1556,case HEURISTIC:
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1557,"RenamePrototypes rproto = new RenamePrototypes(compiler, false,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1558,"reservedChars, prevPropertyMap);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1559,"rproto.process(externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1560,return rproto.getPropertyMap();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1562,case AGGRESSIVE_HEURISTIC:
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1563,"RenamePrototypes rproto2 = new RenamePrototypes(compiler, true,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1564,"reservedChars, prevPropertyMap);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1565,"rproto2.process(externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1566,return rproto2.getPropertyMap();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1568,case ALL_UNQUOTED:
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1569,RenameProperties rprop = new RenameProperties(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1570,"compiler, options.generatePseudoNames, prevPropertyMap,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1571,reservedChars);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1572,"rprop.process(externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1573,return rprop.getPropertyMap();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1575,default:
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1576,throw new IllegalStateException(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1577,"""Unrecognized property renaming policy"");"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1581,/** Renames variables. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1582,private final PassFactory renameVars =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1583,"new PassFactory(""renameVars"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1584,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1585,protected CompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1586,VariableMap map = null;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1587,if (options.inputVariableMapSerialized != null) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1588,try {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1589,map = VariableMap.fromBytes(options.inputVariableMapSerialized);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1590,} catch (ParseException e) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1591,"return new ErrorPass(compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1592,"JSError.make(INPUT_MAP_VAR_PARSE, e.getMessage()));"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1596,final VariableMap prevVariableMap = map;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1597,return new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1598,"@Override public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1599,variableMap = runVariableRenaming(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1600,"compiler, prevVariableMap, externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1606,private VariableMap runVariableRenaming(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1607,"AbstractCompiler compiler, VariableMap prevVariableMap,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1608,"Node externs, Node root) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1609,char[] reservedChars =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1610,options.anonymousFunctionNaming.getReservedCharacters();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1611,boolean preserveAnonymousFunctionNames =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1612,options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1613,RenameVars rn = new RenameVars(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1614,"compiler,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1615,"options.renamePrefix,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1616,"options.variableRenaming == VariableRenamingPolicy.LOCAL,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1617,"preserveAnonymousFunctionNames,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1618,"options.generatePseudoNames,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1619,"prevVariableMap,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1620,"reservedChars,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1621,exportedNames);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1622,"rn.process(externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1623,return rn.getVariableMap();
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1626,/** Renames labels */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1627,private final PassFactory renameLabels =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1628,"new PassFactory(""renameLabels"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1629,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1630,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1631,return new RenameLabels(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1635,/** Convert bracket access to dot access */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1636,private final PassFactory convertToDottedProperties =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1637,"new PassFactory(""convertToDottedProperties"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1638,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1639,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1640,return new ConvertToDottedProperties(compiler);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1644,/** Checks that all variables are defined. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1645,private final PassFactory sanityCheckVars =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1646,"new PassFactory(""sanityCheckVars"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1647,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1648,protected CompilerPass createInternal(AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1649,"return new VarCheck(compiler, true);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1653,/** Adds instrumentations according to an instrumentation template. */
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1654,private final PassFactory instrumentFunctions =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1655,"new PassFactory(""instrumentFunctions"", true) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1656,@Override
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1657,protected CompilerPass createInternal(final AbstractCompiler compiler) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1658,return new CompilerPass() {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1659,"@Override public void process(Node externs, Node root) {"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1660,try {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1661,FileReader templateFile =
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1662,new FileReader(options.instrumentationTemplate);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1663,(new InstrumentFunctions(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1664,"compiler, functionNames,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1665,"options.instrumentationTemplate,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1666,"options.appNameStr,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1667,"templateFile)).process(externs, root);"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1668,} catch (IOException e) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1669,compiler.report(
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1670,"JSError.make(AbstractCompiler.READ_ERROR,"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1671,options.instrumentationTemplate));
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1213,rivate final DiagnosticType error;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1750,private final JSError error;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1753,"this(compiler, JSError.make(error));"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1756,"private ErrorPass(AbstractCompiler compiler, JSError error) {"
False,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1222,ompiler.report(JSError.make(error));
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,1763,compiler.report(error);
False,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,81,"SError.make(Compiler.READ_ERROR, sourceFile.getName()));"
True,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,81,"JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));"
False,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,94,"ompiler.report(JSError.make(Compiler.READ_ERROR, sourceName));"
True,src/com/google/javascript/jscomp/JsAst.java,src/com/google/javascript/jscomp/JsAst.java,94,"compiler.report(JSError.make(AbstractCompiler.READ_ERROR, sourceName));"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,20,mport com.google.common.collect.Maps;
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,21,mport com.google.common.collect.Sets;
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,24,mport java.util.Collections;
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,39,** Names exported by goog.exportSymbol. */
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,40,rivate Set<String> exportedNames = null;
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,43," Ids for cross-module method stubbing, so that each method has"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,44, a unique id.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,46,rivate CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator =
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,47,ew CrossModuleMethodMotion.IdGenerator();
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,60, Keys are arguments passed to getCssName() found during compilation; values
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,61, are the number of times the key appeared as an argument to getCssName().
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,63,"rivate Map<String, Integer> cssNames = null;"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,69,/ Setters and getters for intermediate state.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,71,/ This makes it possible to start and stop the compiler mid-compile.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,72,/ Each getter and setter corresponds to a type of state that is produced
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,73,/ by an earlier pass and consumed by a later pass. When the compiler is
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,74,"/ stopped mid-compile, the getter should return any state which has"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,75,"/ been produced, and the setter should restore that state when the compiler"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,76,/ is restarted.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,78,/ TODO(nicksantos): Perhaps we should just make PassConfig serializable.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,81," Gets a map of CSS names found in the JS code, to the number of times"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,82, they appear.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,84,"ap<String, Integer> getCssNames() {"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,85,eturn cssNames == null ? null : Maps.newHashMap(cssNames);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,89, Gets the symbols exported by the passes.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,91,et<String> getExportedNames() {
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,92,eturn exportedNames == null ? null :
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,93,ollections.unmodifiableSet(exportedNames);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,97," Gets a generator for cross-module method ids, so that the ids"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,98, are stable across compiled.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,100,rossModuleMethodMotion.IdGenerator getCrossModuleIdGenerator() {
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,101,eturn crossModuleIdGenerator;
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,105, Sets the map of CSS names found in the JS code during previous runs.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,107,"oid setCssNames(Map<String, Integer> newVal) {"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,108,ssNames = newVal == null ? null : Maps.newHashMap(newVal);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,112, Sets the symbols exported by previous passes.
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,114,oid setExportedNames(Set<String> newVal) {
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,115,xportedNames = newVal == null ? null : Sets.newHashSet(newVal);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,205,tate getIntermediateState() {
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,206,"eturn new State(getCssNames(), getExportedNames(),"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,207,rossModuleIdGenerator);
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,137,abstract State getIntermediateState();
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,214,oid setIntermediateState(State state) {
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,215,etCssNames(state.cssNames);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,216,etExportedNames(state.exportedNames);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,217,rossModuleIdGenerator = state.crossModuleIdGenerator;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,143,abstract void setIntermediateState(State state);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,241,"Override Map<String, Integer> getCssNames() {"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,242,eturn delegate.getCssNames();
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,245,Override Set<String> getExportedNames() {
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,246,eturn delegate.getExportedNames();
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,249,"Override void setCssNames(Map<String, Integer> newVal) {"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,250,elegate.setCssNames(newVal);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,253,Override void setExportedNames(Set<String> newVal) {
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,254,elegate.setExportedNames(newVal);
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,280,"rivate final Map<String, Integer> cssNames;"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,281,rivate final Set<String> exportedNames;
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,282,rivate final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,284,"rivate State(Map<String, Integer> cssNames, Set<String> exportedNames,"
False,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,285,rossModuleMethodMotion.IdGenerator crossModuleIdGenerator) {
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,189,"final Map<String, Integer> cssNames;"
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,190,final Set<String> exportedNames;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,191,final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,192,final VariableMap variableMap;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,193,final VariableMap propertyMap;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,194,final VariableMap anonymousFunctionNameMap;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,195,final FunctionNames functionNames;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,197,"State(Map<String, Integer> cssNames, Set<String> exportedNames,"
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,198,"CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,"
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,199,"VariableMap variableMap, VariableMap propertyMap,"
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,200,"VariableMap anonymousFunctionNameMap, FunctionNames functionNames) {"
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,204,this.variableMap = variableMap;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,205,this.propertyMap = propertyMap;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,206,this.anonymousFunctionNameMap = anonymousFunctionNameMap;
True,src/com/google/javascript/jscomp/PassConfig.java,src/com/google/javascript/jscomp/PassConfig.java,207,this.functionNames = functionNames;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,111,"* Memoized results of ""createTypeIntersection"" calls."
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,113,"private final Map<ConcreteJSTypePair, ConcreteType> typeIntersectionMemos ="
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,114,Maps.newHashMap();
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,436,reconditions.checkState(variable != null);
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,437,"ssigns.add(new Assignment(variable, argTypes.get(i)));"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,442,"// TODO(johnlenz): Support ""arguments"" references in function bodies."
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,443,"// For now, ignore anonymous arguments."
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,444,if (variable != null) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,445,"assigns.add(new Assignment(variable, argTypes.get(i)));"
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,513,llInstantiatedTypes.add(thisType);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,522,boolean added = allInstantiatedTypes.add(thisType);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,523,if (added) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,524,// A new type instance invalidates the cached type intersections.
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,525,typeIntersectionMemos.clear();
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,540,"oncreteType thisType = inferConcreteType(scope, firstArgument);"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,553,ConcreteType thisType = (firstArgument != null)
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,554,"? inferConcreteType(scope, firstArgument)"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,555,: getTopScope().getTypeOfThis();
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1046,Preconditions.checkNotNull(scope);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1047,Preconditions.checkNotNull(expr);
False,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1164,oncreteType ret;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1181,// TODO(johnlenz): Even with memoizing all the time of this pass is still
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1182,// spent in this function (due to invalidation caused by changes to
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1183,"// allInstantiatedTypes), specifically calls to ConcreteUnionType.unionWith"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1184,"ConcreteJSTypePair key = new ConcreteJSTypePair(concreteType, jsType);"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1185,ConcreteType ret = typeIntersectionMemos.get(key);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1186,if (ret != null) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1187,return ret;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1223,"typeIntersectionMemos.put(key, ret);"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1361,* A simple class used to pair a concrete type and a js type.  Used to
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1362,"* memoize the results of a ""createTypeIntersection"" call."
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1364,static class ConcreteJSTypePair {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1365,final ConcreteType concrete;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1366,final JSType jstype;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1367,final int hashcode;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1369,"ConcreteJSTypePair(ConcreteType concrete, JSType jstype) {"
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1370,this.concrete = concrete;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1371,this.jstype = jstype;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1372,this.hashcode = concrete.hashCode() + getJSTypeHashCode();
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1375,private int getJSTypeHashCode() {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1376,return jstype != null ? jstype.hashCode() : 0;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1379,private boolean equalsJSType(JSType jsType) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1380,if (jsType == null || jstype == null) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1381,return jstype == jsType;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1382,} else {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1383,return jsType.equals(this.jstype);
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1387,@Override
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1388,public boolean equals(Object o) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1389,if (o instanceof ConcreteJSTypePair) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1390,ConcreteJSTypePair pair = (ConcreteJSTypePair) o;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1391,if ((pair.concrete.equals(this.concrete)
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1392,&& equalsJSType(pair.jstype))) {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1393,return true;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1396,return false;
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1399,@Override
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1400,public int hashCode() {
True,src/com/google/javascript/jscomp/TightenTypes.java,src/com/google/javascript/jscomp/TightenTypes.java,1401,return hashcode;
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,2,* Copyright 2009 Google Inc.
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,17,package com.google.javascript.jscomp.testing;
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,19,import com.google.javascript.jscomp.Region;
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,20,import com.google.javascript.jscomp.SourceExcerptProvider;
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,21,import com.google.javascript.jscomp.SourceFile;
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,26,* A simple source excerpt provider for testing.
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,29,public class SimpleSourceExcerptProvider implements SourceExcerptProvider {
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,31,private final SourceFile sourceFile;
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,33,public SimpleSourceExcerptProvider(String source) {
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,34,"sourceFile = SourceFile.fromCode(""input"", source);"
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,37,@Override
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,38,"public String getSourceLine(String sourceName, int lineNumber) {"
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,39,return sourceFile.getLine(lineNumber);
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,42,@Override
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,43,"public Region getSourceRegion(String sourceName, int lineNumber) {"
True,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,src/com/google/javascript/jscomp/testing/SimpleSourceExcerptProvider.java,44,return sourceFile.getRegion(lineNumber);
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,2,* Copyright 2007 Google Inc.
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,17,package com.google.javascript.jscomp.testing;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,19,import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,20,import com.google.javascript.jscomp.mozilla.rhino.EvaluatorException;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,22,import junit.framework.Assert;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,25,* <p>An error reporter for testing that verifies that messages reported to the
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,26,* reporter are expected.</p>
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,28,* <p>Sample use</p>
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,29,* <pre>
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,30,* TestErrorReporter e =
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,31,"*   new TestErrorReporter(null, new String[] { ""first warning"" });"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,33,* assertTrue(e.hasEncounteredAllWarnings());
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,34,* </pre>
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,38,public final class TestErrorReporter extends Assert implements ErrorReporter {
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,39,private final String[] errors;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,40,private final String[] warnings;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,41,private int errorsIndex = 0;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,42,private int warningsIndex = 0;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,44,"public TestErrorReporter(String[] errors, String[] warnings) {"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,45,this.errors = errors;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,46,this.warnings = warnings;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,49,"public void error(String message, String sourceName, int line,"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,50,"String lineSource, int lineOffset) {"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,51,if (errors != null && errorsIndex < errors.length) {
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,52,"assertEquals(errors[errorsIndex++], message);"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,53,} else {
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,54,"fail(""extra error: "" + message);"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,58,"public void warning(String message, String sourceName, int line,"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,59,"String lineSource, int lineOffset) {"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,60,if (warnings != null && warningsIndex < warnings.length) {
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,61,"assertEquals(warnings[warningsIndex++], message);"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,62,} else {
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,63,"fail(""extra warning: "" + message);"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,67,"public EvaluatorException runtimeError(String message, String sourceName,"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,68,"int line, String lineSource, int lineOffset) {"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,69,"return new EvaluatorException(""JSCompiler test code: "" + message);"
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,73,* Returns whether all warnings were reported to this reporter.
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,75,public boolean hasEncounteredAllWarnings() {
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,76,return (warnings == null) ?
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,77,warningsIndex == 0 :
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,78,warnings.length == warningsIndex;
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,82,* Returns whether all errors were reported to this reporter.
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,84,public boolean hasEncounteredAllErrors() {
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,85,return (errors == null) ?
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,86,errorsIndex == 0 :
True,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,src/com/google/javascript/jscomp/testing/TestErrorReporter.java,87,errors.length == errorsIndex;
True,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,83,public void testUseOfWith1() {
True,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,84,"testSame(""with(a){}"", ControlStructureCheck.USE_OF_WITH);"
True,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,87,public void testUseOfWith2() {
True,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,88,"testSame(""/** @suppress {with} */"" +"
True,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,test/com/google/javascript/jscomp/ControlStructureCheckTest.java,89,"""with(a){}"");"
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,69,/ A scope creator that does scope creation and type inference.
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,70,rivate class MyScopeCreator implements ScopeCreator {
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,71,rivate final AbstractCompiler compiler;
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,72,rivate final TypedScopeCreator delegate;
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,74,yScopeCreator(AbstractCompiler compiler) {
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,75,his.compiler = compiler;
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,76,his.delegate = new TypedScopeCreator(compiler);
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,79,"ublic Scope createScope(Node root, Scope parent) {"
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,80,"cope typedScope = delegate.createScope(root, parent);"
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,82,ypeInference typeInference = new TypeInference(
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,83,"ompiler, computeCfg(root),"
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,84,"ompiler.getReverseAbstractInterpreter(), typedScope);"
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,85,ypeInference.analyze();
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,86,eturn typedScope;
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,89,rivate ControlFlowGraph<Node> computeCfg(Node n) {
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,90,"ontrolFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false);"
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,91,"fa.process(null, n);"
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,92,eturn cfa.getCfg();
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,74,ScopeCreator scopeCreator =
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,75,new MemoizedScopeCreator(new TypedScopeCreator(compiler));
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,76,"Scope topScope = scopeCreator.createScope(root.getParent(), null);"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,77,(new TypeInferencePass(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,78,"compiler, compiler.getReverseAbstractInterpreter(),"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,79,"topScope, scopeCreator)).process(externs, root);"
False,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,102,"ompiler, callback, new MyScopeCreator(compiler));"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,81,"compiler, callback, scopeCreator);"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,575,public void testAbstractMethod() {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,576,testSame(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,577,"""/** @type {!Function} */ var abstractMethod;"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,578,"""/** @constructor */ function Foo() {}"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,579,"""/** @param {number} x */ Foo.prototype.bar = abstractMethod;"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,580,assertEquals(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,581,"""Function"", findNameType(""abstractMethod"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,583,"FunctionType ctor = (FunctionType) findNameType(""Foo"", globalScope);"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,584,ObjectType instance = ctor.getInstanceType();
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,585,"assertEquals(""Foo"", instance.toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,587,ObjectType proto = instance.getImplicitPrototype();
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,588,"assertEquals(""Foo.prototype"", proto.toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,590,assertEquals(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,591,"""function (this:Foo, number): ?"","
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,592,"proto.getPropertyType(""bar"").toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,595,public void testAbstractMethod2() {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,596,testSame(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,597,"""/** @type {!Function} */ var abstractMethod;"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,598,"""/** @param {number} x */ var y = abstractMethod;"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,599,assertEquals(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,600,"""Function"","
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,601,"findNameType(""y"", globalScope).toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,602,assertEquals(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,603,"""function (number): ?"","
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,604,"globalScope.getVar(""y"").getType().toString());"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,607,public void testAbstractMethod3() {
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,608,testSame(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,609,"""/** @type {!Function} */ var abstractMethod;"" +"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,610,"""/** @param {number} x */ var y = abstractMethod; y;"");"
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,611,assertEquals(
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,612,"""function (number): ?"","
True,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,613,"findNameType(""y"", globalScope).toString());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,2,* Copyright 2009 Google Inc.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,17,package com.google.javascript.jscomp.parsing;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,19,import com.google.javascript.jscomp.mozilla.rhino.CompilerEnvirons;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,20,import com.google.javascript.jscomp.mozilla.rhino.Parser;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,21,import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,22,import com.google.javascript.jscomp.testing.TestErrorReporter;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,23,import com.google.javascript.rhino.JSDocInfo;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,24,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,25,import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,28,* Tests {@link IRFactory}.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,30,public class IRFactoryTest extends BaseJSTypeTestCase {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,32,public void testScript() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,33,"parse("""");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,36,public void testName() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,37,"parse(""a"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,40,public void testArrayLiteral() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,41,"parse(""[a, b]"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,44,public void testArrayLiteral2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,45,"parse(""[a, , b]"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,48,public void testArrayLiteral3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,49,"parse(""[a, undefined, b]"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,52,public void testArrayLiteral4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,53,"parse(""[,,,a,,b]"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,56,public void testAssignment() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,57,"parse(""a = b"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,60,public void testAssignment2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,61,"parse(""a += b"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,64,public void testInfix() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,65,"parse(""a + b"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,68,public void testScope() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,69,"parse(""{ a; b; c; }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,72,public void testConditional() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,73,"parse(""a ? b : c"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,76,public void testEmpty() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,77,"parse("";;"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,80,public void testIf() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,81,"parse(""if (a) { b }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,84,public void testIf2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,85,"parse(""if (a) { b } else { c }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,88,public void testNumber() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,89,"parse(""0"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,92,public void testNumber2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,93,"parse(""1.2"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,96,public void testString() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,97,"parse(""'a'"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,100,public void testString2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,101,"parse(""\""a\"""");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,104,public void testUnary() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,105,"parse(""-a"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,108,public void testUnary2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,109,"parse(""a++"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,112,public void testUnary3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,113,"parse(""++a"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,116,public void testVar() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,117,"parse(""var a = 1"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,120,public void testVar2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,121,"parse(""var a = 1, b = 2"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,124,public void testVar3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,125,"parse(""var a, b = 1"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,128,public void testElementGet() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,129,"parse(""a[i]"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,132,public void testPropertyGet() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,133,"parse(""a.b"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,136,public void testRegexp() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,137,"parse(""/ab+c/"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,140,public void testRegexp2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,141,"parse(""/ab+c/g"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,144,public void testFunctionCall() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,145,"parse(""a()"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,148,public void testFunctionCall2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,149,"parse(""a(b)"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,152,public void testFunctionCall3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,153,"parse(""a(b, c)"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,156,public void testNew() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,157,"parse(""new A()"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,160,public void testNew2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,161,"parse(""new A(b)"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,164,public void testNew3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,165,"parse(""new A(b, c)"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,168,public void testTry() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,169,"parse(""try { a(); } catch (e) { b(); }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,172,public void testTry2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,173,"parse(""try { a(); } finally { b(); }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,176,public void testTry3() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,177,"parse(""try { a(); } catch (e) { b(); } finally { c(); }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,180,public void testTry4() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,181,"parse(""try { a(); }"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,182,"""catch (e if e == 'b') { b(); } "" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,183,"""catch (e if e == 'c') { c(); }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,186,public void testTry5() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,187,"parse(""try { a(); }"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,188,"""catch (e if e == 'b') { b(); } "" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,189,"""catch (e if e == 'c') { c(); } "" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,190,"""catch (e) { d(); } "" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,191,"""finally { f(); }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,194,public void testFunction() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,195,"parse(""function f() {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,198,public void testFunction2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,199,"parse(""function() {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,202,public void testFunction3() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,203,"parse(""function f(a) {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,206,public void testFunction4() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,207,"parse(""function(a) {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,210,public void testFunction5() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,211,"parse(""function f(a, b) {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,214,public void testFunction6() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,215,"parse(""function(a, b) {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,218,public void testReturn() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,219,"parse(""function() {return 1;}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,222,public void testReturn2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,223,"parse(""function() {return;}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,226,public void testReturn3() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,227,"parse(""function(){return x?1:2}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,230,public void testThrow() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,231,"parse(""throw e"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,234,public void testWith() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,235,"parse(""with (a) { b }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,238,public void testObjectLiteral() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,239,"parse(""var o = {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,242,public void testObjectLiteral2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,243,"parse(""var o = {a: 1}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,246,public void testObjectLiteral3() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,247,"parse(""var o = {a: 1, b: 2}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,250,public void testObjectLiteral4() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,251,"parse(""var o = {1: 'a'}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,254,public void testObjectLiteral5() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,255,"parse(""var o = {'a': 'a'}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,258,public void testKeywordLiteral() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,259,"parse(""true"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,262,public void testWhile() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,263,"parse(""while (!a) { a--; }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,266,public void testParen() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,267,"parse(""(a)"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,270,public void testParen2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,271,"parse(""(1+1)*2"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,274,public void testFor() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,275,"parse(""for (var i = 0; i < n; i++) { a(i); }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,278,public void testForIn() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,279,"parse(""for (i in a) { b(i); }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,282,public void testBreak() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,283,"parse(""while (true) { break; }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,286,public void testContinue() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,287,"parse(""while (true) { continue; }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,290,public void testDoLoop() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,291,"parse(""do { a() } while (b());"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,294,public void testLabel() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,295,"parse(""foo: bar"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,298,public void testLabel2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,299,"parse(""l: while (f()) { if (g()) continue l;}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,302,public void testLabel3() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,303,"parse(""Foo:Bar:X:{ break Bar; }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,306,public void testSwitch() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,307,"parse(""switch (e) {"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,308,"""case 'a': a(); break;"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,309,"""case 'b': b();"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,310,"""case 'c': c(); }"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,313,public void testSwitch2() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,314,"parse(""switch (e) { case 'a': a(); break; default: b();}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,317,public void testSwitch3() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,318,"parse(""function(){switch(x){default:case 1:return 2}}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,321,public void testDebugger() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,322,"parse(""debugger;"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,325,public void testCommentPositions() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,326,"Node root = newParse(""/** @param {string} x */function a(x) {};"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,327,"""/** @param {string} x */function b(x) {}"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,328,Node a = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,329,Node b = root.getLastChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,330,"assertMarkerPosition(a, 0, 4);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,331,"assertMarkerPosition(b, 0, 45);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,334,public void testLiteralLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,335,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,336,"""\nvar d =\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,337,"""    \""foo\"";\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,338,"""var e =\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,339,"""    1;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,340,"""var f = \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,341,"""    1.2;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,342,"""var g = \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,343,"""    2e5;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,344,"""var h = \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,345,"""    'bar';\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,347,Node firstStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,348,Node firstLiteral = firstStmt.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,349,Node secondStmt = firstStmt.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,350,Node secondLiteral = secondStmt.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,351,Node thirdStmt = secondStmt.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,352,Node thirdLiteral = thirdStmt.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,353,Node fourthStmt = thirdStmt.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,354,Node fourthLiteral = fourthStmt.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,355,Node fifthStmt = fourthStmt.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,356,Node fifthLiteral = fifthStmt.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,358,"assertNodePosition(2, 4, firstLiteral);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,359,"assertNodePosition(4, 4, secondLiteral);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,360,"assertNodePosition(6, 4, thirdLiteral);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,361,"assertNodePosition(8, 4, fourthLiteral);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,362,"assertNodePosition(10, 4, fifthLiteral);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,365,public void testSwitchLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,366,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,367,"""\nswitch (a) {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,368,"""  //{\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,369,"""   case 1:\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,370,"""     b++;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,371,"""   case 2:\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,372,"""   default:\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,373,"""     b--;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,374,"""  }\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,376,Node switchStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,377,Node switchVar = switchStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,378,Node firstCase = switchVar.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,379,Node caseArg = firstCase.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,380,Node caseBody = caseArg.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,381,Node caseExprStmt = caseBody.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,382,Node incrExpr = caseExprStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,383,Node incrVar = incrExpr.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,384,Node secondCase = firstCase.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,385,Node defaultCase = secondCase.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,387,"assertNodePosition(1, 0, switchStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,388,"assertNodePosition(1, 8, switchVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,389,"assertNodePosition(3, 3, firstCase);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,390,"assertNodePosition(3, 8, caseArg);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,391,"assertNodePosition(3, 3, caseBody);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,392,"assertNodePosition(4, 5, caseExprStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,393,"assertNodePosition(4, 5, incrExpr);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,394,"assertNodePosition(4, 5, incrVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,395,"assertNodePosition(5, 3, secondCase);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,396,"assertNodePosition(6, 3, defaultCase);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,399,public void testFunctionParamLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,400,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,401,"""\nfunction\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,402,"""     foo(a,\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,403,"""     b,\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,404,"""     c)\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,405,"""{}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,407,Node function = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,408,Node functionName = function.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,409,Node params = functionName.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,410,Node param1 = params.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,411,Node param2 = param1.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,412,Node param3 = param2.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,413,Node body = params.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,415,"assertNodePosition(2, 5, function);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,416,"assertNodePosition(2, 5, functionName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,417,// params corresponds to the LP token.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,418,// Can't be on a separate line because of inferred
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,419,// semicolons.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,420,"assertNodePosition(2, 8, params);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,421,"assertNodePosition(2, 9, param1);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,422,"assertNodePosition(3, 5, param2);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,423,"assertNodePosition(4, 5, param3);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,424,"assertNodePosition(5, 0, body);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,427,public void testVarDeclLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,428,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,429,"""\nvar\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,430,"""    a =\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,431,"""    3\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,432,Node varDecl = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,433,Node varName = varDecl.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,434,Node varExpr = varName.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,436,"assertNodePosition(1, 0, varDecl);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,437,"assertNodePosition(2, 4, varName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,438,"assertNodePosition(3, 4, varExpr);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,441,public void testReturnLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,442,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,443,"""\nfunction\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,444,"""    foo(\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,445,"""    a,\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,446,"""    b,\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,447,"""    c) {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,448,"""    return\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,449,"""    4;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,450,"""}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,452,Node function = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,453,Node functionName = function.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,454,Node params = functionName.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,455,Node body = params.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,456,Node returnStmt = body.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,457,Node exprStmt = returnStmt.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,458,Node returnVal = exprStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,460,"assertNodePosition(6, 4, returnStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,461,"assertNodePosition(7, 4, exprStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,462,"assertNodePosition(7, 4, returnVal);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,465,public void testLinenoFor() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,466,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,467,"""\nfor(\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,468,""";\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,469,""";\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,470,""") {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,471,"""}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,473,Node forNode = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,474,Node initClause= forNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,475,Node condClause = initClause.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,476,Node incrClause = condClause.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,478,"assertNodePosition(1, 0, forNode);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,479,"assertNodePosition(2, 0, initClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,480,"assertNodePosition(3, 0, condClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,481,// TODO(user) Incorrectly gets charno position when EmptyExpression
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,482,"// has its absolute position on the carriage return.  For now, the"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,483,// line number gets reported correctly (on the next line) but the
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,484,"// character position is -1, so the overall line/char pair in our tree"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,485,// is -1.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,486,"//assertNodePosition(4, 0, incrClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,489,public void testBinaryExprLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,490,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,491,"""\nvar d = a\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,492,"""    + \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,493,"""    b;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,494,"""var\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,495,"""    e =\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,496,"""    a +\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,497,"""    c;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,498,"""var f = b\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,499,"""    / c;\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,501,Node firstVarDecl = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,502,Node firstVar = firstVarDecl.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,503,Node firstVarAdd = firstVar.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,505,Node secondVarDecl = firstVarDecl.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,506,Node secondVar = secondVarDecl.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,507,Node secondVarAdd = secondVar.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,509,Node thirdVarDecl = secondVarDecl.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,510,Node thirdVar = thirdVarDecl.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,511,Node thirdVarAdd = thirdVar.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,513,"assertNodePosition(1, 0, firstVarDecl);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,514,"assertNodePosition(1, 4, firstVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,515,"assertNodePosition(2, 4, firstVarAdd);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,516,"assertNodePosition(1, 8, firstVarAdd.getFirstChild());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,517,"assertNodePosition(3, 4, firstVarAdd.getLastChild());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,519,"assertNodePosition(4, 0, secondVarDecl);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,520,"assertNodePosition(5, 4, secondVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,521,"assertNodePosition(6, 6, secondVarAdd);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,522,"assertNodePosition(6, 4, secondVarAdd.getFirstChild());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,523,"assertNodePosition(7, 4, secondVarAdd.getLastChild());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,525,"assertNodePosition(8, 0, thirdVarDecl);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,526,"assertNodePosition(8, 4, thirdVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,527,"assertNodePosition(9, 4, thirdVarAdd);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,528,"assertNodePosition(8, 8, thirdVarAdd.getFirstChild());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,529,"assertNodePosition(9, 6, thirdVarAdd.getLastChild());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,532,public void testPrefixLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,533,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,534,"""\na++;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,535,"""--\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,536,"""b;\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,538,Node firstStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,539,Node secondStmt = firstStmt.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,540,Node firstOp = firstStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,541,Node secondOp = secondStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,543,"assertNodePosition(1, 0, firstOp);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,544,"assertNodePosition(2, 0, secondOp);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,547,public void testIfLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,548,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,549,"""\nif\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,550,"""  (a == 3)\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,551,"""{\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,552,"""  b = 0;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,553,"""}\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,554,"""  else\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,555,"""{\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,556,"""  c = 1;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,557,"""}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,559,Node ifStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,560,Node eqClause = ifStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,561,Node thenClause = eqClause.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,562,Node elseClause = thenClause.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,564,"assertNodePosition(1, 0, ifStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,565,"assertNodePosition(2, 5, eqClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,566,"assertNodePosition(3, 0, thenClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,567,"assertNodePosition(7, 0, elseClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,570,public void testTryLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,571,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,572,"""\ntry {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,573,"""  var x = 1;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,574,"""} catch\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,575,"""   (err)\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,576,"""{\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,577,"""} finally {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,578,"""  var y = 2;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,579,"""}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,581,Node tryStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,582,Node tryBlock = tryStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,583,Node catchBlock = tryBlock.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,584,Node catchVarBlock = catchBlock.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,585,Node catchVar = catchVarBlock.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,586,Node finallyBlock = catchBlock.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,587,Node finallyStmt = finallyBlock.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,589,"assertNodePosition(1, 0, tryStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,590,"assertNodePosition(1, 4, tryBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,591,"assertNodePosition(3, 2, catchVarBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,592,"assertNodePosition(4, 4, catchVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,593,"assertNodePosition(3, 0, catchBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,594,"assertNodePosition(6, 10, finallyBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,595,"assertNodePosition(7, 2, finallyStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,598,public void testHookLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,599,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,600,"""\na\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,601,"""?\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,602,"""b\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,603,""":\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,604,"""c\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,605,""";\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,607,Node hookExpr = root.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,608,Node condExpr = hookExpr.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,609,Node thenExpr = condExpr.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,610,Node elseExpr = thenExpr.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,612,"assertNodePosition(2, 0, hookExpr);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,613,"assertNodePosition(1, 0, condExpr);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,614,"assertNodePosition(3, 0, thenExpr);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,615,"assertNodePosition(5, 0, elseExpr);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,618,public void testLabelLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,619,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,620,"""\nfoo:\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,621,"""a = 1;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,622,"""bar:\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,623,"""b = 2;\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,625,Node firstStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,626,Node secondStmt = firstStmt.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,628,"assertNodePosition(1, 0, firstStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,629,"assertNodePosition(3, 0, secondStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,632,public void testCompareLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,633,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,634,"""\na\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,635,"""<\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,636,"""b\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,638,Node condClause = root.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,639,Node lhs = condClause.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,640,Node rhs = lhs.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,642,"assertNodePosition(2, 0, condClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,643,"assertNodePosition(1, 0, lhs);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,644,"assertNodePosition(3, 0, rhs);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,647,public void testEqualityLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,648,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,649,"""\na\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,650,"""==\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,651,"""b\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,653,Node condClause = root.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,654,Node lhs = condClause.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,655,Node rhs = lhs.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,657,"assertNodePosition(2, 0, condClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,658,"assertNodePosition(1, 0, lhs);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,659,"assertNodePosition(3, 0, rhs);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,662,public void testPlusEqLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,663,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,664,"""\na\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,665,"""+=\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,666,"""b\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,668,Node condClause = root.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,669,Node lhs = condClause.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,670,Node rhs = lhs.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,672,"assertNodePosition(2, 0, condClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,673,"assertNodePosition(1, 0, lhs);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,674,"assertNodePosition(3, 0, rhs);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,677,public void testCommaLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,678,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,679,"""\na,\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,680,"""b,\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,681,"""c;\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,683,Node statement = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,684,Node comma1 = statement.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,685,Node comma2 = comma1.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,686,Node cRef = comma2.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,687,Node aRef = comma2.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,688,Node bRef = aRef.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,690,"assertNodePosition(1, 1, comma2);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,691,"assertNodePosition(1, 0, aRef);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,692,"assertNodePosition(2, 0, bRef);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,693,"assertNodePosition(3, 0, cRef);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,696,public void testRegexpLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,697,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,698,"""\nvar path =\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,699,"""replace(\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,700,"""/a/g,"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,701,"""'/');\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,703,Node firstVarDecl = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,704,Node firstVar = firstVarDecl.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,705,Node firstInitializer = firstVar.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,706,Node callNode = firstVar.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,707,Node fnName = callNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,708,Node regexObject = fnName.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,709,Node aString = regexObject.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,710,Node endRegexString = regexObject.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,712,"assertNodePosition(1, 0, firstVarDecl);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,713,"assertNodePosition(1, 4, firstVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,714,"assertNodePosition(2, 7, callNode);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,715,"assertNodePosition(2, 0, fnName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,716,"assertNodePosition(3, 0, regexObject);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,717,"assertNodePosition(3, 0, aString);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,718,"assertNodePosition(3, 5, endRegexString);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,721,public void testNestedOr() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,722,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,723,"""\nif (a && \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,724,"""    b() || \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,725,"""    /* comment */\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,726,"""    c) {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,727,"""}\n"""
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,730,Node ifStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,731,Node orClause = ifStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,732,Node andClause = orClause.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,733,Node cName = andClause.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,735,"assertNodePosition(1, 0, ifStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,736,"assertNodePosition(2, 8, orClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,737,"assertNodePosition(1, 6, andClause);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,738,"assertNodePosition(4, 4, cName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,742,public void testBitwiseOps() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,743,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,744,"""\nif (a & \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,745,"""    b() | \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,746,"""    /* comment */\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,747,"""    c) {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,748,"""}\n"""
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,751,Node ifStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,752,Node bitOr = ifStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,753,Node bitAnd = bitOr.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,754,Node cName = bitAnd.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,756,"assertNodePosition(1, 0, ifStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,757,"assertNodePosition(2, 8, bitOr);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,758,"assertNodePosition(1, 6, bitAnd);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,759,"assertNodePosition(4, 4, cName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,763,public void testObjectLitLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,764,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,765,"""\nvar foo =\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,766,"""{ \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,767,"""'A' : 'A', \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,768,"""'B' : 'B', \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,769,"""'C' :\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,770,"""    'C' \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,771,"""};\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,773,Node firstVarDecl = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,774,Node firstVar = firstVarDecl.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,775,Node firstObjectLit = firstVar.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,776,Node firstKey = firstObjectLit.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,777,Node firstValue = firstKey.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,779,Node secondKey = firstValue.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,780,Node secondValue = secondKey.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,782,Node thirdKey = secondValue.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,783,Node thirdValue = thirdKey.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,785,"assertNodePosition(1, 4, firstVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,786,"assertNodePosition(2, 0, firstObjectLit);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,788,"assertNodePosition(3, 0, firstKey);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,789,"assertNodePosition(3, 6, firstValue);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,791,"assertNodePosition(4, 0, secondKey);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,792,"assertNodePosition(4, 6, secondValue);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,794,"assertNodePosition(5, 0, thirdKey);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,795,"assertNodePosition(6, 4, thirdValue);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,798,public void testTryWithoutCatchLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,799,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,800,"""\ntry {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,801,"""  var x = 1;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,802,"""} finally {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,803,"""  var y = 2;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,804,"""}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,806,Node tryStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,807,Node tryBlock = tryStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,808,Node catchBlock = tryBlock.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,809,Node finallyBlock = catchBlock.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,810,Node finallyStmt = finallyBlock.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,812,"assertNodePosition(1, 0, tryStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,813,"assertNodePosition(1, 4, tryBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,814,"assertNodePosition(3, 0, catchBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,815,"assertNodePosition(3, 10, finallyBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,816,"assertNodePosition(4, 2, finallyStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,819,public void testTryWithoutFinallyLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,820,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,821,"""\ntry {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,822,"""  var x = 1;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,823,"""} catch (ex) {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,824,"""  var y = 2;\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,825,"""}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,827,Node tryStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,828,Node tryBlock = tryStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,829,Node catchBlock = tryBlock.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,830,Node catchStmt = catchBlock.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,831,Node exceptionVar = catchStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,832,Node catchCondition = exceptionVar.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,833,Node exceptionBlock = catchCondition.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,834,Node varDecl = exceptionBlock.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,837,"assertNodePosition(1, 0, tryStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,838,"assertNodePosition(1, 4, tryBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,839,"assertNodePosition(3, 0, catchBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,840,"assertNodePosition(3, 2, catchStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,841,"assertNodePosition(3, 9, exceptionVar);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,842,"assertNodePosition(3, 9, catchCondition);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,843,"assertNodePosition(3, 13, exceptionBlock);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,844,"assertNodePosition(4, 2, varDecl);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,847,public void testMultilineEqLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,848,Node  root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,849,"""\nif\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,850,"""    (((a == \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,851,"""  3) && \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,852,"""  (b == 2)) || \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,853,""" (c == 1)) {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,854,"""}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,855,Node ifStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,856,Node orTest = ifStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,857,Node andTest = orTest.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,858,Node cTest = andTest.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,859,Node aTest = andTest.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,860,Node bTest = aTest.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,862,"assertNodePosition(1, 0, ifStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,863,"assertNodePosition(4, 12, orTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,864,"assertNodePosition(3, 5, andTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,865,"assertNodePosition(2, 9, aTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,866,"assertNodePosition(4, 5, bTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,867,"assertNodePosition(5, 4, cTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,870,public void testMultilineBitTestLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,871,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,872,"""\nif (\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,873,"""      ((a \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,874,"""        | 3 \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,875,"""       ) == \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,876,"""       (b \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,877,"""        & 2)) && \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,878,"""      ((a \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,879,"""         ^ 0xffff) \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,880,"""       != \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,881,"""       (c \n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,882,"""        << 1))) {\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,883,"""}\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,885,Node ifStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,886,Node andTest = ifStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,887,Node eqTest = andTest.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,888,Node notEqTest = eqTest.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,890,Node bitOrTest = eqTest.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,891,Node bitAndTest = bitOrTest.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,893,Node bitXorTest = notEqTest.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,894,Node bitShiftTest = bitXorTest.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,896,"assertNodePosition(1, 0, ifStmt);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,898,"assertNodePosition(4, 9, eqTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,899,"assertNodePosition(9, 7, notEqTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,901,"assertNodePosition(3, 8, bitOrTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,902,"assertNodePosition(6, 8, bitAndTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,903,"assertNodePosition(8, 9, bitXorTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,904,"assertNodePosition(11, 8, bitShiftTest);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,907,public void testCallLocation() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,908,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,909,"""\na.\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,910,"""b.\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,911,"""cccc(1);\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,913,Node exprStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,914,Node functionCall = exprStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,915,Node functionProp = functionCall.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,916,Node firstNameComponent = functionProp.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,917,Node lastNameComponent = firstNameComponent.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,919,"assertNodePosition(3, 4, functionCall);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,920,// TODO(user) New Rhino doesn't keep the position of the dot handy.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,921,// New Rhino treats the location of the qualified name as the beginning of
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,922,// the whole name.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,923,"// assertNodePosition(1, 0, firstNameComponent);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,924,"assertNodePosition(3, 0, lastNameComponent);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,927,public void testLinenoDeclaration() {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,928,Node root = newParse(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,929,"""\na.\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,930,"""b=\n"" +"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,931,"""function() {};\n"");"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,933,Node exprStmt = root.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,934,Node fnAssignment =  exprStmt.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,935,Node aDotbName = fnAssignment.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,936,Node aName = aDotbName.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,937,Node bName = aName.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,938,Node fnNode = aDotbName.getNext();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,939,Node fnName = fnNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,941,"assertNodePosition(2, 1, fnAssignment);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,942,// TODO(user) New Rhino doesn't keep track of the position of the dot.
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,943,"//assertNodePosition(1, 1, aDotbName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,944,"assertNodePosition(1, 0, aName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,945,"assertNodePosition(2, 0, bName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,946,"assertNodePosition(3, 8, fnNode);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,947,"assertNodePosition(3, 8, fnName);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,950,"private void assertMarkerPosition(Node n, int lineno, int charno) {"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,951,int count = 0;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,952,for (JSDocInfo.Marker marker : n.getJSDocInfo().getMarkers()) {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,953,"assertEquals(lineno, marker.annotation.getStartLine());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,954,"assertEquals(charno, marker.annotation.getPositionOnStartLine());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,955,count++;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,957,"assertEquals(1, count);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,960,"private void assertNodePosition(int lineno, int charno, Node n) {"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,961,"assertEquals(""Line number"", lineno, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,962,"assertEquals(""Column position"", charno, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,965,private void parse(String string) {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,966,String compare = newParse(string).checkTreeEquals(oldParse(string));
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,967,"assertTrue(compare, compare == null);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,970,private Node newParse(String string) {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,971,CompilerEnvirons environment = new CompilerEnvirons();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,973,environment.setRecordingComments(true);
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,974,environment.setRecordingLocalJsDocComments(true);
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,976,Parser p = new Parser(environment);
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,977,"AstRoot script = p.parse(string, null, 0);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,979,Config config = new Config(
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,980,"registry, ParserRunner.getAnnotationNames(), true);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,981,"Node root = IRFactory.transformTree(script, string, config,"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,982,"new TestErrorReporter(null, null));"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,984,return root;
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,987,private Node oldParse(String string) {
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,988,com.google.javascript.rhino.CompilerEnvirons environment =
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,989,new com.google.javascript.rhino.CompilerEnvirons();
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,991,environment.setParseJSDoc(true);
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,993,com.google.javascript.rhino.Parser p =
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,994,"new com.google.javascript.rhino.Parser(environment, null);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,996,"Node root = p.parse(string, null, 0);"
True,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,998,return root;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2,* Copyright 2007 Google Inc.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,17,package com.google.javascript.jscomp.parsing;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,19,import com.google.common.collect.Sets;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,20,import com.google.javascript.jscomp.mozilla.rhino.CompilerEnvirons;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,21,import com.google.javascript.jscomp.mozilla.rhino.Parser;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,22,import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,23,import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,24,import com.google.javascript.jscomp.testing.TestErrorReporter;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,25,import com.google.javascript.rhino.JSDocInfo;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,26,import com.google.javascript.rhino.JSDocInfo.Visibility;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,27,import com.google.javascript.rhino.JSTypeExpression;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,28,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,29,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,30,import com.google.javascript.rhino.jstype.JSType;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,31,import com.google.javascript.rhino.jstype.NamedType;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,32,import com.google.javascript.rhino.jstype.ObjectType;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,33,import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,35,import java.util.Collection;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,36,import java.util.List;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,37,import java.util.Set;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,39,public class JsDocInfoParserTest extends BaseJSTypeTestCase {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,41,private Set<String> extraAnnotations;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,43,@Override
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,44,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,45,super.setUp();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,46,extraAnnotations = Sets.newHashSet(ParserRunner.getAnnotationNames());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,49,public void testParseTypeViaStatic1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,50,"Node typeNode = parseType(""null"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,51,"assertTypeEquals(NULL_TYPE, typeNode);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,54,public void testParseTypeViaStatic2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,55,"Node typeNode = parseType(""string"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,56,"assertTypeEquals(STRING_TYPE, typeNode);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,59,public void testParseTypeViaStatic3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,60,"Node typeNode = parseType(""!Date"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,61,"assertTypeEquals(DATE_TYPE, typeNode);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,64,public void testParseTypeViaStatic4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,65,"Node typeNode = parseType(""boolean|string"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,66,"assertTypeEquals(createUnionType(BOOLEAN_TYPE, STRING_TYPE), typeNode);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,69,public void testParseInvalidTypeViaStatic() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,70,"Node typeNode = parseType(""sometype.<anothertype"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,71,assertNull(typeNode);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,74,public void testParseInvalidTypeViaStatic2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,75,"Node typeNode = parseType("""");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,76,assertNull(typeNode);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,79,public void testParseNamedType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,80,"assertNull(parse(""@type null"", ""Unexpected end of file""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,83,public void testParseNamedType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,84,"JSDocInfo info = parse(""@type null*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,85,"assertTypeEquals(NULL_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,88,public void testParseNamedType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,89,"JSDocInfo info = parse(""@type {string}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,90,"assertTypeEquals(STRING_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,93,public void testParseNamedType4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,94,// Multi-line @type.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,95,"JSDocInfo info = parse(""@type \n {string}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,96,"assertTypeEquals(STRING_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,99,public void testTypedefType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,100,"JSDocInfo info = parse(""@typedef string */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,101,assertTrue(info.hasTypedefType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,102,"assertTypeEquals(STRING_TYPE, info.getTypedefType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,105,public void testTypedefType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,106,"JSDocInfo info = parse(""@typedef \n {string}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,107,assertTrue(info.hasTypedefType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,108,"assertTypeEquals(STRING_TYPE, info.getTypedefType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,111,public void testTypedefType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,112,"JSDocInfo info = parse(""@typedef \n {(string|number)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,113,assertTrue(info.hasTypedefType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,114,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,115,"createUnionType(NUMBER_TYPE, STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,116,info.getTypedefType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,119,public void testParseStringType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,120,"assertTypeEquals(STRING_TYPE, parse(""@type {string}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,123,public void testParseStringType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,124,"assertTypeEquals(STRING_OBJECT_TYPE, parse(""@type {!String}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,127,public void testParseBooleanType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,128,"assertTypeEquals(BOOLEAN_TYPE, parse(""@type {boolean}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,131,public void testParseBooleanType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,132,"assertTypeEquals(BOOLEAN_OBJECT_TYPE, parse(""@type {!Boolean}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,135,public void testParseNumberType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,136,"assertTypeEquals(NUMBER_TYPE, parse(""@type {number}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,139,public void testParseNumberType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,140,"assertTypeEquals(NUMBER_OBJECT_TYPE, parse(""@type {!Number}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,143,public void testParseNullType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,144,"assertTypeEquals(NULL_TYPE, parse(""@type {null}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,147,public void testParseNullType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,148,"assertTypeEquals(NULL_TYPE, parse(""@type {Null}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,151,public void testParseAllType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,152,"testParseType(""*"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,155,public void testParseAllType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,156,"testParseType(""*?"", ""*"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,159,public void testParseObjectType() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,160,"assertTypeEquals(OBJECT_TYPE, parse(""@type {!Object}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,163,public void testParseDateType() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,164,"assertTypeEquals(DATE_TYPE, parse(""@type {!Date}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,167,public void testParseFunctionType() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,168,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,169,"createNullableType(U2U_CONSTRUCTOR_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,170,"parse(""@type {Function}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,173,public void testParseRegExpType() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,174,"assertTypeEquals(REGEXP_TYPE, parse(""@type {!RegExp}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,177,public void testParseErrorTypes() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,178,"assertTypeEquals(ERROR_TYPE, parse(""@type {!Error}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,179,"assertTypeEquals(URI_ERROR_TYPE, parse(""@type {!URIError}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,180,"assertTypeEquals(EVAL_ERROR_TYPE, parse(""@type {!EvalError}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,181,"assertTypeEquals(REFERENCE_ERROR_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,182,"parse(""@type {!ReferenceError}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,183,"assertTypeEquals(TYPE_ERROR_TYPE, parse(""@type {!TypeError}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,184,"assertTypeEquals(RANGE_ERROR_TYPE, parse(""@type {!RangeError}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,185,"assertTypeEquals(SYNTAX_ERROR_TYPE, parse(""@type {!SyntaxError}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,188,public void testParseUndefinedType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,189,"assertTypeEquals(VOID_TYPE, parse(""@type {undefined}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,192,public void testParseUndefinedType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,193,"assertTypeEquals(VOID_TYPE, parse(""@type {Undefined}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,196,public void testParseUndefinedType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,197,"assertTypeEquals(VOID_TYPE, parse(""@type {void}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,200,public void testParseParametrizedType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,201,"JSDocInfo info = parse(""@type !Array.<number> */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,202,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,205,public void testParseParametrizedType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,206,"JSDocInfo info = parse(""@type {!Array.<number>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,207,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,210,public void testParseParametrizedType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,211,"JSDocInfo info = parse(""@type !Array.<(number,null)>*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,212,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,215,public void testParseParametrizedType4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,216,"JSDocInfo info = parse(""@type {!Array.<(number|null)>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,217,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,220,public void testParseParametrizedType5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,221,"JSDocInfo info = parse(""@type {!Array.<Array.<(number|null)>>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,222,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,225,public void testParseParametrizedType6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,226,"JSDocInfo info = parse(""@type {!Array.<!Array.<(number|null)>>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,227,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,230,public void testParseParametrizedType7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,231,"JSDocInfo info = parse(""@type {!Array.<function():Date>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,232,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,235,public void testParseParametrizedType8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,236,"JSDocInfo info = parse(""@type {!Array.<function():!Date>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,237,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,240,public void testParseParametrizedType9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,241,"JSDocInfo info = parse(""@type {!Array.<Date|number>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,242,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,245,public void testParseParametrizedType10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,246,"JSDocInfo info = parse(""@type {!Array.<Date|number|boolean>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,247,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,250,public void testParseParamterizedType11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,251,"JSDocInfo info = parse(""@type {!Object.<number>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,252,"assertTypeEquals(OBJECT_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,253,"assertParameterTypeEquals(NUMBER_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,256,public void testParseParamterizedType12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,257,"JSDocInfo info = parse(""@type {!Object.<string,number>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,258,"assertTypeEquals(OBJECT_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,259,"assertParameterTypeEquals(NUMBER_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,260,"assertIndexTypeEquals(STRING_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,263,public void testParseUnionType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,264,"JSDocInfo info = parse(""@type {(boolean,null)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,265,"assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,268,public void testParseUnionType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,269,"JSDocInfo info = parse(""@type {boolean|null}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,270,"assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,273,public void testParseUnionType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,274,"JSDocInfo info = parse(""@type {boolean||null}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,275,"assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,278,public void testParseUnionType4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,279,"JSDocInfo info = parse(""@type {(Array.<boolean>,null)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,280,"assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,283,public void testParseUnionType5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,284,"JSDocInfo info = parse(""@type {(null, Array.<boolean>)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,285,"assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,288,public void testParseUnionType6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,289,"JSDocInfo info = parse(""@type {Array.<boolean>|null}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,290,"assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,293,public void testParseUnionType7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,294,"JSDocInfo info = parse(""@type {null|Array.<boolean>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,295,"assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,298,public void testParseUnionType8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,299,"JSDocInfo info = parse(""@type {null||Array.<boolean>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,300,"assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,303,public void testParseUnionType9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,304,"JSDocInfo info = parse(""@type {Array.<boolean>||null}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,305,"assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,308,public void testParseUnionType10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,309,"parse(""@type {string|}*/"", ""type not recognized due to syntax error"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,312,public void testParseUnionType11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,313,"parse(""@type {(string,)}*/"", ""type not recognized due to syntax error"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,316,public void testParseUnionType12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,317,"parse(""@type {()}*/"", ""type not recognized due to syntax error"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,320,public void testParseUnionType13() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,321,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,322,"""(function(this:Date),function(this:String):number)"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,323,"""(function (this:Date): ?|function (this:String): number)"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,326,public void testParseUnionType14() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,327,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,328,"""(function(...[function(number):boolean]):number)|"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,329,"""function(this:String, string):number"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,330,"""(function (...[function (number): boolean]): number|"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,331,"""function (this:String, string): number)"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,334,public void testParseUnionType15() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,335,"testParseType(""*|number"", ""*"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,338,public void testParseUnionType16() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,339,"testParseType(""number|*"", ""*"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,342,public void testParseUnionType17() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,343,"testParseType(""string|number|*"", ""*"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,346,public void testParseUnionType18() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,347,"testParseType(""(string,*,number)"", ""*"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,350,public void testParseUnionTypeError1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,351,"parse(""@type {(string,|number)} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,352,"""type not recognized due to syntax error"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,355,public void testParseFunctionalType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,356,"testParseType(""function (): number"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,359,public void testParseFunctionalType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,360,"testParseType(""function (number, string): boolean"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,363,public void testParseFunctionalType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,364,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,365,"""function(this:Array)"", ""function (this:Array): ?"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,368,public void testParseFunctionalType4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,369,"testParseType(""function (...[number]): boolean"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,372,public void testParseFunctionalType5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,373,"testParseType(""function (number, ...[string]): boolean"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,376,public void testParseFunctionalType6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,377,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,378,"""function (this:Date, number): (boolean|number|string)"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,381,public void testParseFunctionalType7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,382,"testParseType(""function()"", ""function (): ?"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,385,public void testParseFunctionalType8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,386,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,387,"""function(this:Array,...[boolean])"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,388,"""function (this:Array, ...[boolean]): ?"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,391,public void testParseFunctionalType9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,392,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,393,"""function(this:Array,!Date,...[boolean?])"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,394,"""function (this:Array, Date, ...[(boolean|null)]): ?"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,397,public void testParseFunctionalType10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,398,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,399,"""function(...[Object?]):boolean?"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,400,"""function (...[(Object|null)]): (boolean|null)"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,403,public void testParseFunctionalType11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,404,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,405,"""function(...[[number]]):[number?]"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,406,"""function (...[Array]): Array"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,409,public void testParseFunctionalType12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,410,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,411,"""function(...)"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,412,"""function (...[?]): ?"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,415,public void testParseFunctionalType13() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,416,testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,417,"""function(...): void"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,418,"""function (...[?]): undefined"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,421,public void testParseFunctionalType14() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,422,"testParseType(""function (*, string, number): boolean"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,425,public void testBug1419535() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,426,"parse(""@type {function(Object, string, *)?} */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,427,"parse(""@type {function(Object, string, *)|null} */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,430,public void testParseFunctionalTypeError1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,431,"parse(""@type {function number):string}*/"", ""missing opening ("");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,434,public void testParseFunctionalTypeError2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,435,"parse(""@type {function( number}*/"", ""missing closing )"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,438,public void testParseFunctionalTypeError3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,439,"parse(""@type {function(...[number], string)}*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,440,"""variable length argument must be last"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,443,public void testParseFunctionalTypeError4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,444,"parse(""@type {function(string, ...[number], boolean):string}*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,445,"""variable length argument must be last"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,448,public void testParseFunctionalTypeError5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,449,"parse(""@type {function (thi:Array)}*/"", ""missing closing )"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,452,public void testParseFunctionalTypeError6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,453,"resolve(parse(""@type {function (this:number)}*/"").getType(),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,454,"""this type must be an object type"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,457,public void testParseFunctionalTypeError7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,458,"parse(""@type {function(...[number)}*/"", ""missing closing ]"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,461,public void testParseFunctionalTypeError8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,462,"parse(""@type {function(...number])}*/"", ""missing opening ["");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,465,public void testParseArrayType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,466,"testParseType(""[number]"", ""Array"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,469,public void testParseArrayType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,470,"testParseType(""[(number,boolean,[Object?])]"", ""Array"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,473,public void testParseArrayType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,474,"testParseType(""[[number],[string]]?"", ""(Array|null)"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,477,public void testParseArrayTypeError1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,478,"parse(""@type {[number}*/"", ""missing closing ]"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,481,public void testParseArrayTypeError2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,482,"parse(""@type {number]}*/"", ""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,485,public void testParseArrayTypeError3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,486,"parse(""@type {[(number,boolean,Object?])]}*/"", ""missing closing )"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,489,public void testParseArrayTypeError4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,490,"parse(""@type {(number,boolean,[Object?)]}*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,491,"""missing closing ]"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,494,private void testParseType(String type) throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,495,"testParseType(type, type);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,498,private void testParseType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,499,"String type, String typeExpected) throws Exception {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,500,"JSDocInfo info = parse(""@type {"" + type + ""}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,502,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,503,assertTrue(info.hasType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,504,"assertEquals(typeExpected, resolve(info.getType()).toString());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,507,public void testParseNullableModifiers1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,508,"JSDocInfo info = parse(""@type {string?}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,509,"assertTypeEquals(createNullableType(STRING_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,512,public void testParseNullableModifiers2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,513,"JSDocInfo info = parse(""@type {!Array.<string?>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,514,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,517,public void testParseNullableModifiers3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,518,"JSDocInfo info = parse(""@type {Array.<boolean>?}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,519,"assertTypeEquals(createNullableType(ARRAY_TYPE), info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,522,public void testParseNullableModifiers4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,523,"JSDocInfo info = parse(""@type {(string,boolean)?}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,524,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,525,"createNullableType(createUnionType(STRING_TYPE, BOOLEAN_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,526,info.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,529,public void testParseNullableModifiers5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,530,"JSDocInfo info = parse(""@type {(string?,boolean)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,531,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,532,"createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,533,info.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,536,public void testParseNullableModifiers6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,537,"JSDocInfo info = parse(""@type {(string,boolean?)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,538,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,539,"createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,540,info.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,543,public void testParseNullableModifiers7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,544,"JSDocInfo info = parse(""@type {string?|boolean}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,545,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,546,"createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,547,info.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,550,public void testParseNullableModifiers8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,551,"JSDocInfo info = parse(""@type {string|boolean?}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,552,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,553,"createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,554,info.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,557,public void testParseNullableModifiers9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,558,"JSDocInfo info = parse(""@type {foo.Hello.World?}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,559,assertTypeEquals(createNullableType(new NamedType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,560,"registry, ""foo.Hello.World"", null, -1, -1)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,561,info.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,564,public void testParseOptionalModifier() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,565,"JSDocInfo info = parse(""@type {function(number=)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,566,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,567,registry.createFunctionType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,568,"UNKNOWN_TYPE, createUnionType(VOID_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,569,info.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,572,public void testParseNewline1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,573,"JSDocInfo info = parse(""@type {string\n* }\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,574,"assertTypeEquals(STRING_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,577,public void testParseNewline2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,578,"JSDocInfo info = parse(""@type !Array.<\n* number\n* > */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,579,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,582,public void testParseNewline3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,583,"JSDocInfo info = parse(""@type !Array.<(number,\n* null)>*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,584,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,587,public void testParseNewline4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,588,"JSDocInfo info = parse(""@type !Array.<(number|\n* null)>*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,589,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,592,public void testParseNewline5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,593,"JSDocInfo info = parse(""@type !Array.<function(\n* )\n* :\n* Date>*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,594,"assertTypeEquals(ARRAY_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,597,public void testParseReturnType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,598,JSDocInfo info =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,599,"parse(""@return {null|string|Array.<boolean>}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,600,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,601,"createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,602,info.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,605,public void testParseReturnType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,606,JSDocInfo info =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,607,"parse(""@returns {null|(string,Array.<boolean>)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,608,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,609,"createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,610,info.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,613,public void testParseReturnType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,614,JSDocInfo info =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,615,"parse(""@return {((null||Array.<boolean>,string),boolean)}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,616,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,617,"createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,618,info.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,621,public void testParseThisType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,622,JSDocInfo info =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,623,"parse(""@this {goog.foo.Bar}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,624,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,625,"new NamedType(registry, ""goog.foo.Bar"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,626,info.getThisType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,629,public void testParseThisType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,630,JSDocInfo info =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,631,"parse(""@this goog.foo.Bar*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,632,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,633,"new NamedType(registry, ""goog.foo.Bar"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,634,info.getThisType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,637,public void testParseThisType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,638,"parse(""@type {number}\n@this goog.foo.Bar*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,639,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,642,public void testParseThisType4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,643,"resolve(parse(""@this number*/"").getThisType(),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,644,"""@this must specify an object type"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,647,public void testParseThisType5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,648,"parse(""@this {Date|Error}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,651,public void testParseThisType6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,652,"resolve(parse(""@this {Date|number}*/"").getThisType(),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,653,"""@this must specify an object type"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,656,public void testParseParam1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,657,"JSDocInfo info = parse(""@param {number} index*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,658,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,659,"assertTypeEquals(NUMBER_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,662,public void testParseParam2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,663,"JSDocInfo info = parse(""@param index*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,664,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,665,"assertEquals(null, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,668,public void testParseParam3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,669,"JSDocInfo info = parse(""@param {number} index useful comments*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,670,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,671,"assertTypeEquals(NUMBER_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,674,public void testParseParam4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,675,"JSDocInfo info = parse(""@param index useful comments*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,676,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,677,"assertEquals(null, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,680,public void testParseParam5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,681,// Test for multi-line @param.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,682,"JSDocInfo info = parse(""@param {number} \n index */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,683,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,684,"assertTypeEquals(NUMBER_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,687,public void testParseParam6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,688,// Test for multi-line @param.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,689,"JSDocInfo info = parse(""@param {number} \n * index */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,690,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,691,"assertTypeEquals(NUMBER_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,694,public void testParseParam7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,695,// Optional @param
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,696,"JSDocInfo info = parse(""@param {number=} index */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,697,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,698,"registry.createOptionalType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,699,"info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,702,public void testParseParam8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,703,// Var args @param
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,704,"JSDocInfo info = parse(""@param {...number} index */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,705,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,706,"registry.createOptionalType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,707,"info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,710,public void testParseParam9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,711,"parse(""@param {...number=} index */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,712,"""expected closing }"", ""expecting a variable name in a @param tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,715,public void testParseParam10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,716,"parse(""@param {...number index */"", ""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,719,public void testParseParam11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,720,"parse(""@param {number= index */"", ""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,723,public void testParseParam12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,724,"JSDocInfo info = parse(""@param {...number|string} index */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,725,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,726,registry.createOptionalType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,727,"registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,728,"info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,731,public void testParseParam13() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,732,"JSDocInfo info = parse(""@param {...(number|string)} index */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,733,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,734,registry.createOptionalType(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,735,"registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,736,"info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,739,public void testParseParam14() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,740,"JSDocInfo info = parse(""@param {string} [index] */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,741,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,742,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,743,"registry.createOptionalType(STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,744,"info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,747,public void testParseParam15() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,748,"JSDocInfo info = parse(""@param {string} [index */"", ""missing closing ]"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,749,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,750,"assertTypeEquals(STRING_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,753,public void testParseParam16() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,754,"JSDocInfo info = parse(""@param {string} index] */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,755,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,756,"assertTypeEquals(STRING_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,759,public void testParseParam17() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,760,"JSDocInfo info = parse(""@param {string=} [index] */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,761,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,762,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,763,"registry.createOptionalType(STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,764,"info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,767,public void testParseParam18() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,768,"JSDocInfo info = parse(""@param {...string} [index] */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,769,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,770,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,771,"registry.createOptionalType(STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,772,"info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,775,public void testParseThrows1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,776,"JSDocInfo info = parse(""@throws {number} Some number */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,777,"assertEquals(1, info.getThrownTypes().size());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,778,"assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,781,public void testParseThrows2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,782,"JSDocInfo info = parse(""@throws {number} Some number\n """
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,783,"+ ""*@throws {String} A string */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,784,"assertEquals(2, info.getThrownTypes().size());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,785,"assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,788,public void testParseRecordType1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,789,"parseFull(""/** @param {{x}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,792,public void testParseRecordType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,793,"parseFull(""/** @param {{z, y}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,796,public void testParseRecordType3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,797,"parseFull(""/** @param {{z, y, x, q, hello, thisisatest}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,800,public void testParseRecordType4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,801,"parseFull(""/** @param {{a, 'a', 'hello', 2, this, do, while, for}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,804,public void testParseRecordType5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,805,"parseFull(""/** @param {{x : hello}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,808,public void testParseRecordType6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,809,"parseFull(""/** @param {{'x' : hello}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,812,public void testParseRecordType7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,813,"parseFull(""/** @param {{'x' : !hello}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,816,public void testParseRecordType8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,817,"parseFull(""/** @param {{'x' : !hello, y : bar}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,820,public void testParseRecordType9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,821,"parseFull(""/** @param {{'x' : !hello, y : {z : bar, 3 : meh}}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,824,public void testParseRecordType10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,825,"parseFull(""/** @param {{__proto__ : moo}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,828,public void testParseRecordType11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,829,"parseFull(""/** @param {{a : b} n\n*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,830,"""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,833,public void testParseRecordType12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,834,"parseFull(""/** @param {{!hello : hey}} n\n*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,835,"""type not recognized due to syntax error"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,838,public void testParseRecordType13() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,839,"parseFull(""/** @param {{x}|number} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,842,public void testParseRecordType14() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,843,"parseFull(""/** @param {{x : y}|number} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,846,public void testParseRecordType15() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,847,"parseFull(""/** @param {{'x' : y}|number} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,850,public void testParseRecordType16() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,851,"parseFull(""/** @param {{x, y}|number} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,854,public void testParseRecordType17() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,855,"parseFull(""/** @param {{x : hello, 'y'}|number} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,858,public void testParseRecordType18() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,859,"parseFull(""/** @param {number|{x : hello, 'y'}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,862,public void testParseRecordType19() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,863,"parseFull(""/** @param {?{x : hello, 'y'}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,866,public void testParseRecordType20() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,867,"parseFull(""/** @param {!{x : hello, 'y'}} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,870,public void testParseRecordType21() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,871,"parseFull(""/** @param {{x : hello, 'y'}|boolean} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,874,public void testParseRecordType22() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,875,"parseFull(""/** @param {{x : hello, 'y'}|function()} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,878,public void testParseRecordType23() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,879,"parseFull(""/** @param {{x : function(), 'y'}|function()} n\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,882,public void testParseParamError1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,883,"parseFull(""/** @param\n*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,884,"""expecting a variable name in a @param tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,887,public void testParseParamError2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,888,"parseFull(""/** @param {Number}*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,889,"""expecting a variable name in a @param tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,892,public void testParseParamError3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,893,"parseFull(""/** @param {Number}\n*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,894,"""expecting a variable name in a @param tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,897,public void testParseParamError4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,898,"parseFull(""/** @param {Number}\n* * num */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,899,"""expecting a variable name in a @param tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,902,public void testParseParamError5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,903,"parse(""@param {number} x \n * @param {string} x */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,904,"""duplicate variable name \""x\"""");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,907,public void testParseExtends1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,908,"assertTypeEquals(STRING_OBJECT_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,909,"parse(""@extends String*/"").getBaseType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,912,public void testParseExtends2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,913,"JSDocInfo info = parse(""@extends com.google.Foo.Bar.Hello.World*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,914,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,915,"new NamedType(registry, ""com.google.Foo.Bar.Hello.World"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,916,info.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,919,public void testParseExtendsGenerics() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,920,JSDocInfo info =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,921,"parse(""@extends com.google.Foo.Bar.Hello.World.<Boolean,number>*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,922,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,923,"new NamedType(registry, ""com.google.Foo.Bar.Hello.World"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,924,info.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,927,public void testParseImplementsGenerics() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,928,// we ignore things inside <> for now
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,929,List<JSTypeExpression> interfaces =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,930,"parse(""@implements {SomeInterface.<*>} */"")"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,931,.getImplementedInterfaces();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,932,"assertEquals(1, interfaces.size());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,933,"assertTypeEquals(new NamedType(registry, ""SomeInterface"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,934,interfaces.get(0));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,937,public void testParseExtends4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,938,"assertTypeEquals(STRING_OBJECT_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,939,"parse(""@extends {String}*/"").getBaseType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,942,public void testParseExtends5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,943,"assertTypeEquals(STRING_OBJECT_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,944,"parse(""@extends {String*/"", ""expected closing }"").getBaseType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,947,public void testParseExtends6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,948,// Multi-line extends
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,949,"assertTypeEquals(STRING_OBJECT_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,950,"parse(""@extends \n * {String}*/"").getBaseType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,953,public void testParseExtendsInvalidName() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,954,"// This looks bad, but for the time being it should be ok, as"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,955,// we will not find a type with this name in the js parsed tree.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,956,"// If this is fixed in the future, change this test to check for a"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,957,// warning/error message.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,958,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,959,"new NamedType(registry, ""some_++#%$%_UglyString"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,960,"parse(""@extends {some_++#%$%_UglyString} */"").getBaseType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,963,public void testParseExtendsNullable1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,964,"parse(""@extends {Base?} */"", ""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,967,public void testParseExtendsNullable2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,968,"parse(""@extends Base? */"", ""expected end of line or comment"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,971,public void testParseEnum1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,972,"assertTypeEquals(NUMBER_TYPE, parse(""@enum*/"").getEnumParameterType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,975,public void testParseEnum2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,976,"assertTypeEquals(STRING_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,977,"parse(""@enum {string}*/"").getEnumParameterType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,980,public void testParseEnum3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,981,"assertTypeEquals(STRING_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,982,"parse(""@enum string*/"").getEnumParameterType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,985,public void testParseDesc1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,986,"assertEquals(""hello world!"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,987,"parse(""@desc hello world!*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,990,public void testParseDesc2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,991,"assertEquals(""hello world!"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,992,"parse(""@desc hello world!\n*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,995,public void testParseDesc3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,996,"assertEquals("""", parse(""@desc*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,999,public void testParseDesc4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1000,"assertEquals("""", parse(""@desc\n*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1003,public void testParseDesc5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1004,"assertEquals(""hello world!"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1005,"parse(""@desc hello\nworld!\n*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1008,public void testParseDesc6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1009,"assertEquals(""hello world!"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1010,"parse(""@desc hello\n* world!\n*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1013,public void testParseDesc7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1014,"assertEquals(""a b c"", parse(""@desc a\n\nb\nc*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1017,public void testParseDesc8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1018,"assertEquals(""a b c d"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1019,"parse(""@desc a\n      *b\n\n  *c\n\nd*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1022,public void testParseDesc9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1023,"String comment = ""@desc\n.\n,\n{\n)\n}\n|\n.<\n>\n<\n?\n~\n+\n-\n;\n:\n*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1025,"assertEquals("". , { ) } | .< > < ? ~ + - ; :"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1026,parse(comment).getDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1029,public void testParseDesc10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1030,"String comment = ""@desc\n?\n?\n?\n?*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1032,"assertEquals(""? ? ? ?"", parse(comment).getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1035,public void testParseDesc11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1036,"String comment = ""@desc :[]*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1038,"assertEquals("":[]"", parse(comment).getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1041,public void testParseDesc12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1042,"String comment = ""@desc\n:\n[\n]\n...*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1044,"assertEquals("": [ ] ..."", parse(comment).getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1047,//public void testParsePreserveWithNoBuilderGivesWarning() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1048,"//  String comment = ""@preserve Foo\nBar\n*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1049,"//  parse(comment,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1050,"//      ""@preserve or @license annotation without file to associate it with"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1053,//public void testParsePreserve() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1054,//  Node node = new Node(1);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1055,//  this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1056,"//  String comment = ""@preserve Foo\nBar\n\nBaz*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1057,//  parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1058,"//  assertEquals("" Foo\n Bar\n\n Baz"", node.getJSDocInfo().getLicense());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1061,//public void testParseLicense() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1062,//  Node node = new Node(1);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1063,//  this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1064,"//  String comment = ""@license Foo\nBar\n\nBaz*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1065,//  parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1066,"//  assertEquals("" Foo\n Bar\n\n Baz"", node.getJSDocInfo().getLicense());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1069,public void testParseDefine1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1070,"assertTypeEquals(STRING_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1071,"parse(""@define {string}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1074,public void testParseDefine2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1075,"assertTypeEquals(STRING_TYPE,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1076,"parse(""@define {string*/"", ""expected closing }"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1079,public void testParseDefine3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1080,"JSDocInfo info = parse(""@define {boolean}*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1081,assertTrue(info.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1082,assertTrue(info.isDefine());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1083,"assertTypeEquals(BOOLEAN_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1086,public void testParseDefine4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1087,"assertTypeEquals(NUMBER_TYPE, parse(""@define {number}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1090,public void testParseDefine5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1091,"assertTypeEquals(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1092,"parse(""@define {number|boolean}*/"").getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1095,public void testParseDefineErrors1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1096,"parse(""@enum {string}\n @define {string} */"", ""conflicting @define tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1099,public void testParseDefineErrors2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1100,"parse(""@define {string}\n @enum {string} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1101,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1104,public void testParseDefineErrors3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1105,"parse(""@const\n @define {string} */"", ""conflicting @define tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1108,public void testParseDefineErrors4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1109,"parse(""@type string \n @define {string} */"", ""conflicting @define tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1112,public void testParseDefineErrors5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1113,"parse(""@return {string}\n @define {string} */"", ""conflicting @define tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1116,public void testParseDefineErrors6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1117,"parse(""@define {String}*/"", ""@define tag only permits literal types"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1120,public void testParseDefineErrors7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1121,"parse(""@define {string}\n @const */"", ""conflicting @const tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1124,public void testParseDefineErrors8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1125,"parse(""@define {string}\n @type string */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1126,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1129,public void testParseNoCheck1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1130,"assertTrue(parse(""@notypecheck*/"").isNoTypeCheck());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1133,public void testParseNoCheck2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1134,"parse(""@notypecheck\n@notypecheck*/"", ""extra @notypecheck tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1137,public void testParseOverride1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1138,"assertTrue(parse(""@override*/"").isOverride());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1141,public void testParseOverride2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1142,"parse(""@override\n@override*/"", ""extra @override/@inheritDoc tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1145,public void testParseInheritDoc1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1146,"assertTrue(parse(""@inheritDoc*/"").isOverride());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1149,public void testParseInheritDoc2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1150,"parse(""@override\n@inheritDoc*/"", ""extra @override/@inheritDoc tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1153,public void testParseInheritDoc3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1154,"parse(""@inheritDoc\n@inheritDoc*/"", ""extra @override/@inheritDoc tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1157,public void testParseNoAlias1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1158,"assertTrue(parse(""@noalias*/"").isNoAlias());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1161,public void testParseNoAlias2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1162,"parse(""@noalias\n@noalias*/"", ""extra @noalias tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1165,public void testParseDeprecated1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1166,"assertTrue(parse(""@deprecated*/"").isDeprecated());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1169,public void testParseDeprecated2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1170,"parse(""@deprecated\n@deprecated*/"", ""extra @deprecated tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1173,public void testParseExport1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1174,"assertTrue(parse(""@export*/"").isExport());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1177,public void testParseExport2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1178,"parse(""@export\n@export*/"", ""extra @export tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1181,public void testParseExterns1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1182,"assertTrue(parseFileOverview(""@externs*/"").isExterns());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1185,public void testParseExterns2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1186,"parseFileOverview(""@externs\n@externs*/"", ""extra @externs tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1189,public void testParseExterns3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1190,"assertNull(parse(""@externs*/""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1193,public void testBugAnnotation() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1194,"parse(""@bug */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1197,public void testDescriptionAnnotation() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1198,"parse(""@description */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1201,public void testRegression1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1202,String comment =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1203,""" * @param {number} index the index of blah\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1204,""" * @return {boolean} whatever\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1205,""" * @private\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1208,JSDocInfo info = parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1209,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1210,"assertTypeEquals(NUMBER_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1211,"assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1212,"assertEquals(Visibility.PRIVATE, info.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1215,public void testRegression2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1216,String comment =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1217,""" * @return {boolean} whatever\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1218,""" * but important\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1219,""" *\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1220,""" * @param {number} index the index of blah\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1221,""" * some more comments here\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1222,""" * @param name the name of the guy\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1223,""" *\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1224,""" * @protected\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1227,JSDocInfo info = parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1228,"assertEquals(2, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1229,"assertTypeEquals(NUMBER_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1230,"assertEquals(null, info.getParameterType(""name""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1231,"assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1232,"assertEquals(Visibility.PROTECTED, info.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1235,public void testRegression3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1236,String comment =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1237,""" * @param mediaTag this specified whether the @media tag is ....\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1238,""" *\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1239,"""\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1240,"""@public\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1241,""" *\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1242,"""\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1243,""" **********\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1244,""" * @final\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1247,JSDocInfo info = parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1248,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1249,"assertEquals(null, info.getParameterType(""mediaTag""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1250,"assertEquals(Visibility.PUBLIC, info.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1251,assertTrue(info.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1254,public void testRegression4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1255,String comment =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1256,""" * @const\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1257,""" * @hidden\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1258,""" * @preserveTry\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1259,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1262,JSDocInfo info = parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1263,assertTrue(info.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1264,assertFalse(info.isDefine());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1265,assertTrue(info.isConstructor());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1266,assertTrue(info.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1267,assertTrue(info.shouldPreserveTry());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1270,public void testRegression5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1271,"String comment = ""@const\n@enum {string}\n@public*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1273,JSDocInfo info = parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1274,assertTrue(info.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1275,assertFalse(info.isDefine());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1276,"assertTypeEquals(STRING_TYPE, info.getEnumParameterType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1277,"assertEquals(Visibility.PUBLIC, info.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1280,public void testRegression6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1281,"String comment = ""@hidden\n@enum\n@public*/"";"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1283,JSDocInfo info = parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1284,assertTrue(info.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1285,"assertTypeEquals(NUMBER_TYPE, info.getEnumParameterType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1286,"assertEquals(Visibility.PUBLIC, info.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1289,public void testRegression7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1290,String comment =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1291,""" * @desc description here\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1292,""" * @param {boolean} flag and some more description\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1293,""" *     nicely formatted\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1296,JSDocInfo info = parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1297,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1298,"assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(""flag""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1299,"assertEquals(""description here"", info.getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1302,public void testRegression8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1303,String comment =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1304,""" * @name random tag here\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1305,""" * @desc description here\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1306,""" *\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1307,""" * @param {boolean} flag and some more description\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1308,""" *     nicely formatted\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1311,JSDocInfo info = parse(comment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1312,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1313,"assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(""flag""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1314,"assertEquals(""description here"", info.getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1317,public void testRegression9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1318,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1319,""" * @param {string} p0 blah blah blah\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1322,assertNull(jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1323,assertFalse(jsdoc.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1324,assertNull(jsdoc.getDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1325,assertNull(jsdoc.getEnumParameterType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1326,assertFalse(jsdoc.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1327,"assertEquals(1, jsdoc.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1328,"assertTypeEquals(STRING_TYPE, jsdoc.getParameterType(""p0""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1329,assertNull(jsdoc.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1330,assertNull(jsdoc.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1331,"assertEquals(Visibility.INHERITED, jsdoc.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1334,public void testRegression10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1335,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1336,""" * @param {!String} p0 blah blah blah\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1337,""" * @param {boolean} p1 fobar\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1338,""" * @return {!Date} jksjkash dshad\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1341,assertNull(jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1342,assertFalse(jsdoc.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1343,assertNull(jsdoc.getDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1344,assertNull(jsdoc.getEnumParameterType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1345,assertFalse(jsdoc.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1346,"assertEquals(2, jsdoc.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1347,"assertTypeEquals(STRING_OBJECT_TYPE, jsdoc.getParameterType(""p0""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1348,"assertTypeEquals(BOOLEAN_TYPE, jsdoc.getParameterType(""p1""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1349,"assertTypeEquals(DATE_TYPE, jsdoc.getReturnType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1350,assertNull(jsdoc.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1351,"assertEquals(Visibility.INHERITED, jsdoc.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1354,public void testRegression11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1355,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1356,""" * @constructor\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1359,assertNull(jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1360,assertFalse(jsdoc.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1361,assertNull(jsdoc.getDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1362,assertNull(jsdoc.getEnumParameterType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1363,assertFalse(jsdoc.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1364,"assertEquals(0, jsdoc.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1365,assertNull(jsdoc.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1366,assertNull(jsdoc.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1367,"assertEquals(Visibility.INHERITED, jsdoc.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1370,public void testRegression12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1371,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1372,""" * @extends FooBar\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1375,"assertTypeEquals(new NamedType(registry, ""FooBar"", null, 0, 0),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1376,jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1377,assertFalse(jsdoc.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1378,assertNull(jsdoc.getDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1379,assertNull(jsdoc.getEnumParameterType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1380,assertFalse(jsdoc.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1381,"assertEquals(0, jsdoc.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1382,assertNull(jsdoc.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1383,assertNull(jsdoc.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1384,"assertEquals(Visibility.INHERITED, jsdoc.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1387,public void testRegression13() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1388,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1389,""" * @type {!RegExp}\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1390,""" * @protected\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1393,assertNull(jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1394,assertFalse(jsdoc.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1395,assertNull(jsdoc.getDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1396,assertNull(jsdoc.getEnumParameterType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1397,assertFalse(jsdoc.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1398,"assertEquals(0, jsdoc.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1399,assertNull(jsdoc.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1400,"assertTypeEquals(REGEXP_TYPE, jsdoc.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1401,"assertEquals(Visibility.PROTECTED, jsdoc.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1404,public void testRegression14() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1405,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1406,""" * @const\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1407,""" * @private\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1410,assertNull(jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1411,assertTrue(jsdoc.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1412,assertNull(jsdoc.getDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1413,assertNull(jsdoc.getEnumParameterType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1414,assertFalse(jsdoc.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1415,"assertEquals(0, jsdoc.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1416,assertNull(jsdoc.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1417,assertNull(jsdoc.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1418,"assertEquals(Visibility.PRIVATE, jsdoc.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1421,public void testRegression15() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1422,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1423,""" * @desc Hello,\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1424,""" * World!\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1427,assertNull(jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1428,assertFalse(jsdoc.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1429,"assertEquals(""Hello, World!"", jsdoc.getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1430,assertNull(jsdoc.getEnumParameterType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1431,assertFalse(jsdoc.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1432,"assertEquals(0, jsdoc.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1433,assertNull(jsdoc.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1434,assertNull(jsdoc.getType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1435,"assertEquals(Visibility.INHERITED, jsdoc.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1436,assertFalse(jsdoc.isExport());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1439,public void testRegression16() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1440,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1441,""" Email is plp@foo.bar\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1442,""" @type {string}\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1445,assertNull(jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1446,assertFalse(jsdoc.isConstant());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1447,"assertTypeEquals(STRING_TYPE, jsdoc.getType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1448,assertFalse(jsdoc.isHidden());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1449,"assertEquals(0, jsdoc.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1450,assertNull(jsdoc.getReturnType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1451,"assertEquals(Visibility.INHERITED, jsdoc.getVisibility());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1454,public void testRegression17() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1455,// verifying that if no @desc is present the description is empty
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1456,"assertNull(parse(""@private*/"").getDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1459,public void testFullRegression1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1460,"parseFull(""/** @param (string,number) foo*/function bar(foo){}"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1461,"""expecting a variable name in a @param tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1464,public void testFullRegression2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1465,"parseFull(""/** @param {string,number) foo*/function bar(foo){}"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1466,"""expected closing }"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1467,"""expecting a variable name in a @param tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1470,public void testFullRegression3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1471,"parseFull(""/**..\n*/"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1474,public void testBug907488() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1475,"parse(""@type {number,null} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1476,"""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1479,public void testBug907494() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1480,"parse(""@return {Object,undefined} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1481,"""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1484,public void testBug909468() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1485,"parse(""@extends {(x)}*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1486,"""expecting a type name"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1489,public void testParseInterface() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1490,"assertTrue(parse(""@interface*/"").isInterface());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1493,public void testParseImplicitCast1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1494,"assertTrue(parse(""@type {string} \n * @implicitCast*/"").isImplicitCast());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1497,public void testParseImplicitCast2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1498,"assertFalse(parse(""@type {string}*/"").isImplicitCast());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1501,public void testParseDuplicateImplicitCast() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1502,"parse(""@type {string} \n * @implicitCast \n * @implicitCast*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1503,"""extra @implicitCast tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1506,public void testParseInterfaceDoubled() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1507,parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1508,"""* @interface\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1509,"""* @interface\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1511,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1514,public void testParseImplements() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1515,"List<JSTypeExpression> interfaces = parse(""@implements {SomeInterface}*/"")"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1516,.getImplementedInterfaces();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1517,"assertEquals(1, interfaces.size());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1518,"assertTypeEquals(new NamedType(registry, ""SomeInterface"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1519,interfaces.get(0));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1522,public void testParseImplementsTwo() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1523,List<JSTypeExpression> interfaces =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1524,parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1525,"""* @implements {SomeInterface1}\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1526,"""* @implements {SomeInterface2}\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1528,.getImplementedInterfaces();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1529,"assertEquals(2, interfaces.size());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1530,"assertTypeEquals(new NamedType(registry, ""SomeInterface1"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1531,interfaces.get(0));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1532,"assertTypeEquals(new NamedType(registry, ""SomeInterface2"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1533,interfaces.get(1));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1536,public void testParseImplementsSameTwice() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1537,parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1538,"""* @implements {Smth}\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1539,"""* @implements {Smth}\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1541,"""duplicate @implements tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1544,public void testParseImplementsNoName() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1545,"parse(""* @implements {} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1546,"""expecting a type name"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1549,public void testParseImplementsMissingRC() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1550,"parse(""* @implements {Smth */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1551,"""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1554,public void testParseImplementsNullable1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1555,"parse(""@implements {Base?} */"", ""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1558,public void testParseImplementsNullable2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1559,"parse(""@implements Base? */"", ""expected end of line or comment"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1562,public void testInterfaceExtends() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1563,JSDocInfo jsdoc = parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1564,""" * @interface \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1565,""" * @extends {Extended} */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1566,assertTrue(jsdoc.isInterface());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1567,"assertTypeEquals(new NamedType(registry, ""Extended"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1568,jsdoc.getBaseType());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1571,public void testBadExtendsWithNullable() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1572,"JSDocInfo jsdoc = parse(""@constructor\n * @extends {Object?} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1573,"""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1574,assertTrue(jsdoc.isConstructor());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1575,"assertTypeEquals(OBJECT_TYPE, jsdoc.getBaseType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1578,public void testBadImplementsWithNullable() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1579,"JSDocInfo jsdoc = parse(""@implements {Disposable?}\n * @constructor */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1580,"""expected closing }"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1581,assertTrue(jsdoc.isConstructor());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1582,"assertTypeEquals(new NamedType(registry, ""Disposable"", null, -1, -1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1583,jsdoc.getImplementedInterfaces().get(0));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1586,public void testBadTypeDefInterfaceAndConstructor1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1587,"JSDocInfo jsdoc = parse(""@interface\n@constructor*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1588,"""cannot be both an interface and a constructor"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1589,assertTrue(jsdoc.isInterface());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1592,public void testBadTypeDefInterfaceAndConstructor2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1593,"JSDocInfo jsdoc = parse(""@constructor\n@interface*/"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1594,"""cannot be both an interface and a constructor"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1595,assertTrue(jsdoc.isConstructor());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1598,public void testDocumentationThrows() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1599,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1600,"= parse(""@throws {Number} This is a description.*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1602,"assertEquals(""This is a description."","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1603,"jsdoc.getDescriptionForThrownType(NUMBER_TYPE, null));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1606,public void testDocumentationParameter() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1607,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1608,"= parse(""@param {Number} number42 This is a description.*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1610,"assertTrue(jsdoc.hasDescriptionForParameter(""number42""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1611,"assertEquals(""This is a description."","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1612,"jsdoc.getDescriptionForParameter(""number42""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1615,public void testMultilineDocumentationParameter() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1616,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1617,"= parse(""@param {Number} number42 This is a description"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1618,"+ ""\n* on multiple \n* lines.*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1620,"assertTrue(jsdoc.hasDescriptionForParameter(""number42""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1621,"assertEquals(""This is a description on multiple lines."","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1622,"jsdoc.getDescriptionForParameter(""number42""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1626,public void testDocumentationMultipleParameter() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1627,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1628,"= parse(""@param {Number} number42 This is a description."""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1629,"+ ""\n* @param {Integer} number87 This is another description.*/"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1630,", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1632,"assertTrue(jsdoc.hasDescriptionForParameter(""number42""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1633,"assertEquals(""This is a description."","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1634,"jsdoc.getDescriptionForParameter(""number42""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1636,"assertTrue(jsdoc.hasDescriptionForParameter(""number87""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1637,"assertEquals(""This is another description."","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1638,"jsdoc.getDescriptionForParameter(""number87""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1641,public void testDocumentationMultipleParameter2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1642,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1643,"= parse(""@param {number} delta = 0 results in a redraw\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1644,"""  != 0 ..... */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1645,"assertTrue(jsdoc.hasDescriptionForParameter(""delta""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1646,"assertEquals(""= 0 results in a redraw != 0 ....."","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1647,"jsdoc.getDescriptionForParameter(""delta""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1651,public void testAuthors() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1652,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1653,"= parse(""@param {Number} number42 This is a description."""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1654,"+ ""\n* @param {Integer} number87 This is another description."""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1655,"+ ""\n* @author a@google.com (A Person)"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1656,"+ ""\n* @author b@google.com (B Person)"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1657,"+ ""\n* @author c@google.com (C Person)*/"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1658,", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1660,Collection<String> authors = jsdoc.getAuthors();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1662,assertTrue(authors != null);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1663,assertTrue(authors.size() == 3);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1665,"assertContains(authors, ""a@google.com (A Person)"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1666,"assertContains(authors, ""b@google.com (B Person)"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1667,"assertContains(authors, ""c@google.com (C Person)"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1670,public void testSuppress1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1671,"JSDocInfo info = parse(""@suppress {x} */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1672,"assertEquals(Sets.newHashSet(""x""), info.getSuppressions());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1675,public void testSuppress2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1676,"JSDocInfo info = parse(""@suppress {x|y|x|z} */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1677,"assertEquals(Sets.newHashSet(""x"", ""y"", ""z""), info.getSuppressions());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1680,public void testBadSuppress1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1681,"parse(""@suppress {} */"", ""malformed @suppress tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1684,public void testBadSuppress2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1685,"parse(""@suppress {x|} */"", ""malformed @suppress tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1688,public void testBadSuppress3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1689,"parse(""@suppress {|x} */"", ""malformed @suppress tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1692,public void testBadSuppress4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1693,"parse(""@suppress {x|y */"", ""malformed @suppress tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1696,public void testBadSuppress5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1697,"parse(""@suppress {x,y} */"", ""malformed @suppress tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1700,public void testBadSuppress6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1701,"parse(""@suppress {x} \n * @suppress {y} */"", ""duplicate @suppress tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1704,//public void testNoParseFileOverview() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1705,"//  JSDocInfo jsdoc = parseFileOverviewWithoutDoc(""@fileoverview Hi mom! */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1706,//  assertNull(jsdoc.getFileOverview());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1707,//  assertTrue(jsdoc.hasFileOverview());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1710,public void testFileOverviewSingleLine() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1711,"JSDocInfo jsdoc = parseFileOverview(""@fileoverview Hi mom! */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1712,"assertEquals(""Hi mom!"", jsdoc.getFileOverview());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1715,public void testFileOverviewMultiLine() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1716,"JSDocInfo jsdoc = parseFileOverview(""@fileoverview Pie is \n * good! */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1717,"assertEquals(""Pie is\n good!"", jsdoc.getFileOverview());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1720,public void testFileOverviewDuplicate() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1721,JSDocInfo jsdoc = parseFileOverview(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1722,"""@fileoverview Pie \n * @fileoverview Cake */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1723,"""extra @fileoverview tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1726,public void testReferences() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1727,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1728,"= parse(""@see A cool place!"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1729,"+ ""\n* @see The world."""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1730,"+ ""\n* @see SomeClass#SomeMember"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1731,"+ ""\n* @see A boring test case*/"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1732,", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1734,Collection<String> references = jsdoc.getReferences();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1736,assertTrue(references != null);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1737,assertTrue(references.size() == 4);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1739,"assertContains(references, ""A cool place!"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1740,"assertContains(references, ""The world."");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1741,"assertContains(references, ""SomeClass#SomeMember"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1742,"assertContains(references, ""A boring test case"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1745,public void testSingleTags() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1746,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1747,"= parse(""@version Some old version"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1748,"+ ""\n* @deprecated In favor of the new one!"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1749,"+ ""\n* @return {SomeType} The most important object :-)*/"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1750,", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1752,assertTrue(jsdoc.isDeprecated());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1753,"assertEquals(""In favor of the new one!"", jsdoc.getDeprecationReason());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1754,"assertEquals(""Some old version"", jsdoc.getVersion());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1755,"assertEquals(""The most important object :-)"", jsdoc.getReturnDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1758,public void testSingleTagsReordered() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1759,JSDocInfo jsdoc
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1760,"= parse(""@deprecated In favor of the new one!"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1761,"+ ""\n * @return {SomeType} The most important object :-)"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1762,"+ ""\n * @version Some old version*/"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1763,", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1765,assertTrue(jsdoc.isDeprecated());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1766,"assertEquals(""In favor of the new one!"", jsdoc.getDeprecationReason());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1767,"assertEquals(""Some old version"", jsdoc.getVersion());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1768,"assertEquals(""The most important object :-)"", jsdoc.getReturnDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1771,public void testVersionDuplication() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1772,"parse(""* @version Some old version"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1773,"+ ""\n* @version Another version*/"", true,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1774,"""conflicting @version tag"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1777,public void testVersionMissing() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1778,"parse(""* @version */"", true,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1779,"""@version tag missing version information"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1782,public void testAuthorMissing() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1783,"parse(""* @author */"", true,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1784,"""@author tag missing author"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1787,public void testSeeMissing() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1788,"parse(""* @see */"", true,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1789,"""@see tag missing description"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1792,public void testSourceName() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1793,"JSDocInfo jsdoc = parse(""@deprecated */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1794,"assertEquals(""testcode"", jsdoc.getSourceName());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1797,public void testParseBlockComment() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1798,"JSDocInfo jsdoc = parse(""this is a nice comment\n """
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1799,"+ ""* that is multiline \n"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1800,"+ ""* @author abc@google.com */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1802,"assertEquals(""this is a nice comment\nthat is multiline"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1803,jsdoc.getBlockDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1805,assertDocumentationInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1806,"assertAnnotationMarker(jsdoc, ""author"", 2, 2),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1807,"""abc@google.com"", 9, 2, 23);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1810,public void testParseBlockComment2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1811,"JSDocInfo jsdoc = parse(""this is a nice comment\n """
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1812,"+ ""* that is *** multiline \n"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1813,"+ ""* @author abc@google.com */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1815,"assertEquals(""this is a nice comment\nthat is *** multiline"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1816,jsdoc.getBlockDescription());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1818,assertDocumentationInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1819,"assertAnnotationMarker(jsdoc, ""author"", 2, 2),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1820,"""abc@google.com"", 9, 2, 23);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1823,public void testParseBlockComment3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1824,"JSDocInfo jsdoc = parse(""\n """
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1825,"+ ""* hello world \n"""
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1826,"+ ""* @author abc@google.com */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1828,"assertEquals(""hello world"", jsdoc.getBlockDescription());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1830,assertDocumentationInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1831,"assertAnnotationMarker(jsdoc, ""author"", 2, 2),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1832,"""abc@google.com"", 9, 2, 23);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1835,public void testParseWithMarkers1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1836,"JSDocInfo jsdoc = parse(""@author abc@google.com */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1838,assertDocumentationInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1839,"assertAnnotationMarker(jsdoc, ""author"", 0, 0),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1840,"""abc@google.com"", 7, 0, 21);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1843,public void testParseWithMarkers2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1844,"JSDocInfo jsdoc = parse(""@param {Foo} somename abc@google.com */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1846,assertDocumentationInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1847,"assertAnnotationMarker(jsdoc, ""param"", 0, 0),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1848,"""abc@google.com"", 21, 0, 37);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1851,public void testParseWithMarkers3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1852,JSDocInfo jsdoc =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1853,"parse(""@return {Foo} some long \n * multiline"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1854,""" \n * description */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1856,assertDocumentationInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1857,"assertAnnotationMarker(jsdoc, ""return"", 0, 0),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1858,"""some long multiline description"", 13, 2, 15);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1861,public void testParseWithMarkers4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1862,JSDocInfo jsdoc =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1863,"parse(""@author foobar \n * @param {Foo} somename abc@google.com */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1864,true);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1866,"assertAnnotationMarker(jsdoc, ""author"", 0, 0);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1867,"assertAnnotationMarker(jsdoc, ""param"", 1, 3);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1870,public void testParseWithMarkerNames1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1871,"JSDocInfo jsdoc = parse(""@param {SomeType} name somedescription */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1873,assertNameInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1874,"assertAnnotationMarker(jsdoc, ""param"", 0, 0),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1875,"""name"", 18);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1878,public void testParseWithMarkerNames2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1879,"JSDocInfo jsdoc = parse(""@param {SomeType} name somedescription \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1880,"""* @param {AnotherType} anothername des */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1882,assertTypeInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1883,assertNameInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1884,"assertAnnotationMarker(jsdoc, ""param"", 0, 0, 0),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1885,"""name"", 18),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1886,"""SomeType"", 7, true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1888,assertTypeInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1889,assertNameInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1890,"assertAnnotationMarker(jsdoc, ""param"", 1, 2, 1),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1891,"""anothername"", 23),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1892,"""AnotherType"", 9, true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1895,public void testParseWithoutMarkerName() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1896,"JSDocInfo jsdoc = parse(""@author helloworld*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1897,"assertNull(assertAnnotationMarker(jsdoc, ""author"", 0, 0).name);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1900,public void testParseWithMarkerType() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1901,"JSDocInfo jsdoc = parse(""@extends {FooBar}*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1903,assertTypeInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1904,"assertAnnotationMarker(jsdoc, ""extends"", 0, 0),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1905,"""FooBar"", 9, true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1908,public void testParseWithMarkerType2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1909,"JSDocInfo jsdoc = parse(""@extends FooBar*/"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1911,assertTypeInMarker(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1912,"assertAnnotationMarker(jsdoc, ""extends"", 0, 0),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1913,"""FooBar"", 9, false);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1916,public void testTypeTagConflict1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1917,"parse(""@constructor \n * @constructor */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1918,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1921,public void testTypeTagConflict2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1922,"parse(""@interface \n * @interface */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1923,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1926,public void testTypeTagConflict3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1927,"parse(""@constructor \n * @interface */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1928,"""cannot be both an interface and a constructor"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1931,public void testTypeTagConflict4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1932,"parse(""@interface \n * @constructor */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1933,"""cannot be both an interface and a constructor"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1936,public void testTypeTagConflict5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1937,"parse(""@interface \n * @type {string} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1938,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1941,public void testTypeTagConflict6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1942,"parse(""@typedef {string} \n * @type {string} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1943,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1946,public void testTypeTagConflict7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1947,"parse(""@typedef {string} \n * @constructor */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1948,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1951,public void testTypeTagConflict8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1952,"parse(""@typedef {string} \n * @return {boolean} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1953,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1956,public void testTypeTagConflict9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1957,"parse(""@enum {string} \n * @return {boolean} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1958,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1961,public void testTypeTagConflict10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1962,"parse(""@this {Object} \n * @enum {boolean} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1963,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1966,public void testTypeTagConflict11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1967,"parse(""@param {Object} x \n * @type {boolean} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1968,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1971,public void testTypeTagConflict12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1972,"parse(""@typedef {boolean} \n * @param {Object} x */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1973,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1976,public void testTypeTagConflict13() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1977,"parse(""@typedef {boolean} \n * @extends {Object} */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1978,"""type annotation incompatible with other annotations"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1981,public void testParserWithTemplateTypeNameMisisng() {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1982,"parse(""@template */"", ""@template tag missing type name"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1985,public void testParserWithTemplateTypeNameMissing() {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1986,"parse(""@template T\n@template V */"", ""@template tag at most once"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1989,public void testWhitelistedNewAnnotations() {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1990,"parse(""@foobar */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1991,"""illegal use of unknown JSDoc tag \""foobar\""; ignoring it"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1992,"extraAnnotations.add(""foobar"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1993,"parse(""@foobar */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1996,public void testWhitelistedConflictingAnnotation() {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1997,"extraAnnotations.add(""param"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1998,"JSDocInfo info = parse(""@param {number} index */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,1999,"assertTypeEquals(NUMBER_TYPE, info.getParameterType(""index""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2002,public void testNonIdentifierAnnotation() {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2003,// Try to whitelist an annotation that is not a valid JS identifier.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2004,// It should not work.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2005,"extraAnnotations.add(""123"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2006,"parse(""@123 */"", ""illegal use of unknown JSDoc tag \""\""; ignoring it"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2009,public void testUnsupportedJsDocSyntax1() {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2010,JSDocInfo info =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2011,"parse(""@param {string} [accessLevel=\""author\""] The user level */"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2012,true);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2013,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2014,assertTypeEquals(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2015,"registry.createOptionalType(STRING_TYPE),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2016,"info.getParameterType(""accessLevel""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2017,"assertEquals(""The user level"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2018,"info.getDescriptionForParameter(""accessLevel""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2021,public void testUnsupportedJsDocSyntax2() {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2022,JSDocInfo info =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2023,"parse(""@param userInfo The user info. \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2024,""" * @param userInfo.name The name of the user */"", true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2025,"assertEquals(1, info.getParameterCount());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2026,"assertEquals(""The user info."","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2027,"info.getDescriptionForParameter(""userInfo""));"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2030,public void testWhitelistedAnnotations() {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2031,parse(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2032,"""* @addon \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2033,"""* @augments \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2034,"""* @base \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2035,"""* @borrows \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2036,"""* @bug \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2037,"""* @class \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2038,"""* @config \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2039,"""* @constructs \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2040,"""* @default \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2041,"""* @description \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2042,"""* @event \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2043,"""* @example \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2044,"""* @exception \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2045,"""* @exec \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2046,"""* @externs \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2047,"""* @field \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2048,"""* @function \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2049,"""* @id \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2050,"""* @ignore \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2051,"""* @inner \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2052,"""* @lends \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2053,"""* @link \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2054,"""* @member \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2055,"""* @memberOf \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2056,"""* @modName \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2057,"""* @mods \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2058,"""* @name \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2059,"""* @namespace \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2060,"""* @property \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2061,"""* @requires \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2062,"""* @since \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2063,"""* @static \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2064,"""* @supported */"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2068,* Asserts that a documentation field exists on the given marker.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2070,* @param description The text of the documentation field expected.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2071,* @param startCharno The starting character of the text.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2072,* @param endLineno The ending line of the text.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2073,* @param endCharno The ending character of the text.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2074,"* @return The marker, for chaining purposes."
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2076,"private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2077,"String description,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2078,"int startCharno,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2079,"int endLineno,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2080,int endCharno) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2081,assertTrue(marker.description != null);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2082,"assertEquals(description, marker.description.getItem());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2084,// Match positional information.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2085,"assertEquals(marker.annotation.getStartLine(),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2086,marker.description.getStartLine());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2087,"assertEquals(startCharno, marker.description.getPositionOnStartLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2088,"assertEquals(endLineno, marker.description.getEndLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2089,"assertEquals(endCharno, marker.description.getPositionOnEndLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2091,return marker;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2095,* Asserts that a type field exists on the given marker.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2097,* @param typeName The name of the type expected in the type field.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2098,* @param startCharno The starting character of the type declaration.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2099,* @param hasBrackets Whether the type in the type field is expected
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2100,*     to have brackets.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2101,"* @return The marker, for chaining purposes."
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2103,"private JSDocInfo.Marker assertTypeInMarker(JSDocInfo.Marker marker,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2104,"String typeName, int startCharno,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2105,boolean hasBrackets) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2107,assertTrue(marker.type != null);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2108,assertTrue(marker.type.getItem().getType() == Token.STRING);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2110,// Match the name and brackets information.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2111,String foundName = marker.type.getItem().getString();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2113,"assertEquals(typeName, foundName);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2114,"assertEquals(hasBrackets, marker.type.hasBrackets);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2116,// Match position information.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2117,"assertEquals(startCharno, marker.type.getPositionOnStartLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2119,int endCharno = startCharno + foundName.length();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2121,if (hasBrackets) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2122,endCharno += 1;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2125,"assertEquals(endCharno, marker.type.getPositionOnEndLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2126,"assertEquals(marker.annotation.getStartLine(), marker.type.getStartLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2127,"assertEquals(marker.annotation.getStartLine(), marker.type.getEndLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2129,return marker;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2133,* Asserts that a name field exists on the given marker.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2135,* @param name The name expected in the name field.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2136,* @param startCharno The starting character of the text.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2137,"* @return The marker, for chaining purposes."
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2139,"private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2140,"String name, int startCharno) {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2141,assertTrue(marker.name != null);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2142,"assertEquals(name, marker.name.getItem());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2144,"assertEquals(startCharno, marker.name.getPositionOnStartLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2145,"assertEquals(startCharno + name.length(),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2146,marker.name.getPositionOnEndLine());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2148,"assertEquals(marker.annotation.getStartLine(), marker.name.getStartLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2149,"assertEquals(marker.annotation.getStartLine(), marker.name.getEndLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2151,return marker;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2155,* Asserts that an annotation marker of a given annotation name
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2156,* is found in the given JSDocInfo.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2158,* @param jsdoc The JSDocInfo in which to search for the annotation marker.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2159,* @param annotationName The name/type of the annotation for which to
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2160,"*   search. Example: ""author"" for an ""@author"" annotation."
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2161,* @param startLineno The expected starting line number of the marker.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2162,* @param startCharno The expected character on the starting line.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2163,"* @return The marker found, for further testing."
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2165,"private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2166,"String annotationName,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2167,"int startLineno,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2168,int startCharno) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2169,"return assertAnnotationMarker(jsdoc, annotationName, startLineno,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2170,"startCharno, 0);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2174,* Asserts that the index-th annotation marker of a given annotation name
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2175,* is found in the given JSDocInfo.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2177,* @param jsdoc The JSDocInfo in which to search for the annotation marker.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2178,* @param annotationName The name/type of the annotation for which to
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2179,"*   search. Example: ""author"" for an ""@author"" annotation."
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2180,* @param startLineno The expected starting line number of the marker.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2181,* @param startCharno The expected character on the starting line.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2182,* @param index The index of the marker.
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2183,"* @return The marker found, for further testing."
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2185,"private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2186,"String annotationName,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2187,"int startLineno,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2188,"int startCharno,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2189,int index) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2191,Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2193,assertTrue(markers.size() > 0);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2195,int counter = 0;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2197,for (JSDocInfo.Marker marker : markers) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2198,if (marker.annotation != null) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2199,if (annotationName.equals(marker.annotation.getItem())) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2201,if (counter == index) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2202,"assertEquals(startLineno, marker.annotation.getStartLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2203,"assertEquals(startCharno,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2204,marker.annotation.getPositionOnStartLine());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2205,"assertEquals(startLineno, marker.annotation.getEndLine());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2206,"assertEquals(startCharno + annotationName.length(),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2207,marker.annotation.getPositionOnEndLine());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2209,return marker;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2212,counter++;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2217,"fail(""No marker found"");"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2218,return null;
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2221,"private <T> void assertContains(Collection<T> collection, T item) {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2222,assertTrue(collection.contains(item));
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2225,"private void parseFull(String code, String... warnings) {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2226,CompilerEnvirons environment = new CompilerEnvirons();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2228,"TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2229,environment.setErrorReporter(testErrorReporter);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2231,environment.setRecordingComments(true);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2232,environment.setRecordingLocalJsDocComments(true);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2234,"Parser p = new Parser(environment, testErrorReporter);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2235,"AstRoot script = p.parse(code, null, 0);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2237,"Config config = new Config(registry, extraAnnotations, true);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2238,for (Comment comment : script.getComments()) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2239,JsDocInfoParser jsdocParser =
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2240,new JsDocInfoParser(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2241,"new JsDocTokenStream(comment.getValue().substring(3),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2242,"comment.getLineno()),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2243,"script.getSourceName(),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2244,"config,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2245,testErrorReporter);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2246,jsdocParser.parse();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2247,jsdocParser.retrieveAndResetParsedJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2250,"assertTrue(""some expected warnings were not reported"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2251,testErrorReporter.hasEncounteredAllWarnings());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2254,"private JSDocInfo parseFileOverviewWithoutDoc(String comment,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2255,String... warnings) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2256,"return parse(comment, false, true, warnings);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2259,"private JSDocInfo parseFileOverview(String comment, String... warnings) {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2260,"return parse(comment, true, true, warnings);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2263,"private JSDocInfo parse(String comment, String... warnings) {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2264,"return parse(comment, false, warnings);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2267,"private JSDocInfo parse(String comment, boolean parseDocumentation,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2268,String... warnings) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2269,"return parse(comment, parseDocumentation, false, warnings);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2272,"private JSDocInfo parse(String comment, boolean parseDocumentation,"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2273,"boolean parseFileOverview, String... warnings) {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2274,"TestErrorReporter errorReporter = new TestErrorReporter(null, warnings);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2276,Config config = new Config(
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2277,"registry, extraAnnotations, parseDocumentation);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2278,"JsDocInfoParser jsdocParser = new JsDocInfoParser(stream(comment),"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2279,"""testcode"", config, errorReporter);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2281,//if (fileLevelJsDocBuilder != null) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2282,//  jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2285,jsdocParser.parse();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2287,"assertTrue(""expected warnings were not reported"","
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2288,errorReporter.hasEncounteredAllWarnings());
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2290,if (parseFileOverview) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2291,return jsdocParser.getFileOverviewJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2292,} else {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2293,return jsdocParser.retrieveAndResetParsedJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2297,private Node parseType(String typeComment) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2298,return JsDocInfoParser.parseTypeString(typeComment);
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2301,private JsDocTokenStream stream(String source) {
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2302,"return new JsDocTokenStream(source, 0);"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2305,"private void assertParameterTypeEquals(JSType expected, JSTypeExpression te) {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2306,"assertEquals(expected, ((ObjectType) resolve(te)).getParameterType());"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2309,"private void assertIndexTypeEquals(JSType expected, JSTypeExpression te) {"
True,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,2310,"assertEquals(expected, ((ObjectType) resolve(te)).getIndexType());"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,2,* Copyright 2009 Google Inc.
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,17,package com.google.javascript.jscomp.parsing;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,19,import static com.google.javascript.jscomp.parsing.JsDocToken.ANNOTATION;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,20,import static com.google.javascript.jscomp.parsing.JsDocToken.BANG;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,21,import static com.google.javascript.jscomp.parsing.JsDocToken.COLON;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,22,import static com.google.javascript.jscomp.parsing.JsDocToken.COMMA;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,23,import static com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,24,import static com.google.javascript.jscomp.parsing.JsDocToken.EOC;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,25,import static com.google.javascript.jscomp.parsing.JsDocToken.EOF;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,26,import static com.google.javascript.jscomp.parsing.JsDocToken.EOL;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,27,import static com.google.javascript.jscomp.parsing.JsDocToken.EQUALS;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,28,import static com.google.javascript.jscomp.parsing.JsDocToken.GT;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,29,import static com.google.javascript.jscomp.parsing.JsDocToken.LB;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,30,import static com.google.javascript.jscomp.parsing.JsDocToken.LC;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,31,import static com.google.javascript.jscomp.parsing.JsDocToken.LP;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,32,import static com.google.javascript.jscomp.parsing.JsDocToken.LT;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,33,import static com.google.javascript.jscomp.parsing.JsDocToken.PIPE;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,34,import static com.google.javascript.jscomp.parsing.JsDocToken.QMARK;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,35,import static com.google.javascript.jscomp.parsing.JsDocToken.RB;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,36,import static com.google.javascript.jscomp.parsing.JsDocToken.RC;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,37,import static com.google.javascript.jscomp.parsing.JsDocToken.RP;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,38,import static com.google.javascript.jscomp.parsing.JsDocToken.STAR;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,39,import static com.google.javascript.jscomp.parsing.JsDocToken.STRING;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,41,import com.google.common.collect.ImmutableList;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,43,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,45,import java.util.List;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,46,import java.io.IOException;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,49,* Tests for {@link JsDocTokenStream}.
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,51,public class JsDocTokenStreamTest extends TestCase {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,53,public void testJsDocTokenization1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,54,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,55,"STAR, ANNOTATION, LC, STRING, RC, EOL, STAR, ANNOTATION);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,56,"List<String> strings = ImmutableList.of(""type"", ""string"", ""private"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,57,"testJSDocTokenStream("" * @type {string}\n * @private"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,58,"testJSDocTokenStream("" *    @type { string } \n * @private"","
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,59,"tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,60,"testJSDocTokenStream("" * @type   {  string}\n * @private"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,61,"testJSDocTokenStream("" * @type {string  }\n * @private"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,62,"testJSDocTokenStream("" * @type {string}\n *   @private"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,63,"testJSDocTokenStream("" * @type {string}   \n * @private"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,66,public void testJsDocTokenization2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,67,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,68,"ANNOTATION, LC, STRING, LT, STRING, PIPE, STRING, GT, RC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,69,"List<String> strings = ImmutableList.of(""param"", ""Array"", ""string"", ""null"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,70,"testJSDocTokenStream(""@param {Array.<string|null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,71,"testJSDocTokenStream(""@param {Array.<string|null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,72,"testJSDocTokenStream(""@param {Array.<string |null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,73,"testJSDocTokenStream("" @param {Array.<string |  null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,74,"testJSDocTokenStream("" @param {Array.<string|null  >}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,75,"testJSDocTokenStream(""@param {Array  .<string|null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,76,"testJSDocTokenStream(""@param   {Array.<string|null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,77,"testJSDocTokenStream(""@param {  Array.<string|null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,78,"testJSDocTokenStream(""@param {Array.<string|   null>}  "", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,79,"testJSDocTokenStream(""@param {Array.<string|null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,80,"testJSDocTokenStream(""     @param { Array .< string |null > } "","
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,81,"tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,84,public void testJsDocTokenization3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,85,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,86,"ANNOTATION, LC, STRING, LT, STRING, PIPE, STRING, GT, RC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,87,"List<String> strings = ImmutableList.of(""param"", ""Array"", ""string"", ""null"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,88,"testJSDocTokenStream(""@param {Array.<string||null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,89,"testJSDocTokenStream(""@param {Array.< string || null> }"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,90,"testJSDocTokenStream(""@param {Array.<string || null >  } "","
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,91,"tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,92,"testJSDocTokenStream(""@param {Array .<string   ||null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,93,"testJSDocTokenStream(""@param {Array.< string||null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,94,"testJSDocTokenStream(""@param {  Array.<string||null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,95,"testJSDocTokenStream("" @param   {Array.<string||null>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,96,"testJSDocTokenStream(""@param   {   Array.<string|| null> }"","
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,97,"tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,100,public void testJsDocTokenization4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,101,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,102,"ANNOTATION, LC, STRING, LT, LP, STRING, COMMA, STRING, RP, GT, RC, EOF);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,103,"List<String> strings = ImmutableList.of(""param"", ""Array"", ""string"", ""null"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,104,"testJSDocTokenStream(""@param {Array.<(string,null)>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,105,"testJSDocTokenStream(""@param {Array  .<(string,null)> } "", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,106,"testJSDocTokenStream("" @param {Array.<  (  string,null)>}"","
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,107,"tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,108,"testJSDocTokenStream(""@param {Array.<(string  , null)>}"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,109,"testJSDocTokenStream(""@param {Array.<(string,   null)  > }  "","
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,110,"tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,111,"testJSDocTokenStream(""@param {  Array  .<  (string,null)>}   "","
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,112,"tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,115,public void testJsDocTokenization5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,116,"List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, STRING, EOC, EOF);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,117,"List<String> strings = ImmutableList.of(""param"", ""foo.Bar"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,118,"testJSDocTokenStream(""@param foo.Bar*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,119,"testJSDocTokenStream("" @param   foo.Bar*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,120,"testJSDocTokenStream("" @param foo.Bar   */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,123,public void testJsDocTokenization6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,124,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,125,"ANNOTATION, EOL, ANNOTATION, EOL, ANNOTATION, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,126,"List<String> strings = ImmutableList.of(""hidden"", ""static"", ""desc"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,127,"testJSDocTokenStream(""@hidden\n@static\n@desc*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,128,"testJSDocTokenStream(""@hidden\n @static\n@desc*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,129,"testJSDocTokenStream(""@hidden\n@static\n @desc*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,130,"testJSDocTokenStream(""@hidden\n@static\n@desc */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,131,"testJSDocTokenStream("" @hidden \n@static\n @desc*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,132,"testJSDocTokenStream(""@hidden\n@static    \n @desc  */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,133,"testJSDocTokenStream(""@hidden\n@static\n@desc*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,134,"testJSDocTokenStream(""@hidden   \n@static   \n @desc*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,137,public void testJsDocTokenization7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,138,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,139,"ELLIPSIS, ELLIPSIS, ELLIPSIS, ELLIPSIS, ELLIPSIS, LT, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,140,List<String> strings = ImmutableList.of();
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,142,"testJSDocTokenStream(""................<*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,143,"testJSDocTokenStream(""............... .<*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,144,"testJSDocTokenStream(""................< */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,145,"testJSDocTokenStream(""............... .< */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,146,"testJSDocTokenStream(""............... .< */ "", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,147,"testJSDocTokenStream("" ............... .< */ "", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,150,public void testJsDocTokenization8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,151,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,152,"STAR, ANNOTATION, STRING, STRING, STRING, STRING, STRING, STRING,"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,153,"STRING, EOL, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,154,List<String> strings = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,155,"""param"", ""foo.Bar"", ""opt_name"", ""this"", ""parameter"", ""is"", ""a"", ""name"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,156,testJSDocTokenStream(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,157,""" * @param foo.Bar opt_name this parameter is a name\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,158,""" */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,159,testJSDocTokenStream(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,160,"""  *  @param foo.Bar opt_name this parameter is a name \n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,161,""" */ "", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,164,public void testJsDocTokenization9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,165,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,166,"STAR, ANNOTATION, STRING, STRING, STRING, STRING, STRING, ANNOTATION,"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,167,"STRING, EOL, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,168,List<String> strings = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,169,"""param"", ""foo.Bar"", ""opt_name"", ""this"", ""parameter"", ""does"","
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,170,"""media"", ""blah"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,171,testJSDocTokenStream(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,172,""" * @param foo.Bar opt_name this parameter does @media blah\n"" +"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,173,""" */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,176,public void testJsDocTokenization10() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,177,"List<JsDocToken> tokens = ImmutableList.of(STRING, GT, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,178,"List<String> strings = ImmutableList.of(""Array<String"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,179,"testJSDocTokenStream(""Array<String>*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,182,public void testJsDocTokenization11() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,183,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,184,"ANNOTATION, LC, STRING, QMARK, RC, EOC, EOF);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,185,"List<String> strings = ImmutableList.of(""param"", ""string"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,186,"testJSDocTokenStream(""@param {string?}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,187,"testJSDocTokenStream("" @param {string?}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,188,"testJSDocTokenStream(""@param { string?}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,189,"testJSDocTokenStream(""@param {string ?}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,190,"testJSDocTokenStream(""@param  {string ?  } */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,191,"testJSDocTokenStream(""@param { string  ?  }*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,192,"testJSDocTokenStream(""@param {string?  }*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,195,public void testJsDocTokenization12() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,196,"List<JsDocToken> tokens = ImmutableList.of(STRING, ELLIPSIS, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,197,"List<String> strings = ImmutableList.of(""function"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,199,"testJSDocTokenStream(""function ...*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,202,public void testJsDocTokenization13() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,203,"List<JsDocToken> tokens = ImmutableList.of(ELLIPSIS, LB, STRING, RB, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,204,"List<String> strings = ImmutableList.of(""number"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,206,"testJSDocTokenStream(""...[number]*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,209,public void testJsDocTokenization14() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,210,// Since ES4 type parsing only requires to parse an ellispis when it is
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,211,"// followed by a comma (,) we are allowing this case to parse this way."
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,212,"// This is a simplification of the tokenizer, but the extra complexity is"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,213,// never used.
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,214,"List<JsDocToken> tokens = ImmutableList.of(STRING, LB, STRING, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,215,"List<String> strings = ImmutableList.of(""foo"", ""bar..."");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,217,"testJSDocTokenStream(""foo[ bar...*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,220,public void testJsDocTokenization15() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,221,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,222,"STRING, LB, STRING, COMMA, ELLIPSIS, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,223,"List<String> strings = ImmutableList.of(""foo"", ""bar"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,225,"testJSDocTokenStream(""foo[ bar,...*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,226,"testJSDocTokenStream(""foo[ bar ,...*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,227,"testJSDocTokenStream(""foo[bar, ...*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,228,"testJSDocTokenStream(""foo[ bar  ,   ...  */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,229,"testJSDocTokenStream(""foo [bar,... */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,232,public void testJsDocTokenization16() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,233,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,234,"STRING, COLON, COLON, COLON, ELLIPSIS, STRING, COLON, STRING, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,235,"List<String> strings = ImmutableList.of(""foo"", ""bar"", ""bar2"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,237,"testJSDocTokenStream(""foo:::...bar:bar2*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,240,public void testJsDocTokenization17() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,241,"List<JsDocToken> tokens = ImmutableList.of(STRING, EOL, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,242,"List<String> strings = ImmutableList.of("".."");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,244,"testJSDocTokenStream(""..\n*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,247,public void testJsDocTokenization18() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,248,"List<JsDocToken> tokens = ImmutableList.of(STRING, EOL, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,249,"List<String> strings = ImmutableList.of(""."");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,251,"testJSDocTokenStream("".\n*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,254,public void testJsDocTokenization19() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,255,"List<JsDocToken> tokens = ImmutableList.of(ANNOTATION, LC, STAR, RC, EOC);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,256,"List<String> strings = ImmutableList.of(""type"", ""*"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,258,"testJSDocTokenStream(""@type {*}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,261,public void testJsDocTokenization20() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,262,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,263,"ANNOTATION, LC, BANG, STRING, RC, EOC, EOF);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,264,"List<String> strings = ImmutableList.of(""param"", ""Object"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,265,"testJSDocTokenStream(""@param {!Object}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,266,"testJSDocTokenStream("" @param {!Object}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,267,"testJSDocTokenStream(""@param {! Object}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,268,"testJSDocTokenStream(""@param { !Object}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,269,"testJSDocTokenStream(""@param  {!Object  } */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,270,"testJSDocTokenStream(""@param {  ! Object  }*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,271,"testJSDocTokenStream(""@param {!Object  }*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,274,public void testJsDocTokenization21() throws Exception {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,275,List<JsDocToken> tokens = ImmutableList.of(
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,276,"ANNOTATION, LC, STRING, EQUALS, RC, EOC, EOF);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,277,"List<String> strings = ImmutableList.of(""param"", ""Object"");"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,278,"testJSDocTokenStream(""@param {Object=}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,279,"testJSDocTokenStream("" @param {Object=}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,280,"testJSDocTokenStream(""@param { Object =}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,281,"testJSDocTokenStream(""@param { Object=}*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,282,"testJSDocTokenStream(""@param  {Object=  } */"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,283,"testJSDocTokenStream(""@param { Object = }*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,284,"testJSDocTokenStream(""@param {Object=  }*/"", tokens, strings);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,287,"private void testJSDocTokenStream(String comment, List<JsDocToken> tokens,"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,288,List<String> strings) throws IOException {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,289,"JsDocTokenStream stream = new JsDocTokenStream(comment, 0);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,290,int stringsIndex = 0;
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,291,for (JsDocToken token : tokens) {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,292,JsDocToken readToken = stream.getJsDocToken();
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,294,// token equality
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,295,if (token != readToken) {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,296,"assertEquals(token, readToken);"
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,299,// string equality
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,300,if (token == ANNOTATION || token == STRING) {
True,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java,301,"assertEquals(strings.get(stringsIndex++), stream.getString());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,2,* Copyright 2007 Google Inc.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,17,package com.google.javascript.jscomp.parsing;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,19,import com.google.common.base.Pair;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,20,import com.google.common.collect.ImmutableList;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,21,import com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,22,import com.google.javascript.jscomp.testing.TestErrorReporter;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,23,import com.google.javascript.rhino.JSDocInfo;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,24,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,25,import com.google.javascript.rhino.ScriptOrFnNode;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,26,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,27,import com.google.javascript.rhino.jstype.JSType;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,28,import com.google.javascript.rhino.jstype.JSTypeNative;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,29,import com.google.javascript.rhino.testing.BaseJSTypeTestCase;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,31,import java.io.IOException;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,32,import java.util.logging.Logger;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,33,import java.util.List;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,36,public class ParserTest extends BaseJSTypeTestCase {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,37,private static final String TRAILING_COMMA_MESSAGE =
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,38,"ScriptRuntime.getMessage0(""msg.extra.trailing.comma"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,40,private static final String BAD_PROPERTY_MESSAGE =
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,41,"ScriptRuntime.getMessage0(""msg.bad.prop"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,43,private static final String MISSING_GT_MESSAGE =
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,44,com.google.javascript.rhino.ScriptRuntime.getMessage0(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,45,"""msg.jsdoc.missing.gt"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,47,private JSType getNativeType(JSTypeNative typeId) {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,48,return registry.getNativeType(typeId);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,51,public void testLinenoCharnoAssign1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,52,"Node assign = parse(""a = b"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,54,"assertEquals(Token.ASSIGN, assign.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,55,"assertEquals(1, assign.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,56,"assertEquals(2, assign.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,59,public void testLinenoCharnoAssign2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,60,"Node assign = parse(""\n a.g.h.k    =  45"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,62,"assertEquals(Token.ASSIGN, assign.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,63,"assertEquals(2, assign.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,64,"assertEquals(12, assign.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,67,public void testLinenoCharnoCall() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,68,"Node call = parse(""\n foo(123);"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,70,"assertEquals(Token.CALL, call.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,71,"assertEquals(2, call.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,72,"assertEquals(4, call.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,75,public void testLinenoCharnoGetProp1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,76,"Node getprop = parse(""\n foo.bar"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,78,"assertEquals(Token.GETPROP, getprop.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,79,"assertEquals(2, getprop.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,80,"assertEquals(1, getprop.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,82,Node name = getprop.getFirstChild().getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,83,"assertEquals(Token.STRING, name.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,84,"assertEquals(2, name.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,85,"assertEquals(5, name.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,88,public void testLinenoCharnoGetProp2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,89,"Node getprop = parse(""\n foo.\nbar"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,91,"assertEquals(Token.GETPROP, getprop.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,92,"assertEquals(2, getprop.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,93,"assertEquals(1, getprop.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,95,Node name = getprop.getFirstChild().getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,96,"assertEquals(Token.STRING, name.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,97,"assertEquals(3, name.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,98,"assertEquals(0, name.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,101,public void testLinenoCharnoGetelem1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,102,"Node call = parse(""\n foo[123]"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,104,"assertEquals(Token.GETELEM, call.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,105,"assertEquals(2, call.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,106,"assertEquals(1, call.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,109,public void testLinenoCharnoGetelem2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,110,"Node call = parse(""\n   \n foo()[123]"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,112,"assertEquals(Token.GETELEM, call.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,113,"assertEquals(3, call.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,114,"assertEquals(1, call.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,117,public void testLinenoCharnoGetelem3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,118,"Node call = parse(""\n   \n (8 + kl)[123]"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,120,"assertEquals(Token.GETELEM, call.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,121,"assertEquals(3, call.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,122,"assertEquals(2, call.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,125,public void testLinenoCharnoForComparison() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,126,Node lt =
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,127,"parse(""for (; i < j;){}"").getFirstChild().getFirstChild().getNext();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,129,"assertEquals(Token.LT, lt.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,130,"assertEquals(1, lt.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,131,"assertEquals(9, lt.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,134,public void testLinenoCharnoHook() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,135,"Node n = parse(""\n a ? 9 : 0"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,137,"assertEquals(Token.HOOK, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,138,"assertEquals(2, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,139,"assertEquals(1, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,142,public void testLinenoCharnoArrayLiteral() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,143,"Node n = parse(""\n  [8, 9]"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,145,"assertEquals(Token.ARRAYLIT, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,146,"assertEquals(2, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,147,"assertEquals(2, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,149,n = n.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,151,"assertEquals(Token.NUMBER, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,152,"assertEquals(2, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,153,"assertEquals(3, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,155,n = n.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,157,"assertEquals(Token.NUMBER, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,158,"assertEquals(2, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,159,"assertEquals(6, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,162,public void testLinenoCharnoObjectLiteral() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,163,"Node n = parse(""\n\n var a = {a:0\n,b :1};"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,164,.getFirstChild().getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,166,"assertEquals(Token.OBJECTLIT, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,167,"assertEquals(3, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,168,"assertEquals(9, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,170,n = n.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,172,"assertEquals(Token.STRING, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,173,"assertEquals(3, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,174,"assertEquals(10, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,176,n = n.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,178,"assertEquals(Token.NUMBER, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,179,"assertEquals(3, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,180,"assertEquals(12, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,182,n = n.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,184,"assertEquals(Token.STRING, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,185,"assertEquals(4, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,186,"assertEquals(1, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,188,n = n.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,190,"assertEquals(Token.NUMBER, n.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,191,"assertEquals(4, n.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,192,"assertEquals(4, n.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,195,public void testLinenoCharnoAdd() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,196,"testLinenoCharnoBinop(""+"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,199,public void testLinenoCharnoSub() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,200,"testLinenoCharnoBinop(""-"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,203,public void testLinenoCharnoMul() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,204,"testLinenoCharnoBinop(""*"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,207,public void testLinenoCharnoDiv() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,208,"testLinenoCharnoBinop(""/"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,211,public void testLinenoCharnoMod() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,212,"testLinenoCharnoBinop(""%"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,215,public void testLinenoCharnoShift() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,216,"testLinenoCharnoBinop(""<<"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,219,public void testLinenoCharnoBinaryAnd() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,220,"testLinenoCharnoBinop(""&"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,223,public void testLinenoCharnoAnd() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,224,"testLinenoCharnoBinop(""&&"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,227,public void testLinenoCharnoBinaryOr() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,228,"testLinenoCharnoBinop(""|"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,231,public void testLinenoCharnoOr() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,232,"testLinenoCharnoBinop(""||"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,235,public void testLinenoCharnoLt() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,236,"testLinenoCharnoBinop(""<"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,239,public void testLinenoCharnoLe() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,240,"testLinenoCharnoBinop(""<="");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,243,public void testLinenoCharnoGt() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,244,"testLinenoCharnoBinop("">"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,247,public void testLinenoCharnoGe() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,248,"testLinenoCharnoBinop("">="");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,251,private void testLinenoCharnoBinop(String binop) {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,252,"Node op = parse(""var a = 89 "" + binop + "" 76"").getFirstChild()."
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,253,getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,255,"assertEquals(1, op.getLineno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,256,"assertEquals(11, op.getCharno());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,259,public void testJSDocAttachment1() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,260,"Node varNode = parse(""/** @type number */var a;"").getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,262,// VAR
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,263,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,264,JSDocInfo info = varNode.getJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,265,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,266,"assertTypeEquals(NUMBER_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,268,// NAME
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,269,Node nameNode = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,270,"assertEquals(Token.NAME, nameNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,271,assertNull(nameNode.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,274,public void testJSDocAttachment2() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,275,"Node varNode = parse(""/** @type number */var a,b;"").getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,277,// VAR
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,278,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,279,JSDocInfo info = varNode.getJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,280,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,281,"assertTypeEquals(NUMBER_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,283,// First NAME
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,284,Node nameNode1 = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,285,"assertEquals(Token.NAME, nameNode1.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,286,assertNull(nameNode1.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,288,// Second NAME
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,289,Node nameNode2 = nameNode1.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,290,"assertEquals(Token.NAME, nameNode2.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,291,assertNull(nameNode2.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,294,public void testJSDocAttachment3() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,295,Node assignNode = parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,296,"""/** @type number */goog.FOO = 5;"").getFirstChild().getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,298,// ASSIGN
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,299,"assertEquals(Token.ASSIGN, assignNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,300,JSDocInfo info = assignNode.getJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,301,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,302,"assertTypeEquals(NUMBER_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,305,public void testJSDocAttachment4() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,306,Node varNode = parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,307,"""var a, /** @define {number} */b = 5;"").getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,309,// ASSIGN
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,310,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,311,assertNull(varNode.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,313,// a
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,314,Node a = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,315,assertNull(a.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,317,// b
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,318,Node b = a.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,319,JSDocInfo info = b.getJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,320,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,321,assertTrue(info.isDefine());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,322,"assertTypeEquals(NUMBER_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,325,public void testJSDocAttachment5() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,326,Node varNode = parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,327,"""var /** @type number */a, /** @define {number} */b = 5;"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,328,.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,330,// ASSIGN
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,331,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,332,assertNull(varNode.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,334,// a
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,335,Node a = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,336,assertNotNull(a.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,337,JSDocInfo info = a.getJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,338,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,339,assertFalse(info.isDefine());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,340,"assertTypeEquals(NUMBER_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,342,// b
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,343,Node b = a.getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,344,info = b.getJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,345,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,346,assertTrue(info.isDefine());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,347,"assertTypeEquals(NUMBER_TYPE, info.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,351,* Tests that a JSDoc comment in an unexpected place of the code does not
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,352,* propagate to following code due to {@link JSDocInfo} aggregation.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,354,public void testJSDocAttachment6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,355,Node functionNode = parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,356,"""var a = /** @param {number} index */5;"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,357,"""/** @return boolean */function f(index){}"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,358,.getFirstChild().getNext();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,360,"assertEquals(Token.FUNCTION, functionNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,361,JSDocInfo info = functionNode.getJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,362,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,363,"assertFalse(info.hasParameter(""index""));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,364,assertTrue(info.hasReturnType());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,367,public void testJSDocAttachment7() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,368,"Node varNode = parse(""/** */var a;"").getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,370,// VAR
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,371,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,373,// NAME
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,374,Node nameNode = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,375,"assertEquals(Token.NAME, nameNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,376,assertNull(nameNode.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,379,public void testJSDocAttachment8() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,380,"Node varNode = parse(""/** x */var a;"").getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,382,// VAR
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,383,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,385,// NAME
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,386,Node nameNode = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,387,"assertEquals(Token.NAME, nameNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,388,assertNull(nameNode.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,391,public void testJSDocAttachment9() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,392,"Node varNode = parse(""/** \n x */var a;"").getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,394,// VAR
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,395,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,397,// NAME
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,398,Node nameNode = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,399,"assertEquals(Token.NAME, nameNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,400,assertNull(nameNode.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,403,public void testJSDocAttachment10() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,404,"Node varNode = parse(""/** x\n */var a;"").getFirstChild();"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,406,// VAR
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,407,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,409,// NAME
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,410,Node nameNode = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,411,"assertEquals(Token.NAME, nameNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,412,assertNull(nameNode.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,415,public void testJSDocAttachment11() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,416,Node varNode =
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,417,"parse(""/** @type {{x : number, 'y' : string, z}} */var a;"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,418,.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,420,// VAR
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,421,"assertEquals(Token.VAR, varNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,422,JSDocInfo info = varNode.getJSDocInfo();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,423,assertNotNull(info);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,425,assertTypeEquals(createRecordTypeBuilder().
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,426,"addProperty(""x"", NUMBER_TYPE)."
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,427,"addProperty(""y"", STRING_TYPE)."
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,428,"addProperty(""z"", UNKNOWN_TYPE)."
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,429,"build(),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,430,info.getType());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,432,// NAME
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,433,Node nameNode = varNode.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,434,"assertEquals(Token.NAME, nameNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,435,assertNull(nameNode.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,438,public void testJSDocAttachment12() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,439,Node varNode =
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,440,"parse(""var a = {/** @type {Object} */ b: c};"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,441,.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,442,Node objectLitNode = varNode.getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,443,"assertEquals(Token.OBJECTLIT, objectLitNode.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,444,assertNotNull(objectLitNode.getFirstChild().getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,447,public void testIncorrectJSDocDoesNotAlterJSParsing1() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,448,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,449,"parse(""var a = [1,2]""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,450,"parse(""/** @type Array.<number*/var a = [1,2]"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,451,MISSING_GT_MESSAGE));
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,454,public void testIncorrectJSDocDoesNotAlterJSParsing2() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,455,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,456,"parse(""var a = [1,2]""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,457,"parse(""/** @type {Array.<number}*/var a = [1,2]"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,458,MISSING_GT_MESSAGE));
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,461,public void testIncorrectJSDocDoesNotAlterJSParsing3() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,462,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,463,"parse(""C.prototype.say=function(nums) {alert(nums.join(','));};""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,464,"parse(""/** @param {Array.<number} nums */"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,465,"""C.prototype.say=function(nums) {alert(nums.join(','));};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,466,MISSING_GT_MESSAGE));
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,469,public void testIncorrectJSDocDoesNotAlterJSParsing4() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,470,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,471,"parse(""C.prototype.say=function(nums) {alert(nums.join(','));};""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,472,"parse(""/** @return boolean */"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,473,"""C.prototype.say=function(nums) {alert(nums.join(','));};""));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,476,public void testIncorrectJSDocDoesNotAlterJSParsing5() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,477,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,478,"parse(""C.prototype.say=function(nums) {alert(nums.join(','));};""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,479,"parse(""/** @param boolean this is some string*/"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,480,"""C.prototype.say=function(nums) {alert(nums.join(','));};""));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,483,public void testIncorrectJSDocDoesNotAlterJSParsing6() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,484,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,485,"parse(""C.prototype.say=function(nums) {alert(nums.join(','));};""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,486,"parse(""/** @param {bool!*%E$} */"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,487,"""C.prototype.say=function(nums) {alert(nums.join(','));};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,488,"""expected closing }"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,489,"""expecting a variable name in a @param tag""));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,492,public void testIncorrectJSDocDoesNotAlterJSParsing7() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,493,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,494,"parse(""C.prototype.say=function(nums) {alert(nums.join(','));};""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,495,"parse(""/** @see */"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,496,"""C.prototype.say=function(nums) {alert(nums.join(','));};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,497,"""@see tag missing description""));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,500,public void testIncorrectJSDocDoesNotAlterJSParsing8() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,501,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,502,"parse(""C.prototype.say=function(nums) {alert(nums.join(','));};""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,503,"parse(""/** @author */"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,504,"""C.prototype.say=function(nums) {alert(nums.join(','));};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,505,"""@author tag missing author""));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,508,public void testIncorrectJSDocDoesNotAlterJSParsing9() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,509,assertNodeEquality(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,510,"parse(""C.prototype.say=function(nums) {alert(nums.join(','));};""),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,511,"parse(""/** @someillegaltag */"" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,512,"""C.prototype.say=function(nums) {alert(nums.join(','));};"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,513,"""illegal use of unknown JSDoc tag \""someillegaltag\"";"""
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,514,"+ "" ignoring it""));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,517,public void testUnescapedSlashInRegexpCharClass() throws Exception {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,518,// The tokenizer without the fix for this bug throws an error.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,519,"parse(""var foo = /[/]/;"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,520,"parse(""var foo = /[hi there/]/;"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,521,"parse(""var foo = /[/yo dude]/;"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,522,"parse(""var foo = /\\/[@#$/watashi/wa/suteevu/desu]/;"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,525,"private void assertNodeEquality(Node expected, Node found) {"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,526,String message = expected.checkTreeEquals(found);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,527,if (message != null) {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,528,fail(message);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,532,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,533,public void testParse() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,534,"Node a = Node.newString(Token.NAME, ""a"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,535,"a.addChildToFront(Node.newString(Token.NAME, ""b""));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,536,"List<Pair<String, Node>> testCases = ImmutableList.of("
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,537,Pair.of(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,538,"""3;"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,539,"createScript(new Node(Token.EXPR_RESULT, Node.newNumber(3.0)))),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,540,Pair.of(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,541,"""var a = b;"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,542,"createScript(new Node(Token.VAR, a))),"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,543,Pair.of(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,544,"""\""hell\\\no\\ world\\\n\\\n!\"""","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,545,"createScript(new Node(Token.EXPR_RESULT,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,546,"Node.newString(Token.STRING, ""hello world!"")))));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,548,"for (Pair<String, Node> testCase : testCases) {"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,549,"assertNodeEquality(testCase.second, parse(testCase.first));"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,553,private Node createScript(Node n) {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,554,Node script = new ScriptOrFnNode(Token.SCRIPT);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,555,script.addChildToBack(n);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,556,return script;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,559,public void testTrailingCommaWarning1() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,560,"parse(""var a = ['foo', 'bar'];"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,563,public void testTrailingCommaWarning2() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,564,"parse(""var a = ['foo',,'bar'];"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,567,public void testTrailingCommaWarning3() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,568,"parse(""var a = ['foo', 'bar',];"", TRAILING_COMMA_MESSAGE);"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,571,public void testTrailingCommaWarning4() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,572,"parse(""var a = [,];"", TRAILING_COMMA_MESSAGE);"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,575,public void testTrailingCommaWarning5() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,576,"parse(""var a = {'foo': 'bar'};"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,579,public void testTrailingCommaWarning6() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,580,"parse(""var a = {'foo': 'bar',};"", TRAILING_COMMA_MESSAGE);"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,583,public void testTrailingCommaWarning7() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,584,"parseError(""var a = {,};"", BAD_PROPERTY_MESSAGE);"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,587,public void testConstForbidden() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,588,"parseError(""const x = 3;"", ""Unsupported syntax: CONST"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,591,public void testDestructuringAssignForbidden() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,592,"parseError(""var [x, y] = foo();"", ""destructuring assignment forbidden"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,595,public void testDestructuringAssignForbidden2() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,596,"parseError(""var {x, y} = foo();"", ""missing : after property id"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,599,public void testDestructuringAssignForbidden3() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,600,"parseError(""var {x: x, y: y} = foo();"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,601,"""destructuring assignment forbidden"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,604,public void testDestructuringAssignForbidden4() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,605,"parseError(""[x, y] = foo();"", ""destructuring assignment forbidden"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,608,public void testLetForbidden() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,609,"parseError(""function f() { let (x = 3) { alert(x); }; }"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,610,"""missing ; before statement"", ""syntax error"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,613,public void testYieldForbidden() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,614,"parseError(""function f() { yield 3; }"", ""missing ; before statement"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,617,public void testBracelessFunctionForbidden() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,618,"parseError(""var sq = function(x) x * x;"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,619,"""missing { before function body"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,622,public void testGeneratorsForbidden() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,623,"parseError(""var i = (x for (x in obj));"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,624,"""missing ) in parenthetical"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,627,public void testFileOverviewJSDoc1() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,628,"Node n = parse(""/** @fileoverview Hi mom! */ function Foo() {}"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,629,"assertEquals(Token.FUNCTION, n.getFirstChild().getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,630,assertTrue(n.getJSDocInfo() != null);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,631,assertNull(n.getFirstChild().getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,632,"assertEquals(""Hi mom!"","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,633,n.getJSDocInfo().getFileOverview());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,636,public void testFileOverviewJSDocDoesNotHoseParsing() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,637,assertEquals(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,638,"Token.FUNCTION,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,639,"parse(""/** @fileoverview Hi mom! \n */ function Foo() {}"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,640,.getFirstChild().getType());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,641,assertEquals(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,642,"Token.FUNCTION,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,643,"parse(""/** @fileoverview Hi mom! \n * * * */ function Foo() {}"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,644,.getFirstChild().getType());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,645,assertEquals(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,646,"Token.FUNCTION,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,647,"parse(""/** @fileoverview \n * x */ function Foo() {}"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,648,.getFirstChild().getType());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,649,assertEquals(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,650,"Token.FUNCTION,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,651,"parse(""/** @fileoverview \n * x \n */ function Foo() {}"")"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,652,.getFirstChild().getType());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,655,public void testFileOverviewJSDoc2() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,656,"Node n = parse(""/** @fileoverview Hi mom! */ "" +"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,657,"""/** @constructor */ function Foo() {}"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,658,assertTrue(n.getJSDocInfo() != null);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,659,"assertEquals(""Hi mom!"", n.getJSDocInfo().getFileOverview());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,660,assertTrue(n.getFirstChild().getJSDocInfo() != null);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,661,assertFalse(n.getFirstChild().getJSDocInfo().hasFileOverview());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,662,assertTrue(n.getFirstChild().getJSDocInfo().isConstructor());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,665,public void testObjectLiteralDoc1() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,666,"Node n = parse(""var x = {/** @type {number} */ 1: 2};"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,668,Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,669,"assertEquals(Token.OBJECTLIT, objectLit.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,671,Node number = objectLit.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,672,"assertEquals(Token.NUMBER, number.getType());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,673,assertNotNull(number.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,676,public void testDuplicatedParam() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,677,"parse(""function foo(x, x) {}"", ""Duplicate parameter name \""x\""."");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,680,public void testLamestWarningEver() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,681,// This used to be a warning.
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,682,"parse(""var x = /** @type {undefined} */ (y);"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,683,"parse(""var x = /** @type {void} */ (y);"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,686,public void testParseBlockDescription() {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,687,"Node n = parse(""/** This is a variable. */ var x;"");"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,688,Node var = n.getFirstChild();
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,689,assertNotNull(var.getJSDocInfo());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,690,"assertEquals(""This is a variable."","
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,691,var.getJSDocInfo().getBlockDescription());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,694,"private void parseError(String string, String... errors) {"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,695,"TestErrorReporter testErrorReporter = new TestErrorReporter(errors, null);"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,696,Node script = null;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,697,try {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,698,script = ParserRunner.parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,699,"""input"", string, true, registry,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,700,"testErrorReporter, Logger.getAnonymousLogger());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,701,} catch (IOException e) {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,702,throw new RuntimeException(e);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,705,// verifying that all warnings were seen
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,706,assertTrue(testErrorReporter.hasEncounteredAllErrors());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,707,assertTrue(testErrorReporter.hasEncounteredAllWarnings());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,710,"private Node parse(String string, String... warnings) {"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,711,"TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,712,Node script = null;
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,713,try {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,714,script = ParserRunner.parse(
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,715,"""input"", string,  true, registry,"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,716,"testErrorReporter, Logger.getAnonymousLogger());"
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,717,} catch (IOException e) {
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,718,throw new RuntimeException(e);
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,721,// verifying that all warnings were seen
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,722,assertTrue(testErrorReporter.hasEncounteredAllErrors());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,723,assertTrue(testErrorReporter.hasEncounteredAllWarnings());
True,test/com/google/javascript/jscomp/parsing/ParserTest.java,test/com/google/javascript/jscomp/parsing/ParserTest.java,725,return script;

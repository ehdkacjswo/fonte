is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,268,eturn  (f.value(lower) * f.value(upper) < 0);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,268,double f1 = f.value(lower);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,269,double f2 = f.value(upper);
True,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java,270,return ((f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0));
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,85, else if (x - domain[0] < domain[1] - x) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,86,"et = lowerCumulativeProbability(domain[0], x, n, m, k);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,88,"et = 1.0 - upperCumulativeProbability(x + 1, domain[1], n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,86,"ret = innerCumulativeProbability(domain[0], x, 1, n, m, k);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,182," For this disbution, X, this method returns P(x0 &le; X &le; x1).  This"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,183, probability is computed by summing the point probabilities for the values
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,184," x0, x0 + 1, x0 + 2, ..., x1, in that order."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,185," @param x0 the inclusive, lower bound"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,186," @param x1 the inclusive, upper bound"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,187, @param n the population size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,188, @param m number of successes in the population.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,189, @param k the sample size.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,190, @return P(x0 &le; X &le; x1).
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,192,rivate double lowerCumulativeProbability(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,193,"nt x0, int x1, int n, int m, int k)"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,195,ouble ret;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,196,et = 0.0;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,197,or (int i = x0; i <= x1; ++i) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,198,"et += probability(n, m, k, i);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,200,eturn ret;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,284, @return upper tail CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,260,* @return upper tail CDF for this distribution.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,261,* @since 1.1
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,296, else if(x >= domain[1]) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,273,} else if(x > domain[1]) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,298, else if (x - domain[0] < domain[1] - x) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,299,"et = 1.0 - lowerCumulativeProbability(domain[0], x - 1, n, m, k);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,301,"et = upperCumulativeProbability(x, domain[1], n, m, k);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,276,"ret = innerCumulativeProbability(domain[1], x, -1, n, m, k);"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,310," x1, x1 - 1, x1 - 2, ..., x0, in that order."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,285,"* x0, x0 + 1, x0 + 2, ..., x1, in the order directed by dx."
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,288,* @param dx the direction of summation. 1 indicates summing from x0 to x1.
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,289,*           0 indicates summing from x1 to x0.
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,318,rivate double upperCumulativeProbability(
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,319,"nt x0, int x1, int n, int m, int k)"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,295,private double innerCumulativeProbability(
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,296,"int x0, int x1, int dx, int n, int m, int k)"
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,321,ouble ret = 0.0;
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,322,or (int i = x1; i >= x0; --i) {
False,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,323,"et += probability(n, m, k, i);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,298,"double ret = probability(n, m, k, x0);"
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,299,while (x0 != x1) {
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,300,x0 += dx;
True,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,src/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java,301,"ret += probability(n, m, k, x0);"
False,src/test/org/apache/commons/math/RetryTestCase.java,src/test/org/apache/commons/math/RetryTestCase.java,32,ublic class RetryTestCase extends TestCase {
True,src/test/org/apache/commons/math/RetryTestCase.java,src/test/org/apache/commons/math/RetryTestCase.java,32,public abstract class RetryTestCase extends TestCase {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,131,"public static void assertRelativelyEquals(double expected, double actual, double relativeError) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,132,"assertRelativelyEquals(null, expected, actual, relativeError);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,135,"public static void assertRelativelyEquals(String msg, double expected, double actual, double relativeError) {"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,136,if (Double.isNaN(expected)) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,137,"Assert.assertTrue(msg, Double.isNaN(actual));"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,138,} else if (Double.isNaN(actual)) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,139,"Assert.assertTrue(msg, Double.isNaN(expected));"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,140,} else if (Double.isInfinite(actual) || Double.isInfinite(expected)) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,141,"Assert.assertEquals(expected, actual, relativeError);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,142,} else if (expected == 0.0) {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,143,"Assert.assertEquals(msg, actual, expected, relativeError);"
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,144,} else {
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,145,double x = Math.abs((expected - actual) / expected);
True,src/test/org/apache/commons/math/TestUtils.java,src/test/org/apache/commons/math/TestUtils.java,146,"Assert.assertEquals(msg, 0.0, x, relativeError);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,19,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,134,public void testLargeValues() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,135,int populationSize = 3456;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,136,int sampleSize = 789;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,137,int numberOfSucceses = 101;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,138,double[][] data = {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,139,"{0.0, 2.75646034603961e-12, 2.75646034603961e-12, 1.0},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,140,"{1.0, 8.55705370142386e-11, 8.83269973602783e-11, 0.999999999997244},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,141,"{2.0, 1.31288129219665e-9, 1.40120828955693e-9, 0.999999999911673},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,142,"{3.0, 1.32724172984193e-8, 1.46736255879763e-8, 0.999999998598792},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,143,"{4.0, 9.94501711734089e-8, 1.14123796761385e-7, 0.999999985326375},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,144,"{5.0, 5.89080768883643e-7, 7.03204565645028e-7, 0.999999885876203},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,145,"{20.0, 0.0760051397707708, 0.27349758476299, 0.802507555007781},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,146,"{21.0, 0.087144222047629, 0.360641806810619, 0.72650241523701},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,147,"{22.0, 0.0940378846881819, 0.454679691498801, 0.639358193189381},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,148,"{23.0, 0.0956897500614809, 0.550369441560282, 0.545320308501199},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,149,"{24.0, 0.0919766921922999, 0.642346133752582, 0.449630558439718},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,150,"{25.0, 0.083641637261095, 0.725987771013677, 0.357653866247418},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,151,"{96.0, 5.93849188852098e-57, 1.0, 6.01900244560712e-57},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,152,"{97.0, 7.96593036832547e-59, 1.0, 8.05105570861321e-59},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,153,"{98.0, 8.44582921934367e-61, 1.0, 8.5125340287733e-61},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,154,"{99.0, 6.63604297068222e-63, 1.0, 6.670480942963e-63},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,155,"{100.0, 3.43501099007557e-65, 1.0, 3.4437972280786e-65},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,156,"{101.0, 8.78623800302957e-68, 1.0, 8.78623800302957e-68},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,159,"testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,162,"private void testHypergeometricDistributionProbabilities(int populationSize, int sampleSize, int numberOfSucceses, double[][] data) {"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,163,"HypergeometricDistributionImpl dist = new HypergeometricDistributionImpl(populationSize, numberOfSucceses, sampleSize);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,164,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,165,int x = (int)data[i][0];
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,166,double pdf = data[i][1];
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,167,double actualPdf = dist.probability(x);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,168,"TestUtils.assertRelativelyEquals(pdf, actualPdf, 1.0e-9);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,170,double cdf = data[i][2];
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,171,double actualCdf = dist.cumulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,172,"TestUtils.assertRelativelyEquals(cdf, actualCdf, 1.0e-9);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,174,double cdf1 = data[i][3];
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,175,double actualCdf1 = dist.upperCumulativeProbability(x);
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,176,"TestUtils.assertRelativelyEquals(cdf1, actualCdf1, 1.0e-9);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,180,public void testMoreLargeValues() {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,181,int populationSize = 26896;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,182,int sampleSize = 895;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,183,int numberOfSucceses = 55;
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,184,double[][] data = {
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,185,"{0.0, 0.155168304750504, 0.155168304750504, 1.0},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,186,"{1.0, 0.29437545000746, 0.449543754757964, 0.844831695249496},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,187,"{2.0, 0.273841321577003, 0.723385076334967, 0.550456245242036},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,188,"{3.0, 0.166488572570786, 0.889873648905753, 0.276614923665033},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,189,"{4.0, 0.0743969744713231, 0.964270623377076, 0.110126351094247},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,190,"{5.0, 0.0260542785784855, 0.990324901955562, 0.0357293766229237},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,191,"{20.0, 3.57101101678792e-16, 1.0, 3.78252101622096e-16},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,192,"{21.0, 2.00551638598312e-17, 1.0, 2.11509999433041e-17},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,193,"{22.0, 1.04317070180562e-18, 1.0, 1.09583608347287e-18},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,194,"{23.0, 5.03153504903308e-20, 1.0, 5.266538166725e-20},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,195,"{24.0, 2.2525984149695e-21, 1.0, 2.35003117691919e-21},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,196,"{25.0, 9.3677424515947e-23, 1.0, 9.74327619496943e-23},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,197,"{50.0, 9.83633962945521e-69, 1.0, 9.8677629437617e-69},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,198,"{51.0, 3.13448949497553e-71, 1.0, 3.14233143064882e-71},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,199,"{52.0, 7.82755221928122e-74, 1.0, 7.84193567329055e-74},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,200,"{53.0, 1.43662126065532e-76, 1.0, 1.43834540093295e-76},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,201,"{54.0, 1.72312692517348e-79, 1.0, 1.7241402776278e-79},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,202,"{55.0, 1.01335245432581e-82, 1.0, 1.01335245432581e-82},"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,204,"testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,177,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,178,BigMatrix m4 = new BigMatrixImpl(new String[][] {});
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,179,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,180,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,181,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,183,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,184,"BigMatrix m4 = new BigMatrixImpl(new String[][] {{},{}});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,185,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,186,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,187,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,189,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,190,"BigMatrix m4 = new BigMatrixImpl(new String[][] {{""a"", ""b""},{""c""}});"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,191,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,192,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,193,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,196,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,197,"BigMatrix m4 = new BigMatrixImpl(0, 1);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,198,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,199,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,200,// expected
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,202,try {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,203,"BigMatrix m4 = new BigMatrixImpl(1, 0);"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,204,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,205,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,206,// expected
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,671,RealMatrixImpl m2 = new RealMatrixImpl();
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,672,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,673,"m2.setSubMatrix(testData,0,1);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,674,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,675,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,676,// expected
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,678,try {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,679,"m2.setSubMatrix(testData,1,0);"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,680,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,681,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,682,// expected
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,131,"assertEquals(1.0, f.getCumPct('e'), 0.0);"

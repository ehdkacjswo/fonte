is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,60,* Compute the sum of this and v.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,61,* @param v vector to be added
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,62,* @return this + v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,63,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,65,RealVector add(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,66,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,78,* Compute this minus v.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,79,* @param v vector to be subtracted
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,80,* @return this + v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,81,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,83,RealVector subtract(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,84,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,470,* Element-by-element multiplication.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,471,* @param v vector by which instance elements must be multiplied
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,472,* @return a vector containing this[i] * v[i] for all i
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,473,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,475,public RealVector ebeMultiply(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,476,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,488,* Element-by-element division.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,489,* @param v vector by which instance elements must be divided
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,490,* @return a vector containing this[i] / v[i] for all i
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,491,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,493,public RealVector ebeDivide(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,494,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,512,* Compute the dot product.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,513,* @param v vector with which dot product should be computed
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,514,* @return the scalar dot product between instance and v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,515,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,517,double dotProduct(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,518,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,569,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,570,* <p>This method computes the distance consistent with the
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,571,"* L<sub>2</sub> norm, i.e. the square root of the sum of"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,572,"* elements differences, or euclidian distance.</p>"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,573,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,574,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,575,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,576,* @see #getL1Distance(double[])
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,577,* @see #getLInfDistance(double[])
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,578,* @see #getNorm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,580,double getDistance(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,581,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,599,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,600,* <p>This method computes the distance consistent with
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,601,"* L<sub>1</sub> norm, i.e. the sum of the absolute values of"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,602,* elements differences.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,603,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,604,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,605,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,606,* @see #getDistance(double[])
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,607,* @see #getLInfDistance(double[])
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,608,* @see #getL1Norm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,610,double getL1Distance(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,611,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,629,* Distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,630,* <p>This method computes the distance consistent with
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,631,"* L<sub>&infty;</sub> norm, i.e. the max of the absolute values of"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,632,* elements differences.</p>
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,633,* @param v vector to which distance is requested
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,634,* @return distance between two vectors.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,635,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,636,* @see #getDistance(double[])
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,637,* @see #getL1Distance(double[])
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,638,* @see #getLInfNorm()
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,640,double getLInfDistance(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,641,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,664,/** Find the orthogonal projection of this vector onto another vector.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,665,* @param v vector onto which instance must be projected
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,666,* @return projection of the instance onto v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,667,* @throws IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,669,RealVector projection(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,670,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,682,* Compute the outer product.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,683,* @param v vector with which outer product should be computed
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,684,* @return the square matrix outer product between instance and v
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,685,* @exception IllegalArgumentException if v is not the same size as this
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,687,RealMatrix outerProduct(double[] v)
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,688,throws IllegalArgumentException;
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,762,* Set a set of consecutive elements.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,763,* @param index index of first element to be set.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,764,* @param v vector containing the values to set.
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,765,* @exception MatrixIndexException if the index is
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,766,* inconsistent with vector size
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,768,"void set(int index, double[] v)"
True,src/java/org/apache/commons/math/linear/RealVector.java,src/java/org/apache/commons/math/linear/RealVector.java,769,throws MatrixIndexException;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,32,rivate static final long serialVersionUID = 7838747548772166404L;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,32,private static final long serialVersionUID = -1097961340710804027L;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,190,* Construct a vector by appending one vector to another vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,191,* @param v1 first vector (will be put in front of the new vector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,192,* @param v2 second vector (will be put at back of the new vector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,194,"public RealVectorImpl(RealVectorImpl v1, double[] v2) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,195,data = new double[v1.data.length + v2.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,196,"System.arraycopy(v1.data, 0, data, 0, v1.data.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,197,"System.arraycopy(v2, 0, data, v1.data.length, v2.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,201,* Construct a vector by appending one vector to another vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,202,* @param v1 first vector (will be put in front of the new vector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,203,* @param v2 second vector (will be put at back of the new vector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,205,"public RealVectorImpl(double[] v1, RealVectorImpl v2) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,206,data = new double[v1.length + v2.data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,207,"System.arraycopy(v1, 0, data, 0, v1.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,208,"System.arraycopy(v2.data, 0, data, v1.length, v2.data.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,212,* Construct a vector by appending one vector to another vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,213,* @param v1 first vector (will be put in front of the new vector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,214,* @param v2 second vector (will be put at back of the new vector)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,216,"public RealVectorImpl(double[] v1, double[] v2) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,217,data = new double[v1.length + v2.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,218,"System.arraycopy(v1, 0, data, 0, v1.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,219,"System.arraycopy(v2, 0, data, v1.length, v2.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,242,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,243,public RealVector add(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,244,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,245,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,246,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,247,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,248,out[i] = data[i] + v[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,250,return new RealVectorImpl(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,217,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,218,ouble[] out = new double[data.length];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,219,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,220,ut[i] = data[i] + v.data[i];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,222,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,261,return (RealVectorImpl) add(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,279,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,280,public RealVector subtract(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,281,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,282,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,283,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,284,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,285,out[i] = data[i] - v[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,287,return new RealVectorImpl(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,248,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,249,ouble[] out = new double[data.length];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,250,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,251,ut[i] = data[i] - v.data[i];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,253,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,298,return (RealVectorImpl) subtract(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,792,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,793,public RealVector ebeMultiply(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,794,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,795,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,796,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,797,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,798,out[i] = data[i] * v[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,800,return new RealVectorImpl(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,755,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,756,ouble[] out = new double[data.length];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,757,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,758,ut[i] = data[i] * v.data[i];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,760,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,811,return (RealVectorImpl) ebeMultiply(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,829,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,830,public RealVector ebeDivide(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,831,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,832,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,833,double[] out = new double[data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,834,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,835,out[i] = data[i] / v[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,837,return new RealVectorImpl(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,786,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,787,ouble[] out = new double[data.length];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,788,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,789,ut[i] = data[i] / v.data[i];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,791,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,848,return (RealVectorImpl) ebeDivide(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,880,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,881,public double dotProduct(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,882,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,883,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,884,double dot = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,885,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,886,dot += data[i] * v[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,888,return dot;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,831,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,832,ouble dot = 0;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,833,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,834,ot += data[i] * v.getEntry(i);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,836,eturn dot;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,899,return dotProduct(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,945,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,946,public double getDistance(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,947,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,948,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,949,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,950,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,951,final double delta = data[i] - v[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,952,sum += delta * delta;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,954,return Math.sqrt(sum);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,897,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,898,ouble sum = 0;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,899,or (int i = 0; i < data.length; ++i) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,900,inal double delta = data[i] - v.data[i];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,901,um += delta * delta;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,903,eturn Math.sqrt(sum);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,972,return getDistance(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,991,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,992,public double getL1Distance(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,993,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,994,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,995,double sum = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,996,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,997,final double delta = data[i] - v[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,998,sum += Math.abs(delta);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1000,return sum;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,937,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,938,ouble sum = 0;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,939,or (int i = 0; i < data.length; ++i) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,940,inal double delta = data[i] - v.data[i];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,941,um += Math.abs(delta);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,943,eturn sum;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1018,return getL1Distance(v.data);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1037,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1038,public double getLInfDistance(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1039,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1040,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1041,double max = 0;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1042,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1043,final double delta = data[i] - v[i];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1044,"max = Math.max(max, Math.abs(delta));"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1046,return max;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,977,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,978,ouble max = 0;
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,979,or (int i = 0; i < data.length; ++i) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,980,inal double delta = data[i] - v.data[i];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,981,"ax = Math.max(max, Math.abs(delta));"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,983,eturn max;
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1064,return getLInfDistance(v.data);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1011,** Find the orthogonal projection of this vector onto another vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1092,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1093,public RealVector projection(double[] v) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1094,"return projection(new RealVectorImpl(v, false));"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1097,/** Find the orthogonal projection of this vector onto another vector.
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1123,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1124,public RealMatrix outerProduct(double[] v)
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1125,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1126,checkVectorDimensions(v.length);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1127,double[][] out = new double[data.length][data.length];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1128,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1129,for (int j = 0; j < data.length; j++) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1130,out[i][j] = data[i] * v[j];
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1133,return new RealMatrixImpl(out);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1045,heckVectorDimensions(v);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1046,ouble[][] out = new double[data.length][data.length];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1047,or (int i = 0; i < data.length; i++) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1048,or (int j = 0; j < data.length; j++) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1049,ut[i][j] = data[i] * v.data[j];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1052,eturn new RealMatrixImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1144,return (RealMatrixImpl) outerProduct(v.data);
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1093,inal double[] out = new double[data.length + in.length];
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1094,"ystem.arraycopy(data, 0, out, 0, data.length);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1095,"ystem.arraycopy(in, 0, out, data.length, in.length);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1096,eturn new RealVectorImpl(out);
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1185,"return new RealVectorImpl(this, in);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1224,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1225,"public void set(int index, double[] v) {"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1226,try {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1227,"System.arraycopy(v, 0, data, index, v.length);"
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1228,} catch (IndexOutOfBoundsException e) {
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1229,throw new MatrixIndexException(e.getMessage());
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1145,ry {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1146,"ystem.arraycopy(v.data, 0, data, index, v.data.length);"
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1147, catch (IndexOutOfBoundsException e) {
False,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1148,hrow new MatrixIndexException(e.getMessage());
True,src/java/org/apache/commons/math/linear/RealVectorImpl.java,src/java/org/apache/commons/math/linear/RealVectorImpl.java,1243,"set(index, v.data);"
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,50,rivate static final long serialVersionUID = 8731816072271374422L;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,50,private static final long serialVersionUID = 4715341047369582908L;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,71,public RealVector add(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,72,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,79,public RealVector subtract(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,80,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,315,public RealVector ebeMultiply(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,316,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,323,public RealVector ebeDivide(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,324,throw unsupported();
False,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,317,/	checkVectorDimensions(v);
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,339,public double dotProduct(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,340,double dot = 0;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,341,for (int i = 0; i < data.length; i++) {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,342,dot += data[i] * v[i];
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,344,return dot;
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,363,public double getDistance(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,364,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,371,public double getL1Distance(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,372,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,379,public double getLInfDistance(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,380,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,395,public RealVector projection(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,396,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,403,public RealMatrix outerProduct(double[] v) throws IllegalArgumentException {
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,404,throw unsupported();
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,439,"public void set(int index, double[] v) throws MatrixIndexException {"
True,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,src/test/org/apache/commons/math/linear/RealVectorImplTest.java,440,throw unsupported();

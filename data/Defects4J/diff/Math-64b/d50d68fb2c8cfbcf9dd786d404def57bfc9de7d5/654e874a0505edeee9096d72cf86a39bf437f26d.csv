is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,17,package org.apache.commons.math;
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,20,* Exeption thrown when a sample contains several entries at the same abscissa.
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,21,* @version $Revision:$
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,23,public class DuplicateSampleAbscissaException extends MathException  {
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,25,/** Serializable version identifier */
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,26,private static final long serialVersionUID = -2271007547170169872L;
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,29,* Construct an exception indicating the duplicate abscissa.
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,30,* @param abscissa duplicate abscissa
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,31,* @param i1 index of one entry having the duplicate abscissa
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,32,* @param i2 index of another entry having the duplicate abscissa
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,34,"public DuplicateSampleAbscissaException(double abscissa, int i1, int i2) {"
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,35,"super(""Abscissa {0} is duplicated at both indices {1} and {2}"","
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,36,"new Object[] { new Double(abscissa), new Integer(i1), new Integer(i2) });"
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,40,* Get the duplicate abscissa.
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,41,* @return duplicate abscissa
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,43,public double getDuplicateAbscissa() {
True,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java,44,return ((Double) getArguments()[0]).doubleValue();
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,15, limitations under the License.
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,17,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,20,mport org.apache.commons.math.MathException;
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,23," Implements the <a href="""
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,24," ""http://mathworld.wolfram.com/NewtonsDividedDifferenceInterpolationFormula.html"">"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,25, Divided Difference Algorithm</a> for interpolation of real univariate
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,26," functions. For reference, see <b>Introduction to Numerical Analysis</b>,"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,27," ISBN 038795452X, chapter 2."
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,28, <p>
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,29," The actual code of Neville's evalution is in PolynomialFunctionLagrangeForm,"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,30, this class provides an easy-to-use interface to it.
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,32, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,34,"ublic class DividedDifferenceInterpolator implements UnivariateRealInterpolator,"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,35,erializable {
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,37,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,38,tatic final long serialVersionUID = 107049519551235069L;
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,41, Computes an interpolating function for the data set.
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,43, @param x the interpolating points array
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,44, @param y the interpolating values array
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,45, @return a function which interpolates the data set
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,46, @throws MathException if arguments are invalid
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,48,"ublic UnivariateRealFunction interpolate(double x[], double y[]) throws"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,49,athException {
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,52, a[] and c[] are defined in the general formula of Newton form:
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,53, p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,54,        a[n](x-c[0])(x-c[1])...(x-c[n-1])
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,56,"ouble a[], c[];"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,58,"olynomialFunctionLagrangeForm.verifyInterpolationArray(x, y);"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,61," When used for interpolation, the Newton form formula becomes"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,62," p(x) = f[x0] + f[x0,x1](x-x0) + f[x0,x1,x2](x-x0)(x-x1) + ... +"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,63,"        f[x0,x1,...,x[n-1]](x-x0)(x-x1)...(x-x[n-2])"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,64," Therefore, a[k] = f[x0,x1,...,xk], c[k] = x[k]."
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,65, <p>
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,66," Note x[], y[], a[] have the same length but c[]'s size is one less."
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,68, = new double[x.length-1];
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,69,or (int i = 0; i < c.length; i++) {
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,70,[i] = x[i];
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,72," = computeDividedDifference(x, y);"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,74,olynomialFunctionNewtonForm p;
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,75," = new PolynomialFunctionNewtonForm(a, c);"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,76,eturn p;
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,80, Returns a copy of the divided difference array.
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,81, <p>
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,82, The divided difference array is defined recursively by <pre>
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,83, f[x0] = f(x0)
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,84," f[x0,x1,...,xk] = (f(x1,...,xk) - f(x0,...,x[k-1])) / (xk - x0)"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,85, </pre><p>
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,86, The computational complexity is O(N^2).
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,88, @return a fresh copy of the divided difference array
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,89, @throws MathException if any abscissas coincide
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,91,"rotected static double[] computeDividedDifference(double x[], double y[])"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,92,hrows MathException {
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,94,"nt i, j, n;"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,95,"ouble divdiff[], a[], denominator;"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,97,"olynomialFunctionLagrangeForm.verifyInterpolationArray(x, y);"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,99, = x.length;
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,100,ivdiff = new double[n];
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,101,or (i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,102,ivdiff[i] = y[i];      // initialization
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,105, = new double [n];
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,106,[0] = divdiff[0];
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,107,or (i = 1; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,108,or (j = 0; j < n-i; j++) {
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,109,enominator = x[j+i] - x[j];
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,110,f (denominator == 0.0) {
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,111,/ This happens only when two abscissas are identical.
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,112,hrow new MathException
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,113,"""Identical abscissas cause division by zero."");"
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,115,ivdiff[j] = (divdiff[j+1] - divdiff[j]) / denominator;
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,117,[i] = divdiff[0];
False,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,120,eturn a;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,21,import org.apache.commons.math.DuplicateSampleAbscissaException;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,24,"* Implements the <a href="""
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,25,"* ""http://mathworld.wolfram.com/NewtonsDividedDifferenceInterpolationFormula.html"">"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,26,* Divided Difference Algorithm</a> for interpolation of real univariate
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,27,"* functions. For reference, see <b>Introduction to Numerical Analysis</b>,"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,28,"* ISBN 038795452X, chapter 2."
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,29,* <p>
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,30,"* The actual code of Neville's evalution is in PolynomialFunctionLagrangeForm,"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,31,* this class provides an easy-to-use interface to it.
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,33,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,35,"public class DividedDifferenceInterpolator implements UnivariateRealInterpolator,"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,36,Serializable {
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,38,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,39,private static final long serialVersionUID = 107049519551235069L;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,42,* Computes an interpolating function for the data set.
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,44,* @param x the interpolating points array
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,45,* @param y the interpolating values array
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,46,* @return a function which interpolates the data set
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,47,* @throws DuplicateSampleAbscissaException if arguments are invalid
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,49,"public UnivariateRealFunction interpolate(double x[], double y[]) throws"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,50,DuplicateSampleAbscissaException {
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,53,* a[] and c[] are defined in the general formula of Newton form:
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,54,* p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,55,*        a[n](x-c[0])(x-c[1])...(x-c[n-1])
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,57,"double a[], c[];"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,59,"PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y);"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,62,"* When used for interpolation, the Newton form formula becomes"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,63,"* p(x) = f[x0] + f[x0,x1](x-x0) + f[x0,x1,x2](x-x0)(x-x1) + ... +"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,64,"*        f[x0,x1,...,x[n-1]](x-x0)(x-x1)...(x-x[n-2])"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,65,"* Therefore, a[k] = f[x0,x1,...,xk], c[k] = x[k]."
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,66,* <p>
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,67,"* Note x[], y[], a[] have the same length but c[]'s size is one less."
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,69,c = new double[x.length-1];
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,70,for (int i = 0; i < c.length; i++) {
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,71,c[i] = x[i];
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,73,"a = computeDividedDifference(x, y);"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,75,PolynomialFunctionNewtonForm p;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,76,"p = new PolynomialFunctionNewtonForm(a, c);"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,77,return p;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,81,* Returns a copy of the divided difference array.
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,82,* <p>
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,83,* The divided difference array is defined recursively by <pre>
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,84,* f[x0] = f(x0)
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,85,"* f[x0,x1,...,xk] = (f(x1,...,xk) - f(x0,...,x[k-1])) / (xk - x0)"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,86,* </pre><p>
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,87,* The computational complexity is O(N^2).
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,89,* @return a fresh copy of the divided difference array
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,90,* @throws DuplicateSampleAbscissaException if any abscissas coincide
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,92,"protected static double[] computeDividedDifference(double x[], double y[])"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,93,throws DuplicateSampleAbscissaException {
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,95,"int i, j, n;"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,96,"double divdiff[], a[], denominator;"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,98,"PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y);"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,100,n = x.length;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,101,divdiff = new double[n];
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,102,for (i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,103,divdiff[i] = y[i];      // initialization
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,106,a = new double [n];
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,107,a[0] = divdiff[0];
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,108,for (i = 1; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,109,for (j = 0; j < n-i; j++) {
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,110,denominator = x[j+i] - x[j];
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,111,if (denominator == 0.0) {
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,112,// This happens only when two abscissas are identical.
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,113,"throw new DuplicateSampleAbscissaException(x[j], j, j+i);"
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,115,divdiff[j] = (divdiff[j+1] - divdiff[j]) / denominator;
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,117,a[i] = divdiff[0];
True,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,src/java/org/apache/commons/math/analysis/DividedDifferenceInterpolator.java,120,return a;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,15, limitations under the License.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,17,ackage org.apache.commons.math.analysis;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,20,mport org.apache.commons.math.FunctionEvaluationException;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,23, Implements the representation of a real polynomial function in
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,24," <a href=""http://mathworld.wolfram.com/LagrangeInterpolatingPolynomial.html"">"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,25," Lagrange Form</a>. For reference, see <b>Introduction to Numerical"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,26," Analysis</b>, ISBN 038795452X, chapter 2."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,27, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,28, The approximated function should be smooth enough for Lagrange polynomial
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,29," to work well. Otherwise, consider using splines instead."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,31, @version $Revision$ $Date$
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,33,"ublic class PolynomialFunctionLagrangeForm implements UnivariateRealFunction,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,34,erializable {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,36,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,37,tatic final long serialVersionUID = -3965199246151093920L;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,40," The coefficients of the polynomial, ordered by degree -- i.e."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,41, coefficients[0] is the constant term and coefficients[n] is the
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,42, coefficient of x^n where n is the degree of the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,44,rivate double coefficients[];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,47, Interpolating points (abscissas) and the function values at these points.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,49,"rivate double x[], y[];"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,52, Whether the polynomial coefficients are available.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,54,rivate boolean coefficientsComputed;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,57, Construct a Lagrange polynomial with the given abscissas and function
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,58, values. The order of interpolating points are not important.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,59, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,60, The constructor makes copy of the input arrays and assigns them.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,62, @param x interpolating points
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,63, @param y function values at interpolating points
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,64, @throws IllegalArgumentException if input arrays are not valid
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,66,"olynomialFunctionLagrangeForm(double x[], double y[]) throws"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,67,llegalArgumentException {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,69,"erifyInterpolationArray(x, y);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,70,his.x = new double[x.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,71,his.y = new double[y.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,72,"ystem.arraycopy(x, 0, this.x, 0, x.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,73,"ystem.arraycopy(y, 0, this.y, 0, y.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,74,oefficientsComputed = false;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,78, Calculate the function value at the given point.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,80, @param z the point at which the function value is to be computed
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,81, @return the function value
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,82, @throws FunctionEvaluationException if a runtime error occurs
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,83, @see UnivariateRealFunction#value(double)
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,85,ublic double value(double z) throws FunctionEvaluationException {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,86,"eturn evaluate(x, y, z);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,90, Returns the degree of the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,92, @return the degree of the polynomial
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,94,ublic int degree() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,95,eturn x.length - 1;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,99, Returns a copy of the interpolating points array.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,100, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,101, Changes made to the returned copy will not affect the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,103, @return a fresh copy of the interpolating points array
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,105,ublic double[] getInterpolatingPoints() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,106,ouble[] out = new double[x.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,107,"ystem.arraycopy(x, 0, out, 0, x.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,108,eturn out;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,112, Returns a copy of the interpolating values array.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,113, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,114, Changes made to the returned copy will not affect the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,116, @return a fresh copy of the interpolating values array
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,118,ublic double[] getInterpolatingValues() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,119,ouble[] out = new double[y.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,120,"ystem.arraycopy(y, 0, out, 0, y.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,121,eturn out;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,125, Returns a copy of the coefficients array.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,126, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,127, Changes made to the returned copy will not affect the polynomial.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,129, @return a fresh copy of the coefficients array
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,131,ublic double[] getCoefficients() {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,132,f (!coefficientsComputed) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,133,omputeCoefficients();
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,135,ouble[] out = new double[coefficients.length];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,136,"ystem.arraycopy(coefficients, 0, out, 0, coefficients.length);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,137,eturn out;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,141, Evaluate the Lagrange polynomial using
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,142," <a href=""http://mathworld.wolfram.com/NevillesAlgorithm.html"">"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,143, Neville's Algorithm</a>. It takes O(N^2) time.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,144, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,145, This function is made public static so that users can call it directly
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,146, without instantiating PolynomialFunctionLagrangeForm object.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,148, @param x the interpolating points array
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,149, @param y the interpolating values array
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,150, @param z the point at which the function value is to be computed
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,151, @return the function value
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,152, @throws FunctionEvaluationException if a runtime error occurs
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,153, @throws IllegalArgumentException if inputs are not valid
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,155,"ublic static double evaluate(double x[], double y[], double z) throws"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,156,"unctionEvaluationException, IllegalArgumentException {"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,158,"nt i, j, n, nearest = 0;"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,159,"ouble value, c[], d[], tc, td, divider, w, dist, min_dist;"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,161,"erifyInterpolationArray(x, y);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,163, = x.length;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,164, = new double[n];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,165, = new double[n];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,166,in_dist = Double.POSITIVE_INFINITY;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,167,or (i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,168,/ initialize the difference arrays
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,169,[i] = y[i];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,170,[i] = y[i];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,171,/ find out the abscissa closest to z
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,172,ist = Math.abs(z - x[i]);
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,173,f (dist < min_dist) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,174,earest = i;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,175,in_dist = dist;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,179,/ initial approximation to the function value at z
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,180,alue = y[nearest];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,182,or (i = 1; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,183,or (j = 0; j < n-i; j++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,184,c = x[j] - z;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,185,d = x[i+j] - z;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,186,ivider = x[j] - x[i+j];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,187,f (divider == 0.0) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,188,/ This happens only when two abscissas are identical.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,189,"hrow new FunctionEvaluationException(z,"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,190,"Identical abscissas cause division by zero: x["" +"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,191," + ""] = x["" + (i+j) + ""] = "" + x[i]);"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,193,/ update the difference arrays
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,194, = (c[j+1] - d[j]) / divider;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,195,[j] = tc * w;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,196,[j] = td * w;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,198,/ sum up the difference terms to get the final value
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,199,f (nearest < 0.5*(n-i+1)) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,200,alue += c[nearest];    // fork down
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,201, else {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,202,earest--;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,203,alue += d[nearest];    // fork up
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,207,eturn value;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,211, Calculate the coefficients of Lagrange polynomial from the
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,212, interpolation data. It takes O(N^2) time.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,213, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,214, Note this computation can be ill-conditioned. Use with caution
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,215, and only when it is necessary.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,217, @throws ArithmeticException if any abscissas coincide
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,219,rotected void computeCoefficients() throws ArithmeticException {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,220,"nt i, j, n;"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,221,"ouble c[], tc[], d, t;"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,223, = degree() + 1;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,224,oefficients = new double[n];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,225,or (i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,226,oefficients[i] = 0.0;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,229,/ c[] are the coefficients of P(x) = (x-x[0])(x-x[1])...(x-x[n-1])
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,230, = new double[n+1];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,231,[0] = 1.0;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,232,or (i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,233,or (j = i; j > 0; j--) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,234,[j] = c[j-1] - c[j] * x[i];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,236,[0] *= (-x[i]);
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,237,[i+1] = 1;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,240,c = new double[n];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,241,or (i = 0; i < n; i++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,242,/ d = (x[i]-x[0])...(x[i]-x[i-1])(x[i]-x[i+1])...(x[i]-x[n-1])
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,243, = 1;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,244,or (j = 0; j < n; j++) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,245,f (i != j) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,246, *= (x[i] - x[j]);
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,249,f (d == 0.0) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,250,/ This happens only when two abscissas are identical.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,251,hrow new ArithmeticException
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,252,"""Identical abscissas cause division by zero."");"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,254, = y[i] / d;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,255,"/ Lagrange polynomial is the sum of n terms, each of which is a"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,256,/ polynomial of degree n-1. tc[] are the coefficients of the i-th
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,257,/ numerator Pi(x) = (x-x[0])...(x-x[i-1])(x-x[i+1])...(x-x[n-1]).
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,258,c[n-1] = c[n];     // actually c[n] = 1
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,259,oefficients[n-1] += t * tc[n-1];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,260,or (j = n-2; j >= 0; j--) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,261,c[j] = c[j+1] + tc[j+1] * x[i];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,262,oefficients[j] += t * tc[j];
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,266,oefficientsComputed = true;
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,270, Verifies that the interpolation arrays are valid.
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,271, <p>
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,272, The interpolating points must be distinct. However it is not
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,273," verified here, it is checked in evaluate() and computeCoefficients()."
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,275, @throws IllegalArgumentException if not valid
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,276," @see #evaluate(double[], double[], double)"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,277, @see #computeCoefficients()
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,279,"rotected static void verifyInterpolationArray(double x[], double y[]) throws"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,280,llegalArgumentException {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,282,f (x.length < 2 || y.length < 2) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,283,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,284,"""Interpolation requires at least two points."");"
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,286,f (x.length != y.length) {
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,287,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,288,"""Abscissa and value arrays must have the same length."");"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,17,package org.apache.commons.math.analysis;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,21,import org.apache.commons.math.DuplicateSampleAbscissaException;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,22,import org.apache.commons.math.FunctionEvaluationException;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,25,* Implements the representation of a real polynomial function in
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,26,"* <a href=""http://mathworld.wolfram.com/LagrangeInterpolatingPolynomial.html"">"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,27,"* Lagrange Form</a>. For reference, see <b>Introduction to Numerical"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,28,"* Analysis</b>, ISBN 038795452X, chapter 2."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,29,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,30,* The approximated function should be smooth enough for Lagrange polynomial
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,31,"* to work well. Otherwise, consider using splines instead."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,33,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,35,"public class PolynomialFunctionLagrangeForm implements UnivariateRealFunction,"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,36,Serializable {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,38,/** serializable version identifier */
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,39,static final long serialVersionUID = -3965199246151093920L;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,42,"* The coefficients of the polynomial, ordered by degree -- i.e."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,43,* coefficients[0] is the constant term and coefficients[n] is the
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,44,* coefficient of x^n where n is the degree of the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,46,private double coefficients[];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,49,* Interpolating points (abscissas) and the function values at these points.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,51,"private double x[], y[];"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,54,* Whether the polynomial coefficients are available.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,56,private boolean coefficientsComputed;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,59,* Construct a Lagrange polynomial with the given abscissas and function
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,60,* values. The order of interpolating points are not important.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,61,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,62,* The constructor makes copy of the input arrays and assigns them.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,64,* @param x interpolating points
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,65,* @param y function values at interpolating points
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,66,* @throws IllegalArgumentException if input arrays are not valid
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,68,"PolynomialFunctionLagrangeForm(double x[], double y[]) throws"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,69,IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,71,"verifyInterpolationArray(x, y);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,72,this.x = new double[x.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,73,this.y = new double[y.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,74,"System.arraycopy(x, 0, this.x, 0, x.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,75,"System.arraycopy(y, 0, this.y, 0, y.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,76,coefficientsComputed = false;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,80,* Calculate the function value at the given point.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,82,* @param z the point at which the function value is to be computed
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,83,* @return the function value
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,84,* @throws FunctionEvaluationException if a runtime error occurs
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,85,* @see UnivariateRealFunction#value(double)
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,87,public double value(double z) throws FunctionEvaluationException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,88,try {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,89,"return evaluate(x, y, z);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,90,} catch (DuplicateSampleAbscissaException e) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,91,"throw new FunctionEvaluationException(z, e.getPattern(), e.getArguments(), e);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,96,* Returns the degree of the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,98,* @return the degree of the polynomial
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,100,public int degree() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,101,return x.length - 1;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,105,* Returns a copy of the interpolating points array.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,106,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,107,* Changes made to the returned copy will not affect the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,109,* @return a fresh copy of the interpolating points array
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,111,public double[] getInterpolatingPoints() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,112,double[] out = new double[x.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,113,"System.arraycopy(x, 0, out, 0, x.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,114,return out;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,118,* Returns a copy of the interpolating values array.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,119,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,120,* Changes made to the returned copy will not affect the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,122,* @return a fresh copy of the interpolating values array
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,124,public double[] getInterpolatingValues() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,125,double[] out = new double[y.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,126,"System.arraycopy(y, 0, out, 0, y.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,127,return out;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,131,* Returns a copy of the coefficients array.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,132,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,133,* Changes made to the returned copy will not affect the polynomial.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,135,* @return a fresh copy of the coefficients array
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,137,public double[] getCoefficients() {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,138,if (!coefficientsComputed) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,139,computeCoefficients();
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,141,double[] out = new double[coefficients.length];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,142,"System.arraycopy(coefficients, 0, out, 0, coefficients.length);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,143,return out;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,147,* Evaluate the Lagrange polynomial using
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,148,"* <a href=""http://mathworld.wolfram.com/NevillesAlgorithm.html"">"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,149,* Neville's Algorithm</a>. It takes O(N^2) time.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,150,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,151,* This function is made public static so that users can call it directly
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,152,* without instantiating PolynomialFunctionLagrangeForm object.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,154,* @param x the interpolating points array
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,155,* @param y the interpolating values array
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,156,* @param z the point at which the function value is to be computed
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,157,* @return the function value
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,158,* @throws DuplicateSampleAbscissaException if the sample has duplicate abscissas
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,159,* @throws IllegalArgumentException if inputs are not valid
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,161,"public static double evaluate(double x[], double y[], double z) throws"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,162,"DuplicateSampleAbscissaException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,164,"int i, j, n, nearest = 0;"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,165,"double value, c[], d[], tc, td, divider, w, dist, min_dist;"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,167,"verifyInterpolationArray(x, y);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,169,n = x.length;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,170,c = new double[n];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,171,d = new double[n];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,172,min_dist = Double.POSITIVE_INFINITY;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,173,for (i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,174,// initialize the difference arrays
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,175,c[i] = y[i];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,176,d[i] = y[i];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,177,// find out the abscissa closest to z
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,178,dist = Math.abs(z - x[i]);
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,179,if (dist < min_dist) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,180,nearest = i;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,181,min_dist = dist;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,185,// initial approximation to the function value at z
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,186,value = y[nearest];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,188,for (i = 1; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,189,for (j = 0; j < n-i; j++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,190,tc = x[j] - z;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,191,td = x[i+j] - z;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,192,divider = x[j] - x[i+j];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,193,if (divider == 0.0) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,194,// This happens only when two abscissas are identical.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,195,"throw new DuplicateSampleAbscissaException(x[i], i, i+j);"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,197,// update the difference arrays
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,198,w = (c[j+1] - d[j]) / divider;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,199,c[j] = tc * w;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,200,d[j] = td * w;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,202,// sum up the difference terms to get the final value
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,203,if (nearest < 0.5*(n-i+1)) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,204,value += c[nearest];    // fork down
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,205,} else {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,206,nearest--;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,207,value += d[nearest];    // fork up
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,211,return value;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,215,* Calculate the coefficients of Lagrange polynomial from the
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,216,* interpolation data. It takes O(N^2) time.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,217,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,218,* Note this computation can be ill-conditioned. Use with caution
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,219,* and only when it is necessary.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,221,* @throws ArithmeticException if any abscissas coincide
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,223,protected void computeCoefficients() throws ArithmeticException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,224,"int i, j, n;"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,225,"double c[], tc[], d, t;"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,227,n = degree() + 1;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,228,coefficients = new double[n];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,229,for (i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,230,coefficients[i] = 0.0;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,233,// c[] are the coefficients of P(x) = (x-x[0])(x-x[1])...(x-x[n-1])
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,234,c = new double[n+1];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,235,c[0] = 1.0;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,236,for (i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,237,for (j = i; j > 0; j--) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,238,c[j] = c[j-1] - c[j] * x[i];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,240,c[0] *= (-x[i]);
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,241,c[i+1] = 1;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,244,tc = new double[n];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,245,for (i = 0; i < n; i++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,246,// d = (x[i]-x[0])...(x[i]-x[i-1])(x[i]-x[i+1])...(x[i]-x[n-1])
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,247,d = 1;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,248,for (j = 0; j < n; j++) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,249,if (i != j) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,250,d *= (x[i] - x[j]);
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,253,if (d == 0.0) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,254,// This happens only when two abscissas are identical.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,255,throw new ArithmeticException
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,256,"(""Identical abscissas cause division by zero."");"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,258,t = y[i] / d;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,259,"// Lagrange polynomial is the sum of n terms, each of which is a"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,260,// polynomial of degree n-1. tc[] are the coefficients of the i-th
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,261,// numerator Pi(x) = (x-x[0])...(x-x[i-1])(x-x[i+1])...(x-x[n-1]).
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,262,tc[n-1] = c[n];     // actually c[n] = 1
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,263,coefficients[n-1] += t * tc[n-1];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,264,for (j = n-2; j >= 0; j--) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,265,tc[j] = c[j+1] + tc[j+1] * x[i];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,266,coefficients[j] += t * tc[j];
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,270,coefficientsComputed = true;
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,274,* Verifies that the interpolation arrays are valid.
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,275,* <p>
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,276,* The interpolating points must be distinct. However it is not
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,277,"* verified here, it is checked in evaluate() and computeCoefficients()."
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,279,* @throws IllegalArgumentException if not valid
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,280,"* @see #evaluate(double[], double[], double)"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,281,* @see #computeCoefficients()
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,283,"protected static void verifyInterpolationArray(double x[], double y[]) throws"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,284,IllegalArgumentException {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,286,if (x.length < 2 || y.length < 2) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,287,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,288,"(""Interpolation requires at least two points."");"
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,290,if (x.length != y.length) {
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,291,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/PolynomialFunctionLagrangeForm.java,292,"(""Abscissa and value arrays must have the same length."");"
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,18,package org.apache.commons.math;
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,20,import java.util.Locale;
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,22,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,25,* @version $Revision:$
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,27,public class DuplicateSampleAbscissaExceptionTest extends TestCase {
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,29,public void testConstructor(){
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,30,"DuplicateSampleAbscissaException ex = new DuplicateSampleAbscissaException(1.2, 10, 11);"
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,31,assertNull(ex.getCause());
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,32,assertNotNull(ex.getMessage());
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,33,"assertTrue(ex.getMessage().indexOf(""1.2"") > 0);"
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,34,"assertEquals(1.2, ex.getDuplicateAbscissa(), 0);"
True,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,src/test/org/apache/commons/math/DuplicateSampleAbscissaExceptionTest.java,35,assertFalse(ex.getMessage().equals(ex.getMessage(Locale.FRENCH)));

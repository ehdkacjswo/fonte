is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,75, Default constructor.
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,77,rotected ContinuedFraction() {
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,78,uper();
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,75,* Default constructor.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,77,protected ContinuedFraction() {
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,78,super();
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,104,ublic double evaluate(double x){
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,104,public double evaluate(double x) {
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,114,"ublic double evaluate(double x, double epsilon){"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,114,"public double evaluate(double x, double epsilon) {"
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,124,"ublic double evaluate(double x, int maxIterations){"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,124,"public double evaluate(double x, int maxIterations) {"
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,162," Evaluates the n-th convergent, fn = pn / qn, for this continued fraction at the value x."
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,162,"* Evaluates the n-th convergent, fn = pn / qn, for this continued fraction"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,163,* at the value x.
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,170, @return the value of the the n-th convergent for this continued fraction evaluated at x.
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,171,* @return the value of the the n-th convergent for this continued fraction
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,172,*         evaluated at x.
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,172,"rivate double evaluate(int n, double x, double[][] a, double[][] an, double[][] f, double epsilon, int maxIterations) {"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,174,"private double evaluate(int n, double x, double[][] a, double[][] an,"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,175,"double[][] f, double epsilon, int maxIterations) {"
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,188,f(Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) < Math.abs(epsilon * f[1][0] * f[1][1])){
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,191,if(Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,192,Math.abs(epsilon * f[1][0] * f[1][1])){
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,192,"hrow new ConvergenceException(""Continued fraction convergents failed to converge."");"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,196,throw new ConvergenceException(
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,197,"""Continued fraction convergents failed to converge."");"
False,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,195,"et = evaluate(n + 1, x, f /* new a */, an /* reuse an */, a /* new f */, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,200,"ret = evaluate(n + 1, x, f /* new a */, an /* reuse an */,"
True,src/java/org/apache/commons/math/ContinuedFraction.java,src/java/org/apache/commons/math/ContinuedFraction.java,201,"a /* new f */, epsilon, maxIterations);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,64,* Construct an exception with the given message.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,65,* @param message descriptive error message.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,67,public ConvergenceException(String message) {
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,68,super(message);
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,67,ublic ConvergenceException(String message) {
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,68,uper(message);
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,74,"ublic ConvergenceException(String message, Throwable cause) {"
False,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,75,"uper(message, cause);"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,72,* Construct an exception with the given message and root cause.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,73,* @param message descriptive error message.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,74,* @param cause root cause.
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,76,"public ConvergenceException(String message, Throwable cause) {"
True,src/java/org/apache/commons/math/ConvergenceException.java,src/java/org/apache/commons/math/ConvergenceException.java,77,"super(message, cause);"
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,68,rivate RootFinding(){
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,68,private RootFinding() {
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,86,ouble upperBound){
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,86,double upperBound) {
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,106,nt maximumIterations){
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,106,int maximumIterations) {
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,135,ouble b){
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,135,double b) {
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,140,f ( b < a )
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,140,if ( b < a ) {
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,149,hile(Math.abs(a - b) > EPSILON){
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,148,while(Math.abs(a - b) > EPSILON) {
False,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,153,f(fm * fa > 0.0){
True,src/java/org/apache/commons/math/RootFinding.java,src/java/org/apache/commons/math/RootFinding.java,152,if(fm * fa > 0.0) {
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,96,ublic double inverseCummulativeProbability(final double p){
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,97,f(p < 0.0 || p > 1.0){
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,96,public double inverseCummulativeProbability(final double p) {
True,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,97,if (p < 0.0 || p > 1.0){
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,9,* are met:
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,52,* <http://www.apache.org/>.
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,19,ublic ChiSquaredDistributionImpl(double degreesOfFreedom){
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,72,public ChiSquaredDistributionImpl(double degreesOfFreedom) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,59,rotected double getDomainLowerBound(double p){
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,112,protected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,72,rotected double getDomainUpperBound(double p){
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,125,protected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,78,f(p < .5){
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,131,if (p < .5) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,97,rotected double getInitialDomain(double p){
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,150,protected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,103,f(p < .5){
True,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistributionImpl.java,156,if (p < .5) {
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,63, {@link DistributionFactory#createFDistribution(double)}
True,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,63,"* {@link DistributionFactory#createFDistribution(double,double)}"
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,63, {@link DistributionFactory#createGammaDistribution(double)}
True,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,63,"* {@link DistributionFactory#createGammaDistribution(double,double)}"

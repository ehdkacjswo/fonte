is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,22, Instances of BinomialDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,src/java/org/apache/commons/math/distribution/BinomialDistribution.java,23," {@link DistributionFactory#createBinomialDistribution(int, double)}."
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,22, Instances of CauchyDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/java/org/apache/commons/math/distribution/CauchyDistribution.java,23," {@link DistributionFactory#createCauchyDistribution(double, double)}.<p>"
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,22, Instances of ChiSquaredDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,23, {@link DistributionFactory#createChiSquareDistribution(double)}.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,20,mport org.apache.commons.discovery.tools.DiscoverClass;
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,46,* @deprecated pluggability of distribution instances is now provided through
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,47,*             constructors and setters.
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,62,istributionFactory factory = null;
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,63,ry {
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,64,iscoverClass dc = new DiscoverClass();
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,65,actory = (DistributionFactory) dc.newInstance(
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,66,"istributionFactory.class,"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,67,"org.apache.commons.math.distribution.DistributionFactoryImpl"");"
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,68, catch(Throwable t) {
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,69,eturn new DistributionFactoryImpl();
False,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,71,eturn factory;
True,src/java/org/apache/commons/math/distribution/DistributionFactory.java,src/java/org/apache/commons/math/distribution/DistributionFactory.java,62,return new DistributionFactoryImpl();
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,24,* @deprecated pluggability of distribution instances is now provided through
True,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java,25,*             constructors and setters.
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,22, Instances of ExponentialDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/java/org/apache/commons/math/distribution/ExponentialDistribution.java,23, {@link DistributionFactory#createExponentialDistribution(double)}.
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,22, Instances of FDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/FDistribution.java,src/java/org/apache/commons/math/distribution/FDistribution.java,23," {@link DistributionFactory#createFDistribution(double,double)}."
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,22, Instances of GammaDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/GammaDistribution.java,src/java/org/apache/commons/math/distribution/GammaDistribution.java,23," {@link DistributionFactory#createGammaDistribution(double,double)}."
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,23, Instances of HypergeometricDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,24," {@link DistributionFactory#createHypergeometricDistribution(int, int, int)}."
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,22, Instances of NormalDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,23," {@link DistributionFactory#createNormalDistribution(double, double)}.<p>"
False,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,29, Instances of PascalDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/PascalDistribution.java,src/java/org/apache/commons/math/distribution/PascalDistribution.java,30," {@link DistributionFactory#createPascalDistribution(int, double)}."
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,22, Instances of TDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/TDistribution.java,src/java/org/apache/commons/math/distribution/TDistribution.java,23, {@link DistributionFactory#createTDistribution(double)}
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,26, Instances of WeibullDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/java/org/apache/commons/math/distribution/WeibullDistribution.java,27," {@link DistributionFactory#createWeibullDistribution(double, double)}"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,40,"eturn DistributionFactory.newInstance().createBinomialDistribution(10,0.70);"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,40,"return new BinomialDistributionImpl(10,0.70);"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,80,"etDistribution(DistributionFactory.newInstance().createBinomialDistribution(5,0.0d));"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,80,"setDistribution(new BinomialDistributionImpl(5,0.0d));"
False,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,94,"etDistribution(DistributionFactory.newInstance().createBinomialDistribution(5,1.0d));"
True,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,src/test/org/apache/commons/math/distribution/BinomialDistributionTest.java,94,"setDistribution(new BinomialDistributionImpl(5,1.0d));"
False,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,41,"eturn DistributionFactory.newInstance().createCauchyDistribution(1.2, 2.1);"
True,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,src/test/org/apache/commons/math/distribution/CauchyDistributionTest.java,41,"return new CauchyDistributionImpl(1.2, 2.1);"
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,41,eturn DistributionFactory.newInstance().createChiSquareDistribution(5.0);
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,41,return new ChiSquaredDistributionImpl(5.0);
False,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,79,etDistribution(DistributionFactory.newInstance().createChiSquareDistribution(0.1d));
True,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,src/test/org/apache/commons/math/distribution/ChiSquareDistributionTest.java,79,setDistribution(new ChiSquaredDistributionImpl(0.1d));
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,15, limitations under the License.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,18,ackage org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,20,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,23, @version $Revision$ $Date$
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,25,ublic class DistributionFactoryImplTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,27,rivate DistributionFactory factory;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,30, Constructor for DistributionFactoryImplTest.
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,31, @param name
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,33,ublic DistributionFactoryImplTest(String name) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,34,uper(name);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,37, @throws java.lang.Exception
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,39,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,40,uper.setUp();
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,41,actory = new DistributionFactoryImpl();
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,45, @throws java.lang.Exception
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,47,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,48,actory = null;
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,49,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,52,ublic void testCreateChiSquareDistributionNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,53,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,54,actory.createChiSquareDistribution(-1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,55,"ail(""negative degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,56, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,61,ublic void testCreateChiSquareDistributionZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,62,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,63,actory.createChiSquareDistribution(0.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,64,"ail(""zero degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,65, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,70,ublic void testCreateChiSquareDistributionPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,71,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,72,actory.createChiSquareDistribution(1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,73, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,74,"ail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,78,ublic void testCreateFDistributionNegativePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,79,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,80,"actory.createFDistribution(-1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,81,"ail(""negative degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,82, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,87,ublic void testCreateFDistributionZeroPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,88,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,89,"actory.createFDistribution(0.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,90,"ail(""zero degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,91, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,96,ublic void testCreateFDistributionPositiveNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,97,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,98,"actory.createFDistribution(1.0, -1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,99,"ail(""negative degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,100, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,105,ublic void testCreateFDistributionPositiveZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,106,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,107,"actory.createFDistribution(1.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,108,"ail(""zero degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,109, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,114,ublic void testCreateFDistributionPositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,115,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,116,"actory.createFDistribution(1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,117, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,118,"ail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,122,ublic void testCreateExponentialDistributionNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,123,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,124,actory.createExponentialDistribution(-1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,125,"ail(""negative mean.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,126, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,131,ublic void testCreateExponentialDistributionZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,132,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,133,actory.createExponentialDistribution(0.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,134,"ail(""zero mean.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,135, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,140,ublic void testCreateExponentialDistributionPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,141,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,142,actory.createExponentialDistribution(1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,143, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,144,"ail(""positive mean.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,148,ublic void testCreateGammaDistributionNegativePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,149,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,150,"actory.createGammaDistribution(-1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,151,"ail(""negative alpha.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,152, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,157,ublic void testCreateGammaDistributionZeroPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,158,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,159,"actory.createGammaDistribution(0.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,160,"ail(""zero alpha.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,161, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,166,ublic void testCreateGammaDistributionPositiveNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,167,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,168,"actory.createGammaDistribution(1.0, -1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,169,"ail(""negative beta.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,170, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,175,ublic void testCreateGammaDistributionPositiveZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,176,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,177,"actory.createGammaDistribution(1.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,178,"ail(""zero beta.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,179, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,184,ublic void testCreateGammaDistributionPositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,185,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,186,"actory.createGammaDistribution(1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,187, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,188,"ail(""positive alpah and beta.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,192,ublic void testCreateTDistributionNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,193,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,194,actory.createTDistribution(-1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,195,"ail(""negative degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,196, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,201,ublic void testCreateTDistributionZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,202,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,203,actory.createTDistribution(0.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,204,"ail(""zero degrees of freedom.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,205, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,210,ublic void testCreateTDistributionPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,211,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,212,actory.createTDistribution(1.0);
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,213, catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,214,"ail(""positive degrees of freedom.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,218,ublic void testBinomialDistributionNegativePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,219,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,220,"actory.createBinomialDistribution(-1, 0.5);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,221,"ail(""negative number of trials.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,222, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,226,ublic void testBinomialDistributionZeroPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,227,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,228,"actory.createBinomialDistribution(0, 0.5);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,229, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,230,"ail(""zero number of trials.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,234,ublic void testBinomialDistributionPositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,235,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,236,"actory.createBinomialDistribution(10, 0.5);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,237, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,238,"ail(""positive number of trials.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,242,ublic void testBinomialDistributionPositiveNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,243,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,244,"actory.createBinomialDistribution(10, -0.5);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,245,"ail(""negative probability of success.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,246, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,250,ublic void testBinomialDistributionPositiveZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,251,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,252,"actory.createBinomialDistribution(10, 0.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,253, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,254,"ail(""zero probability of success.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,258,ublic void testBinomialDistributionPositiveOne(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,259,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,260,"actory.createBinomialDistribution(10, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,261, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,262,"ail(""valid probability of success.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,266,ublic void testBinomialDistributionPositiveTwo(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,267,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,268,"actory.createBinomialDistribution(10, 2.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,269,"ail(""high probability of success.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,270, catch (IllegalArgumentException ex ) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,274,ublic void testHypergeometricDistributionNegativePositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,275,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,276,"actory.createHypergeometricDistribution(-1, 10, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,277,"ail(""negative population size.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,278, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,282,ublic void testHypergeometricDistributionZeroPositivePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,283,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,284,"actory.createHypergeometricDistribution(0, 10, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,285,"ail(""zero population size.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,286, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,290,ublic void testHypergeometricDistributionPositiveNegativePositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,291,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,292,"actory.createHypergeometricDistribution(20, -1, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,293,"ail(""negative number of successes.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,294, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,298,ublic void testHypergeometricDistributionPositiveZeroPositive(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,299,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,300,"actory.createHypergeometricDistribution(20, 0, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,301, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,302,"ail(""valid number of successes.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,306,ublic void testHypergeometricDistributionPositivePositiveNegative(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,307,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,308,"actory.createHypergeometricDistribution(20, 10, -1);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,309,"ail(""negative sample size.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,310, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,314,ublic void testHypergeometricDistributionPositivePositiveZero(){
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,315,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,316,"actory.createHypergeometricDistribution(20, 10, 0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,317, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,318,"ail(""valid sample size.  IllegalArgumentException is not expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,322,ublic void testHypergeometricDistributionSmallPopulationSize() {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,323,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,324,"actory.createHypergeometricDistribution(5, 3, 10);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,325,"ail(""sample size larger than population size.  IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,326, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,330,ublic void testCauchyDistributionNegative() {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,331,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,332,"actory.createCauchyDistribution(0.0, -1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,333,"ail(""invalid scale. IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,334, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,338,ublic void testCauchyDistributionZero() {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,339,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,340,"actory.createCauchyDistribution(0.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,341,"ail(""invalid scale. IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,342, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,346,ublic void testWeibullDistributionNegativePositive() {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,347,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,348,"actory.createWeibullDistribution(-1.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,349,"ail(""invalid shape. IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,350, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,354,ublic void testWeibullDistributionZeroPositive() {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,355,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,356,"actory.createWeibullDistribution(0.0, 1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,357,"ail(""invalid shape. IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,358, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,362,ublic void testWeibullDistributionPositiveNegative() {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,363,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,364,"actory.createWeibullDistribution(1.0, -1.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,365,"ail(""invalid scale. IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,366, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,370,ublic void testWeibullDistributionPositiveZero() {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,371,ry {
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,372,"actory.createWeibullDistribution(1.0, 0.0);"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,373,"ail(""invalid scale. IllegalArgumentException expected"");"
False,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,src/test/org/apache/commons/math/distribution/DistributionFactoryImplTest.java,374, catch(IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,40,eturn DistributionFactory.newInstance().createExponentialDistribution(5.0);
True,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,src/test/org/apache/commons/math/distribution/ExponentialDistributionTest.java,40,return new ExponentialDistributionImpl(5.0);
False,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,41,"eturn DistributionFactory.newInstance().createFDistribution(5.0, 6.0);"
True,src/test/org/apache/commons/math/distribution/FDistributionTest.java,src/test/org/apache/commons/math/distribution/FDistributionTest.java,41,"return new FDistributionImpl(5.0, 6.0);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,41,"eturn DistributionFactory.newInstance().createGammaDistribution(4d, 2d);"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,41,"return new GammaDistributionImpl(4d, 2d);"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,103,istributionFactory factory = DistributionFactory.newInstance();
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,104,"ammaDistribution distribution = factory.createGammaDistribution( a, b );"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,103,"GammaDistribution distribution = new GammaDistributionImpl( a, b );"
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,110,istributionFactory factory = DistributionFactory.newInstance();
False,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,111,"ammaDistribution distribution = factory.createGammaDistribution( a, b );"
True,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,src/test/org/apache/commons/math/distribution/GammaDistributionTest.java,109,"GammaDistribution distribution = new GammaDistributionImpl( a, b );"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,43,"eturn DistributionFactory.newInstance().createHypergeometricDistribution(10,5, 5);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,43,"return new HypergeometricDistributionImpl(10,5, 5);"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,83,"etDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,5,3));"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,83,"setDistribution(new HypergeometricDistributionImpl(5,5,3));"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,97,"etDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,0,3));"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,97,"setDistribution(new HypergeometricDistributionImpl(5,0,3));"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,111,"etDistribution(DistributionFactory.newInstance().createHypergeometricDistribution(5,3,5));"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,111,"setDistribution(new HypergeometricDistributionImpl(5,3,5));"
False,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,124,"ypergeometricDistribution dist = DistributionFactory.newInstance().createHypergeometricDistribution(5,3,5);"
True,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,src/test/org/apache/commons/math/distribution/HypergeometricDistributionTest.java,124,"HypergeometricDistribution dist = new HypergeometricDistributionImpl(5,3,5);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,41,"eturn DistributionFactory.newInstance().createNormalDistribution(2.1, 1.4);"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,41,"return new NormalDistributionImpl(2.1, 1.4);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,80,"etDistribution(DistributionFactory.newInstance().createNormalDistribution(0, 1));"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,80,"setDistribution(new NormalDistributionImpl(0, 1));"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,82,"etDistribution(DistributionFactory.newInstance().createNormalDistribution(0, 0.1));"
True,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,82,"setDistribution(new NormalDistributionImpl(0, 0.1));"
False,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,40,"eturn DistributionFactory.newInstance().createPascalDistribution(10,0.70);"
True,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,40,"return new PascalDistributionImpl(10,0.70);"
False,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,80,"etDistribution(DistributionFactory.newInstance().createPascalDistribution(5,0.0d));"
True,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,80,"setDistribution(new PascalDistributionImpl(5,0.0d));"
False,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,94,"etDistribution(DistributionFactory.newInstance().createPascalDistribution(5,1.0d));"
True,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,src/test/org/apache/commons/math/distribution/PascalDistributionTest.java,94,"setDistribution(new PascalDistributionImpl(5,1.0d));"
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,46,eturn DistributionFactory.newInstance().createPoissonDistribution
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,47,DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,46,return new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,108,oissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(100);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,107,PoissonDistribution dist = new PoissonDistributionImpl(100);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,123,oissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,122,PoissonDistribution dist = new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,129,oissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,128,PoissonDistribution dist = new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,141,oissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,140,PoissonDistribution dist = new PoissonDistributionImpl(1.0);
False,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,162,oissonDistribution dist = DistributionFactory.newInstance().createPoissonDistribution(1.0);
True,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,src/test/org/apache/commons/math/distribution/PoissonDistributionTest.java,161,PoissonDistribution dist = new PoissonDistributionImpl(1.0);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,40,eturn DistributionFactory.newInstance().createTDistribution(5.0);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,40,return new TDistributionImpl(5.0);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,70,ouble est;
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,71,st = td.cumulativeProbability(.1);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,72,st = td.cumulativeProbability(.01);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,70,td.cumulativeProbability(.1);
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,71,td.cumulativeProbability(.01);
False,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,76,etDistribution(DistributionFactory.newInstance().createTDistribution(1d));
True,src/test/org/apache/commons/math/distribution/TDistributionTest.java,src/test/org/apache/commons/math/distribution/TDistributionTest.java,75,setDistribution(new TDistributionImpl(1d));
False,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,41,"eturn DistributionFactory.newInstance().createWeibullDistribution(1.2, 2.1);"
True,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,src/test/org/apache/commons/math/distribution/WeibullDistributionTest.java,41,"return new WeibullDistributionImpl(1.2, 2.1);"

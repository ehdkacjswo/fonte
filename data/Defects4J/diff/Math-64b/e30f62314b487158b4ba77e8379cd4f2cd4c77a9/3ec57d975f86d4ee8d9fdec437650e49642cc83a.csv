is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,5,* reserved.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,9,* are met:
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,17,*    distribution.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,55,package org.apache.commons.math;
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,58,* Random data generation utilities
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,59,* @author Phil Steitz
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,60,* @version $Revision: 1.1 $ $Date: 2003/05/18 00:58:51 $
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,62,public interface RandomData {
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,64,* Generates a random string of hex characters of length
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,65,* <code>len</code>.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,66,"* The generated string will be random, but not cryptographically"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,67,"* secure. To generate cryptographically secure strings, use"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,68,* <code>nextSecureHexString</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,69,* @param len the length of the string to be generated
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,70,* @throws IllegalArgumentException if <code>len</code> is not positive.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,72,public String nextHexString(int len);
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,75,* Generates a uniformly distributed random integer between
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,76,* <code>lower</code> and <code>upper</code> (endpoints included).<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,77,"* The generated integer will be random, but not cryptographically secure."
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,78,"* To generate cryptographically secure integer sequences, use"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,79,* <code>nextSecureInt</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,80,* @param lower lower bound for generated integer
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,81,* @param upper upper bound for generated integer
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,82,* @exception IllegalArgumentException thrown if
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,83,* <code>lower</code> is not strictly less than <code>upper</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,84,* @return a random integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,85,* and less than or equal to <code>upper</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,87,"public int nextInt(int lower, int upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,90,* Generates a uniformly distributed random long integer between <
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,91,* code>lower</code> and <code>upper</code> (endpoints included).
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,92,"* The generated long integer values will be random, but not"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,93,* cryptographically secure.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,94,"* To generate cryptographically secure sequences of longs, use"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,95,* <code>nextSecureLong</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,96,* @param lower lower bound for generated integer
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,97,* @param upper upper bound for generated integer
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,98,* @exception IllegalArgumentException Thrown if lower > upper
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,99,* @return a random integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,100,* and less than or equal to <code>upper</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,102,"public long nextLong(long lower, long upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,105,* Generates a random string of hex characters from a secure random sequence.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,106,"* If cryptographic security is not required,"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,107,* use <code>nextHexString()</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,108,* @param len length of return string
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,109,* @exception IllegalArgumentException thrown if len <= 0
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,110,* @return the random hex string
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,112,public String nextSecureHexString(int len);
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,115,* Generates a uniformly distributed random integer between
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,116,* <code>lower</code> and <code>upper</code> (endpoints included)
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,117,* from a secure random sequence.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,118,* The generated sequence will be cryptographically secure.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,119,"* If cryptographic security is not required, <code>nextInt</code>"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,120,* should be used.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,121,* <strong>Definition</strong>(secure random sequence):
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,122,* http://www.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,123,* @param lower lower bound for generated integer
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,124,* @param upper upper bound for generated integer
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,125,* @exception IllegalArgumentException thrown if
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,126,* <code>lower</code> is not strictly less than <code>upper</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,127,* @return a random integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,128,* and less than or equal to <code>upper</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,130,"public int nextSecureInt(int lower, int upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,133,* Generates a random long integer between <code>lower</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,134,* and <code>upper</code> (endpoints included).<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,135,* The generated long sequence will be cryptographically secure.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,136,"* If cryptographic security is not required,"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,137,* use <code>nextLong</code><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,138,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,139,* <a href=http://www.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,140,* Secure Random Sequence</a>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,141,* @param lower lower bound for generated integer
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,142,* @param upper upper bound for generated integer
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,143,* @exception IllegalArgumentException thrown if
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,144,* <code>lower</code> is not strictly less than <code>upper</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,145,* @return a long integer greater than or equal to <code>lower</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,146,* and less than or equal to <code>upper</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,148,"public long nextSecureLong(long lower, long upper);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,151,* Generates a random value from the Poisson distribution with
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,152,* the given mean.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,153,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,154,* <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda366j.htm>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,155,* Poisson Distribution</a><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,156,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,157,* <li>The specified mean <i>must</i> be positive </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,158,* </ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,159,* @param mean Mean of the distribution
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,160,* @returns long
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,161,* @throws IllegalArgumentException if mean <= 0
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,163,public long nextPoisson(double mean);
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,166,* Generates a random value from the
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,167,* Normal (a.k.a. Gaussian) distribution with the given mean
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,168,* and standard deviation.<br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,169,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,170,* <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3661.htm>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,171,* Normal Distribution</a><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,172,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,173,* <li>The specified standard deviation <i>must</i> be positive </li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,174,* </ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,175,* @param mu Mean of the distribution
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,176,* @param sigma Standard deviation of the distribution
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,177,"* @return random value from Gaussian distribution with mean = mu,"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,178,* standard deviation = sigma
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,179,* @throws IllegalArgumentExcption if sigma <= 0
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,181,"public double nextGaussian(double mu,double sigma);"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,184,* Generates a random value from the exponential distribution
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,185,* with expected value = <code>mean</code><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,186,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,187,* <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3667.htm>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,188,* Exponential Distribution</a><br>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,189,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,190,* <li>The specified mean <i>must</i> be non-negative</li>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,191,* </ul>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,192,* @param mu Mean of the distribution
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,193,* @return random value from exponential distribution
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,195,public double nextExponential(double mean);
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,198,* Generates a uniformly distributed random value from the opem interval
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,199,"* (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded)"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,200,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,201,* <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,202,* Uniform Distribution</a> <code>lower</code> and <code>upper - lower</code>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,203,* are the
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,204,* <a href = http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm>
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,205,"* location and scale parameters</a>, respectively<br>"
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,206,* @param lower lower endpoint of the interval of support
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,207,* @param upper upper endpoint of the interval of support
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,208,* @return uniformly distributed random value between lower
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,209,* and upper (exclusive)
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,210,* @exception IllegalArgumentException thrown if
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,211,* <code>lower</code> is not strictly less than <code>upper</code>.
True,src/java/org/apache/commons/math/RandomData.java,src/java/org/apache/commons/math/RandomData.java,213,"public double nextUniform(double lower, double upper);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,5,* reserved.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,9,* are met:
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,17,*    distribution.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,55,package org.apache.commons.math;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,57,import java.security.MessageDigest;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,58,import java.security.SecureRandom;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,59,import java.security.NoSuchAlgorithmException;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,60,import java.security.NoSuchProviderException;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,61,import java.util.Random;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,64,* Implements the <code>RandomData</code> interface using
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,65,* <code>java.util.Random</code> and
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,66,* <code>java.util.Random.SecureRandom</code> instances to generate data.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,67,* Supports reseeding the underlying
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,68,* <a href=http://www.wikipedia.org/wiki/Pseudo-random_number_generator>PRNG</a>.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,69,* The <code>SecurityProvider</code> and <code>Algorithm</code>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,70,* used by the <code>SecureRandom</code> instance can also be reset.<p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,71,"* For details on the PRNGs, see the JDK documentation for"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,72,* <code>java.util.Random</code> and
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,73,* <code>java.util.Random.SecureRandom</code></p><p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,74,* <strong>Usage Notes</strong>: <ul>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,75,* <li>Instance variables are used to maintain <code>Random</code> and
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,76,"* <code>SecureRandom</code> instances used in data generation. Therefore,"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,77,"* to generate a random sequence of values or strings, you should use just"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,78,* <strong>one</strong> <code>RandomDataImpl</code> instance repeatedly.</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,79,"* <li>The ""secure"" methods are *much* slower.  These should be used only when"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,80,* a <a href=http://www.wikipedia.org/wiki/Cryptographically_secure_pseudo-random_number_generator>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,81,* Secure Random Sequence</a> is required.</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,82,"*<li>When a new <code>RandomDataImpl</code> is created, the underlying random"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,83,* number generators are <strong>not</strong> intialized.  The first call to a
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,84,"* data generation method, or to a <code>reSeed()</code> method instantiates"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,85,"* the appropriate generator.  If you do not explicitly seed the generator, it"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,86,* is by default seeded with the current time in milliseconds</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,87,* <li>The <code>reSeed</code> and <code>reSeedSecure</code> methods delegate to
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,88,* the corresponding methods on the underlying <code>Random</code> and <code>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,89,"* SecureRandom</code> instances.  Therefore, the contracts of these methods"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,90,"* are as defined in the JDK documentation.  In particular, <code>reSeed(long)"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,91,* </code> fully resets the initial state of the non-secure random number
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,92,* generator (so that reseeding with a specific value always results in the
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,93,* same subsequent random sequence); whereas reSeedSecure(long) does <strong> not
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,94,* </strong> reinitialize the secure random number generator (so secure sequences
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,95,* started with calls to reseedSecure(long) won't be identical).</li></ul>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,96,*</p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,98,* @author Phil Steitz
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,99,* @version $Revision: 1.1 $ $Date: 2003/05/18 00:58:51 $
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,101,public class RandomDataImpl implements RandomData{
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,103,/** underlying random number generator */
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,104,private Random rand = null;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,106,/** underlying secure random number generator */
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,107,private SecureRandom secRand = null;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,109,public RandomDataImpl(){
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,113,* Generates a random string of hex characters
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,114,"* If cryptographic security is required, use"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,115,* <code>nextSecureHexString()</code>.<br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,116,* <strong>Algorithm Description:</strong> hex strings are generated
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,117,* using a 2-step process. <ol>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,118,* <li>len/2+1 binary bytes are generated using the underlying Random</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,119,* <li>Each binary byte is translated into 2 hex digits</li></ol>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,120,* @param len length of return string
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,121,* @exception IllegalArgumentException thrown if len <= 0
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,122,* @return the random hex string
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,124,public String nextHexString(int len) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,125,if (len <= 0) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,126,"throw new IllegalArgumentException(""length must be positive"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,129,//Get a random number generator
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,130,Random ran = getRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,132,//Initialize output buffer
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,133,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,135,//Get int(len/2)+1 random bytes
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,136,byte[] randomBytes = new byte[(len / 2) + 1];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,137,ran.nextBytes(randomBytes);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,139,//Convert each byte to 2 hex digits
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,140,for (int i = 0; i < randomBytes.length; i++) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,141,Integer c = new Integer(randomBytes[i]);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,143,/* Add 128 to byte value to make interval 0-255 before
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,144,* doing hex conversion.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,145,* This guarantees <= 2 hex digits from toHexString()
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,146,* toHexString would otherwise add 2^32 to negative arguments.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,148,String hex = Integer.toHexString(c.intValue()+128);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,150,// Make sure we add 2 hex digits for each byte
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,151,"if (hex.length() == 1) hex = ""0"" + hex;"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,152,outBuffer.append(hex);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,154,"return outBuffer.toString().substring(0, len);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,158,"public int nextInt(int lower, int upper) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,159,if (lower >= upper) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,160,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,161,"(""incorrect bounds for rendomInt"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,163,Random rand = getRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,164,return lower + (int)(Math.random() * (upper-lower+1));
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,167,"public long nextLong(long lower, long upper) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,168,if (lower >= upper) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,169,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,170,"(""upper bound must be >= lower bound"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,172,Random rand = getRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,173,return lower + (long)(rand.nextDouble() * (upper-lower+1));
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,177,* Generates a random string of hex characters from a secure random sequence.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,178,"* If cryptographic security is not required,"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,179,* use <code>nextHexString()</code>.<br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,180,* <strong>Algorithm Description:</strong> hex strings are generated in 40-byte
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,181,* segments using a 3-step process. <ol>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,182,* <li>20 random bytes are generated using the underlying SecureRandom</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,183,* <li>SHA-1 hash is applied to yield a 20-byte binary digest</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,184,* <li>Each byte of the binary digest is converted to 2 hex digits</li></ol><p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,185,* TODO: find external reference or provide justification for the claim that this
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,186,* yields a cryptographically secure sequence of hex strings.</p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,187,* @param len length of return string
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,188,* @exception IllegalArgumentException thrown if len <= 0
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,189,* @return the random hex string
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,191,public String nextSecureHexString(int len) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,192,if (len <= 0) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,193,"throw new IllegalArgumentException(""length must be positive"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,196,// Get SecureRandom and setup Digest provider
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,197,SecureRandom secRan = getSecRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,198,MessageDigest alg = null;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,199,try {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,200,"alg = MessageDigest.getInstance(""SHA-1"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,201,} catch (NoSuchAlgorithmException ex) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,202,return null; // gulp FIXME? -- this *should* never fail. OK to swallow????
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,204,alg.reset();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,206,//Compute number of iterations required (40 bytes each)
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,207,int numIter = (len / 40) + 1;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,209,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,210,for (int iter = 1; iter < numIter + 1; iter++) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,211,byte[] randomBytes = new byte[40];
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,212,secRan.nextBytes(randomBytes);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,213,alg.update(randomBytes);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,215,//Compute hash -- will create 20-byte binary hash
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,216,byte hash[] = alg.digest();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,218,"//Loop over the hash, converting each byte to 2 hex digits"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,219,for (int i = 0; i < hash.length; i++) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,220,Integer c = new Integer(hash[i]);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,222,/* Add 128 to byte value to make interval 0-255
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,223,* This guarantees <= 2 hex digits from toHexString()
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,224,* toHexString would otherwise add 2^32 to negative
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,225,* arguments
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,227,String hex = Integer.toHexString(c.intValue()+128);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,229,//Keep strings uniform length -- guarantees 40 bytes
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,230,"if (hex.length() == 1) hex = ""0"" + hex;"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,231,outBuffer.append(hex);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,234,"return outBuffer.toString().substring(0, len);"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,237,"public int nextSecureInt(int lower, int upper) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,238,if (lower >= upper) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,239,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,240,"(""lower bound must be <= upper bound"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,242,SecureRandom sec = getSecRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,243,return lower + (int)(sec.nextDouble() * (upper-lower+1));
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,247,"public long nextSecureLong(long lower, long upper) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,248,if (lower >= upper) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,249,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,250,"(""lower bound must be <= upper bound"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,252,SecureRandom sec = getSecRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,253,return lower + (long)(sec.nextDouble() * (upper-lower+1));
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,257,* Generates a random value from the Poisson distribution with
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,258,* the given mean.<br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,259,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,260,* <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda366j.htm>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,261,* Poisson Distribution</a><br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,262,* <strong>Algorithm Description</strong>:
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,263,"* Uses simulation of a Poisson process using Uniform deviates, as described"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,264,* <a href = http://dmawww.epfl.ch/benarous/Pmmi/interactive/rng7.htm>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,265,* here</a>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,266,* @param mean Mean of the distribution
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,267,* @returns long
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,268,* @throws IllegalArgumentException if mean <= 0
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,270,public long nextPoisson(double mean) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,271,double p = Math.exp(-mean);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,272,long n = 0;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,273,double r = 1.0d;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,274,Random rand = getRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,275,if (mean <= 0) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,276,"throw new IllegalArgumentException(""Poisson mean must be > 0"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,278,while (true) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,279,double rnd = rand.nextDouble();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,280,r = r * rnd;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,281,if (r >= p) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,282,n++;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,283,} else {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,284,return n;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,289,"public double nextGaussian(double mu,double sigma) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,290,if (sigma <= 0) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,291,"throw new IllegalArgumentException(""Gaussian std dev must be > 0"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,293,Random rand = getRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,294,return sigma*rand.nextGaussian() + mu;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,298,* Generates a random value from the exponential distribution
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,299,* with expected value = <code>mean</code><br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,300,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,301,* <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3667.htm>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,302,* Exponential Distribution</a><br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,303,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,304,* <li>The specified mean <i>must</i> be non-negative</li>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,305,* </ul>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,306,* <strong>Algorithm Description</strong>:  Uses the
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,307,* <a href=http://www.jesus.ox.ac.uk/~clifford/a5/chap1/node5.html>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,308,* Inversion Method</a> to generate exponential from uniform deviates.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,309,* @param mu Mean of the distribution
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,310,* @return random value from exponential distribution
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,312,public double nextExponential(double mean)  {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,313,if (mean < 0.0) throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,314,"(""Exponential mean must be >= 0"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,315,Random rand = getRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,316,double unif = rand.nextDouble();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,317,while (unif == 0.0d) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,318,unif = rand.nextDouble();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,320,return -mean*Math.log(unif);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,324,* Generates a uniformly distributed random value from the open interval
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,325,"* (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded)"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,326,* <strong>Definition</strong>:
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,327,* <a href=http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,328,* Uniform Distribution</a> <code>lower</code> and <code>upper - lower</code>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,329,* are the
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,330,* <a href = http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,331,"* location and scale parameters</a>, respectively<br>"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,332,* <strong>Algorithm Description</strong>: scales the output of
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,333,"* Random.nextDouble(), but rejects 0 values (i.e., will generate another"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,334,* random double if Random.nextDouble() returns 0).  This is necessary to
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,335,* provide a symmetric output interval (both endpoints excluded).
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,336,* @param lower lower endpoint of the interval of support
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,337,* @param upper upper endpoint of the interval of support
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,338,* @return uniformly distributed random value between lower
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,339,* and upper (exclusive)
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,340,* @exception IllegalArgumentException thrown if
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,341,* <code>lower</code> is not strictly less than <code>upper</code>.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,343,"public double nextUniform(double lower, double upper) {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,344,if (lower >= upper) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,345,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,346,"(""lower bound must be <= upper bound"");"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,348,Random rand = getRan();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,349,double result = lower + rand.nextDouble()*(upper-lower);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,350,while (result == lower) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,351,result = lower + rand.nextDouble()*(upper-lower);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,353,return result;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,357,* Returns the static Random used to generate random data.<br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,358,* Creates and initializes if null
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,359,* @return the static Random used to generate random data
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,361,private Random getRan() {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,362,if (rand == null) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,363,rand = new Random();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,364,rand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,366,return rand;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,370,* Returns the static SecureRandom used to generate secure random data.<br>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,371,* Creates and initializes if null.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,372,* @return the static SecureRandom used to generate secure random data
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,374,private SecureRandom getSecRan() {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,375,if (secRand == null) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,376,secRand = new SecureRandom();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,377,secRand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,379,return secRand;
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,383,* Reseeds the random number generator with the supplied seed.  Will
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,384,* create and initialize if null.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,385,* @param seed the seed value to use
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,387,public void reSeed(long seed) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,388,if (rand == null) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,389,rand = new Random();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,391,rand.setSeed(seed);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,395,* Reseeds the secure random number generator with the current time
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,396,* in milliseconds.  Will create and initialize if null.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,398,public void reSeedSecure() {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,399,if (rand == null) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,400,rand = new Random();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,402,rand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,406,* Reseeds the secure random number generator with the supplied seed.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,407,* Will create and initialize if null.
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,408,* @param seed the seed value to use
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,410,public void reSeedSecure(long seed) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,411,if (secRand == null) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,412,secRand = new SecureRandom();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,414,secRand.setSeed(seed);
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,418,* Reseeds the random number generator with the current time
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,419,* in milliseconds
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,421,public void reSeed() {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,422,if (rand == null) {
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,423,rand = new Random();
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,425,rand.setSeed(System.currentTimeMillis());
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,429,* Sets the PRNG algorithm for the underlying SecureRandom instance
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,430,"* using the Security Provider API, as defined in"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,431,* <a href=http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,432,* Java Cryptography Architecture API Specification & Reference</a><p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,433,* <strong>USAGE NOTE:</strong> This method carries <i>significant</i> overhead
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,434,* and may take several seconds to execute.</p>
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,435,* @param algorithm the name of the PRNG algorithm
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,436,* @param provider the name of the provider
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,437,* @throws NoSuchAlgorithmException if the specified algorithm is not available
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,438,* @throws NoSuchProviderException if the specified provider is not installed
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,440,"public void setSecureAlgorithm(String algorithm, String provider)"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,441,"throws NoSuchAlgorithmException,NoSuchProviderException {"
True,src/java/org/apache/commons/math/RandomDataImpl.java,src/java/org/apache/commons/math/RandomDataImpl.java,442,"secRand = SecureRandom.getInstance(algorithm,provider);"
False,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,64," @version $Id: MathTestSuite.java,v 1.2 2003/05/15 05:39:01 tobrien Exp $"
True,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,64,"* @version $Id: MathTestSuite.java,v 1.3 2003/05/18 00:58:52 tobrien Exp $"
True,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,91,suite.addTest(TestStatisticTest.suite());
True,src/test/org/apache/commons/math/MathTestSuite.java,src/test/org/apache/commons/math/MathTestSuite.java,92,suite.addTest(RandomDataTest.suite());
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,2,"* The Apache Software License, Version 1.1"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,5,* reserved.
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,8,"* modification, are permitted provided that the following conditions"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,9,* are met:
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,16,*    the documentation and/or other materials provided with the
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,17,*    distribution.
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,20,"*    any, must include the following acknowlegement:"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,21,"*       ""This product includes software developed by the"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,28,*    from this software without prior written permission. For written
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,29,"*    permission, please contact apache@apache.org."
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,33,*    permission of the Apache Software Foundation.
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,46,* SUCH DAMAGE.
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,49,* This software consists of voluntary contributions made by many
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,51,"* information on the Apache Software Foundation, please see"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,52,* <http://www.apache.org/>.
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,54,package org.apache.commons.math;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,56,import junit.framework.Test;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,57,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,58,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,59,import junit.framework.AssertionFailedError;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,60,import java.security.NoSuchProviderException;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,61,import java.security.NoSuchAlgorithmException;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,63,* Test cases for the RandomData class.
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,65,* @author Phil Steitz
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,66,* @version $Revision: 1.1 $ $Date: 2003/05/18 00:58:52 $
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,69,public final class RandomDataTest extends TestCase {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,71,public RandomDataTest(String name) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,72,super(name);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,75,private long smallSampleSize = 1000;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,76,"private double[] expected = {250,250,250,250};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,77,private int largeSampleSize = 10000;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,78,private int tolerance = 50;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,79,private String[] hex =
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,80,"{""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""a"",""b"",""c"",""d"",""e"",""f""};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,81,private RandomDataImpl randomData = new RandomDataImpl();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,82,private TestStatisticImpl testStatistic = new TestStatisticImpl();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,85,public void setUp() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,88,public static Test suite() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,89,TestSuite suite = new TestSuite(RandomDataTest.class);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,90,"suite.setName(""RandomData Tests"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,91,return suite;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,94,/** test dispersion and failure modes for nextInt() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,95,public void testNextInt() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,96,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,97,"int x = randomData.nextInt(4,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,98,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,99,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,102,Freq freq = new Freq();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,103,int value = 0;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,104,for (int i=0;i<smallSampleSize;i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,105,"value = randomData.nextInt(0,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,106,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,107,freq.addValue(value);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,109,double[] observed = new double[4];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,110,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,111,String iString = new Integer(i).toString();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,112,observed[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,115,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,116,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,118,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,119,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,122,/** test dispersion and failure modes for nextLong() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,123,public void testNextLong() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,124,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,125,"long x = randomData.nextLong(4,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,126,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,127,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,130,Freq freq = new Freq();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,131,long value = 0;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,132,for (int i=0;i<smallSampleSize;i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,133,"value = randomData.nextLong(0,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,134,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,135,freq.addValue(value);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,137,double[] observed = new double[4];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,138,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,139,String iString = new Integer(i).toString();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,140,observed[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,143,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,144,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,146,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,147,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,150,/** test dispersion and failure modes for nextSecureLong() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,151,public void testNextSecureLong() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,152,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,153,"long x = randomData.nextSecureLong(4,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,154,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,155,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,158,Freq freq = new Freq();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,159,long value = 0;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,160,for (int i=0;i<smallSampleSize;i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,161,"value = randomData.nextSecureLong(0,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,162,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,163,freq.addValue(value);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,165,double[] observed = new double[4];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,166,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,167,String iString = new Integer(i).toString();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,168,observed[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,171,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,172,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,174,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,175,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,178,/** test dispersion and failure modes for nextSecureInt() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,179,public void testNextSecureInt() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,180,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,181,"long x = randomData.nextSecureInt(4,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,182,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,183,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,186,Freq freq = new Freq();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,187,int value = 0;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,188,for (int i=0;i<smallSampleSize;i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,189,"value = randomData.nextSecureInt(0,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,190,"assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,191,freq.addValue(value);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,193,double[] observed = new double[4];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,194,for (int i=0; i<4; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,195,String iString = new Integer(i).toString();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,196,observed[i] = freq.getCount(iString);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,199,"/* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,200,* Change to 11.34 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,202,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,203,"testStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,207,* Make sure that empirical distribution of random Poisson(4)'s
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,208,* has P(X <= 5) close to actual cumulative Poisson probablity
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,209,* and that nextPoisson fails when mean is non-positive
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,210,"* TODO: replace with statistical test, adding test stat to TestStatistic"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,212,public void testNextPoisson() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,213,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,214,long x = randomData.nextPoisson(0);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,215,"fail(""zero mean -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,216,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,219,Freq f = new Freq();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,220,long v = 0;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,221,for (int i = 0; i<largeSampleSize; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,222,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,223,f.addValue(randomData.nextPoisson(4.0d));
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,224,} catch (Exception ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,225,fail(ex.getMessage());
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,228,"long cumFreq = f.getCount(""0"") + f.getCount(""1"") + f.getCount(""2"") +"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,229,"f.getCount(""3"") + f.getCount(""4"") + f.getCount(""5"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,230,long sumFreq = f.getSumFreq();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,231,double cumPct =
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,232,new Double(cumFreq).doubleValue()/new Double(sumFreq).doubleValue();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,233,"assertEquals(""cum Poisson(4)"",cumPct,0.7851,0.2);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,234,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,235,long x = randomData.nextPoisson(-1);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,236,"fail(""negative mean supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,237,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,240,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,241,long x = randomData.nextPoisson(0);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,242,"fail(""0 mean supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,243,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,249,/** test dispersion and failute modes for nextHex() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,250,public void testNextHex() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,251,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,252,String x = randomData.nextHexString(-1);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,253,"fail(""negative length supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,254,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,257,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,258,String x = randomData.nextHexString(0);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,259,"fail(""zero length supplied -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,260,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,263,String hexString = randomData.nextHexString(3);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,264,if (hexString.length() != 3) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,265,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,267,hexString = randomData.nextHexString(1);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,268,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,269,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,271,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,272,hexString = randomData.nextHexString(0);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,273,"fail(""zero length requested -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,274,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,277,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,278,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,280,Freq f = new Freq();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,281,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,282,hexString = randomData.nextHexString(100);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,283,if (hexString.length() != 100) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,284,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,286,for (int j = 0; j < hexString.length(); j++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,287,"f.addValue(hexString.substring(j,j+1));"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,290,double[] expected = new double[16];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,291,double[] observed = new double[16];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,292,for (int i = 0; i < 16; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,293,expected[i] = (double)smallSampleSize*100/(double)16;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,294,observed[i] = f.getCount(hex[i]);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,296,"/* Use ChiSquare dist with df = 16-1 = 15, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,297,* Change to 30.58 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,299,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,300,"testStatistic.chiSquare(expected,observed) < 37.70);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,303,/** test dispersion and failute modes for nextHex() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,304,public void testNextSecureHex() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,305,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,306,String x = randomData.nextSecureHexString(-1);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,307,"fail(""negative length -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,308,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,311,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,312,String x = randomData.nextSecureHexString(0);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,313,"fail(""zero length -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,314,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,317,String hexString = randomData.nextSecureHexString(3);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,318,if (hexString.length() != 3) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,319,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,321,hexString = randomData.nextSecureHexString(1);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,322,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,323,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,325,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,326,hexString = randomData.nextSecureHexString(0);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,327,"fail(""zero length requested -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,328,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,331,if (hexString.length() != 1) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,332,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,334,Freq f = new Freq();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,335,for (int i = 0; i < smallSampleSize; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,336,hexString = randomData.nextSecureHexString(100);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,337,if (hexString.length() != 100) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,338,"fail(""incorrect length for generated string"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,340,for (int j = 0; j < hexString.length(); j++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,341,"f.addValue(hexString.substring(j,j+1));"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,344,double[] expected = new double[16];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,345,double[] observed = new double[16];
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,346,for (int i = 0; i < 16; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,347,expected[i] = (double)smallSampleSize*100/(double)16;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,348,observed[i] = f.getCount(hex[i]);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,350,"/* Use ChiSquare dist with df = 16-1 = 15, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,351,* Change to 30.58 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,353,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,354,"testStatistic.chiSquare(expected,observed) < 37.70);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,357,/** test failure modes and dispersion of nextUniform() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,358,public void testNextUniform() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,359,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,360,"double x = randomData.nextUniform(4,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,361,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,362,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,365,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,366,"double x = randomData.nextUniform(3,3);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,367,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,368,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,371,"double[] expected = new double[] {500,500};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,372,"double[] observed = new double[] {0,0};"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,373,double lower = -1d;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,374,double upper = 20d;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,375,double midpoint = (lower + upper)/2d;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,376,double result = 0;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,377,for (int i = 0; i < 1000; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,378,"result = randomData.nextUniform(lower,upper);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,379,if ((result == lower) || (result == upper)) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,380,"fail(""generated value equal to an endpoint: "" + result);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,382,if (result < midpoint) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,383,observed[0]++;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,384,} else {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,385,observed[1]++;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,388,"/* Use ChiSquare dist with df = 2-1 = 1, alpha = .001"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,389,* Change to 6.64 for alpha = .01
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,391,"assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,392,"testStatistic.chiSquare(expected,observed) < 10.83);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,395,/** test failure modes and distribution of nextGaussian() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,396,public void testNextGaussian() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,397,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,398,"double x = randomData.nextGaussian(0,0);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,399,"fail(""zero sigma -- IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,400,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,403,Univariate u = new UnivariateImpl();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,404,for (int i = 0; i<largeSampleSize; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,405,"u.addValue(randomData.nextGaussian(0,1));"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,407,double xbar = u.getMean();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,408,double s = u.getStandardDeviation();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,409,double n = u.getN();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,410,"/* t-test at .001-level TODO: replace with externalized t-test, with"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,411,* test statistic defined in TestStatistic
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,413,assertTrue(Math.abs(xbar)/(s/Math.sqrt(n))< 3.29);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,416,/** test failure modes and distribution of nextExponential() */
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,417,public void testNextExponential() {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,418,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,419,double x = randomData.nextExponential(-1);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,420,"fail(""negative mean -- expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,421,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,424,"assertEquals(""0 mean"", 0,randomData.nextExponential(0),10E-8);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,425,long cumFreq = 0;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,426,double v = 0;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,427,for (int i = 0; i < largeSampleSize; i++) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,428,v = randomData.nextExponential(1);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,429,"assertTrue(""exponential deviate postive"", v > 0);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,430,if (v < 2) cumFreq++;
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,432,"/* TODO: Replace with a statistical test, with statistic added to"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,433,* TestStatistic.  Check below compares observed cumulative distribution
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,434,* evaluated at 2 with exponential CDF
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,436,"assertEquals(""exponential cumulative distribution"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,437,"(double)cumFreq/(double)largeSampleSize,0.8646647167633873,.2);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,440,"/** test reseeding, algorithm/provider games */"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,441,"public void testConfig() throws NoSuchProviderException,"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,442,NoSuchAlgorithmException{
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,443,randomData.reSeed(1000);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,444,"double v = randomData.nextUniform(0,1);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,445,randomData.reSeed();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,446,"assertTrue(""different seeds"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,447,"Math.abs(v - randomData.nextUniform(0,1)) > 10E-12);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,448,randomData.reSeed(1000);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,449,"assertEquals(""same seeds"",v,randomData.nextUniform(0,1),10E-12);"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,450,randomData.reSeedSecure(1000);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,451,String hex = randomData.nextSecureHexString(40);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,452,randomData.reSeedSecure();
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,453,"assertTrue(""different seeds"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,454,!hex.equals(randomData.nextSecureHexString(40)));
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,455,randomData.reSeedSecure(1000);
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,456,"assertTrue(""same seeds"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,457,!hex.equals(randomData.nextSecureHexString(40)));
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,459,"/* TODO: probably should remove this test as the package grows,"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,460,* since it takes about 4 seconds
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,462,"randomData.setSecureAlgorithm(""SHA1PRNG"",""SUN"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,463,"assertTrue(""different seeds"","
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,464,!hex.equals(randomData.nextSecureHexString(40)));
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,465,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,466,"randomData.setSecureAlgorithm(""NOSUCHTHING"",""SUN"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,467,"fail(""expecting NoSuchAlgorithmException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,468,} catch (NoSuchAlgorithmException ex) {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,472,try {
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,473,"randomData.setSecureAlgorithm(""SHA1PRNG"",""NOSUCHPROVIDER"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,474,"fail(""expecting NoSuchProviderException"");"
True,src/test/org/apache/commons/math/RandomDataTest.java,src/test/org/apache/commons/math/RandomDataTest.java,475,} catch (NoSuchProviderException ex) {

is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,937,"new PeepholeReplaceKnownMethods(),"
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,953,"new PeepholeReplaceKnownMethods(),"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,20,mport com.google.common.collect.Lists;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,26,mport java.util.List;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,27,mport java.util.Locale;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,65,"/ The LOCALE independent ""locale"""
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,66,"rivate static final Locale ROOT_LOCALE = new Locale("""");"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,71,ase Token.CALL:
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,72,eturn tryFoldKnownMethods(subtree);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1219,rivate Node tryFoldKnownMethods(Node subtree) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1220,"/ For now we only support string methods .join(),"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1221,"/ .indexOf(), .substring() and .substr()"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1222,/ and numeric methods parseInt() and parseFloat().
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1224,ubtree = tryFoldArrayJoin(subtree);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1226,f (subtree.getType() == Token.CALL) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1227,ode callTarget = subtree.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1228,f (callTarget == null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1229,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1232,f (NodeUtil.isGet(callTarget)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1233,ubtree = tryFoldKnownStringMethods(subtree);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1234, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1235,ubtree = tryFoldKnownNumericMethods(subtree);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1239,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1243, Try to evaluate known String methods
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1244,"    .indexOf(), .substr(), .substring()"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1246,rivate Node tryFoldKnownStringMethods(Node subtree) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1247,reconditions.checkArgument(subtree.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1249,/ check if this is a call on a string method
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1250,/ then dispatch to specific folding method.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1251,ode callTarget = subtree.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1252,f (callTarget == null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1253,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1256,f (!NodeUtil.isGet(callTarget)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1257,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1260,ode stringNode = callTarget.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1261,ode functionName = stringNode.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1263,f ((stringNode.getType() != Token.STRING) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1264,functionName.getType() != Token.STRING)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1265,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1268,tring functionNameString = functionName.getString();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1269,ode firstArg = callTarget.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1270,f (firstArg == null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1271,"f (functionNameString.equals(""toLowerCase"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1272,"ubtree = tryFoldStringToLowerCase(subtree, stringNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1273," else if (functionNameString.equals(""toUpperCase"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1274,"ubtree = tryFoldStringToUpperCase(subtree, stringNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1276,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1277, else if (NodeUtil.isImmutableValue(firstArg)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1278,"f (functionNameString.equals(""indexOf"") ||"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1279,"unctionNameString.equals(""lastIndexOf"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1280,"ubtree = tryFoldStringIndexOf(subtree, functionNameString,"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1281,"tringNode, firstArg);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1282," else if (functionNameString.equals(""substr"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1283,"ubtree = tryFoldStringSubstr(subtree, stringNode, firstArg);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1284," else if (functionNameString.equals(""substring"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1285,"ubtree = tryFoldStringSubstring(subtree, stringNode, firstArg);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1289,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1293, Try to evaluate known Numeric methods
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1294,"    .parseInt(), parseFloat()"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1296,rivate Node tryFoldKnownNumericMethods(Node subtree) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1297,reconditions.checkArgument(subtree.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1299,f (isASTNormalized()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1300,/ check if this is a call on a string method
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1301,/ then dispatch to specific folding method.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1302,ode callTarget = subtree.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1304,f (!NodeUtil.isName(callTarget)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1305,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1308,tring functionNameString = callTarget.getString();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1309,ode firstArgument = callTarget.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1310,f ((firstArgument != null) &&
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1311,firstArgument.getType() == Token.STRING ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1312,irstArgument.getType() == Token.NUMBER)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1313,"f (functionNameString.equals(""parseInt"") ||"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1314,"unctionNameString.equals(""parseFloat"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1315,"ubtree = tryFoldParseNumber(subtree, functionNameString,"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1316,irstArgument);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1320,eturn subtree;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1324, @return The lowered string Node.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1326,"rivate Node tryFoldStringToLowerCase(Node subtree, Node stringNode) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1327,"/ From Rhino, NativeString.java. See ECMA 15.5.4.11"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1328,tring lowered = stringNode.getString().toLowerCase(ROOT_LOCALE);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1329,ode replacement = Node.newString(lowered);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1330,"ubtree.getParent().replaceChild(subtree, replacement);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1331,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1332,eturn replacement;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1336, @return The uppered string Node.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1338,"rivate Node tryFoldStringToUpperCase(Node subtree, Node stringNode) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1339,"/ From Rhino, NativeString.java. See ECMA 15.5.4.12"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1340,tring uppered = stringNode.getString().toUpperCase(ROOT_LOCALE);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1341,ode replacement = Node.newString(uppered);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1342,"ubtree.getParent().replaceChild(subtree, replacement);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1343,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1344,eturn replacement;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1348, @param input string representation of a number
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1349, @return string with leading and trailing zeros removed
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1351,rivate String normalizeNumericString(String input) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1352,f (input == null || input.length() == 0) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1353,eturn input;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1356,"nt startIndex = 0, endIndex = input.length() - 1;"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1357,hile (startIndex < input.length() && input.charAt(startIndex) == '0') {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1358,tartIndex++;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1360,hile (endIndex >= 0 && input.charAt(endIndex) == '0') {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1361,ndIndex--;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1363,f (startIndex >= endIndex) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1364,eturn input;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1367,"eturn input.substring(startIndex, endIndex + 1);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1371," Try to evaluate parseInt, parseFloat:"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1372,"     parseInt(""1"") -> 1"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1373,"     parseInt(""1"", 10) -> 1"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1374,"     parseFloat(""1.11"") -> 1.11"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1376,rivate Node tryFoldParseNumber(
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1377,"ode n, String functionName, Node firstArg) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1378,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1380,"oolean isParseInt = functionName.equals(""parseInt"");"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1381,ode secondArg = firstArg.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1383,/ Second argument is only used as the radix for parseInt
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1384,nt radix = 0;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1385,f (secondArg != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1386,f (!isParseInt) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1387,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1390,/ Third-argument and non-numeric second arg are problematic. Discard.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1391,f ((secondArg.getNext() != null) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1392,secondArg.getType() != Token.NUMBER)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1393,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1394, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1395,ouble tmpRadix = secondArg.getDouble();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1396,f (tmpRadix != (int)tmpRadix)
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1397,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1398,adix = (int)tmpRadix;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1399,f (radix < 0 || radix == 1 || radix > 36) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1400,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1405,/ stringVal must be a valid string.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1406,tring stringVal = null;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1407,ouble checkVal;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1408,f (firstArg.getType() == Token.NUMBER) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1409,heckVal = NodeUtil.getNumberValue(firstArg);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1410,f (!(radix == 0 || radix == 10) && isParseInt) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1411,/Convert a numeric first argument to a different base
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1412,tringVal = String.valueOf(checkVal.intValue());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1413, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1414,"/ If parseFloat is called with a numeric argument,"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1415,/ replace it with just the number.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1416,/ If parseInt is called with a numeric first argument and the radix
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1417,"/ is 10 or omitted, just replace it with the number"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1418,ode numericNode;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1419,f (isParseInt) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1420,umericNode = Node.newNumber(checkVal.intValue());
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1421, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1422,umericNode = Node.newNumber(checkVal);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1424,".getParent().replaceChild(n, numericNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1425,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1426,eturn numericNode;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1428, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1429,tringVal = NodeUtil.getStringValue(firstArg);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1430,f (stringVal == null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1431,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1434,/Check that the string is in a format we can recognize
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1435,heckVal = NodeUtil.getStringNumberValue(stringVal);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1436,f (checkVal == null || checkVal == Double.NaN) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1437,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1440,tringVal = NodeUtil.trimJsWhiteSpace(stringVal);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1443,ode newNode;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1444,f (isParseInt) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1445,f (radix == 0 || radix == 16) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1446,f (stringVal.length() > 1 &&
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1447,"tringVal.substring(0, 2).equalsIgnoreCase(""0x"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1448,adix = 16;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1449,tringVal = stringVal.substring(2);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1450, else if (radix == 0) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1451,/ if a radix is not specified or is 0 and the most
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1452,"/ significant digit is ""0"", the string will parse"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1453,"/ with a radix of 8 on some browsers, so leave"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1454,/ this case alone. This check does not apply in
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1455,/ script mode ECMA5 or greater
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1456,f (!isEcmaScript5OrGreater() &&
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1457,"tringVal.substring(0, 1).equals(""0"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1458,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1461,adix = 10;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1464,nt newVal = 0;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1465,ry {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1466,"ewVal = Integer.parseInt(stringVal, radix);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1467, catch (NumberFormatException e) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1468,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1471,ewNode = Node.newNumber(newVal);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1472, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1473,"tring normalizedNewVal = ""0"";"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1474,ry {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1475,ouble newVal = Double.parseDouble(stringVal);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1476,ewNode = Node.newNumber(newVal);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1477,ormalizedNewVal = normalizeNumericString(String.valueOf(newVal));
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1479,atch(NumberFormatException e) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1480,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1482,/ Make sure that the parsed number matches the original string
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1483,/ This prevents rounding differences between the java implementation
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1484,/ and native script.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1485,f (!normalizeNumericString(stringVal).equals(normalizedNewVal)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1486,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1490,".getParent().replaceChild(n, newNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1492,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1494,eturn newNode;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1498, Try to evaluate String.indexOf/lastIndexOf:
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1499,"     ""abcdef"".indexOf(""bc"") -> 1"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1500,"     ""abcdefbc"".indexOf(""bc"", 3) -> 6"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1502,rivate Node tryFoldStringIndexOf(
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1503,"ode n, String functionName, Node lstringNode, Node firstArg) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1504,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1505,reconditions.checkArgument(lstringNode.getType() == Token.STRING);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1507,tring lstring = NodeUtil.getStringValue(lstringNode);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1508,"oolean isIndexOf = functionName.equals(""indexOf"");"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1509,ode secondArg = firstArg.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1510,tring searchValue = NodeUtil.getStringValue(firstArg);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1511,/ searchValue must be a valid string.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1512,f (searchValue == null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1513,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1515,nt fromIndex = isIndexOf ? 0 : lstring.length();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1516,f (secondArg != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1517,/ Third-argument and non-numeric second arg are problematic. Discard.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1518,f ((secondArg.getNext() != null) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1519,secondArg.getType() != Token.NUMBER)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1520,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1521, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1522,romIndex = (int) secondArg.getDouble();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1525,"nt indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1526," lstring.lastIndexOf(searchValue, fromIndex);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1527,ode newNode = Node.newNumber(indexVal);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1528,".getParent().replaceChild(n, newNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1530,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1532,eturn newNode;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1536," Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1538,rivate Node tryFoldArrayJoin(Node n) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1539,ode callTarget = n.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1541,f (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1542,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1545,ode right = callTarget.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1546,f (right != null && !NodeUtil.isImmutableValue(right)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1547,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1550,ode arrayNode = callTarget.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1551,ode functionName = arrayNode.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1553,f ((arrayNode.getType() != Token.ARRAYLIT) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1554,"functionName.getString().equals(""join"")) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1555,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1558,"tring joinString = (right == null) ? "","" : NodeUtil.getStringValue(right);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1559,ist<Node> arrayFoldedChildren = Lists.newLinkedList();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1560,tringBuilder sb = null;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1561,nt foldedSize = 0;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1562,ode prev = null;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1563,ode elem = arrayNode.getFirstChild();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1564,/ Merges adjacent String nodes.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1565,hile (elem != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1566,f (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1567,f (sb == null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1568,b = new StringBuilder();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1569, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1570,b.append(joinString);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1572,b.append(NodeUtil.getArrayElementStringValue(elem));
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1573, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1574,f (sb != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1575,reconditions.checkNotNull(prev);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1576,/ + 2 for the quotes.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1577,oldedSize += sb.length() + 2;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1578,rrayFoldedChildren.add(
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1579,ode.newString(sb.toString()).copyInformationFrom(prev));
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1580,b = null;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1582,oldedSize += InlineCostEstimator.getCost(elem);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1583,rrayFoldedChildren.add(elem);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1585,rev = elem;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1586,lem = elem.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1589,f (sb != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1590,reconditions.checkNotNull(prev);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1591,/ + 2 for the quotes.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1592,oldedSize += sb.length() + 2;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1593,rrayFoldedChildren.add(
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1594,ode.newString(sb.toString()).copyInformationFrom(prev));
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1596,/ one for each comma.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1597,oldedSize += arrayFoldedChildren.size() - 1;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1599,nt originalSize = InlineCostEstimator.getCost(n);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1600,witch (arrayFoldedChildren.size()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1601,ase 0:
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1602,"ode emptyStringNode = Node.newString("""");"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1603,".getParent().replaceChild(n, emptyStringNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1604,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1605,eturn emptyStringNode;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1606,ase 1:
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1607,ode foldedStringNode = arrayFoldedChildren.remove(0);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1608,f (foldedSize > originalSize) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1609,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1611,rrayNode.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1612,f (foldedStringNode.getType() != Token.STRING) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1613,"/ If the Node is not a string literal, ensure that"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1614,/ it is coerced to a string.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1615,"ode replacement = new Node(Token.ADD,"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1616,"ode.newString("""").copyInformationFrom(n),"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1617,oldedStringNode);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1618,oldedStringNode = replacement;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1620,".getParent().replaceChild(n, foldedStringNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1621,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1622,eturn foldedStringNode;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1623,efault:
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1624,/ No folding could actually be performed.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1625,f (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1626,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1628,"nt kJoinOverhead = ""[].join()"".length();"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1629,oldedSize += kJoinOverhead;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1630,oldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1631,f (foldedSize > originalSize) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1632,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1634,rrayNode.detachChildren();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1635,or (Node node : arrayFoldedChildren) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1636,rrayNode.addChildToBack(node);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1638,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1639,reak;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1642,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1646, Try to fold .substr() calls on strings
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1648,"rivate Node tryFoldStringSubstr(Node n, Node stringNode, Node arg1) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1649,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1650,reconditions.checkArgument(stringNode.getType() == Token.STRING);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1652,"nt start, length;"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1653,tring stringAsString = stringNode.getString();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1655,/ TODO(nicksantos): We really need a NodeUtil.getNumberValue
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1656,/ function.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1657,f (arg1 != null && arg1.getType() == Token.NUMBER) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1658,tart = (int) arg1.getDouble();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1659, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1660,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1663,ode arg2 = arg1.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1664,f (arg2 != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1665,f (arg2.getType() == Token.NUMBER) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1666,ength = (int) arg2.getDouble();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1667, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1668,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1671,f (arg2.getNext() != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1672,"/ If we got more args than we expected, bail out."
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1673,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1675, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1676,/ parameter 2 not passed
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1677,ength = stringAsString.length() - start;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1680,/ Don't handle these cases. The specification actually does
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1681,"/ specify the behavior in some of these cases, but we haven't"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1682,/ done a thorough investigation that it is correctly implemented
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1683,/ in all browsers.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1684,f ((start + length) > stringAsString.length() ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1685,length < 0) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1686,start < 0)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1687,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1690,"tring result = stringAsString.substring(start, start + length);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1691,ode resultNode = Node.newString(result);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1693,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1694,"arent.replaceChild(n, resultNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1695,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1696,eturn resultNode;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1700, Try to fold .substring() calls on strings
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1702,"rivate Node tryFoldStringSubstring(Node n, Node stringNode, Node arg1) {"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1703,reconditions.checkArgument(n.getType() == Token.CALL);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1704,reconditions.checkArgument(stringNode.getType() == Token.STRING);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1706,"nt start, end;"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1707,tring stringAsString = stringNode.getString();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1709,f (arg1 != null && arg1.getType() == Token.NUMBER) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1710,tart = (int) arg1.getDouble();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1711, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1712,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1715,ode arg2 = arg1.getNext();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1716,f (arg2 != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1717,f (arg2.getType() == Token.NUMBER) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1718,nd = (int) arg2.getDouble();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1719, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1720,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1723,f (arg2.getNext() != null) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1724,"/ If we got more args than we expected, bail out."
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1725,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1727, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1728,/ parameter 2 not passed
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1729,nd = stringAsString.length();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1732,/ Don't handle these cases. The specification actually does
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1733,"/ specify the behavior in some of these cases, but we haven't"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1734,/ done a thorough investigation that it is correctly implemented
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1735,/ in all browsers.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1736,f ((end > stringAsString.length()) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1737,start > stringAsString.length()) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1738,end < 0) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1739,start < 0)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1740,eturn n;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1743,"tring result = stringAsString.substring(start, end);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1744,ode resultNode = Node.newString(result);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1746,ode parent = n.getParent();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1747,"arent.replaceChild(n, resultNode);"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1748,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,1749,eturn resultNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,2,* Copyright 2011 The Closure Compiler Authors.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,5,* you may not use this file except in compliance with the License.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,6,* You may obtain a copy of the License at
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,13,* See the License for the specific language governing permissions and
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,14,* limitations under the License.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,17,package com.google.javascript.jscomp;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,19,import com.google.common.base.Preconditions;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,20,import com.google.common.collect.Lists;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,21,import com.google.javascript.rhino.Node;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,22,import com.google.javascript.rhino.Token;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,24,import java.util.List;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,25,import java.util.Locale;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,28,* Just to fold known methods when they are called with constants.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,31,class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,33,"// The LOCALE independent ""locale"""
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,34,"private static final Locale ROOT_LOCALE = new Locale("""");"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,36,@Override
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,37,Node optimizeSubtree(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,38,if (NodeUtil.isCall(subtree) ){
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,39,return tryFoldKnownMethods(subtree);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,41,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,44,private Node tryFoldKnownMethods(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,45,"// For now we only support string methods .join(),"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,46,"// .indexOf(), .substring() and .substr()"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,47,// and numeric methods parseInt() and parseFloat().
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,49,subtree = tryFoldArrayJoin(subtree);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,51,if (subtree.getType() == Token.CALL) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,52,Node callTarget = subtree.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,53,if (callTarget == null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,54,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,57,if (NodeUtil.isGet(callTarget)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,58,subtree = tryFoldKnownStringMethods(subtree);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,59,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,60,subtree = tryFoldKnownNumericMethods(subtree);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,64,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,68,* Try to evaluate known String methods
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,69,"*    .indexOf(), .substr(), .substring()"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,71,private Node tryFoldKnownStringMethods(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,72,Preconditions.checkArgument(subtree.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,74,// check if this is a call on a string method
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,75,// then dispatch to specific folding method.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,76,Node callTarget = subtree.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,77,if (callTarget == null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,78,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,81,if (!NodeUtil.isGet(callTarget)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,82,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,85,Node stringNode = callTarget.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,86,Node functionName = stringNode.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,88,if ((stringNode.getType() != Token.STRING) ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,89,(functionName.getType() != Token.STRING)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,90,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,93,String functionNameString = functionName.getString();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,94,Node firstArg = callTarget.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,95,if (firstArg == null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,96,"if (functionNameString.equals(""toLowerCase"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,97,"subtree = tryFoldStringToLowerCase(subtree, stringNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,98,"} else if (functionNameString.equals(""toUpperCase"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,99,"subtree = tryFoldStringToUpperCase(subtree, stringNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,101,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,102,} else if (NodeUtil.isImmutableValue(firstArg)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,103,"if (functionNameString.equals(""indexOf"") ||"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,104,"functionNameString.equals(""lastIndexOf"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,105,"subtree = tryFoldStringIndexOf(subtree, functionNameString,"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,106,"stringNode, firstArg);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,107,"} else if (functionNameString.equals(""substr"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,108,"subtree = tryFoldStringSubstr(subtree, stringNode, firstArg);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,109,"} else if (functionNameString.equals(""substring"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,110,"subtree = tryFoldStringSubstring(subtree, stringNode, firstArg);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,114,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,118,* Try to evaluate known Numeric methods
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,119,"*    .parseInt(), parseFloat()"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,121,private Node tryFoldKnownNumericMethods(Node subtree) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,122,Preconditions.checkArgument(subtree.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,124,if (isASTNormalized()) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,125,// check if this is a call on a string method
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,126,// then dispatch to specific folding method.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,127,Node callTarget = subtree.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,129,if (!NodeUtil.isName(callTarget)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,130,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,133,String functionNameString = callTarget.getString();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,134,Node firstArgument = callTarget.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,135,if ((firstArgument != null) &&
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,136,(firstArgument.getType() == Token.STRING ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,137,firstArgument.getType() == Token.NUMBER)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,138,"if (functionNameString.equals(""parseInt"") ||"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,139,"functionNameString.equals(""parseFloat"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,140,"subtree = tryFoldParseNumber(subtree, functionNameString,"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,141,firstArgument);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,145,return subtree;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,149,* @return The lowered string Node.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,151,"private Node tryFoldStringToLowerCase(Node subtree, Node stringNode) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,152,"// From Rhino, NativeString.java. See ECMA 15.5.4.11"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,153,String lowered = stringNode.getString().toLowerCase(ROOT_LOCALE);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,154,Node replacement = Node.newString(lowered);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,155,"subtree.getParent().replaceChild(subtree, replacement);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,156,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,157,return replacement;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,161,* @return The uppered string Node.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,163,"private Node tryFoldStringToUpperCase(Node subtree, Node stringNode) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,164,"// From Rhino, NativeString.java. See ECMA 15.5.4.12"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,165,String uppered = stringNode.getString().toUpperCase(ROOT_LOCALE);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,166,Node replacement = Node.newString(uppered);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,167,"subtree.getParent().replaceChild(subtree, replacement);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,168,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,169,return replacement;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,173,* @param input string representation of a number
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,174,* @return string with leading and trailing zeros removed
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,176,private String normalizeNumericString(String input) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,177,if (input == null || input.length() == 0) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,178,return input;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,181,"int startIndex = 0, endIndex = input.length() - 1;"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,182,while (startIndex < input.length() && input.charAt(startIndex) == '0') {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,183,startIndex++;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,185,while (endIndex >= 0 && input.charAt(endIndex) == '0') {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,186,endIndex--;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,188,if (startIndex >= endIndex) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,189,return input;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,192,"return input.substring(startIndex, endIndex + 1);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,196,"* Try to evaluate parseInt, parseFloat:"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,197,"*     parseInt(""1"") -> 1"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,198,"*     parseInt(""1"", 10) -> 1"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,199,"*     parseFloat(""1.11"") -> 1.11"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,201,private Node tryFoldParseNumber(
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,202,"Node n, String functionName, Node firstArg) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,203,Preconditions.checkArgument(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,205,"boolean isParseInt = functionName.equals(""parseInt"");"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,206,Node secondArg = firstArg.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,208,// Second argument is only used as the radix for parseInt
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,209,int radix = 0;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,210,if (secondArg != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,211,if (!isParseInt) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,212,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,215,// Third-argument and non-numeric second arg are problematic. Discard.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,216,if ((secondArg.getNext() != null) ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,217,(secondArg.getType() != Token.NUMBER)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,218,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,219,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,220,double tmpRadix = secondArg.getDouble();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,221,if (tmpRadix != (int)tmpRadix)
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,222,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,223,radix = (int)tmpRadix;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,224,if (radix < 0 || radix == 1 || radix > 36) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,225,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,230,// stringVal must be a valid string.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,231,String stringVal = null;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,232,Double checkVal;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,233,if (firstArg.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,234,checkVal = NodeUtil.getNumberValue(firstArg);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,235,if (!(radix == 0 || radix == 10) && isParseInt) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,236,//Convert a numeric first argument to a different base
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,237,stringVal = String.valueOf(checkVal.intValue());
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,238,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,239,"// If parseFloat is called with a numeric argument,"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,240,// replace it with just the number.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,241,// If parseInt is called with a numeric first argument and the radix
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,242,"// is 10 or omitted, just replace it with the number"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,243,Node numericNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,244,if (isParseInt) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,245,numericNode = Node.newNumber(checkVal.intValue());
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,246,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,247,numericNode = Node.newNumber(checkVal);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,249,"n.getParent().replaceChild(n, numericNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,250,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,251,return numericNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,253,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,254,stringVal = NodeUtil.getStringValue(firstArg);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,255,if (stringVal == null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,256,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,259,//Check that the string is in a format we can recognize
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,260,checkVal = NodeUtil.getStringNumberValue(stringVal);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,261,if (checkVal == null || checkVal == Double.NaN) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,262,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,265,stringVal = NodeUtil.trimJsWhiteSpace(stringVal);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,268,Node newNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,269,if (isParseInt) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,270,if (radix == 0 || radix == 16) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,271,if (stringVal.length() > 1 &&
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,272,"stringVal.substring(0, 2).equalsIgnoreCase(""0x"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,273,radix = 16;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,274,stringVal = stringVal.substring(2);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,275,} else if (radix == 0) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,276,// if a radix is not specified or is 0 and the most
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,277,"// significant digit is ""0"", the string will parse"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,278,"// with a radix of 8 on some browsers, so leave"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,279,// this case alone. This check does not apply in
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,280,// script mode ECMA5 or greater
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,281,if (!isEcmaScript5OrGreater() &&
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,282,"stringVal.substring(0, 1).equals(""0"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,283,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,286,radix = 10;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,289,int newVal = 0;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,290,try {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,291,"newVal = Integer.parseInt(stringVal, radix);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,292,} catch (NumberFormatException e) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,293,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,296,newNode = Node.newNumber(newVal);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,297,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,298,"String normalizedNewVal = ""0"";"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,299,try {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,300,double newVal = Double.parseDouble(stringVal);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,301,newNode = Node.newNumber(newVal);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,302,normalizedNewVal = normalizeNumericString(String.valueOf(newVal));
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,304,catch(NumberFormatException e) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,305,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,307,// Make sure that the parsed number matches the original string
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,308,// This prevents rounding differences between the java implementation
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,309,// and native script.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,310,if (!normalizeNumericString(stringVal).equals(normalizedNewVal)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,311,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,315,"n.getParent().replaceChild(n, newNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,317,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,319,return newNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,323,* Try to evaluate String.indexOf/lastIndexOf:
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,324,"*     ""abcdef"".indexOf(""bc"") -> 1"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,325,"*     ""abcdefbc"".indexOf(""bc"", 3) -> 6"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,327,private Node tryFoldStringIndexOf(
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,328,"Node n, String functionName, Node lstringNode, Node firstArg) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,329,Preconditions.checkArgument(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,330,Preconditions.checkArgument(lstringNode.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,332,String lstring = NodeUtil.getStringValue(lstringNode);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,333,"boolean isIndexOf = functionName.equals(""indexOf"");"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,334,Node secondArg = firstArg.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,335,String searchValue = NodeUtil.getStringValue(firstArg);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,336,// searchValue must be a valid string.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,337,if (searchValue == null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,338,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,340,int fromIndex = isIndexOf ? 0 : lstring.length();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,341,if (secondArg != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,342,// Third-argument and non-numeric second arg are problematic. Discard.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,343,if ((secondArg.getNext() != null) ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,344,(secondArg.getType() != Token.NUMBER)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,345,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,346,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,347,fromIndex = (int) secondArg.getDouble();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,350,"int indexVal = isIndexOf ? lstring.indexOf(searchValue, fromIndex)"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,351,": lstring.lastIndexOf(searchValue, fromIndex);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,352,Node newNode = Node.newNumber(indexVal);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,353,"n.getParent().replaceChild(n, newNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,355,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,357,return newNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,361,"* Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,363,private Node tryFoldArrayJoin(Node n) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,364,Node callTarget = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,366,if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,367,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,370,Node right = callTarget.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,371,if (right != null && !NodeUtil.isImmutableValue(right)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,372,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,375,Node arrayNode = callTarget.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,376,Node functionName = arrayNode.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,378,if ((arrayNode.getType() != Token.ARRAYLIT) ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,379,"!functionName.getString().equals(""join"")) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,380,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,383,"String joinString = (right == null) ? "","" : NodeUtil.getStringValue(right);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,384,List<Node> arrayFoldedChildren = Lists.newLinkedList();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,385,StringBuilder sb = null;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,386,int foldedSize = 0;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,387,Node prev = null;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,388,Node elem = arrayNode.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,389,// Merges adjacent String nodes.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,390,while (elem != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,391,if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,392,if (sb == null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,393,sb = new StringBuilder();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,394,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,395,sb.append(joinString);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,397,sb.append(NodeUtil.getArrayElementStringValue(elem));
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,398,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,399,if (sb != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,400,Preconditions.checkNotNull(prev);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,401,// + 2 for the quotes.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,402,foldedSize += sb.length() + 2;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,403,arrayFoldedChildren.add(
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,404,Node.newString(sb.toString()).copyInformationFrom(prev));
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,405,sb = null;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,407,foldedSize += InlineCostEstimator.getCost(elem);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,408,arrayFoldedChildren.add(elem);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,410,prev = elem;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,411,elem = elem.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,414,if (sb != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,415,Preconditions.checkNotNull(prev);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,416,// + 2 for the quotes.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,417,foldedSize += sb.length() + 2;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,418,arrayFoldedChildren.add(
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,419,Node.newString(sb.toString()).copyInformationFrom(prev));
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,421,// one for each comma.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,422,foldedSize += arrayFoldedChildren.size() - 1;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,424,int originalSize = InlineCostEstimator.getCost(n);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,425,switch (arrayFoldedChildren.size()) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,426,case 0:
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,427,"Node emptyStringNode = Node.newString("""");"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,428,"n.getParent().replaceChild(n, emptyStringNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,429,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,430,return emptyStringNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,431,case 1:
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,432,Node foldedStringNode = arrayFoldedChildren.remove(0);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,433,if (foldedSize > originalSize) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,434,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,436,arrayNode.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,437,if (foldedStringNode.getType() != Token.STRING) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,438,"// If the Node is not a string literal, ensure that"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,439,// it is coerced to a string.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,440,"Node replacement = new Node(Token.ADD,"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,441,"Node.newString("""").copyInformationFrom(n),"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,442,foldedStringNode);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,443,foldedStringNode = replacement;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,445,"n.getParent().replaceChild(n, foldedStringNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,446,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,447,return foldedStringNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,448,default:
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,449,// No folding could actually be performed.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,450,if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,451,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,453,"int kJoinOverhead = ""[].join()"".length();"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,454,foldedSize += kJoinOverhead;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,455,foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,456,if (foldedSize > originalSize) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,457,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,459,arrayNode.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,460,for (Node node : arrayFoldedChildren) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,461,arrayNode.addChildToBack(node);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,463,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,464,break;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,467,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,471,* Try to fold .substr() calls on strings
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,473,"private Node tryFoldStringSubstr(Node n, Node stringNode, Node arg1) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,474,Preconditions.checkArgument(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,475,Preconditions.checkArgument(stringNode.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,477,"int start, length;"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,478,String stringAsString = stringNode.getString();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,480,// TODO(nicksantos): We really need a NodeUtil.getNumberValue
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,481,// function.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,482,if (arg1 != null && arg1.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,483,start = (int) arg1.getDouble();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,484,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,485,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,488,Node arg2 = arg1.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,489,if (arg2 != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,490,if (arg2.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,491,length = (int) arg2.getDouble();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,492,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,493,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,496,if (arg2.getNext() != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,497,"// If we got more args than we expected, bail out."
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,498,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,500,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,501,// parameter 2 not passed
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,502,length = stringAsString.length() - start;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,505,// Don't handle these cases. The specification actually does
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,506,"// specify the behavior in some of these cases, but we haven't"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,507,// done a thorough investigation that it is correctly implemented
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,508,// in all browsers.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,509,if ((start + length) > stringAsString.length() ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,510,(length < 0) ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,511,(start < 0)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,512,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,515,"String result = stringAsString.substring(start, start + length);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,516,Node resultNode = Node.newString(result);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,518,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,519,"parent.replaceChild(n, resultNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,520,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,521,return resultNode;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,525,* Try to fold .substring() calls on strings
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,527,"private Node tryFoldStringSubstring(Node n, Node stringNode, Node arg1) {"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,528,Preconditions.checkArgument(n.getType() == Token.CALL);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,529,Preconditions.checkArgument(stringNode.getType() == Token.STRING);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,531,"int start, end;"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,532,String stringAsString = stringNode.getString();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,534,if (arg1 != null && arg1.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,535,start = (int) arg1.getDouble();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,536,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,537,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,540,Node arg2 = arg1.getNext();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,541,if (arg2 != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,542,if (arg2.getType() == Token.NUMBER) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,543,end = (int) arg2.getDouble();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,544,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,545,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,548,if (arg2.getNext() != null) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,549,"// If we got more args than we expected, bail out."
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,550,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,552,} else {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,553,// parameter 2 not passed
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,554,end = stringAsString.length();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,557,// Don't handle these cases. The specification actually does
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,558,"// specify the behavior in some of these cases, but we haven't"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,559,// done a thorough investigation that it is correctly implemented
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,560,// in all browsers.
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,561,if ((end > stringAsString.length()) ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,562,(start > stringAsString.length()) ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,563,(end < 0) ||
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,564,(start < 0)) {
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,565,return n;
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,568,"String result = stringAsString.substring(start, end);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,569,Node resultNode = Node.newString(result);
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,571,Node parent = n.getParent();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,572,"parent.replaceChild(n, resultNode);"
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,573,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java,574,return resultNode;
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,440,ublic void testStringIndexOf() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,441,"old(""x = 'abcdef'.indexOf('b')"", ""x = 1"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,442,"old(""x = 'abcdefbe'.indexOf('b', 2)"", ""x = 6"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,443,"old(""x = 'abcdef'.indexOf('bcd')"", ""x = 1"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,444,"old(""x = 'abcdefsdfasdfbcdassd'.indexOf('bcd', 4)"", ""x = 13"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,446,"old(""x = 'abcdef'.lastIndexOf('b')"", ""x = 1"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,447,"old(""x = 'abcdefbe'.lastIndexOf('b')"", ""x = 6"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,448,"old(""x = 'abcdefbe'.lastIndexOf('b', 5)"", ""x = 1"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,450,/ Both elements must be string. Dont do anything if either one is not
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,451,/ string.
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,452,"old(""x = 'abc1def'.indexOf(1)"", ""x = 3"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,453,"old(""x = 'abcNaNdef'.indexOf(NaN)"", ""x = 3"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,454,"old(""x = 'abcundefineddef'.indexOf(undefined)"", ""x = 3"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,455,"old(""x = 'abcnulldef'.indexOf(null)"", ""x = 3"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,456,"old(""x = 'abctruedef'.indexOf(true)"", ""x = 3"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,458,/ The following testcase fails with JSC_PARSE_ERROR. Hence omitted.
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,459,"/ foldSame(""x = 1.indexOf('bcd');"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,460,"oldSame(""x = NaN.indexOf('bcd')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,461,"oldSame(""x = undefined.indexOf('bcd')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,462,"oldSame(""x = null.indexOf('bcd')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,463,"oldSame(""x = true.indexOf('bcd')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,464,"oldSame(""x = false.indexOf('bcd')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,466,/ Avoid dealing with regex or other types.
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,467,"oldSame(""x = 'abcdef'.indexOf(/b./)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,468,"oldSame(""x = 'abcdef'.indexOf({a:2})"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,469,"oldSame(""x = 'abcdef'.indexOf([1,2])"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,472,ublic void testStringJoinAddSparse() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,473,"old(""x = [,,'a'].join(',')"", ""x = ',,a'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,476,ublic void testStringJoinAdd() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,477,"old(""x = ['a', 'b', 'c'].join('')"", ""x = \""abc\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,478,"old(""x = [].join(',')"", ""x = \""\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,479,"old(""x = ['a'].join(',')"", ""x = \""a\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,480,"old(""x = ['a', 'b', 'c'].join(',')"", ""x = \""a,b,c\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,481,"old(""x = ['a', foo, 'b', 'c'].join(',')"","
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,482,"x = [\""a\"",foo,\""b,c\""].join(\"",\"")"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,483,"old(""x = [foo, 'a', 'b', 'c'].join(',')"","
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,484,"x = [foo,\""a,b,c\""].join(\"",\"")"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,485,"old(""x = ['a', 'b', 'c', foo].join(',')"","
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,486,"x = [\""a,b,c\"",foo].join(\"",\"")"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,488,/ Works with numbers
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,489,"old(""x = ['a=', 5].join('')"", ""x = \""a=5\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,490,"old(""x = ['a', '5'].join(7)"", ""x = \""a75\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,492,/ Works on boolean
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,493,"old(""x = ['a=', false].join('')"", ""x = \""a=false\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,494,"old(""x = ['a', '5'].join(true)"", ""x = \""atrue5\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,495,"old(""x = ['a', '5'].join(false)"", ""x = \""afalse5\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,497,/ Only optimize if it's a size win.
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,498,"old(""x = ['a', '5', 'c'].join('a very very very long chain')"","
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,499,"x = [\""a\"",\""5\"",\""c\""].join(\""a very very very long chain\"")"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,501,/ TODO(user): Its possible to fold this better.
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,502,"oldSame(""x = ['', foo].join(',')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,503,"oldSame(""x = ['', foo, ''].join(',')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,505,"old(""x = ['', '', foo, ''].join(',')"", ""x = [',', foo, ''].join(',')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,506,"old(""x = ['', '', foo, '', ''].join(',')"","
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,507,"x = [',', foo, ','].join(',')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,509,"old(""x = ['', '', foo, '', '', bar].join(',')"","
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,510,"x = [',', foo, ',', bar].join(',')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,512,"old(""x = [1,2,3].join('abcdef')"","
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,513,"x = '1abcdef2abcdef3'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,515,"old(""x = [1,2].join()"", ""x = '1,2'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,516,"old(""x = [null,undefined,''].join(',')"", ""x = ',,'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,517,"old(""x = [null,undefined,0].join(',')"", ""x = ',,0'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,518,/ This can be folded but we don't currently.
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,519,"oldSame(""x = [[1,2],[3,4]].join()""); // would like: ""x = '1,2,3,4'"""
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,522,ublic void testStringJoinAdd_b1992789() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,523,"old(""x = ['a'].join('')"", ""x = \""a\"""");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,524,"old(""x = [foo()].join('')"", ""x = '' + foo()"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,525,"old(""[foo()].join('')"", ""'' + foo()"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,528,ublic void testFoldStringSubstr() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,529,"old(""x = 'abcde'.substr(0,2)"", ""x = 'ab'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,530,"old(""x = 'abcde'.substr(1,2)"", ""x = 'bc'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,531,"old(""x = 'abcde'['substr'](1,3)"", ""x = 'bcd'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,532,"old(""x = 'abcde'.substr(2)"", ""x = 'cde'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,534,/ we should be leaving negative indexes alone for now
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,535,"oldSame(""x = 'abcde'.substr(-1)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,536,"oldSame(""x = 'abcde'.substr(1, -2)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,537,"oldSame(""x = 'abcde'.substr(1, 2, 3)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,538,"oldSame(""x = 'a'.substr(0, 2)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,541,ublic void testFoldStringSubstring() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,542,"old(""x = 'abcde'.substring(0,2)"", ""x = 'ab'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,543,"old(""x = 'abcde'.substring(1,2)"", ""x = 'b'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,544,"old(""x = 'abcde'['substring'](1,3)"", ""x = 'bc'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,545,"old(""x = 'abcde'.substring(2)"", ""x = 'cde'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,547,/ we should be leaving negative indexes alone for now
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,548,"oldSame(""x = 'abcde'.substring(-1)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,549,"oldSame(""x = 'abcde'.substring(1, -2)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,550,"oldSame(""x = 'abcde'.substring(1, 2, 3)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,551,"oldSame(""x = 'a'.substring(0, 2)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,975,ublic void testJoinBug() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,976,"old(""var x = [].join();"", ""var x = '';"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,977,"old(""var x = [x].join();"", ""var x = '' + x;"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,978,"oldSame(""var x = [x,y].join();"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,979,"oldSame(""var x = [x,y,z].join();"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,981,"oldSame(""shape['matrix'] = [\n"" +"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,982,"    Number(headingCos2).toFixed(4),\n"" +"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,983,"    Number(-headingSin2).toFixed(4),\n"" +"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,984,"    Number(headingSin2 * yScale).toFixed(4),\n"" +"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,985,"    Number(headingCos2 * yScale).toFixed(4),\n"" +"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,986,"    0,\n"" +"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,987,"    0\n"" +"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,988,"  ].join()"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,991,ublic void testToUpper() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,992,"old(""'a'.toUpperCase()"", ""'A'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,993,"old(""'A'.toUpperCase()"", ""'A'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,994,"old(""'aBcDe'.toUpperCase()"", ""'ABCDE'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,997,ublic void testToLower() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,998,"old(""'A'.toLowerCase()"", ""'a'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,999,"old(""'a'.toLowerCase()"", ""'a'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1000,"old(""'aBcDe'.toLowerCase()"", ""'abcde'"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1017,ublic void testFoldParseNumbers() {
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1018,nableNormalize();
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1019,nableEcmaScript5(true);
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1021,"old(""x = parseInt('123')"", ""x = 123"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1022,"old(""x = parseInt(' 123')"", ""x = 123"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1023,"old(""x = parseInt('123', 10)"", ""x = 123"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1024,"old(""x = parseInt('0xA')"", ""x = 10"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1025,"old(""x = parseInt('0xA', 16)"", ""x = 10"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1026,"old(""x = parseInt('07', 8)"", ""x = 7"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1027,"old(""x = parseInt('08')"", ""x = 8"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1028,"old(""x = parseFloat('1.23')"", ""x = 1.23"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1029,"old(""x = parseFloat('1.2300')"", ""x = 1.23"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1030,"old(""x = parseFloat(' 0.3333')"", ""x = 0.3333"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1032,/Mozilla Dev Center test cases
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1033,"old(""x = parseInt(' 0xF', 16)"", ""x = 15"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1034,"old(""x = parseInt(' F', 16)"", ""x = 15"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1035,"old(""x = parseInt('17', 8)"", ""x = 15"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1036,"old(""x = parseInt('015', 10)"", ""x = 15"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1037,"old(""x = parseInt('1111', 2)"", ""x = 15"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1038,"old(""x = parseInt('12', 13)"", ""x = 15"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1039,"old(""x = parseInt(021, 8)"", ""x = 15"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1040,"old(""x = parseInt(15.99, 10)"", ""x = 15"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1041,"old(""x = parseFloat('3.14')"", ""x = 3.14"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1042,"old(""x = parseFloat(3.14)"", ""x = 3.14"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1044,/Valid calls - unable to fold
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1045,"oldSame(""x = parseInt('FXX123', 16)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1046,"oldSame(""x = parseInt('15*3', 10)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1047,"oldSame(""x = parseInt('15e2', 10)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1048,"oldSame(""x = parseInt('15px', 10)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1049,"oldSame(""x = parseInt('-0x08')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1050,"oldSame(""x = parseInt('1', -1)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1051,"oldSame(""x = parseFloat('3.14more non-digit characters')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1052,"oldSame(""x = parseFloat('314e-2')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1053,"oldSame(""x = parseFloat('0.0314E+2')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1054,"oldSame(""x = parseFloat('3.333333333333333333333333')"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1056,/Invalid calls
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1057,"oldSame(""x = parseInt('0xa', 10)"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1059,nableEcmaScript5(false);
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,1060,"oldSame(""x = parseInt('08')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,2,* Copyright 2011 The Closure Compiler Authors.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,20,* Unit tests for {#link {@link PeepholeReplaceKnownMethods}
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,23,public class PeepholeReplaceKnownMethodsTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,25,public PeepholeReplaceKnownMethodsTest() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,26,"super("""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,29,@Override
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,30,public void setUp() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,31,enableLineNumberCheck(true);
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,34,@Override
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,35,public CompilerPass getProcessor(final Compiler compiler) {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,36,"CompilerPass peepholePass = new PeepholeOptimizationsPass(compiler,"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,37,new PeepholeReplaceKnownMethods());
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,38,return peepholePass;
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,41,public void testStringIndexOf() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,42,"fold(""x = 'abcdef'.indexOf('b')"", ""x = 1"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,43,"fold(""x = 'abcdefbe'.indexOf('b', 2)"", ""x = 6"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,44,"fold(""x = 'abcdef'.indexOf('bcd')"", ""x = 1"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,45,"fold(""x = 'abcdefsdfasdfbcdassd'.indexOf('bcd', 4)"", ""x = 13"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,47,"fold(""x = 'abcdef'.lastIndexOf('b')"", ""x = 1"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,48,"fold(""x = 'abcdefbe'.lastIndexOf('b')"", ""x = 6"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,49,"fold(""x = 'abcdefbe'.lastIndexOf('b', 5)"", ""x = 1"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,51,// Both elements must be string. Dont do anything if either one is not
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,52,// string.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,53,"fold(""x = 'abc1def'.indexOf(1)"", ""x = 3"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,54,"fold(""x = 'abcNaNdef'.indexOf(NaN)"", ""x = 3"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,55,"fold(""x = 'abcundefineddef'.indexOf(undefined)"", ""x = 3"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,56,"fold(""x = 'abcnulldef'.indexOf(null)"", ""x = 3"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,57,"fold(""x = 'abctruedef'.indexOf(true)"", ""x = 3"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,59,// The following testcase fails with JSC_PARSE_ERROR. Hence omitted.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,60,"// foldSame(""x = 1.indexOf('bcd');"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,61,"foldSame(""x = NaN.indexOf('bcd')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,62,"foldSame(""x = undefined.indexOf('bcd')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,63,"foldSame(""x = null.indexOf('bcd')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,64,"foldSame(""x = true.indexOf('bcd')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,65,"foldSame(""x = false.indexOf('bcd')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,67,// Avoid dealing with regex or other types.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,68,"foldSame(""x = 'abcdef'.indexOf(/b./)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,69,"foldSame(""x = 'abcdef'.indexOf({a:2})"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,70,"foldSame(""x = 'abcdef'.indexOf([1,2])"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,73,public void testStringJoinAddSparse() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,74,"fold(""x = [,,'a'].join(',')"", ""x = ',,a'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,77,public void testStringJoinAdd() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,78,"fold(""x = ['a', 'b', 'c'].join('')"", ""x = \""abc\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,79,"fold(""x = [].join(',')"", ""x = \""\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,80,"fold(""x = ['a'].join(',')"", ""x = \""a\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,81,"fold(""x = ['a', 'b', 'c'].join(',')"", ""x = \""a,b,c\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,82,"fold(""x = ['a', foo, 'b', 'c'].join(',')"","
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,83,"""x = [\""a\"",foo,\""b,c\""].join(\"",\"")"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,84,"fold(""x = [foo, 'a', 'b', 'c'].join(',')"","
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,85,"""x = [foo,\""a,b,c\""].join(\"",\"")"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,86,"fold(""x = ['a', 'b', 'c', foo].join(',')"","
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,87,"""x = [\""a,b,c\"",foo].join(\"",\"")"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,89,// Works with numbers
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,90,"fold(""x = ['a=', 5].join('')"", ""x = \""a=5\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,91,"fold(""x = ['a', '5'].join(7)"", ""x = \""a75\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,93,// Works on boolean
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,94,"fold(""x = ['a=', false].join('')"", ""x = \""a=false\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,95,"fold(""x = ['a', '5'].join(true)"", ""x = \""atrue5\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,96,"fold(""x = ['a', '5'].join(false)"", ""x = \""afalse5\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,98,// Only optimize if it's a size win.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,99,"fold(""x = ['a', '5', 'c'].join('a very very very long chain')"","
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,100,"""x = [\""a\"",\""5\"",\""c\""].join(\""a very very very long chain\"")"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,102,// TODO(user): Its possible to fold this better.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,103,"foldSame(""x = ['', foo].join(',')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,104,"foldSame(""x = ['', foo, ''].join(',')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,106,"fold(""x = ['', '', foo, ''].join(',')"", ""x = [',', foo, ''].join(',')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,107,"fold(""x = ['', '', foo, '', ''].join(',')"","
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,108,"""x = [',', foo, ','].join(',')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,110,"fold(""x = ['', '', foo, '', '', bar].join(',')"","
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,111,"""x = [',', foo, ',', bar].join(',')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,113,"fold(""x = [1,2,3].join('abcdef')"","
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,114,"""x = '1abcdef2abcdef3'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,116,"fold(""x = [1,2].join()"", ""x = '1,2'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,117,"fold(""x = [null,undefined,''].join(',')"", ""x = ',,'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,118,"fold(""x = [null,undefined,0].join(',')"", ""x = ',,0'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,119,// This can be folded but we don't currently.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,120,"foldSame(""x = [[1,2],[3,4]].join()""); // would like: ""x = '1,2,3,4'"""
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,123,public void testStringJoinAdd_b1992789() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,124,"fold(""x = ['a'].join('')"", ""x = \""a\"""");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,125,"fold(""x = [foo()].join('')"", ""x = '' + foo()"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,126,"fold(""[foo()].join('')"", ""'' + foo()"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,129,public void testFoldStringSubstr() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,130,"fold(""x = 'abcde'.substr(0,2)"", ""x = 'ab'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,131,"fold(""x = 'abcde'.substr(1,2)"", ""x = 'bc'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,132,"fold(""x = 'abcde'['substr'](1,3)"", ""x = 'bcd'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,133,"fold(""x = 'abcde'.substr(2)"", ""x = 'cde'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,135,// we should be leaving negative indexes alone for now
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,136,"foldSame(""x = 'abcde'.substr(-1)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,137,"foldSame(""x = 'abcde'.substr(1, -2)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,138,"foldSame(""x = 'abcde'.substr(1, 2, 3)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,139,"foldSame(""x = 'a'.substr(0, 2)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,142,public void testFoldStringSubstring() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,143,"fold(""x = 'abcde'.substring(0,2)"", ""x = 'ab'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,144,"fold(""x = 'abcde'.substring(1,2)"", ""x = 'b'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,145,"fold(""x = 'abcde'['substring'](1,3)"", ""x = 'bc'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,146,"fold(""x = 'abcde'.substring(2)"", ""x = 'cde'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,148,// we should be leaving negative indexes alone for now
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,149,"foldSame(""x = 'abcde'.substring(-1)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,150,"foldSame(""x = 'abcde'.substring(1, -2)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,151,"foldSame(""x = 'abcde'.substring(1, 2, 3)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,152,"foldSame(""x = 'a'.substring(0, 2)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,155,public void testJoinBug() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,156,"fold(""var x = [].join();"", ""var x = '';"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,157,"fold(""var x = [x].join();"", ""var x = '' + x;"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,158,"foldSame(""var x = [x,y].join();"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,159,"foldSame(""var x = [x,y,z].join();"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,161,"foldSame(""shape['matrix'] = [\n"" +"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,162,"""    Number(headingCos2).toFixed(4),\n"" +"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,163,"""    Number(-headingSin2).toFixed(4),\n"" +"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,164,"""    Number(headingSin2 * yScale).toFixed(4),\n"" +"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,165,"""    Number(headingCos2 * yScale).toFixed(4),\n"" +"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,166,"""    0,\n"" +"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,167,"""    0\n"" +"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,168,"""  ].join()"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,171,public void testToUpper() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,172,"fold(""'a'.toUpperCase()"", ""'A'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,173,"fold(""'A'.toUpperCase()"", ""'A'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,174,"fold(""'aBcDe'.toUpperCase()"", ""'ABCDE'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,177,public void testToLower() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,178,"fold(""'A'.toLowerCase()"", ""'a'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,179,"fold(""'a'.toLowerCase()"", ""'a'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,180,"fold(""'aBcDe'.toLowerCase()"", ""'abcde'"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,183,public void testFoldParseNumbers() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,184,enableNormalize();
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,185,enableEcmaScript5(true);
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,187,"fold(""x = parseInt('123')"", ""x = 123"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,188,"fold(""x = parseInt(' 123')"", ""x = 123"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,189,"fold(""x = parseInt('123', 10)"", ""x = 123"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,190,"fold(""x = parseInt('0xA')"", ""x = 10"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,191,"fold(""x = parseInt('0xA', 16)"", ""x = 10"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,192,"fold(""x = parseInt('07', 8)"", ""x = 7"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,193,"fold(""x = parseInt('08')"", ""x = 8"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,194,"fold(""x = parseFloat('1.23')"", ""x = 1.23"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,195,"fold(""x = parseFloat('1.2300')"", ""x = 1.23"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,196,"fold(""x = parseFloat(' 0.3333')"", ""x = 0.3333"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,198,//Mozilla Dev Center test cases
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,199,"fold(""x = parseInt(' 0xF', 16)"", ""x = 15"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,200,"fold(""x = parseInt(' F', 16)"", ""x = 15"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,201,"fold(""x = parseInt('17', 8)"", ""x = 15"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,202,"fold(""x = parseInt('015', 10)"", ""x = 15"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,203,"fold(""x = parseInt('1111', 2)"", ""x = 15"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,204,"fold(""x = parseInt('12', 13)"", ""x = 15"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,205,"fold(""x = parseInt(021, 8)"", ""x = 15"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,206,"fold(""x = parseInt(15.99, 10)"", ""x = 15"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,207,"fold(""x = parseFloat('3.14')"", ""x = 3.14"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,208,"fold(""x = parseFloat(3.14)"", ""x = 3.14"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,210,//Valid calls - unable to fold
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,211,"foldSame(""x = parseInt('FXX123', 16)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,212,"foldSame(""x = parseInt('15*3', 10)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,213,"foldSame(""x = parseInt('15e2', 10)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,214,"foldSame(""x = parseInt('15px', 10)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,215,"foldSame(""x = parseInt('-0x08')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,216,"foldSame(""x = parseInt('1', -1)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,217,"foldSame(""x = parseFloat('3.14more non-digit characters')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,218,"foldSame(""x = parseFloat('314e-2')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,219,"foldSame(""x = parseFloat('0.0314E+2')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,220,"foldSame(""x = parseFloat('3.333333333333333333333333')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,222,//Invalid calls
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,223,"foldSame(""x = parseInt('0xa', 10)"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,225,enableEcmaScript5(false);
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,226,"foldSame(""x = parseInt('08')"");"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,229,@Override
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,230,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,231,// Reduce this to 2 if we get better expression evaluators.
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,232,return 2;
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,235,private void foldSame(String js) {
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,236,testSame(js);
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,239,"private void fold(String js, String expected) {"
True,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,240,"test(js, expected);"

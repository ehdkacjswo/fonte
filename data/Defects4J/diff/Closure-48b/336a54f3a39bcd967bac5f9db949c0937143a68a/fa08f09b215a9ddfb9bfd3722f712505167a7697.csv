is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,52,/ Source Line Information
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,53,rivate int[] lineOffsets = null;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,125,ineOffsets = null;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,317, @param lineno the line of the input to get the absolute offset of.
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,318, @return the absolute offset of the start of the provided line.
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,319, @throws IllegalArgumentException if lineno is less than 1 or greater than
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,320,         the number of lines in the source.
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,312,@Override
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,323,f (lineOffsets == null) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,324,indLineOffsets();
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,326,f (lineno < 1 || lineno > lineOffsets.length) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,327,hrow new IllegalArgumentException(
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,328,"Expected line number between 1 and "" + lineOffsets.length);"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,330,eturn lineOffsets[lineno - 1];
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,314,return ast.getSourceFile().getLineOffset(lineno);
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,335,f (lineOffsets == null) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,336,indLineOffsets();
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,338,eturn lineOffsets.length;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,341,rivate void findLineOffsets() {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,342,ry {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,343,"tring[] sourceLines = ast.getSourceFile().getCode().split(""\n"");"
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,344,ineOffsets = new int[sourceLines.length];
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,345,or (int ii = 1; ii < sourceLines.length; ++ii) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,346,ineOffsets[ii] =
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,347,ineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,349, catch (IOException e) {
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,350,ineOffsets = new int[1];
False,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,351,ineOffsets[0] = 0;
True,src/com/google/javascript/jscomp/CompilerInput.java,src/com/google/javascript/jscomp/CompilerInput.java,319,return ast.getSourceFile().getNumLines();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,68,// Source Line Information
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,69,private int[] lineOffsets = null;
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,96,@Override
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,97,public int getLineOffset(int lineno) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,98,if (lineOffsets == null) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,99,findLineOffsets();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,101,if (lineno < 1 || lineno > lineOffsets.length) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,102,throw new IllegalArgumentException(
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,103,"""Expected line number between 1 and "" + lineOffsets.length);"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,105,return lineOffsets[lineno - 1];
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,108,/** @return The number of lines in this source file. */
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,109,int getNumLines() {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,110,if (lineOffsets == null) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,111,findLineOffsets();
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,113,return lineOffsets.length;
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,116,private void findLineOffsets() {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,117,try {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,118,"String[] sourceLines = getCode().split(""\n"");"
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,119,lineOffsets = new int[sourceLines.length];
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,120,for (int ii = 1; ii < sourceLines.length; ++ii) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,121,lineOffsets[ii] =
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,122,lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,124,} catch (IOException e) {
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,125,lineOffsets = new int[1];
True,src/com/google/javascript/jscomp/SourceFile.java,src/com/google/javascript/jscomp/SourceFile.java,126,lineOffsets[0] = 0;
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,960,ublic int getLineno() {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,961,eturn extractLineno(sourcePosition);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,964,ublic int getCharno() {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,965,eturn extractCharno(sourcePosition);
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,968,ublic int getSourcePosition() {
False,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,969,eturn sourcePosition;
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1251,public int getLineno() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1252,return extractLineno(sourcePosition);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1255,public int getCharno() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1256,return extractCharno(sourcePosition);
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1259,public int getSourceOffset() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1260,StaticSourceFile file = getStaticSourceFile();
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1261,int lineOffset = file == null ?
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1262,Integer.MIN_VALUE : file.getLineOffset(getLineno());
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1263,return lineOffset + getCharno();
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1266,public int getSourcePosition() {
True,src/com/google/javascript/rhino/Node.java,src/com/google/javascript/rhino/Node.java,1267,return sourcePosition;
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,65,@Override
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,66,public int getLineOffset(int line) {
True,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,src/com/google/javascript/rhino/jstype/SimpleSourceFile.java,67,return Integer.MIN_VALUE;
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,58,* Returns the offset of the given line number relative to the file start.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,59,* Line number should be 1-based.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,61,"* If the source file doesn't have line information, it should return"
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,62,* Integer.MIN_VALUE. The negative offsets will make it more obvious
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,63,* what happened.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,65,* @param lineNumber the line of the input to get the absolute offset of.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,66,* @return the absolute offset of the start of the provided line.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,67,* @throws IllegalArgumentException if lineno is less than 1 or greater than
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,68,*         the number of lines in the source.
True,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,src/com/google/javascript/rhino/jstype/StaticSourceFile.java,70,int getLineOffset(int lineNumber);

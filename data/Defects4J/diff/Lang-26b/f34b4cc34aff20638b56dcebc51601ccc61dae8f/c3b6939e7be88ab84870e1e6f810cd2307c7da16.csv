is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,24,import java.lang.reflect.WildcardType;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,25,import java.util.Arrays;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,26,import java.util.HashMap;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,27,import java.util.HashSet;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,28,import java.util.List;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,29,import java.util.Map;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,30,import java.util.Set;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,25,mport org.apache.commons.lang3.Validate;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,32,import org.apache.commons.lang3.ClassUtils;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,28," <p>Utility methods focusing on type inspection, particularly with regard to"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,29, generics.</p>
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,30, @author James Carman
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,35,"* <p> Utility methods focusing on type inspection, particularly with regard to"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,36,* generics. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,38,* @author David M. Sledge
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,40,* @author James Carman
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,38," Get the raw type of a Java type, given its context. Primarily for use"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,39," with {@link TypeVariable}s and {@link GenericArrayType}s, or when you do"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,40, not know the runtime type of <code>type</code>: if you know you have a
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,41," {@link Class} instance, it is already raw; if you know you have a"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,42," {@link ParameterizedType}, its raw type is only a method call away."
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,43, @param enclosingType context
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,44, @param type to read
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,45, @return Class<?>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,47,* <p> TypeUtils instances should NOT be constructed in standard
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,48,"* programming. Instead, the class should be used as"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,49,"* <code>TypeUtils.isAssignable(cls, toClass)</code>. </p> <p> This"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,50,* constructor is public to permit tools that require a JavaBean instance to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,51,* operate. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,53,public TypeUtils() {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,54,super();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,58,* <p> Checks if the subject type may be implicitly cast to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,59,* following the Java generics rules. If both types are {@link Class}
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,60,"* objects, the method returns the result of"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,61,"* {@link ClassUtils#isAssignable(Class, Class)}. </p>"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,63,* @param type the subject type to be assigned to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,64,* @param toType the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,65,* @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,67,"public static boolean isAssignable(Type type, Type toType) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,68,"return isAssignable(type, toType, null);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,72,* <p> Checks if the subject type may be implicitly cast to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,73,* following the Java generics rules. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,75,* @param type the subject type to be assigned to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,76,* @param toType the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,77,* @param typeVarAssigns optional map of type variable assignments
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,78,* @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,80,"private static boolean isAssignable(Type type, Type toType,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,81,"Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,82,if (toType == null || toType instanceof Class<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,83,"return isAssignable(type, (Class<?>) toType);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,86,if (toType instanceof ParameterizedType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,87,"return isAssignable(type, (ParameterizedType) toType, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,90,if (toType instanceof GenericArrayType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,91,"return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,94,if (toType instanceof WildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,95,"return isAssignable(type, (WildcardType) toType, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,99,if (toType instanceof TypeVariable<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,100,"return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,104,"throw new IllegalStateException(""found an unhandled type: "" + toType);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,108,* <p> Checks if the subject type may be implicitly cast to the target class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,109,* following the Java generics rules. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,111,* @param type the subject type to be assigned to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,112,* @param toClass the target class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,113,* @return true if <code>type</code> is assignable to <code>toClass</code>.
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,47,"/ original code taken from commons [proxy]'s 2.0 branch, then kneaded until firm"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,48,"ublic static Class<?> getRawType(Type enclosingType, Type type) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,115,"private static boolean isAssignable(Type type, Class<?> toClass) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,116,if (type == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,117,// consistency with ClassUtils.isAssignable() behavior
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,118,return toClass == null || !toClass.isPrimitive();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,121,// only a null type can be assigned to null type which
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,122,// would have cause the previous to return true
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,123,if (toClass == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,124,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,127,// all types are assignable to themselves
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,128,if (toClass.equals(type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,129,return true;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,50,"/ it is raw, no problem"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,51,eturn (Class<?>) type;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,133,// just comparing two classes
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,134,"return ClassUtils.isAssignable((Class<?>) type, toClass);"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,54,/ simple enough to get the raw type of a ParameterizedType
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,55,eturn (Class<?>) ((ParameterizedType) type).getRawType();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,138,// only have to compare the raw type to the class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,139,"return isAssignable(getRawType((ParameterizedType) type), toClass);"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,58,"alidate.notNull(enclosingType,"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,59,"Cannot get raw type of TypeVariable without enclosing type"");"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,60,"/ resolve the variable against the enclosing type, hope for the best (casting)"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,61,"eturn (Class<?>) resolveVariable(enclosingType, (TypeVariable<?>) type);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,144,"// if any of the bounds are assignable to the class, then the"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,145,// type is assignable to the class.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,146,for (Type bound : ((TypeVariable<?>) type).getBounds()) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,147,"if (isAssignable(bound, toClass)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,148,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,152,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,155,// the only classes to which a generic array type can be assigned
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,156,// are class Object and array classes
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,64,"alidate.notNull(enclosingType,"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,65,"Cannot get raw type of GenericArrayType without enclosing type"");"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,66,"/ not included in original code, but not too difficult:  just have to get raw component type..."
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,67,"lass<?> rawComponentType = getRawType(enclosingType, ((GenericArrayType) type)"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,68,getGenericComponentType());
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,69,"/ ...and know how to reflectively create array types, uncommon but not unheard of:"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,70,"eturn Array.newInstance(rawComponentType, 0).getClass();"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,158,return toClass.equals(Object.class)
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,159,|| toClass.isArray()
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,160,"&& isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,161,.getComponentType());
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,164,// wildcard types are not assignable to a class (though one would think
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,165,"// ""? super Object"" would be assignable to Object)"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,166,if (type instanceof WildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,167,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,170,"throw new IllegalStateException(""found an unhandled type: "" + type);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,174,* <p> Checks if the subject type may be implicitly cast to the target
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,175,* parameterized type following the Java generics rules. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,177,* @param type the subject type to be assigned to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,178,* @param toParameterizedType the target parameterized type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,179,* @return true if <code>type</code> is assignable to <code>toType</code>.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,181,"private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,182,"Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,183,if (type == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,184,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,187,// only a null type can be assigned to null type which
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,188,// would have cause the previous to return true
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,189,if (toParameterizedType == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,190,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,193,// all types are assignable to themselves
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,194,if (toParameterizedType.equals(type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,195,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,198,// get the target type's raw type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,199,Class<?> toClass = getRawType(toParameterizedType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,200,// get the subject type's type arguments including owner type arguments
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,201,// and supertype arguments up to and including the target class.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,202,"Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,204,// null means the two types are not compatible
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,205,if (fromTypeVarAssigns == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,206,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,209,"// compatible types, but there's no type arguments. this is equivalent"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,210,"// to comparing Map< ?, ? > to Map, and raw types are always assignable"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,211,// to parameterized types.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,212,if (fromTypeVarAssigns.isEmpty()) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,213,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,216,// get the target type's type arguments including owner type arguments
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,217,"Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,218,"toClass, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,220,// now to check each type argument
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,221,"for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,222,Type toTypeArg = entry.getValue();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,223,Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,225,"// parameters must either be absent from the subject type, within"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,226,"// the bounds of the wildcard type, or be an exact match to the"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,227,// parameters of the target type.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,228,if (fromTypeArg != null
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,229,&& !toTypeArg.equals(fromTypeArg)
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,230,"&& !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,231,typeVarAssigns))) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,232,return false;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,72,hrow new IllegalArgumentException(String.valueOf(type));
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,236,return true;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,76," We plan to return Class<?> from the top-level call, as evidenced by the"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,77," cast in the above method, but to handle recursion and falling back up the"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,78," graph, as it were, return Type"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,79, @param enclosingType
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,80, @param typeVar
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,81, @return Type resolved
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,240,* <p> Checks if the subject type may be implicitly cast to the target
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,241,* generic array type following the Java generics rules. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,243,* @param type the subject type to be assigned to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,244,* @param toGenericArrayType the target generic array type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,245,* @return true if <code>type</code> is assignable to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,246,* <code>toGenericArrayType</code>.
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,83,"/ original code taken from commons [proxy]'s 2.0 branch, then kneaded until firm"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,84,"rivate static Type resolveVariable(Type enclosingType, TypeVariable<?> typeVar) {"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,85,f (enclosingType instanceof ParameterizedType) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,86,arameterizedType parameterizedEnclosingType = (ParameterizedType) enclosingType;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,87,"ypeVariable<?>[] typeVariables = getRawType(null,"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,88,arameterizedEnclosingType.getRawType()).getTypeParameters();
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,89,/look for the matching variable:
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,90,or (int i = 0; i < typeVariables.length; i++) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,91,f (typeVariables[i].equals(typeVar)) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,92,eturn parameterizedEnclosingType.getActualTypeArguments()[i];
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,248,"private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,249,"Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,250,if (type == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,251,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,254,// only a null type can be assigned to null type which
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,255,// would have cause the previous to return true
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,256,if (toGenericArrayType == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,257,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,260,// all types are assignable to themselves
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,261,if (toGenericArrayType.equals(type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,262,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,265,Type toComponentType = toGenericArrayType.getGenericComponentType();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,267,if (type instanceof Class<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,268,Class<?> cls = (Class<?>) type;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,270,// compare the component types
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,271,return cls.isArray()
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,272,"&& isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,275,if (type instanceof GenericArrayType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,276,// compare the component types
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,277,"return isAssignable(((GenericArrayType) type).getGenericComponentType(),"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,278,"toComponentType, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,281,if (type instanceof WildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,282,"// so long as one of the upper bounds is assignable, it's good"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,283,for (Type bound : getImplicitUpperBounds((WildcardType) type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,284,"if (isAssignable(bound, toGenericArrayType)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,285,return true;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,95,/otherwise recurse to try against raw class
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,96,"ype result = resolveVariable(parameterizedEnclosingType.getRawType(), typeVar);"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,97,/unroll variable if returned
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,98,f (result instanceof TypeVariable<?>) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,99,"eturn resolveVariable(enclosingType, (TypeVariable<?>) result);"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,101,eturn result;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,103,f (enclosingType instanceof Class<?>) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,104,lass<?> enclosingClass = (Class<?>) enclosingType;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,105,ype result = null;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,106,ype genericSuperclass = enclosingClass.getGenericSuperclass();
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,107,f (genericSuperclass != null && !Object.class.equals(genericSuperclass)) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,108,"esult = resolveVariable(genericSuperclass, typeVar);"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,110,f (result == null) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,111,or (Type genericInterface : enclosingClass.getGenericInterfaces()) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,112,"esult = resolveVariable(genericInterface, typeVar);"
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,113,f (result != null) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,114,reak;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,289,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,292,if (type instanceof TypeVariable<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,293,// probably should remove the following logic and just return false.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,294,// type variables cannot specify arrays as bounds.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,295,for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,296,"if (isAssignable(bound, toGenericArrayType)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,297,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,301,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,304,if (type instanceof ParameterizedType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,305,// the raw type of a parameterized type is never an array or
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,306,"// generic array, otherwise the declaration would look like this:"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,307,// Collection[]< ? extends String > collection;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,308,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,311,"throw new IllegalStateException(""found an unhandled type: "" + type);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,315,* <p> Checks if the subject type may be implicitly cast to the target
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,316,* wildcard type following the Java generics rules. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,318,* @param type the subject type to be assigned to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,319,* @param toWildcardType the target wildcard type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,320,* @return true if <code>type</code> is assignable to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,321,* <code>toWildcardType</code>.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,323,"private static boolean isAssignable(Type type, WildcardType toWildcardType,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,324,"Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,325,if (type == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,326,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,329,// only a null type can be assigned to null type which
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,330,// would have cause the previous to return true
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,331,if (toWildcardType == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,332,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,335,// all types are assignable to themselves
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,336,if (toWildcardType.equals(type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,337,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,340,Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,341,Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,343,if (type instanceof WildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,344,WildcardType wildcardType = (WildcardType) type;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,345,Type[] upperBounds = getImplicitUpperBounds(wildcardType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,346,Type[] lowerBounds = getImplicitLowerBounds(wildcardType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,348,for (Type toBound : toUpperBounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,349,"// if there are assignments for unresolved type variables,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,350,// now's the time to substitute them.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,351,"toBound = substituteTypeVariables(toBound, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,353,// each upper bound of the subject type has to be assignable to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,354,// each
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,355,// upper bound of the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,356,for (Type bound : upperBounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,357,"if (!isAssignable(bound, toBound, typeVarAssigns)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,358,return false;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,118,f (result != null) {
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,119,eturn result;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,363,for (Type toBound : toLowerBounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,364,"// if there are assignments for unresolved type variables,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,365,// now's the time to substitute them.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,366,"toBound = substituteTypeVariables(toBound, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,368,// each lower bound of the target type has to be assignable to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,369,// each
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,370,// lower bound of the subject type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,371,for (Type bound : lowerBounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,372,"if (!isAssignable(toBound, bound, typeVarAssigns)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,373,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,378,return true;
False,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,122,hrow new IllegalArgumentException(String.valueOf(typeVar));
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,381,for (Type toBound : toUpperBounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,382,"// if there are assignments for unresolved type variables,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,383,// now's the time to substitute them.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,384,"if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,385,typeVarAssigns)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,386,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,390,for (Type toBound : toLowerBounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,391,"// if there are assignments for unresolved type variables,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,392,// now's the time to substitute them.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,393,"if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,394,typeVarAssigns)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,395,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,399,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,403,* <p> Checks if the subject type may be implicitly cast to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,404,* variable following the Java generics rules. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,406,* @param type the subject type to be assigned to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,407,* @param toTypeVariable the target type variable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,408,* @return true if <code>type</code> is assignable to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,409,* <code>toTypeVariable</code>.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,411,"private static boolean isAssignable(Type type, TypeVariable<?> toTypeVariable,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,412,"Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,413,if (type == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,414,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,417,// only a null type can be assigned to null type which
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,418,// would have cause the previous to return true
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,419,if (toTypeVariable == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,420,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,423,// all types are assignable to themselves
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,424,if (toTypeVariable.equals(type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,425,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,428,if (type instanceof TypeVariable<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,429,"// a type variable is assignable to another type variable, if"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,430,"// and only if the former is the latter, extends the latter, or"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,431,// is otherwise a descendant of the latter.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,432,Type[] bounds = getImplicitBounds((TypeVariable<?>) type);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,434,for (Type bound : bounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,435,"if (isAssignable(bound, toTypeVariable, typeVarAssigns)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,436,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,441,if (type instanceof Class<?> || type instanceof ParameterizedType
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,442,|| type instanceof GenericArrayType || type instanceof WildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,443,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,446,"throw new IllegalStateException(""found an unhandled type: "" + type);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,450,* <p> </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,452,* @param type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,453,* @param typeVarAssigns
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,454,* @return
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,456,"private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,457,if (type instanceof TypeVariable<?> && typeVarAssigns != null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,458,Type replacementType = typeVarAssigns.get(type);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,460,if (replacementType == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,461,"throw new IllegalArgumentException(""missing assignment type for type variable """
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,462,+ type);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,465,return replacementType;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,468,return type;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,472,* <p> Retrieves all the type arguments for this parameterized type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,473,* including owner hierarchy arguments such as <code>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,474,"* Outer<K,V>.Inner<T>.DeepInner<E></code> . The arguments are returned in a"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,475,* {@link Map} specifying the argument type for each {@link TypeVariable}.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,476,* </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,478,* @param type specifies the subject parameterized type from which to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,479,* harvest the parameters.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,480,* @return a map of the type arguments to their respective type variables.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,482,"public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,483,"return getTypeArguments(type, getRawType(type), null);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,487,* <p> Gets the type arguments of a class/interface based on a subtype. For
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,488,"* instance, this method will determine that both of the parameters for the"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,489,* interface {@link Map} are {@link Object} for the subtype
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,490,* {@link java.util.Properties Properties} even though the subtype does not
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,491,* directly implement the <code>Map</code> interface. <p> </p> This method
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,492,* returns <code>null</code> if <code>type</code> is not assignable to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,493,* <code>toClass</code>. It returns an empty map if none of the classes or
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,494,* interfaces in its inheritance hierarchy specify any type arguments. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,495,* <p> A side-effect of this method is that it also retrieves the type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,496,* arguments for the classes and interfaces that are part of the hierarchy
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,497,* between <code>type</code> and <code>toClass</code>. So with the above
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,498,"* example, this method will also determine that the type arguments for"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,499,* {@link java.util.Hashtable Hashtable} are also both <code>Object</code>.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,500,* In cases where the interface specified by <code>toClass</code> is
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,501,* (indirectly) implemented more than once (e.g. where <code>toClass</code>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,502,* specifies the interface {@link java.lang.Iterable Iterable} and
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,503,* <code>type</code> specifies a parameterized type that implements both
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,504,"* {@link java.util.Set Set} and {@link java.lang.Collection Collection}),"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,505,* this method will look at the inheritance hierarchy of only one of the
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,506,* implementations/subclasses; the first interface encountered that isn't a
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,507,* subinterface to one of the others in the <code>type</code> to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,508,* <code>toClass</code> hierarchy. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,510,* @param type the type from which to determine the type parameters of
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,511,* <code>toClass</code>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,512,* @param toClass the class whose type parameters are to be determined based
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,513,* on the subtype <code>type</code>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,514,* @return a map of the type assignments for the type variables in each type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,515,* in the inheritance hierarchy from <code>type</code> to
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,516,* <code>toClass</code> inclusive.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,518,"public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,519,"return getTypeArguments(type, toClass, null);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,523,* <p> Return a map of the type arguments of <code>type</code> in the context of <code>toClass</code>. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,525,* @param type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,526,* @param toClass
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,527,* @param subtypeVarAssigns
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,528,* @return
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,530,"private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,531,"Map<TypeVariable<?>, Type> subtypeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,532,if (type instanceof Class<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,533,"return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,536,if (type instanceof ParameterizedType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,537,"return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,540,if (type instanceof GenericArrayType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,541,"return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,542,".isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,545,"// since wildcard types are not assignable to classes, should this just"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,546,// return null?
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,547,if (type instanceof WildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,548,for (Type bound : getImplicitUpperBounds((WildcardType) type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,549,// find the first bound that is assignable to the target class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,550,"if (isAssignable(bound, toClass)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,551,"return getTypeArguments(bound, toClass, subtypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,555,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,559,if (type instanceof TypeVariable<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,560,for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,561,// find the first bound that is assignable to the target class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,562,"if (isAssignable(bound, toClass)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,563,"return getTypeArguments(bound, toClass, subtypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,567,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,571,"throw new IllegalStateException(""found an unhandled type: "" + type);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,575,* <p> </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,577,* @param parameterizedType
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,578,* @param toClass
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,579,* @param subtypeVarAssigns
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,580,* @return
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,582,"private static Map<TypeVariable<?>, Type> getTypeArguments("
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,583,"ParameterizedType parameterizedType, Class<?> toClass,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,584,"Map<TypeVariable<?>, Type> subtypeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,585,Class<?> cls = getRawType(parameterizedType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,587,// make sure they're assignable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,588,"if (!isAssignable(cls, toClass)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,589,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,592,Type ownerType = parameterizedType.getOwnerType();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,593,"Map<TypeVariable<?>, Type> typeVarAssigns;"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,595,if (ownerType instanceof ParameterizedType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,596,// get the owner type arguments first
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,597,ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,598,"typeVarAssigns = getTypeArguments(parameterizedOwnerType,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,599,"getRawType(parameterizedOwnerType), subtypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,600,} else {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,601,"// no owner, prep the type variable assignments map"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,602,"typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,603,": new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,606,// get the subject parameterized type's arguments
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,607,Type[] typeArgs = parameterizedType.getActualTypeArguments();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,608,// and get the corresponding type variables from the raw class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,609,TypeVariable<?>[] typeParams = cls.getTypeParameters();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,611,// map the arguments to their respective type variables
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,612,for (int i = 0; i < typeParams.length; i++) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,613,Type typeArg = typeArgs[i];
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,614,"typeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,615,.get(typeArg) : typeArg);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,618,if (toClass.equals(cls)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,619,// target class has been reached. Done.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,620,return typeVarAssigns;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,623,// walk the inheritance hierarchy until the target class is reached
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,624,"return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,628,* <p> </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,630,* @param cls
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,631,* @param toClass
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,632,* @param subtypeVarAssigns
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,633,* @return
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,635,"private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,636,"Map<TypeVariable<?>, Type> subtypeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,637,// make sure they're assignable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,638,"if (!isAssignable(cls, toClass)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,639,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,642,// can't work with primitives
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,643,if (cls.isPrimitive()) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,644,// both classes are primitives?
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,645,if (toClass.isPrimitive()) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,646,// dealing with widening here. No type arguments to be
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,647,// harvested with these two types.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,648,"return new HashMap<TypeVariable<?>, Type>();"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,651,// work with wrapper the wrapper class instead of the primitive
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,652,cls = ClassUtils.primitiveToWrapper(cls);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,655,"// create a copy of the incoming map, or an empty one if it's null"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,656,"HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,657,": new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,659,"// no arguments for the parameters, or target class has been reached"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,660,if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,661,return typeVarAssigns;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,664,// walk the inheritance hierarchy until the target class is reached
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,665,"return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,669,* <p> Tries to determine the type arguments of a class/interface based on a
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,670,* super parameterized type's type arguments. This method is the inverse of
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,671,"* {@link #getTypeArguments(Type, Class)} which gets a class/interface's"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,672,* type arguments based on a subtype. It is far more limited in determining
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,673,* the type arguments for the subject class's type variables in that it can
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,674,* only determine those parameters that map from the subject {@link Class}
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,675,* object to the supertype. </p> <p> Example: {@link java.util.TreeSet
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,676,* TreeSet} sets its parameter as the parameter for
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,677,"* {@link java.util.NavigableSet NavigableSet}, which in turn sets the"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,678,"* parameter of {@link java.util.SortedSet}, which in turn sets the"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,679,"* parameter of {@link Set}, which in turn sets the parameter of"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,680,"* {@link java.util.Collection}, which in turn sets the parameter of"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,681,* {@link java.util.Iterable}. Since <code>TreeSet</code>'s parameter maps
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,682,"* (indirectly) to <code>Iterable</code>'s parameter, it will be able to"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,683,* determine that based on the super type <code>Iterable<? extends
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,684,"* Map<Integer,? extends Collection<?>>></code>, the parameter of"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,685,"* <code>TreeSet</code> is <code>? extends Map<Integer,? extends"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,686,* Collection<?>></code>. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,688,* @param cls the class whose type parameters are to be determined
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,689,* @param superType the super type from which <code>cls</code>'s type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,690,* arguments are to be determined
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,691,* @return a map of the type assignments that could be determined for the
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,692,* type variables in each type in the inheritance hierarchy from
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,693,* <code>type</code> to <code>toClass</code> inclusive.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,695,"public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,696,ParameterizedType superType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,697,Class<?> superClass = getRawType(superType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,699,// compatibility check
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,700,"if (!isAssignable(cls, superClass)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,701,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,704,if (cls.equals(superClass)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,705,"return getTypeArguments(superType, superClass, null);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,708,// get the next class in the inheritance hierarchy
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,709,"Type midType = getClosestParentType(cls, superClass);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,711,// can only be a class or a parameterized type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,712,if (midType instanceof Class<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,713,"return determineTypeArguments((Class<?>) midType, superType);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,716,ParameterizedType midParameterizedType = (ParameterizedType) midType;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,717,Class<?> midClass = getRawType(midParameterizedType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,718,// get the type variables of the mid class that map to the type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,719,// arguments of the super class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,720,"Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superType);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,721,// map the arguments of the mid type to the class type variables
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,722,"mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,724,return typeVarAssigns;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,728,* <p> </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,730,* @param cls
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,731,* @param parameterizedType
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,732,* @param typeVarAssigns
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,734,"private static <T> void mapTypeVariablesToArguments(Class<T> cls,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,735,"ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,736,// capture the type variables from the owner type that have assignments
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,737,Type ownerType = parameterizedType.getOwnerType();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,739,if (ownerType instanceof ParameterizedType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,740,// recursion to make sure the owner's owner type gets processed
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,741,"mapTypeVariablesToArguments(cls, (ParameterizedType) ownerType, typeVarAssigns);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,744,// parameterizedType is a generic interface/class (or it's in the owner
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,745,// hierarchy of said interface/class) implemented/extended by the class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,746,// cls. Find out which type variables of cls are type arguments of
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,747,// parameterizedType:
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,748,Type[] typeArgs = parameterizedType.getActualTypeArguments();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,750,"// of the cls's type variables that are arguments of parameterizedType,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,751,// find out which ones can be determined from the super type's arguments
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,752,TypeVariable<?>[] typeVars = getRawType(parameterizedType).getTypeParameters();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,754,// use List view of type parameters of cls so the contains() method can be used:
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,755,List<TypeVariable<Class<T>>> typeVarList = Arrays.asList(cls
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,756,.getTypeParameters());
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,758,for (int i = 0; i < typeArgs.length; i++) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,759,TypeVariable<?> typeVar = typeVars[i];
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,760,Type typeArg = typeArgs[i];
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,762,// argument of parameterizedType is a type variable of cls
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,763,if (typeVarList.contains(typeArg)
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,764,// type variable of parameterizedType has an assignment in
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,765,// the super type.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,766,&& typeVarAssigns.containsKey(typeVar)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,767,// map the assignment to the cls's type variable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,768,"typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,774,* <p> Closest parent type? Closest to what? The closest parent type to the
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,775,* super class specified by <code>superClass</code>. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,777,* @param cls
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,778,* @param superClass
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,779,* @return
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,781,"private static Type getClosestParentType(Class<?> cls, Class<?> superClass) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,782,// only look at the interfaces if the super class is also an interface
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,783,if (superClass.isInterface()) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,784,// get the generic interfaces of the subject class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,785,Type[] interfaceTypes = cls.getGenericInterfaces();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,786,// will hold the best generic interface match found
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,787,Type genericInterface = null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,789,// find the interface closest to the super class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,790,for (int i = 0; i < interfaceTypes.length; i++) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,791,Type midType = interfaceTypes[i];
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,792,Class<?> midClass = null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,794,if (midType instanceof ParameterizedType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,795,midClass = getRawType((ParameterizedType) midType);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,796,} else if (midType instanceof Class<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,797,midClass = (Class<?>) midType;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,798,} else {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,799,"throw new IllegalStateException(""Unexpected generic"""
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,800,"+ "" interface type found: "" + midType);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,803,// check if this interface is further up the inheritance chain
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,804,// than the previously found match
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,805,"if (isAssignable(midClass, superClass)"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,806,"&& isAssignable((Type) genericInterface, (Type) midClass)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,807,genericInterface = midType;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,811,// found a match?
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,812,if (genericInterface != null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,813,return genericInterface;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,817,"// none of the interfaces were descendants of the target class, so the"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,818,"// super class has to be one, instead"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,819,return cls.getGenericSuperclass();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,823,* <p> Checks if the given value can be assigned to the target type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,824,* following the Java generics rules. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,826,* @param value
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,827,* @param type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,828,* @return true of <code>value</code> is an instance of <code>type</code>.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,830,"public static boolean isInstance(Object value, Type type) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,831,if (type == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,832,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,835,return value == null ? !(type instanceof Class<?>) || !((Class<?>) type).isPrimitive()
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,836,": isAssignable(value.getClass(), type, null);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,840,* <p> This method strips out the redundant upper bound types in type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,841,* variable types and wildcard types (or it would with wildcard types if
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,842,* multiple upper bounds were allowed). </p> <p> Example: with the variable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,843,* type declaration:
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,845,* <pre> &lt;K extends java.util.Collection&lt;String&gt; &amp;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,846,* java.util.List&lt;String&gt;&gt; </pre>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,848,"* since <code>List</code> is a subinterface of <code>Collection</code>,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,849,* this method will return the bounds as if the declaration had been:
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,851,* <pre> &lt;K extends java.util.List&lt;String&gt;&gt; </pre>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,853,* </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,855,* @param bounds an array of types representing the upper bounds of either
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,856,* <code>WildcardType</code> or <code>TypeVariable</code>.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,857,* @return an array containing the values from <code>bounds</code> minus the
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,858,* redundant types.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,860,public static Type[] normalizeUpperBounds(Type[] bounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,861,// don't bother if there's only one (or none) type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,862,if (bounds.length < 2) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,863,return bounds;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,866,Set<Type> types = new HashSet<Type>(bounds.length);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,868,for (Type type1 : bounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,869,boolean subtypeFound = false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,871,for (Type type2 : bounds) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,872,"if (type1 != type2 && isAssignable(type2, type1, null)) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,873,subtypeFound = true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,874,break;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,878,if (!subtypeFound) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,879,types.add(type1);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,883,return types.toArray(new Type[0]);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,887,* <p> Returns an array containing the sole type of {@link Object} if
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,888,"* {@link TypeVariable#getBounds()} returns an empty array. Otherwise, it"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,889,* returns the result of <code>TypeVariable.getBounds()</code> passed into
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,890,* {@link normalizeUpperBounds}. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,892,* @param typeVariable the subject type variable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,893,* @return a non-empty array containing the bounds of the type variable.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,895,public static Type[] getImplicitBounds(TypeVariable<?> typeVariable) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,896,Type[] bounds = typeVariable.getBounds();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,898,return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,902,* <p> Returns an array containing the sole value of {@link Object} if
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,903,"* {@link WildcardType#getUpperBounds()} returns an empty array. Otherwise,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,904,* it returns the result of <code>WildcardType.getUpperBounds()</code>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,905,* passed into {@link normalizeUpperBounds}. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,907,* @param wildcardType the subject wildcard type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,908,* @return a non-empty array containing the upper bounds of the wildcard
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,909,* type.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,911,public static Type[] getImplicitUpperBounds(WildcardType wildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,912,Type[] bounds = wildcardType.getUpperBounds();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,914,return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,918,* <p> Returns an array containing a single value of <code>null</code> if
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,919,"* {@link WildcardType#getLowerBounds()} returns an empty array. Otherwise,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,920,* it returns the result of <code>WildcardType.getLowerBounds()</code>. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,922,* @param type the subject wildcard type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,923,* @return a non-empty array containing the lower bounds of the wildcard
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,924,* type.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,926,public static Type[] getImplicitLowerBounds(WildcardType wildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,927,Type[] bounds = wildcardType.getLowerBounds();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,929,return bounds.length == 0 ? new Type[] { null } : bounds;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,933,* <p> Determines whether or not specified types satisfy the bounds of their
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,934,* mapped type variables. When a type parameter extends another (such as
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,935,"* <code><T, S extends T></code>), uses another as a type parameter (such as"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,936,"* <code><T, S extends Comparable<T></code>), or otherwise depends on"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,937,"* another type variable to be specified, the dependencies must be included"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,938,* in <code>typeVarAssigns</code>. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,940,* @param typeVarAssigns specifies the potential types to be assigned to the
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,941,* type variables.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,942,* @return whether or not the types can be assigned to their respective type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,943,* variables.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,945,"public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,946,// all types must be assignable to all the bounds of the their mapped
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,947,// type variable.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,948,"for (Map.Entry<TypeVariable<?>, Type> entry : typeVarAssigns.entrySet()) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,949,TypeVariable<?> typeVar = entry.getKey();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,950,Type type = entry.getValue();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,952,for (Type bound : getImplicitBounds(typeVar)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,953,"if (!isAssignable(type, substituteTypeVariables(bound, typeVarAssigns),"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,954,typeVarAssigns)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,955,return false;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,960,return true;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,964,* <p> Type-checking method of convenience. </p>
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,966,* @param parameterizedType
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,967,* @return
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,969,private static Class<?> getRawType(ParameterizedType parameterizedType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,970,Type rawType = parameterizedType.getRawType();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,972,// check if raw type is a Class object
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,973,"// not currently necessary, but since the return type is Type instead of"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,974,"// Class, there's enough reason to believe that future versions of Java"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,975,// may return other Type implementations. And type-safety checking is
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,976,// rarely a bad idea.
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,977,if (!(rawType instanceof Class<?>)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,978,"throw new IllegalStateException(""Wait... What!? Type of rawType: "" + rawType);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,981,return (Class<?>) rawType;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,985,"* <p> Get the raw type of a Java type, given its context. Primarily for use"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,986,"* with {@link TypeVariable}s and {@link GenericArrayType}s, or when you do"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,987,* not know the runtime type of <code>type</code>: if you know you have a
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,988,"* {@link Class} instance, it is already raw; if you know you have a"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,989,"* {@link ParameterizedType}, its raw type is only a method call away. </p>"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,991,* @param type to resolve
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,992,* @param assigningType type to be resolved against
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,993,* @return the resolved <code>Class</code> object or <code>null</code> if
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,994,* the type could not be resolved
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,996,"public static Class<?> getRawType(Type type, Type assigningType) {"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,997,if (type instanceof Class<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,998,"// it is raw, no problem"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,999,return (Class<?>) type;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1002,if (type instanceof ParameterizedType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1003,// simple enough to get the raw type of a ParameterizedType
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1004,return getRawType((ParameterizedType) type);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1007,if (type instanceof TypeVariable<?>) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1008,if (assigningType == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1009,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1012,// get the entity declaring this type variable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1013,Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1015,// can't get the raw type of a method- or constructor-declared type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1016,// variable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1017,if (!(genericDeclaration instanceof Class<?>)) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1018,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1021,// get the type arguments for the declaring class/interface based
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1022,// on the enclosing type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1023,"Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType,"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1024,(Class<?>) genericDeclaration);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1026,// enclosingType has to be a subclass (or subinterface) of the
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1027,// declaring type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1028,if (typeVarAssigns == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1029,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1032,// get the argument assigned to this type variable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1033,Type typeArgument = typeVarAssigns.get(type);
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1035,if (typeArgument == null) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1036,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1039,// get the argument for this type variable
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1040,"return getRawType(typeArgument, assigningType);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1043,if (type instanceof GenericArrayType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1044,// get raw component type
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1045,Class<?> rawComponentType = getRawType(((GenericArrayType) type)
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1046,".getGenericComponentType(), assigningType);"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1048,// create array type from raw component type and return its class
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1049,"return Array.newInstance(rawComponentType, 0).getClass();"
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1052,// (hand-waving) this is not the method you're looking for
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1053,if (type instanceof WildcardType) {
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1054,return null;
True,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java,1057,"throw new IllegalArgumentException(""unknown type: "" + type);"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,19,mport static junit.framework.Assert.*;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,21,mport java.lang.reflect.Field;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,25,mport org.apache.commons.lang3.reflect.testbed.*;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,26,mport org.junit.Before;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,24,import java.io.Serializable;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,25,import java.lang.reflect.Method;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,26,import java.lang.reflect.ParameterizedType;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,27,import java.lang.reflect.Type;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,28,import java.net.URI;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,29,import java.util.Arrays;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,30,import java.util.Collection;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,31,import java.util.HashMap;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,32,import java.util.Map;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,33,import java.util.TreeSet;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,35,import junit.framework.Assert;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,37,import org.apache.commons.lang3.StringEscapeUtils;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,38,import org.apache.commons.lang3.reflect.testbed.Foo;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,39,import org.apache.commons.lang3.reflect.testbed.GenericParent;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,40,import org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,41,import org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,31, @author mbenson
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,45,* @author David M. Sledge
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,34,ublic class TypeUtilsTest {
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,35,rivate Field stringParentField;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,36,rivate Field integerParentField;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,37,rivate Field foosField;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,38,rivate Field barParentsField;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,39,rivate TypeVariable<?> genericParentT;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,40,rivate TypeVariable<?> listType;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,41,rivate TypeVariable<?> iterableType;
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,43,Before
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,44,ublic void setup() throws Exception {
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,45,"tringParentField = GenericTypeHolder.class.getDeclaredField(""stringParent"");"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,46,"ntegerParentField = GenericTypeHolder.class.getDeclaredField(""integerParent"");"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,47,"oosField = GenericTypeHolder.class.getDeclaredField(""foos"");"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,48,"arParentsField = GenericTypeHolder.class.getDeclaredField(""barParents"");"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,49,enericParentT = GenericParent.class.getTypeParameters()[0];
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,50,istType = List.class.getTypeParameters()[0];
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,51,terableType = Iterable.class.getTypeParameters()[0];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,48,"@SuppressWarnings({ ""unchecked"", ""unused"" })"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,49,"//raw types, where used, are used purposely"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,50,public class TypeUtilsTest<B> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,52,"public interface This<K, V> {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,55,"public class That<K, V> implements This<K, V> {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,58,"public interface And<K, V> extends This<Number, Number> {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,61,"public class The<K, V> extends That<Number, Number> implements And<String, String> {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,64,"public class Other<T> implements This<String, T> {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,67,public class Thing<Q> extends Other<B> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,70,"public class Tester implements This<String, B> {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,73,"public This<String, String> dis;"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,75,"public That<String, String> dat;"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,77,"public The<String, String> da;"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,79,public Other<String> uhder;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,81,public Thing ding;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,83,public TypeUtilsTest<String>.Tester tester;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,85,public Tester tester2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,87,"public TypeUtilsTest<String>.That<String, String> dat2;"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,89,"public TypeUtilsTest<Number>.That<String, String> dat3;"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,91,public Comparable<? extends Integer>[] intWildcardComparable;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,93,public static Comparable<String> stringComparable;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,95,public static Comparable<URI> uriComparable;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,97,public static Comparable<Integer> intComparable;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,99,public static Comparable<Long> longComparable;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,101,public static URI uri;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,103,"public void dummyMethod(List list0, List<Object> list1, List<?> list2,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,104,"List<? super Object> list3, List<String> list4, List<? extends String> list5,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,105,"List<? super String> list6, List[] list7, List<Object>[] list8, List<?>[] list9,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,106,"List<? super Object>[] list10, List<String>[] list11, List<? extends String>[] list12,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,107,List<? super String>[] list13) {
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,55,ublic void testGetRawTypeClass() throws Exception {
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,56,"ssertEquals(GenericParent.class, TypeUtils.getRawType(null, GenericParent.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,111,"public void testIsAssignable() throws SecurityException, NoSuchMethodException,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,112,NoSuchFieldException {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,113,List list0 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,114,List<Object> list1 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,115,List<?> list2 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,116,List<? super Object> list3 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,117,List<String> list4 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,118,List<? extends String> list5 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,119,List<? super String> list6 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,120,List[] list7 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,121,List<Object>[] list8 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,122,List<?>[] list9 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,123,List<? super Object>[] list10 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,124,List<String>[] list11 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,125,List<? extends String>[] list12 = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,126,List<? super String>[] list13;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,127,Class<?> clazz = getClass();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,128,"Method method = clazz.getMethod(""dummyMethod"", List.class, List.class, List.class,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,129,"List.class, List.class, List.class, List.class, List[].class, List[].class,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,130,"List[].class, List[].class, List[].class, List[].class, List[].class);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,131,Type[] types = method.getGenericParameterTypes();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,132,list0 = list0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,133,"delegateBooleanAssertion(types, 0, 0, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,134,list1 = list0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,135,"delegateBooleanAssertion(types, 0, 1, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,136,list0 = list1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,137,"delegateBooleanAssertion(types, 1, 0, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,138,list2 = list0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,139,"delegateBooleanAssertion(types, 0, 2, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,140,list0 = list2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,141,"delegateBooleanAssertion(types, 2, 0, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,142,list3 = list0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,143,"delegateBooleanAssertion(types, 0, 3, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,144,list0 = list3;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,145,"delegateBooleanAssertion(types, 3, 0, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,146,list4 = list0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,147,"delegateBooleanAssertion(types, 0, 4, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,148,list0 = list4;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,149,"delegateBooleanAssertion(types, 4, 0, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,150,list5 = list0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,151,"delegateBooleanAssertion(types, 0, 5, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,152,list0 = list5;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,153,"delegateBooleanAssertion(types, 5, 0, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,154,list6 = list0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,155,"delegateBooleanAssertion(types, 0, 6, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,156,list0 = list6;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,157,"delegateBooleanAssertion(types, 6, 0, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,158,list1 = list1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,159,"delegateBooleanAssertion(types, 1, 1, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,160,list2 = list1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,161,"delegateBooleanAssertion(types, 1, 2, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,162,list1 = (List<Object>) list2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,163,"delegateBooleanAssertion(types, 2, 1, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,164,list3 = list1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,165,"delegateBooleanAssertion(types, 1, 3, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,166,list1 = (List<Object>) list3;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,167,"delegateBooleanAssertion(types, 3, 1, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,168,// list4 = list1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,169,"delegateBooleanAssertion(types, 1, 4, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,170,// list1 = list4;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,171,"delegateBooleanAssertion(types, 4, 1, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,172,// list5 = list1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,173,"delegateBooleanAssertion(types, 1, 5, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,174,// list1 = list5;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,175,"delegateBooleanAssertion(types, 5, 1, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,176,list6 = list1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,177,"delegateBooleanAssertion(types, 1, 6, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,178,list1 = (List<Object>) list6;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,179,"delegateBooleanAssertion(types, 6, 1, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,180,list2 = list2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,181,"delegateBooleanAssertion(types, 2, 2, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,182,list2 = list3;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,183,"delegateBooleanAssertion(types, 2, 3, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,184,list2 = list4;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,185,"delegateBooleanAssertion(types, 3, 2, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,186,list3 = (List<? super Object>) list2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,187,"delegateBooleanAssertion(types, 2, 4, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,188,list2 = list5;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,189,"delegateBooleanAssertion(types, 4, 2, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,190,list4 = (List<String>) list2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,191,"delegateBooleanAssertion(types, 2, 5, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,192,list2 = list6;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,193,"delegateBooleanAssertion(types, 5, 2, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,194,list5 = (List<? extends String>) list2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,195,"delegateBooleanAssertion(types, 2, 6, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,196,list3 = list3;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,197,"delegateBooleanAssertion(types, 6, 2, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,198,list6 = (List<? super String>) list2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,199,"delegateBooleanAssertion(types, 3, 3, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,200,// list4 = list3;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,201,"delegateBooleanAssertion(types, 3, 4, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,202,// list3 = list4;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,203,"delegateBooleanAssertion(types, 4, 3, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,204,// list5 = list3;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,205,"delegateBooleanAssertion(types, 3, 5, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,206,// list3 = list5;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,207,"delegateBooleanAssertion(types, 5, 3, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,208,list6 = list3;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,209,"delegateBooleanAssertion(types, 3, 6, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,210,list3 = (List<? super Object>) list6;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,211,"delegateBooleanAssertion(types, 6, 3, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,212,list4 = list4;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,213,"delegateBooleanAssertion(types, 4, 4, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,214,list5 = list4;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,215,"delegateBooleanAssertion(types, 4, 5, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,216,list4 = (List<String>) list5;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,217,"delegateBooleanAssertion(types, 5, 4, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,218,list6 = list4;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,219,"delegateBooleanAssertion(types, 4, 6, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,220,list4 = (List<String>) list6;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,221,"delegateBooleanAssertion(types, 6, 4, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,222,list5 = list5;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,223,"delegateBooleanAssertion(types, 5, 5, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,224,list6 = (List<? super String>) list5;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,225,"delegateBooleanAssertion(types, 5, 6, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,226,list5 = (List<? extends String>) list6;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,227,"delegateBooleanAssertion(types, 6, 5, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,228,list6 = list6;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,229,"delegateBooleanAssertion(types, 6, 6, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,231,list7 = list7;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,232,"delegateBooleanAssertion(types, 7, 7, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,233,list8 = list7;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,234,"delegateBooleanAssertion(types, 7, 8, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,235,list7 = list8;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,236,"delegateBooleanAssertion(types, 8, 7, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,237,list9 = list7;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,238,"delegateBooleanAssertion(types, 7, 9, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,239,list7 = list9;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,240,"delegateBooleanAssertion(types, 9, 7, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,241,list10 = list7;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,242,"delegateBooleanAssertion(types, 7, 10, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,243,list7 = list10;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,244,"delegateBooleanAssertion(types, 10, 7, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,245,list11 = list7;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,246,"delegateBooleanAssertion(types, 7, 11, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,247,list7 = list11;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,248,"delegateBooleanAssertion(types, 11, 7, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,249,list12 = list7;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,250,"delegateBooleanAssertion(types, 7, 12, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,251,list7 = list12;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,252,"delegateBooleanAssertion(types, 12, 7, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,253,list13 = list7;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,254,"delegateBooleanAssertion(types, 7, 13, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,255,list7 = list13;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,256,"delegateBooleanAssertion(types, 13, 7, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,257,list8 = list8;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,258,"delegateBooleanAssertion(types, 8, 8, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,259,list9 = list8;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,260,"delegateBooleanAssertion(types, 8, 9, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,261,list8 = (List<Object>[]) list9;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,262,"delegateBooleanAssertion(types, 9, 8, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,263,list10 = list8;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,264,"delegateBooleanAssertion(types, 8, 10, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,265,list8 = (List<Object>[]) list10;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,266,"delegateBooleanAssertion(types, 10, 8, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,267,// list11 = list8;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,268,"delegateBooleanAssertion(types, 8, 11, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,269,// list8 = list11;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,270,"delegateBooleanAssertion(types, 11, 8, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,271,// list12 = list8;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,272,"delegateBooleanAssertion(types, 8, 12, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,273,// list8 = list12;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,274,"delegateBooleanAssertion(types, 12, 8, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,275,list13 = list8;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,276,"delegateBooleanAssertion(types, 8, 13, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,277,list8 = (List<Object>[]) list13;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,278,"delegateBooleanAssertion(types, 13, 8, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,279,list9 = list9;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,280,"delegateBooleanAssertion(types, 9, 9, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,281,list10 = (List<? super Object>[]) list9;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,282,"delegateBooleanAssertion(types, 9, 10, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,283,list9 = list10;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,284,"delegateBooleanAssertion(types, 10, 9, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,285,list11 = (List<String>[]) list9;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,286,"delegateBooleanAssertion(types, 9, 11, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,287,list9 = list11;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,288,"delegateBooleanAssertion(types, 11, 9, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,289,list12 = (List<? extends String>[]) list9;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,290,"delegateBooleanAssertion(types, 9, 12, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,291,list9 = list12;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,292,"delegateBooleanAssertion(types, 12, 9, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,293,list13 = (List<? super String>[]) list9;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,294,"delegateBooleanAssertion(types, 9, 13, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,295,list9 = list13;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,296,"delegateBooleanAssertion(types, 13, 9, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,297,list10 = list10;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,298,"delegateBooleanAssertion(types, 10, 10, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,299,// list11 = list10;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,300,"delegateBooleanAssertion(types, 10, 11, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,301,// list10 = list11;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,302,"delegateBooleanAssertion(types, 11, 10, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,303,// list12 = list10;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,304,"delegateBooleanAssertion(types, 10, 12, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,305,// list10 = list12;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,306,"delegateBooleanAssertion(types, 12, 10, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,307,list13 = list10;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,308,"delegateBooleanAssertion(types, 10, 13, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,309,list10 = (List<? super Object>[]) list13;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,310,"delegateBooleanAssertion(types, 13, 10, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,311,list11 = list11;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,312,"delegateBooleanAssertion(types, 11, 11, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,313,list12 = list11;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,314,"delegateBooleanAssertion(types, 11, 12, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,315,list11 = (List<String>[]) list12;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,316,"delegateBooleanAssertion(types, 12, 11, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,317,list13 = list11;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,318,"delegateBooleanAssertion(types, 11, 13, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,319,list11 = (List<String>[]) list13;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,320,"delegateBooleanAssertion(types, 13, 11, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,321,list12 = list12;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,322,"delegateBooleanAssertion(types, 12, 12, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,323,list13 = (List<? super String>[]) list12;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,324,"delegateBooleanAssertion(types, 12, 13, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,325,list12 = (List<? extends String>[]) list13;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,326,"delegateBooleanAssertion(types, 13, 12, false);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,327,list13 = list13;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,328,"delegateBooleanAssertion(types, 13, 13, true);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,329,"Type disType = getClass().getField(""dis"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,330,// Reporter.log( ( ( ParameterizedType ) disType
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,331,// ).getOwnerType().getClass().toString() );
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,332,"Type datType = getClass().getField(""dat"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,333,"Type daType = getClass().getField(""da"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,334,"Type uhderType = getClass().getField(""uhder"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,335,"Type dingType = getClass().getField(""ding"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,336,"Type testerType = getClass().getField(""tester"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,337,"Type tester2Type = getClass().getField(""tester2"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,338,"Type dat2Type = getClass().getField(""dat2"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,339,"Type dat3Type = getClass().getField(""dat3"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,340,dis = dat;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,341,"Assert.assertTrue(TypeUtils.isAssignable(datType, disType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,342,// dis = da;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,343,"Assert.assertFalse(TypeUtils.isAssignable(daType, disType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,344,dis = uhder;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,345,"Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,346,dis = ding;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,347,"Assert.assertTrue(""WRONG!"", TypeUtils.isAssignable(dingType, disType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,348,dis = tester;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,349,"Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,350,// dis = tester2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,351,"Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,352,// dat = dat2;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,353,"Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,354,// dat2 = dat;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,355,"Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,356,// dat = dat3;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,357,"Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,358,char ch = 0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,359,boolean bo = false;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,360,byte by = 0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,361,short sh = 0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,362,int in = 0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,363,long lo = 0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,364,float fl = 0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,365,double du = 0;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,366,du = ch;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,367,"Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,368,du = by;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,369,"Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,370,du = sh;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,371,"Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,372,du = in;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,373,"Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,374,du = lo;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,375,"Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,376,du = fl;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,377,"Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,378,// du = bo;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,379,"Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,380,lo = new Integer(0);
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,381,"Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,382,// Long lngW = 1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,383,"Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,384,// lngW = new Integer( 0 );
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,385,"Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,386,in = new Integer(0);
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,387,"Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,388,Integer inte = in;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,389,"Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,390,"Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,391,"Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,392,"Type intComparableType = getClass().getField(""intComparable"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,393,intComparable = 1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,394,"Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,395,"Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,396,Serializable ser = 1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,397,"Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,398,"Type longComparableType = getClass().getField(""longComparable"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,399,// longComparable = 1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,400,"Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,401,// longComparable = new Integer( 0 );
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,402,"Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,403,// int[] ia;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,404,// long[] la = ia;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,405,"Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,406,Integer[] ia = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,407,"Type caType = getClass().getField(""intWildcardComparable"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,408,intWildcardComparable = ia;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,409,"Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,410,// int[] ina = ia;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,411,"Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,412,int[] ina = null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,413,Object[] oa;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,414,// oa = ina;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,415,"Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,416,oa = new Integer[0];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,417,"Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,418,"Type bClassType = AClass.class.getField(""bClass"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,419,"Type cClassType = AClass.class.getField(""cClass"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,420,"Type dClassType = AClass.class.getField(""dClass"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,421,"Type eClassType = AClass.class.getField(""eClass"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,422,"Type fClassType = AClass.class.getField(""fClass"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,423,AClass aClass = new AClass(new AAClass<String>());
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,424,aClass.bClass = aClass.cClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,425,"Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,426,aClass.bClass = aClass.dClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,427,"Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,428,aClass.bClass = aClass.eClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,429,"Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,430,aClass.bClass = aClass.fClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,431,"Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,432,aClass.cClass = aClass.dClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,433,"Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,434,aClass.cClass = aClass.eClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,435,"Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,436,aClass.cClass = aClass.fClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,437,"Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,438,aClass.dClass = aClass.eClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,439,"Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,440,aClass.dClass = aClass.fClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,441,"Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,442,aClass.eClass = aClass.fClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,443,"Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,446,"public void delegateBooleanAssertion(Type[] types, int i2, int i1, boolean expected) {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,447,Type type1 = types[i1];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,448,Type type2 = types[i2];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,449,"boolean isAssignable = TypeUtils.isAssignable(type2, type1);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,451,if (expected) {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,452,"Assert.assertTrue(""["" + i1 + "", "" + i2 + ""]: From """
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,453,"+ StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + "" to """
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,454,"+ StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,455,} else {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,456,"Assert.assertFalse(""["" + i1 + "", "" + i2 + ""]: From """
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,457,"+ StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + "" to """
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,458,"+ StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable);"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,60,ublic void testGetRawTypeParameterizedType() throws Exception {
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,61,"ssertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,62,tringParentField.getGenericType()));
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,63,"ssertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,64,ntegerParentField.getGenericType()));
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,65,"ssertEquals(List.class, TypeUtils.getRawType(GenericTypeHolder.class, foosField"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,66,getGenericType()));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,463,"public void testIsInstance() throws SecurityException, NoSuchFieldException {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,464,"Type intComparableType = getClass().getField(""intComparable"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,465,"Type uriComparableType = getClass().getField(""uriComparable"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,466,intComparable = 1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,467,"Assert.assertTrue(TypeUtils.isInstance(1, intComparableType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,468,// uriComparable = 1;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,469,"Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType));"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,70,ublic void testGetRawTypeTypeVariable() throws Exception {
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,71,"ssertEquals(String.class, TypeUtils.getRawType(StringParameterizedChild.class,"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,72,enericParentT));
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,73,"ssertEquals(String.class, TypeUtils.getRawType(stringParentField.getGenericType(),"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,74,enericParentT));
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,75,"ssertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), iterableType));"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,76,"ssertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), listType));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,473,public void testGetTypeArguments() {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,474,"Map<TypeVariable<?>, Type> typeVarAssigns;"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,475,TypeVariable<?> treeSetTypeVar;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,476,Type typeArg;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,478,"typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,479,treeSetTypeVar = Comparable.class.getTypeParameters()[0];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,480,"Assert.assertTrue(""Type var assigns for Comparable from Integer: "" + typeVarAssigns,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,481,typeVarAssigns.containsKey(treeSetTypeVar));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,482,typeArg = typeVarAssigns.get(treeSetTypeVar);
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,483,"Assert.assertEquals(""Type argument of Comparable from Integer: "" + typeArg, Integer.class,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,484,typeVarAssigns.get(treeSetTypeVar));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,486,"typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,487,treeSetTypeVar = Comparable.class.getTypeParameters()[0];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,488,"Assert.assertTrue(""Type var assigns for Comparable from int: "" + typeVarAssigns,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,489,typeVarAssigns.containsKey(treeSetTypeVar));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,490,typeArg = typeVarAssigns.get(treeSetTypeVar);
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,491,"Assert.assertEquals(""Type argument of Comparable from int: "" + typeArg, Integer.class,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,492,typeVarAssigns.get(treeSetTypeVar));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,494,Collection<Integer> col = Arrays.asList(new Integer[0]);
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,495,"typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,496,treeSetTypeVar = Comparable.class.getTypeParameters()[0];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,497,"Assert.assertFalse(""Type var assigns for Collection from List: "" + typeVarAssigns,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,498,typeVarAssigns.containsKey(treeSetTypeVar));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,500,"typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,501,Assert.assertTrue(typeVarAssigns.size() == 2);
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,502,"Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,503,"Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,79,Test(expected = IllegalArgumentException.class)
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,80,ublic void testGetRawTypeUnresolvableTypeVariable() {
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,81,"ypeUtils.getRawType(GenericParent.class, genericParentT);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,506,@Test
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,507,"public void testTypesSatisfyVariables() throws SecurityException, NoSuchFieldException,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,508,NoSuchMethodException {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,509,"Map<TypeVariable<?>, Type> typeVarAssigns = new HashMap<TypeVariable<?>, Type>();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,510,Integer max = TypeUtilsTest.stub();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,511,"typeVarAssigns.put(getClass().getMethod(""stub"").getTypeParameters()[0], Integer.class);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,512,Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,513,typeVarAssigns.clear();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,514,"typeVarAssigns.put(getClass().getMethod(""stub2"").getTypeParameters()[0], Integer.class);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,515,Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,516,typeVarAssigns.clear();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,517,"typeVarAssigns.put(getClass().getMethod(""stub3"").getTypeParameters()[0], Integer.class);"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,518,Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,521,@Test
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,522,"public void testDetermineTypeVariableAssignments() throws SecurityException,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,523,"NoSuchFieldException, NoSuchMethodException {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,524,"ParameterizedType iterableType = (ParameterizedType) getClass().getField(""iterable"")"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,525,.getGenericType();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,526,"Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,527,iterableType);
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,528,TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,529,Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,530,"Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,531,.get(treeSetTypeVar));
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,85,ublic void testGetRawTypeGenericArray() throws Exception {
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,86,"ssertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class,"
False,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,87,arParentsField.getGenericType()));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,535,"public void testGetRawType() throws SecurityException, NoSuchFieldException {"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,536,"Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField(""stringParent"")"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,537,.getGenericType();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,538,"Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField(""integerParent"")"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,539,.getGenericType();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,540,"Type foosFieldType = GenericTypeHolder.class.getDeclaredField(""foos"").getGenericType();"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,541,Type genericParentT = GenericParent.class.getTypeParameters()[0];
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,542,"Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,543,Assert
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,544,".assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,545,null));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,546,"Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,547,"Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,548,StringParameterizedChild.class));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,549,"Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT,"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,550,stringParentFieldType));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,551,"Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0],"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,552,foosFieldType));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,553,"Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0],"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,554,foosFieldType));
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,555,"Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,556,"Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,557,".getDeclaredField(""barParents"").getGenericType(), null));"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,560,"public Iterable<? extends Map<Integer, ? extends Collection<?>>> iterable;"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,562,public static <G extends Comparable<G>> G stub() {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,563,return null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,566,public static <G extends Comparable<? super G>> G stub2() {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,567,return null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,570,public static <T extends Comparable<? extends T>> T stub3() {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,571,return null;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,575,class AAClass<T> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,577,public class BBClass<S> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,581,class AAAClass extends AAClass<String> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,582,public class BBBClass extends BBClass<String> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,586,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,587,"//raw types, where used, are used purposely"
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,588,class AClass extends AAClass<String>.BBClass<Number> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,590,public AClass(AAClass<String> enclosingInstance) {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,591,enclosingInstance.super();
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,594,public class BClass<T> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,597,public class CClass<T> extends BClass {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,600,public class DClass<T> extends CClass<T> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,603,public class EClass<T> extends DClass {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,606,public class FClass extends EClass<String> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,609,public class GClass<T extends BClass<? extends T> & AInterface<AInterface<? super T>>> {
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,612,public BClass<Number> bClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,614,public CClass<? extends String> cClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,616,public DClass<String> dClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,618,public EClass<String> eClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,620,public FClass fClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,622,public GClass gClass;
True,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,624,public interface AInterface<T> {

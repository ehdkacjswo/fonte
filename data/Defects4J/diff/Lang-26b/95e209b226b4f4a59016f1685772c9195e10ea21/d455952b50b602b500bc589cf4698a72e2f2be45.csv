is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,259,ublic static List getAllSuperclasses(Class cls) {
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,259,public static List<Class<?>> getAllSuperclasses(Class<?> cls) {
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,263,ist classes = new ArrayList();
False,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,264,lass superclass = cls.getSuperclass();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,263,List<Class<?>> classes = new ArrayList<Class<?>>();
True,src/java/org/apache/commons/lang/ClassUtils.java,src/java/org/apache/commons/lang/ClassUtils.java,264,Class<?> superclass = cls.getSuperclass();
False,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,19,mport java.io.PrintStream;
False,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,20,mport java.io.PrintWriter;
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,45,//@Immutable
False,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,107,ublic NotImplementedException(Class clazz) {
True,src/java/org/apache/commons/lang/NotImplementedException.java,src/java/org/apache/commons/lang/NotImplementedException.java,106,public NotImplementedException(Class<?> clazz) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,124,ist list = getCauseMethodNameList();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,124,List<String> list = getCauseMethodNameList();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,143,ist list = getCauseMethodNameList();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,143,List<String> list = getCauseMethodNameList();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,215,rivate static String[] toArray(List list) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,216,eturn (String[]) list.toArray(new String[list.size()]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,215,private static String[] toArray(List<String> list) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,216,return list.toArray(new String[list.size()]);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,224,rivate static ArrayList getCauseMethodNameList() {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,224,private static ArrayList<String> getCauseMethodNameList() {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,226,eturn new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,226,return new ArrayList<String>(Arrays.asList(CAUSE_METHOD_NAMES));
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,346,ist list = getThrowableList(throwable);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,346,List<Throwable> list = getThrowableList(throwable);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,465,lass cls = throwable.getClass();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,465,Class<? extends Throwable> cls = throwable.getClass();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,536,ist list = getThrowableList(throwable);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,537,eturn (Throwable[]) list.toArray(new Throwable[list.size()]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,536,List<Throwable> list = getThrowableList(throwable);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,537,return list.toArray(new Throwable[list.size()]);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,559,ublic static List getThrowableList(Throwable throwable) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,560,ist list = new ArrayList();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,559,public static List<Throwable> getThrowableList(Throwable throwable) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,560,List<Throwable> list = new ArrayList<Throwable>();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,583,"ublic static int indexOfThrowable(Throwable throwable, Class clazz) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,583,"public static int indexOfThrowable(Throwable throwable, Class<?> clazz) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,606,"ublic static int indexOfThrowable(Throwable throwable, Class clazz, int fromIndex) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,606,"public static int indexOfThrowable(Throwable throwable, Class<?> clazz, int fromIndex) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,626,"ublic static int indexOfType(Throwable throwable, Class type) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,626,"public static int indexOfType(Throwable throwable, Class<?> type) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,650,"ublic static int indexOfType(Throwable throwable, Class type, int fromIndex) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,650,"public static int indexOfType(Throwable throwable, Class<?> type, int fromIndex) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,665,"rivate static int indexOf(Throwable throwable, Class type, int fromIndex, boolean subclass) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,665,"private static int indexOf(Throwable throwable, Class<?> type, int fromIndex, boolean subclass) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,801,rrayList frames = new ArrayList();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,802,ist nextTrace = getStackFrameList(throwables[count - 1]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,801,ArrayList<String> frames = new ArrayList<String>();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,802,List<String> nextTrace = getStackFrameList(throwables[count - 1]);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,804,ist trace = nextTrace;
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,804,List<String> trace = nextTrace;
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,818,eturn (String[]) frames.toArray(new String[0]);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,818,return frames.toArray(new String[0]);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,829,"ublic static void removeCommonFrames(List causeFrames, List wrapperFrames) {"
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,829,"public static void removeCommonFrames(List<String> causeFrames, List<String> wrapperFrames) {"
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,838,tring causeFrame = (String) causeFrames.get(causeFrameIndex);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,839,tring wrapperFrame = (String) wrapperFrames.get(wrapperFrameIndex);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,838,String causeFrame = causeFrames.get(causeFrameIndex);
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,839,String wrapperFrame = wrapperFrames.get(wrapperFrameIndex);
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,924,ist list = new ArrayList();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,924,List<String> list = new ArrayList<String>();
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,943,tatic List getStackFrameList(Throwable t) {
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,943,static List<String> getStackFrameList(Throwable t) {
False,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,947,ist list = new ArrayList();
True,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,src/java/org/apache/commons/lang/exception/ExceptionUtils.java,947,List<String> list = new ArrayList<String>();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,81,rivate Map registry;
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,81,"private final Map<String, FormatFactory> registry;"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,111,"ublic ExtendedMessageFormat(String pattern, Map registry) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,111,"public ExtendedMessageFormat(String pattern, Map<String, FormatFactory> registry) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,123,"ublic ExtendedMessageFormat(String pattern, Locale locale, Map registry) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,123,"public ExtendedMessageFormat(String pattern, Locale locale, Map<String, FormatFactory> registry) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,150,rrayList foundFormats = new ArrayList();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,151,rrayList foundDescriptions = new ArrayList();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,150,ArrayList<Format> foundFormats = new ArrayList<Format>();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,151,ArrayList<String> foundDescriptions = new ArrayList<String>();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,200,or (Iterator it = foundFormats.iterator(); it.hasNext(); i++) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,201,ormat f = (Format) it.next();
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,200,for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,201,Format f = it.next();
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,261,ormatFactory factory = (FormatFactory) registry.get(name);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,261,FormatFactory factory = registry.get(name);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,350,"rivate String insertFormats(String pattern, ArrayList customPatterns) {"
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,350,"private String insertFormats(String pattern, ArrayList<String> customPatterns) {"
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,370,tring customPattern = (String) customPatterns.get(fe);
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,370,String customPattern = customPatterns.get(fe);
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,470,rivate boolean containsElements(Collection coll) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,470,private boolean containsElements(Collection<?> coll) {
False,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,474,or (Iterator iter = coll.iterator(); iter.hasNext();) {
True,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java,474,for (Iterator<?> iter = coll.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,88,"ublic class StrTokenizer implements ListIterator, Cloneable {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,88,"public class StrTokenizer implements ListIterator<String>, Cloneable {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,532,ublic Object next() {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,532,public String next() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,563,ublic Object previous() {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,563,public String previous() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,593,ublic void set(Object obj) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,593,public void set(String obj) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,602,ublic void add(Object obj) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,602,public void add(String obj) {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,264, @throws ParseException if none of the date patterns were suitable
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,264,* @throws ParseException if none of the date patterns were suitable (or there were none)
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,928,"ublic static Iterator iterator(Date focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,928,"public static Iterator<Calendar> iterator(Date focus, int rangeStyle) {"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,961,"ublic static Iterator iterator(Calendar focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,961,"public static Iterator<Calendar> iterator(Calendar focus, int rangeStyle) {"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1052,"ublic static Iterator iterator(Object focus, int rangeStyle) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1052,"public static Iterator<?> iterator(Object focus, int rangeStyle) {"
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1568,tatic class DateIterator implements Iterator {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1568,static class DateIterator implements Iterator<Calendar> {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1599,ublic Object next() {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1599,public Calendar next() {
False,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1604,eturn spot.clone();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,1604,return (Calendar) spot.clone();
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,488, @return Token[] of tokens
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,488,* @return array of Token[]
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,492,rrayList list = new ArrayList(array.length);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,492,ArrayList<Token> list = new ArrayList<Token>(array.length);
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,501,uffer.append(ch);
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,501,buffer.append(ch); // buffer can't be null if inLiteral is true
False,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,543,eturn (Token[]) list.toArray( new Token[list.size()] );
True,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,src/java/org/apache/commons/lang/time/DurationFormatUtils.java,543,return list.toArray( new Token[list.size()] );

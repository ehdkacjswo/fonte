is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,20, <p><code>StopWatch</code> provides a convenient API for timings.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,21,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,22,* <code>StopWatch</code> provides a convenient API for timings.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,23,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,22," <p>To start the watch, call {@link #start()}. At this point you can:</p>"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,25,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,26,"* To start the watch, call {@link #start()}. At this point you can:"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,27,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,24,  <li>{@link #split()} the watch to get the time whilst the watch continues in the
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,25,"   background. {@link #unsplit()} will remove the effect of the split. At this point,"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,26,   these three options are available again.</li>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,27,  <li>{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,28,   to continue. Any time between the suspend and resume will not be counted in
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,29,"   the total. At this point, these three options are available again.</li>"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,30,  <li>{@link #stop()} the watch to complete the timing session.</li>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,29,* <li>{@link #split()} the watch to get the time whilst the watch continues in the background. {@link #unsplit()} will
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,30,"* remove the effect of the split. At this point, these three options are available again.</li>"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,31,* <li>{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch to continue. Any time between the
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,32,"* suspend and resume will not be counted in the total. At this point, these three options are available again.</li>"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,33,* <li>{@link #stop()} the watch to complete the timing session.</li>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,33, <p>It is intended that the output methods {@link #toString()} and {@link #getTime()}
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,34," should only be called after stop, split or suspend, however a suitable result will"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,35, be returned at other points.</p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,37," <p>NOTE: As from v2.1, the methods protect against inappropriate calls."
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,38," Thus you cannot now call stop before start, resume before suspend or"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,39, unsplit before split.</p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,41," <p>1. split(), suspend(), or stop() cannot be invoked twice<br />"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,36,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,37,"* It is intended that the output methods {@link #toString()} and {@link #getTime()} should only be called after stop,"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,38,"* split or suspend, however a suitable result will be returned at other points."
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,39,* </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,41,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,42,"* NOTE: As from v2.1, the methods protect against inappropriate calls. Thus you cannot now call stop before start,"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,43,* resume before suspend or unsplit before split.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,44,* </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,46,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,47,"* 1. split(), suspend(), or stop() cannot be invoked twice<br />"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,44, 4. start() cannot be called twice without calling reset()</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,50,* 4. start() cannot be called twice without calling reset()
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,51,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,54,rivate static final int STATE_RUNNING   = 1;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,55,rivate static final int STATE_STOPPED   = 2;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,62,private static final int STATE_RUNNING = 1;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,64,private static final int STATE_STOPPED = 2;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,60,rivate static final int STATE_SPLIT   = 11;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,71,private static final int STATE_SPLIT = 11;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,63,  The current running state of the StopWatch.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,74,* The current running state of the StopWatch.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,68, Whether the stopwatch has a split time recorded.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,79,* Whether the stopwatch has a split time recorded.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,70,rivate int splitState   = STATE_UNSPLIT;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,81,private int splitState = STATE_UNSPLIT;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,82, <p>Constructor.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,94,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,95,* Constructor.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,96,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,89, <p>Start the stopwatch.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,103,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,104,* Start the stopwatch.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,105,* </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,107,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,108,"* This method starts a new timing session, clearing any previous values."
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,109,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,91," <p>This method starts a new timing session, clearing any previous values.</p>"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,93, @throws IllegalStateException if the StopWatch is already running.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,111,* @throws IllegalStateException
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,112,*             if the StopWatch is already running.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,96,f(this.runningState == STATE_STOPPED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,115,if (this.runningState == STATE_STOPPED) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,99,f(this.runningState != STATE_UNSTARTED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,118,if (this.runningState != STATE_UNSTARTED) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,108, <p>Stop the stopwatch.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,127,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,128,* Stop the stopwatch.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,129,* </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,131,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,132,"* This method ends a new timing session, allowing the time to be retrieved."
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,133,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,110," <p>This method ends a new timing session, allowing the time to be retrieved.</p>"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,112, @throws IllegalStateException if the StopWatch is not running.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,135,* @throws IllegalStateException
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,136,*             if the StopWatch is not running.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,115,f(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,139,if (this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,118,f(this.runningState == STATE_RUNNING) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,142,if (this.runningState == STATE_RUNNING) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,125, <p>Resets the stopwatch. Stops it if need be. </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,149,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,150,* Resets the stopwatch. Stops it if need be.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,151,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,127, <p>This method clears the internal values to allow the object to be reused.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,153,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,154,* This method clears the internal values to allow the object to be reused.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,155,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,131,his.splitState   = STATE_UNSPLIT;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,159,this.splitState = STATE_UNSPLIT;
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,137, <p>Split the time.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,165,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,166,* Split the time.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,167,* </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,169,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,170,"* This method sets the stop time of the watch to allow a time to be extracted. The start time is unaffected,"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,171,* enabling {@link #unsplit()} to continue the timing from the original start point.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,172,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,139, <p>This method sets the stop time of the watch to allow a time to be extracted.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,140," The start time is unaffected, enabling {@link #unsplit()} to continue the"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,141, timing from the original start point.</p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,143, @throws IllegalStateException if the StopWatch is not running.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,174,* @throws IllegalStateException
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,175,*             if the StopWatch is not running.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,146,f(this.runningState != STATE_RUNNING) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,178,if (this.runningState != STATE_RUNNING) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,154, <p>Remove a split.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,186,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,187,* Remove a split.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,188,* </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,190,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,191,"* This method clears the stop time. The start time is unaffected, enabling timing from the original start point to"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,192,* continue.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,193,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,156," <p>This method clears the stop time. The start time is unaffected, enabling"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,157, timing from the original start point to continue.</p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,159, @throws IllegalStateException if the StopWatch has not been split.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,195,* @throws IllegalStateException
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,196,*             if the StopWatch has not been split.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,162,f(this.splitState != STATE_SPLIT) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,199,if (this.splitState != STATE_SPLIT) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,170, <p>Suspend the stopwatch for later resumption.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,207,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,208,* Suspend the stopwatch for later resumption.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,209,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,172, <p>This method suspends the watch until it is resumed. The watch will not include
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,173, time between the suspend and resume calls in the total time.</p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,175, @throws IllegalStateException if the StopWatch is not currently running.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,211,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,212,* This method suspends the watch until it is resumed. The watch will not include time between the suspend and
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,213,* resume calls in the total time.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,214,* </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,216,* @throws IllegalStateException
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,217,*             if the StopWatch is not currently running.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,178,f(this.runningState != STATE_RUNNING) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,220,if (this.runningState != STATE_RUNNING) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,186, <p>Resume the stopwatch after a suspend.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,228,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,229,* Resume the stopwatch after a suspend.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,230,* </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,232,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,233,* This method resumes the watch after it was suspended. The watch will not include time between the suspend and
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,234,* resume calls in the total time.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,235,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,188, <p>This method resumes the watch after it was suspended. The watch will not include
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,189, time between the suspend and resume calls in the total time.</p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,191, @throws IllegalStateException if the StopWatch has not been suspended.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,237,* @throws IllegalStateException
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,238,*             if the StopWatch has not been suspended.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,194,f(this.runningState != STATE_SUSPENDED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,241,if (this.runningState != STATE_SUSPENDED) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,203, <p>Get the time on the stopwatch.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,250,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,251,* Get the time on the stopwatch.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,252,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,205, <p>This is either the time between the start and the moment this method
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,206," is called, or the amount of time between start and stop.</p>"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,254,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,255,"* This is either the time between the start and the moment this method is called, or the amount of time between"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,256,* start and stop.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,257,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,211,f(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,262,if (this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,213, else
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,214,f(this.runningState == STATE_UNSTARTED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,264,} else if (this.runningState == STATE_UNSTARTED) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,216, else
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,217,f(this.runningState == STATE_RUNNING) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,266,} else if (this.runningState == STATE_RUNNING) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,224, <p>Get the split time on the stopwatch.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,273,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,274,* Get the split time on the stopwatch.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,275,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,226, <p>This is the time between start and latest split. </p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,277,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,278,* This is the time between start and latest split.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,279,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,230, @throws IllegalStateException if the StopWatch has not yet been split.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,283,* @throws IllegalStateException
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,284,*             if the StopWatch has not yet been split.
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,234,f(this.splitState != STATE_SPLIT) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,288,if (this.splitState != STATE_SPLIT) {
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,241, <p>Gets a summary of the time that the stopwatch recorded as a string.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,295,* Returns the time this stopwatch was started.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,297,* @return the time this stopwatch was started
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,298,* @throws IllegalStateException
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,299,*             if this StopWatch has not been started
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,300,* @since 2.4
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,302,public long getStartTime() {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,303,if (this.runningState == STATE_UNSTARTED) {
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,304,"throw new IllegalStateException(""Stopwatch has not been started"");"
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,306,return this.startTime;
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,310,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,311,* Gets a summary of the time that the stopwatch recorded as a string.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,312,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,243," <p>The format used is ISO8601-like,"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,244, <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,314,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,315,"* The format used is ISO8601-like, <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>."
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,316,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,253, <p>Gets a summary of the split time that the stopwatch recorded as a string.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,325,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,326,* Gets a summary of the split time that the stopwatch recorded as a string.
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,327,* </p>
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,255," <p>The format used is ISO8601-like,"
False,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,256, <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,329,* <p>
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,330,"* The format used is ISO8601-like, <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>."
True,src/java/org/apache/commons/lang/time/StopWatch.java,src/java/org/apache/commons/lang/time/StopWatch.java,331,* </p>
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,19,import junit.framework.Assert;
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,209,public void testGetStartTime() {
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,210,long beforeStopWatch = System.currentTimeMillis();
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,211,StopWatch watch = new StopWatch();
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,212,try {
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,213,watch.getStartTime();
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,214,"fail(""Calling getStartTime on an unstarted StopWatch should throw an exception"");"
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,215,} catch (IllegalStateException expected) {
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,216,// expected
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,218,watch.start();
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,219,try {
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,220,watch.getStartTime();
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,221,Assert.assertTrue(watch.getStartTime() >= beforeStopWatch);
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,222,} catch (IllegalStateException ex) {
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,223,"fail(""Start time should be available: "" + ex.getMessage());"
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,225,watch.reset();
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,226,try {
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,227,watch.getStartTime();
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,228,"fail(""Calling getStartTime on a reset, but unstarted StopWatch should throw an exception"");"
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,229,} catch (IllegalStateException expected) {
True,src/test/org/apache/commons/lang/time/StopWatchTest.java,src/test/org/apache/commons/lang/time/StopWatchTest.java,230,// expected

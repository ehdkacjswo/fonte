is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,22,import java.util.regex.Pattern;
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,52,"private static final String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE = ""The value %s is not in the specified exclusive range of %s to %s"";"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,53,"private static final String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE = ""The value %s is not in the specified inclusive range of %s to %s"";"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,54,"private static final String DEFAULT_MATCHES_PATTERN_EX = ""The string %s does not match the pattern %s"";"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,790,* <p>Validate that the specified argument character sequence matches the specified regular
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,791,* expression pattern; otherwise throwing an exception.</p>
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,793,"* <pre>Validate.matchesPattern(""hi"", ""[a-z]*"");</pre>"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,795,* <p>The syntax of the pattern is the one used in the {@link Pattern} class.</p>
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,797,* @param input the character sequence to validate
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,798,* @param pattern regular expression pattern
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,799,* @throws IllegalArgumentException if the character sequence does not match the pattern
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,800,"* @see #matchesPattern(String, String, String, Object...)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,802,"public static void matchesPattern(CharSequence input, String pattern)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,804,"if (Pattern.matches(pattern, input) == false)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,806,"throw new IllegalArgumentException(String.format(DEFAULT_MATCHES_PATTERN_EX, input, pattern));"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,811,* <p>Validate that the specified argument character sequence matches the specified regular
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,812,* expression pattern; otherwise throwing an exception with the specified message.</p>
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,814,"* <pre>Validate.matchesPattern(""hi"", ""[a-z]*"", ""%s does not match %s"", ""hi"" ""[a-z]*"");</pre>"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,816,* <p>The syntax of the pattern is the one used in the {@link Pattern} class.</p>
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,818,* @param input the character sequence to validate
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,819,* @param pattern regular expression pattern
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,820,* @param message the exception message
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,821,* @param optional values to replace in the exception message
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,822,* @throws IllegalArgumentException if the character sequence does not match the pattern
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,823,"* @see #matchesPattern(String, String)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,825,"public static void matchesPattern(CharSequence input, String pattern, String message, Object... values)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,827,"if (Pattern.matches(pattern, input) == false)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,829,"throw new IllegalArgumentException(String.format(message, values));"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,834,* <p>Validate that the specified argument object fall between the two
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,835,"* inclusive values specified; otherwise, throws an exception.</p>"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,837,"* <pre>Validate.inclusiveBetween(0, 2, 1);</pre>"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,839,* @param value the object to validate
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,840,* @param start the inclusive start value
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,841,* @param end the inclusive end value
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,842,* @throws IllegalArgumentException if the value falls out of the boundaries
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,843,"* @see #inclusiveBetween(Object, Object, Comparable, String, Object...)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,845,"public static <T> void inclusiveBetween(T start, T end, Comparable<T> value)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,847,if (value.compareTo(start) < 0 || value.compareTo(end) > 0)
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,849,"throw new IllegalArgumentException(String.format(DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,854,* <p>Validate that the specified argument object fall between the two
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,855,"* inclusive values specified; otherwise, throws an exception with the"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,856,* specified message.</p>
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,858,"* <pre>Validate.inclusiveBetween(0, 2, 1, ""Not in boundaries"");</pre>"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,860,* @param value the object to validate
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,861,* @param start the inclusive start value
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,862,* @param end the inclusive end value
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,863,* @param message the exception message
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,864,* @param optional values to replace in the exception message
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,865,* @throws IllegalArgumentException if the value falls out of the boundaries
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,866,"* @see #inclusiveBetween(Object, Object, Comparable)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,868,"public static <T> void inclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,870,if (value.compareTo(start) < 0 || value.compareTo(end) > 0)
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,872,"throw new IllegalArgumentException(String.format(message, values));"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,877,* <p>Validate that the specified argument object fall between the two
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,878,"* exclusive values specified; otherwise, throws an exception.</p>"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,880,"* <pre>Validate.inclusiveBetween(0, 2, 1);</pre>"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,882,* @param value the object to validate
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,883,* @param start the exclusive start value
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,884,* @param end the exclusive end value
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,885,* @throws IllegalArgumentException if the value falls out of the boundaries
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,886,"* @see #exclusiveBetween(Object, Object, Comparable, String, Object...)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,888,"public static <T> void exclusiveBetween(T start, T end, Comparable<T> value)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,890,if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0)
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,892,"throw new IllegalArgumentException(String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,897,* <p>Validate that the specified argument object fall between the two
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,898,"* exclusive values specified; otherwise, throws an exception with the"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,899,* specified message.</p>
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,901,"* <pre>Validate.inclusiveBetween(0, 2, 1, ""Not in boundaries"");</pre>"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,903,* @param value the object to validate
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,904,* @param start the exclusive start value
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,905,* @param end the exclusive end value
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,906,* @param message the exception message
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,907,* @param optional values to replace in the exception message
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,908,* @throws IllegalArgumentException if the value falls out of the boundaries
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,909,"* @see #exclusiveBetween(Object, Object, Comparable)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,911,"public static <T> void exclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values)"
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,913,if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0)
True,src/main/java/org/apache/commons/lang3/Validate.java,src/main/java/org/apache/commons/lang3/Validate.java,915,"throw new IllegalArgumentException(String.format(message, values));"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,758,public void testMatchesPattern()
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,760,"CharSequence str = ""hi"";"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,761,"Validate.matchesPattern(str, ""[a-z]*"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,762,try
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,764,"Validate.matchesPattern(str, ""[0-9]*"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,765,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,767,catch (IllegalArgumentException e)
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,769,"assertEquals(""The string hi does not match the pattern [0-9]*"", e.getMessage());"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,773,public void testMatchesPattern_withMessage()
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,775,"CharSequence str = ""hi"";"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,776,"Validate.matchesPattern(str, ""[a-z]*"", ""Does not match"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,777,try
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,779,"Validate.matchesPattern(str, ""[0-9]*"", ""Does not match"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,780,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,782,catch (IllegalArgumentException e)
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,784,"assertEquals(""Does not match"", e.getMessage());"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,788,public void testInclusiveBetween()
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,790,"Validate.inclusiveBetween(""a"", ""c"", ""b"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,791,"Validate.inclusiveBetween(0, 2, 1);"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,792,"Validate.inclusiveBetween(0, 2, 2);"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,793,try {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,794,"Validate.inclusiveBetween(0, 5, 6);"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,795,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,796,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,797,"assertEquals(""The value 6 is not in the specified inclusive range of 0 to 5"", e.getMessage());"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,801,public void testInclusiveBetween_withMessage()
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,803,"Validate.inclusiveBetween(""a"", ""c"", ""b"", ""Error"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,804,"Validate.inclusiveBetween(0, 2, 1, ""Error"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,805,"Validate.inclusiveBetween(0, 2, 2, ""Error"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,806,try {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,807,"Validate.inclusiveBetween(0, 5, 6, ""Error"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,808,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,809,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,810,"assertEquals(""Error"", e.getMessage());"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,814,public void testExclusiveBetween()
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,816,"Validate.exclusiveBetween(""a"", ""c"", ""b"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,817,"Validate.exclusiveBetween(0, 2, 1);"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,818,try {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,819,"Validate.exclusiveBetween(0, 5, 6);"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,820,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,821,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,822,"assertEquals(""The value 6 is not in the specified exclusive range of 0 to 5"", e.getMessage());"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,824,try {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,825,"Validate.exclusiveBetween(0, 5, 5);"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,826,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,827,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,828,"assertEquals(""The value 5 is not in the specified exclusive range of 0 to 5"", e.getMessage());"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,832,public void testExclusiveBetween_withMessage()
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,834,"Validate.exclusiveBetween(""a"", ""c"", ""b"", ""Error"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,835,"Validate.exclusiveBetween(0, 2, 1, ""Error"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,836,try {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,837,"Validate.exclusiveBetween(0, 5, 6, ""Error"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,838,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,839,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,840,"assertEquals(""Error"", e.getMessage());"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,842,try {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,843,"Validate.exclusiveBetween(0, 5, 5, ""Error"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,844,"fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,845,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/lang3/ValidateTest.java,src/test/java/org/apache/commons/lang3/ValidateTest.java,846,"assertEquals(""Error"", e.getMessage());"

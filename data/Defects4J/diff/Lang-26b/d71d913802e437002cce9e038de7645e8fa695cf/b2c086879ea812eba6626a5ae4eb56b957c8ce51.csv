is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,78,* @author Tim O'Brien
False,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,79," @version $Id: ArrayUtils.java,v 1.21 2003/08/01 20:45:17 scolebourne Exp $"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,80,"* @version $Id: ArrayUtils.java,v 1.22 2003/08/03 23:29:19 scolebourne Exp $"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1380,* <p>Find the index of the given value within a given tolerance in the array.
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1381,* This method will return the index of the first value which falls between the region
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1382,* defined by valueToFind - tolerance and valueToFind + tolerance.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1384,* <p>This method returns <code>-1</code> if <code>null</code> array input.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1386,"* @param array  the array to search through for the object, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1387,* @param valueToFind  the value to find
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1388,* @param tolerance tolerance of the search
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1389,"* @return the index of the value within the array,"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1390,*  <code>-1</code> if not found or <code>null</code> array input
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1392,"public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1393,"return indexOf(array, valueToFind, 0, tolerance);"
False,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1393,f (array == null) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1411,if (array == null || array.length == 0) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1426,* <p>Find the index of the given value in the array starting at the given index.
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1427,* This method will return the index of the first value which falls between the region
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1428,* defined by valueToFind - tolerance and valueToFind + tolerance.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1430,* <p>This method returns <code>-1</code> if <code>null</code> array input.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1432,* <p>A negative startIndex is treated as zero. A startIndex larger than the array
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1433,* length will return -1.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1435,"* @param array  the array to search through for the object, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1436,* @param valueToFind  the value to find
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1437,* @param startIndex  the index to start searching at
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1438,* @param tolerance tolerance of the search
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1439,"* @return the index of the value within the array,"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1440,*  <code>-1</code> if not found or <code>null</code> array input
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1442,"public static int indexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1443,if (array == null || array.length == 0) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1444,return -1;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1446,if (startIndex < 0) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1447,startIndex = 0;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1449,double min = valueToFind - tolerance;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1450,double max = valueToFind + tolerance;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1451,for (int i = startIndex; i < array.length; i++) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1452,if (array[i] >= min && array[i] <= max) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1453,return i;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1456,return -1;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1474,* <p>Find the last index of the given value within a given tolerance in the array.
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1475,* This method will return the index of the last value which falls between the region
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1476,* defined by valueToFind - tolerance and valueToFind + tolerance.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1478,* <p>This method returns <code>-1</code> if <code>null</code> array input.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1480,"* @param array  the array to search through for the object, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1481,* @param valueToFind  the value to find
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1482,* @param tolerance tolerance of the search
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1483,"* @return the index of the value within the array,"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1484,*  <code>-1</code> if not found or <code>null</code> array input
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1486,"public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1487,"return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);"
False,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1436,f (array == null) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1505,if (array == null || array.length == 0) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1522,* <p>Find the last index of the given value in the array starting at the given index.
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1523,* This method will return the index of the last value which falls between the region
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1524,* defined by valueToFind - tolerance and valueToFind + tolerance.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1526,* <p>This method returns <code>-1</code> if <code>null</code> array input.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1528,* <p>A negative startIndex will return -1. A startIndex larger than the array
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1529,* length will search from the end of the array.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1531,"* @param array  the array to traverse for looking for the object, may be <code>null</code>"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1532,* @param valueToFind  the value to find
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1533,* @param startIndex  the start index to travers backwards from
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1534,"* @return the last index of the value within the array,"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1535,*  <code>-1</code> if not found or <code>null</code> array input
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1537,"public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1538,if (array == null || array.length == 0) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1539,return -1;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1541,if (startIndex < 0) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1542,return -1;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1543,} else if (startIndex >= array.length) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1544,startIndex = array.length - 1;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1546,double min = valueToFind - tolerance;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1547,double max = valueToFind + tolerance;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1548,for (int i = startIndex; i >= 0; i--) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1549,if (array[i] >= min && array[i] <= max) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1550,return i;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1553,return -1;
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1570,* <p>Checks if a value falling within the given tolerance is in the
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1571,* given array.  If the array contains a value within the inclusive range
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1572,* defined by (value - tolerance) to (value + tolerance).</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1574,* <p>The method returns <code>false</code> if a <code>null</code> array
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1575,* is passed in.</p>
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1577,* @param array the array to search
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1578,* @param valueToFind the value to find
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1579,* @param tolerance the array contains the tolerance of the search.
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1581,"public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {"
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1582,"return (indexOf(array, valueToFind, 0, tolerance) != -1);"
False,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1496,f (array == null) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1616,if (array == null || array.length == 0) {
False,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1539,f (array == null) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1659,if (array == null || array.length == 0) {
False,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1599,f (array == null) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1719,if (array == null || array.length == 0) {
False,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1642,f (array == null) {
True,src/java/org/apache/commons/lang/ArrayUtils.java,src/java/org/apache/commons/lang/ArrayUtils.java,1762,if (array == null || array.length == 0) {
False,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,73," @version $Id: ArrayUtilsTest.java,v 1.11 2003/07/31 22:31:12 scolebourne Exp $"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,73,* @author Tim O'Brien
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,74,"* @version $Id: ArrayUtilsTest.java,v 1.12 2003/08/03 23:29:19 scolebourne Exp $"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,977,array = new double[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,978,"assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,988,public void testIndexOfDoubleTolerance() {
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,989,double[] array = null;
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,990,"assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,991,array = new double[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,992,"assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,993,"array = new double[] { 0, 1, 2, 3, 0 };"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,994,"assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,995,"assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,996,"assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,997,"assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1003,array = new double[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1004,"assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1014,public void testIndexOfDoubleWithStartIndexTolerance() {
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1015,double[] array = null;
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1016,"assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1017,array = new double[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1018,"assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1019,"array = new double[] { 0, 1, 2, 3, 0 };"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1020,"assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1021,"assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1022,"assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1023,"assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1024,"assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1025,"assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1031,array = new double[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1032,"assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1041,public void testLastIndexOfDoubleTolerance() {
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1042,double[] array = null;
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1043,"assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1044,array = new double[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1045,"assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1046,"array = new double[] { 0, 1, 2, 3, 0 };"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1047,"assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1048,"assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1049,"assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1050,"assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1056,array = new double[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1057,"assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1068,public void testLastIndexOfDoubleWithStartIndexTolerance() {
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1069,double[] array = null;
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1070,"assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1071,array = new double[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1072,"assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1073,"array = new double[] { 0, 1, 2, 3, 0 };"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1074,"assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1075,"assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1076,"assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1077,"assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1078,"assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1092,public void testContainsDoubleTolerance() {
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1093,double[] array = null;
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1094,"assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1095,"array = new double[] { 0, 1, 2, 3, 0 };"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1096,"assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1097,"assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1098,"assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1099,"assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1106,array = new float[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1107,"assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1119,array = new float[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1120,"assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1134,array = new float[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1135,"assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1147,array = new float[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1148,"assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1174,array = new boolean[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1175,"assertEquals(-1, ArrayUtils.indexOf(array, true));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1186,array = new boolean[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1187,"assertEquals(-1, ArrayUtils.indexOf(array, true, 2));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1201,array = new boolean[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1202,"assertEquals(-1, ArrayUtils.lastIndexOf(array, true));"
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1213,array = new boolean[0];
True,src/test/org/apache/commons/lang/ArrayUtilsTest.java,src/test/org/apache/commons/lang/ArrayUtilsTest.java,1214,"assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));"

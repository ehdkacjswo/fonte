is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,19,mport java.util.Arrays;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,81, Matches the comma character.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,82, Best used for <code>delimiter</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,84,"ublic static final Matcher COMMA_MATCHER = new CharMatcher(',');"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,86, Matches the tab character.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,87, Best used for <code>delimiter</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,89,ublic static final Matcher TAB_MATCHER = new CharMatcher('\t');
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,91, Matches the space character.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,92, Best used for <code>delimiter</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,94,ublic static final Matcher SPACE_MATCHER = new CharMatcher(' ');
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,96," Matches the same characters as StringTokenizer,"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,97," namely space, tab, newline, formfeed."
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,98, Best used for <code>delimiter</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,100,"ublic static final Matcher SPLIT_MATCHER = createCharSetMatcher("" \t\n\r\f"");"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,102, Matches the double quote character.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,103, Best used for <code>quote</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,105,ublic static final Matcher SINGLE_QUOTE_MATCHER = new CharMatcher('\'');
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,107, Matches the double quote character.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,108, Best used for <code>quote</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,110,"ublic static final Matcher DOUBLE_QUOTE_MATCHER = new CharMatcher('""');"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,112, Matches the String trim() whitespace characters.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,113, Best used for <code>trimmer</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,115,ublic static final Matcher TRIM_MATCHER = new TrimMatcher();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,117, Matches no characters. Don't use this for delimiters!
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,118, Best used for <code>trimmer</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,120,ublic static final Matcher NONE_MATCHER = new NoMatcher();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,126,SV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(COMMA_MATCHER);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,127,SV_TOKENIZER_PROTOTYPE.setQuoteMatcher(DOUBLE_QUOTE_MATCHER);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,128,SV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(NONE_MATCHER);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,129,SV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(TRIM_MATCHER);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,83,CSV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(StrMatcher.commaMatcher());
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,84,CSV_TOKENIZER_PROTOTYPE.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,85,CSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(StrMatcher.noneMatcher());
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,86,CSV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(StrMatcher.trimMatcher());
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,134,SV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(TAB_MATCHER);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,135,SV_TOKENIZER_PROTOTYPE.setQuoteMatcher(DOUBLE_QUOTE_MATCHER);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,136,SV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(NONE_MATCHER);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,137,SV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(TRIM_MATCHER);
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,91,TSV_TOKENIZER_PROTOTYPE.setDelimiterMatcher(StrMatcher.tabMatcher());
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,92,TSV_TOKENIZER_PROTOTYPE.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,93,TSV_TOKENIZER_PROTOTYPE.setIgnoredMatcher(StrMatcher.noneMatcher());
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,94,TSV_TOKENIZER_PROTOTYPE.setTrimmerMatcher(StrMatcher.trimMatcher());
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,152,rivate Matcher delim = SPLIT_MATCHER;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,109,private StrMatcher delim = StrMatcher.splitMatcher();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,154,rivate Matcher quote = NONE_MATCHER;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,111,private StrMatcher quote = StrMatcher.noneMatcher();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,156,rivate Matcher ignored = NONE_MATCHER;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,113,private StrMatcher ignored = StrMatcher.noneMatcher();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,158,rivate Matcher trimmer = NONE_MATCHER;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,115,private StrMatcher trimmer = StrMatcher.noneMatcher();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,167, Constructor that creates a matcher from a set of characters.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,169," @param chars  the characters to match, must not be null"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,170, @return A new matcher for the given char[].
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,171, @throws IllegalArgumentException if the character set is null or empty
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,173,ublic static Matcher createCharSetMatcher(char[] chars) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,174,f (chars == null || chars.length == 0) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,175,"hrow new IllegalArgumentException(""Characters must not be null or empty"");"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,177,f (chars.length == 1) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,178,eturn new CharMatcher(chars[0]);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,180,eturn new CharSetMatcher(chars);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,184, Constructor that creates a matcher from a string representing a set of characters.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,186," @param chars  the characters to match, must not be null"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,187, @return A new Matcher for the given characters.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,188, @throws IllegalArgumentException if the character set is null or empty
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,190,ublic static Matcher createCharSetMatcher(String chars) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,191,f (chars == null || chars.length() == 0) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,192,"hrow new IllegalArgumentException(""Characters must not be null or empty"");"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,194,f (chars.length() == 1) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,195,eturn new CharMatcher(chars.charAt(0));
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,197,eturn new CharSetMatcher(chars.toCharArray());
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,201, Constructor that creates a matcher from a character.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,203," @param ch  the character to match, must not be null"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,204, @return A new Matcher for the given char.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,206,ublic static Matcher createCharMatcher(char ch) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,207,eturn new CharMatcher(ch);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,211, Constructor that creates a matcher from a string.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,213," @param str  the string to match, must not be null"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,214, @return A new Matcher for the given String.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,215, @throws IllegalArgumentException if the string is null or empty
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,217,ublic static Matcher createStringMatcher(String str) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,218,f (str == null || str.length() == 0) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,219,"hrow new IllegalArgumentException(""String must not be null or empty"");"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,221,eturn new StringMatcher(str);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,379,"ublic StrTokenizer(String input, Matcher delim) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,277,"public StrTokenizer(String input, StrMatcher delim) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,405,"ublic StrTokenizer(String input, Matcher delim, Matcher quote) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,303,"public StrTokenizer(String input, StrMatcher delim, StrMatcher quote) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,450,"ublic StrTokenizer(char[] input, Matcher delim) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,348,"public StrTokenizer(char[] input, StrMatcher delim) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,476,"ublic StrTokenizer(char[] input, Matcher delim, Matcher quote) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,374,"public StrTokenizer(char[] input, StrMatcher delim, StrMatcher quote) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,688,"f (start == len && delim.isMatch(chars, len, start - 1) == 1) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,586,"if (start == len && delim.isMatch(chars, start - 1, 0, len) == 1) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,737,"ignoreLen = ignored.isMatch(chars, len, start)) >= 1 &&"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,738,"delimLen = delim.isMatch(chars, len, start)) < 1 &&"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,739,"quoteLen = quote.isMatch(chars, len, start)) < 1) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,635,"(ignoreLen = ignored.isMatch(chars, start, 0, len)) >= 1 &&"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,636,"(delimLen = delim.isMatch(chars, start, 0, len)) < 1 &&"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,637,"(quoteLen = quote.isMatch(chars, start, 0, len)) < 1) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,747,"f ((delimLen = delim.isMatch(chars, len, start)) >= 1) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,645,"if ((delimLen = delim.isMatch(chars, start, 0, len)) >= 1) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,749," else if ((quoteLen = quote.isMatch(chars, len, start)) >= 1) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,647,"} else if ((quoteLen = quote.isMatch(chars, start, 0, len)) >= 1) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,810,"f ((quoteLen = quote.isMatch(chars, len, pos)) >= 1) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,708,"if ((quoteLen = quote.isMatch(chars, pos, 0, len)) >= 1) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,831,"f ((delimLen = delim.isMatch(chars, len, pos)) >= 1) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,729,"if ((delimLen = delim.isMatch(chars, pos, 0, len)) >= 1) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,834,"f ((quoteLen = quote.isMatch(chars, len, pos)) >= 1) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,732,"if ((quoteLen = quote.isMatch(chars, pos, 0, len)) >= 1) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,865,"hile (pos < len && (delimLen = delim.isMatch(chars, len, pos)) < 1) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,763,"while (pos < len && (delimLen = delim.isMatch(chars, pos, 0, len)) < 1) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,870,"hile (trimmer.isMatch(chars, 1, start) > 0) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,768,"while (trimmer.isMatch(chars, start, 0, len) > 0) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,876,"hile (trimmer.isMatch(chars, 1, start + length - 1) > 0) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,774,"while (trimmer.isMatch(chars, start + length - 1, 0, len) > 0) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,881,"f (ignored.isMatch(chars, 1, start + i) == 0) {"
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,779,"if (ignored.isMatch(chars, start + i, 0, len) == 0) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,897,ublic Matcher getDelimiterMatcher() {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,795,public StrMatcher getDelimiterMatcher() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,908,ublic void setDelimiterMatcher(Matcher delim) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,806,public void setDelimiterMatcher(StrMatcher delim) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,910,his.delim = NONE_MATCHER;
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,808,this.delim = StrMatcher.noneMatcher();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,922,etDelimiterMatcher(new CharMatcher(delim));
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,820,setDelimiterMatcher(StrMatcher.charMatcher(delim));
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,931,f (delim == null || delim.length() == 0) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,932,etDelimiterMatcher(NONE_MATCHER);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,933, else if (delim.length() == 1) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,934,etDelimiterMatcher(new CharMatcher(delim.charAt(0)));
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,935, else {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,936,etDelimiterMatcher(new StringMatcher(delim));
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,829,setDelimiterMatcher(StrMatcher.stringMatcher(delim));
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,951,ublic Matcher getQuoteMatcher() {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,843,public StrMatcher getQuoteMatcher() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,963,ublic void setQuoteMatcher(Matcher quote) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,855,public void setQuoteMatcher(StrMatcher quote) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,978,etQuoteMatcher(new CharMatcher(quote));
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,870,setQuoteMatcher(StrMatcher.charMatcher(quote));
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,992,ublic Matcher getIgnoredMatcher() {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,884,public StrMatcher getIgnoredMatcher() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1004,ublic void setIgnoredMatcher(Matcher ignored) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,896,public void setIgnoredMatcher(StrMatcher ignored) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1019,etIgnoredMatcher(new CharMatcher(ignored));
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,911,setIgnoredMatcher(StrMatcher.charMatcher(ignored));
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1032,ublic Matcher getTrimmerMatcher() {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,924,public StrMatcher getTrimmerMatcher() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1042,ublic void setTrimmerMatcher(Matcher trimmer) {
True,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,934,public void setTrimmerMatcher(StrMatcher trimmer) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1123, Defines the interface used to match a set of characters during tokenization.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1124, Standard implementations of this interface are provided in the library.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1125, These are accessed via the create*() factory methods on StrTokenizer.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1126," If your application needs more unusual matching, implement this interface directly."
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1128,ublic static interface Matcher {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1130," Returns the number of matching characters, zero for no match."
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1131, <p>
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1132, This method is called to check for a match.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1133, The parameter <code>pos</code> represents the current position to be
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1134, checked in the string <code>text</code> (a character array which must
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1135, not be changed).
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1136, The text length is also provided for efficiency.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1137, The API guarantees that <code>pos</code> is a valid index for <code>text</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1138, <p>
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1139, The matching code may check one character or many.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1140," It must return zero for no match, or a positive number if a match was found."
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1141, The number indicates the number of characters that matched.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1143," @param text  the text content to match against, do not change"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1144, @param textLen  the length of the text
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1145," @param pos  the starting position for the match, valid for text"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1146," @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1148,"nt isMatch(char[] text, int textLen, int pos);"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1153, Class used to define a set of characters for matching purposes.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1155,ublic static final class CharSetMatcher implements Matcher {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1156,rivate char[] chars;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1159, Constructor that creates a matcher from a character array.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1161," @param chars  the characters to match, must not be null"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1163,ublic CharSetMatcher(char chars[]) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1164,uper();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1165,his.chars = (char[]) chars.clone();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1166,rrays.sort(this.chars);
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1170, Returns whether or not the given charatcer matches.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1172, @param text  the text content to match against
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1173, @param textLen  the length of the text
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1174, @param pos  the starting position
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1175," @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1177,"ublic int isMatch(char[] text, int textLen, int pos) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1178,"eturn Arrays.binarySearch(chars, text[pos]) >= 0 ? 1 : 0;"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1184, Class used to define a character for matching purposes.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1186,tatic final class CharMatcher implements Matcher {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1187,rivate char ch;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1190, Constructor that creates a matcher that matches a single character.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1192, @param ch  the character to match
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1194,harMatcher(char ch) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1195,uper();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1196,his.ch = ch;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1200, Returns whether or not the given character matches.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1202, @param text  the text content to match against
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1203, @param textLen  the length of the text
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1204, @param pos  the starting position
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1205," @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1207,"ublic int isMatch(char[] text, int textLen, int pos) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1208,eturn ch == text[pos] ? 1 : 0;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1214, Class used to define a set of characters for matching purposes.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1216,tatic final class StringMatcher implements Matcher {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1217,rivate char[] chars;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1220, Constructor that creates a matcher from a String.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1222," @param str  the string to match, must not be null"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1224,tringMatcher(String str) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1225,uper();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1226,hars = str.toCharArray();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1230, Returns whether or not the given text matches the stored string.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1232, @param text  the text content to match against
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1233, @param textLen  the length of the text
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1234, @param pos  the starting position
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1235," @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1237,"ublic int isMatch(char[] text, int textLen, int pos) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1238,nt len = chars.length;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1239,f (pos + len > textLen) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1240,eturn 0;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1242,"or (int i = 0; i < chars.length; i++, pos++) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1243,f (chars[i] != text[pos]) {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1244,eturn 0;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1247,eturn len;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1253, Class used to match no characters.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1255,tatic final class NoMatcher implements Matcher {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1258, Constructs a new instance of <code>NoMatcher</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1260,oMatcher() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1261,uper();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1265, Always returns <code>false</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1267, @param text  the text content to match against
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1268, @param textLen  the length of the text
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1269, @param pos  the starting position
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1270," @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1272,"ublic int isMatch(char[] text, int textLen, int pos) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1273,eturn 0;
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1279, Class used to match whitespace as per trim().
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1281,tatic final class TrimMatcher implements Matcher {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1284, Constructs a new instance of <code>TrimMatcher</code>.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1286,rimMatcher() {
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1287,uper();
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1291, Returns whether or not the given charatcer matches.
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1293, @param text  the text content to match against
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1294, @param textLen  the length of the text
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1295, @param pos  the starting position
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1296," @return the number of matching characters, zero for no match"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1298,"ublic int isMatch(char[] text, int textLen, int pos) {"
False,src/java/org/apache/commons/lang/text/StrTokenizer.java,src/java/org/apache/commons/lang/text/StrTokenizer.java,1299,eturn text[pos] <= 32 ? 1 : 0;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,231,rivate StrTokenizer.Matcher escVarMatcher;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,231,private StrMatcher escVarMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,243,rivate StrTokenizer.Matcher varEndMatcher;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,243,private StrMatcher varEndMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,246,rivate StrTokenizer.Matcher varStartMatcher;
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,246,private StrMatcher varStartMatcher;
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,262,"ublic VariableParser(StrTokenizer.Matcher startMatcher, StrTokenizer.Matcher endMatcher,"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,263,"trTokenizer.Matcher escMatcher, int startPos, int length) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,262,"public VariableParser(StrMatcher startMatcher, StrMatcher endMatcher,"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,263,"StrMatcher escMatcher, int startPos, int length) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,295,rivate StrTokenizer.Matcher getEscVarMatcher() {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,295,private StrMatcher getEscVarMatcher() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,323,rivate StrTokenizer.Matcher getVarEndMatcher() {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,323,private StrMatcher getVarEndMatcher() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,330,rivate StrTokenizer.Matcher getVarStartMatcher() {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,330,private StrMatcher getVarStartMatcher() {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,360,"f ((tokenLen = getEscVarMatcher().isMatch(data, getLength(), getPos())) > 0) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,360,"if ((tokenLen = getEscVarMatcher().isMatch(data, getPos(), 0, getLength())) > 0) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,364," else if ((tokenLen = getVarStartMatcher().isMatch(data, getLength(), getPos())) > 0) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,364,"} else if ((tokenLen = getVarStartMatcher().isMatch(data, getPos(), 0, getLength())) > 0) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,368,"hile (hasNext() && (endLen = getVarEndMatcher().isMatch(data, getLength(), getPos())) <= 0) {"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,368,"while (hasNext() && (endLen = getVarEndMatcher().isMatch(data, getPos(), 0, getLength())) <= 0) {"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,400,rivate void setEscVarMatcher(StrTokenizer.Matcher escVarMatcher) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,400,private void setEscVarMatcher(StrMatcher escVarMatcher) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,432,rivate void setVarEndMatcher(StrTokenizer.Matcher varEndMatcher) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,432,private void setVarEndMatcher(StrMatcher varEndMatcher) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,440,rivate void setVarStartMatcher(StrTokenizer.Matcher varStartMatcher) {
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,440,private void setVarStartMatcher(StrMatcher varStartMatcher) {
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,612,"eturn new VariableParser(new StrTokenizer.StringMatcher(getVariablePrefix()), new StrTokenizer.StringMatcher("
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,613,"etVariableSuffix()), new StrTokenizer.StringMatcher(String.valueOf(getEscapeCharacter())"
False,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,614," getVariablePrefix()), offset, length);"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,612,return new VariableParser(
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,613,"StrMatcher.stringMatcher(getVariablePrefix()),"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,614,"StrMatcher.stringMatcher(getVariableSuffix()),"
True,src/java/org/apache/commons/lang/text/VariableFormatter.java,src/java/org/apache/commons/lang/text/VariableFormatter.java,615,"StrMatcher.stringMatcher(String.valueOf(getEscapeCharacter()) + getVariablePrefix()), offset, length);"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,68,ok.setIgnoredMatcher(StrTokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,68,tok.setIgnoredMatcher(StrMatcher.trimMatcher());
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,88,ok.setIgnoredMatcher(StrTokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,88,tok.setIgnoredMatcher(StrMatcher.noneMatcher());
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,108,ok.setIgnoredMatcher(StrTokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,108,tok.setIgnoredMatcher(StrMatcher.noneMatcher());
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,128,ok.setIgnoredMatcher(StrTokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,128,tok.setIgnoredMatcher(StrMatcher.trimMatcher());
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,148,ok.setIgnoredMatcher(StrTokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,148,tok.setIgnoredMatcher(StrMatcher.trimMatcher());
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,169,ok.setIgnoredMatcher(StrTokenizer.TRIM_MATCHER);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,169,tok.setIgnoredMatcher(StrMatcher.trimMatcher());
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,202,ok.setDelimiterMatcher(StrTokenizer.SPACE_MATCHER);
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,203,ok.setQuoteMatcher(StrTokenizer.DOUBLE_QUOTE_MATCHER);
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,204,ok.setIgnoredMatcher(StrTokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,202,tok.setDelimiterMatcher(StrMatcher.spaceMatcher());
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,203,tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,204,tok.setIgnoredMatcher(StrMatcher.noneMatcher());
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,222,ok.setDelimiterMatcher(StrTokenizer.SPACE_MATCHER);
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,223,ok.setQuoteMatcher(StrTokenizer.DOUBLE_QUOTE_MATCHER);
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,224,ok.setIgnoredMatcher(StrTokenizer.NONE_MATCHER);
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,222,tok.setDelimiterMatcher(StrMatcher.spaceMatcher());
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,223,tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,224,tok.setIgnoredMatcher(StrMatcher.noneMatcher());
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,351,ublic void testMatcher() {
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,352,"ssertEquals(1, StrTokenizer.SPACE_MATCHER.isMatch(new char[]{' '}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,353,"ssertEquals(0, StrTokenizer.SPACE_MATCHER.isMatch(new char[]{'\n'}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,354,"ssertEquals(0, StrTokenizer.SPACE_MATCHER.isMatch(new char[]{'\u0001'}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,356,"ssertEquals(1, StrTokenizer.TRIM_MATCHER.isMatch(new char[]{' '}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,357,"ssertEquals(1, StrTokenizer.TRIM_MATCHER.isMatch(new char[]{'\n'}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,358,"ssertEquals(1, StrTokenizer.TRIM_MATCHER.isMatch(new char[]{'\u0001'}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,360,"ssertEquals(1, StrTokenizer.SPLIT_MATCHER.isMatch(new char[]{' '}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,361,"ssertEquals(1, StrTokenizer.SPLIT_MATCHER.isMatch(new char[]{'\n'}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,362,"ssertEquals(0, StrTokenizer.SPLIT_MATCHER.isMatch(new char[]{'\u0001'}, 1, 0));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,383,ublic void testStringMatcher() {
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,384,/ build test fixture
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,385,har[] data = new char[26];
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,386,or(int i = 0; i < data.length; i++) {
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,387,ata[i] = (char) (i + 'a');
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,389,/ perform tests
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,390,"trTokenizer.Matcher matcher = new StrTokenizer.StringMatcher(""z"");"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,391,or(int i = 0; i < data.length - 1; i++) {
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,392,"ssertEquals(0, matcher.isMatch(data, data.length, i));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,394,"ssertEquals(1, matcher.isMatch(data, data.length, data.length - 1));"
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,395,/ test bad pos argument.
False,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,396,"ssertEquals(0, matcher.isMatch(data, data.length, data.length +100));"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,404,public void testIteration() {
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,405,"StrTokenizer tkn = new StrTokenizer(""a b c"");"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,406,"assertEquals(true, tkn.hasNext());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,407,"assertEquals(""a"", tkn.next());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,408,try {
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,409,tkn.remove();
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,410,fail();
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,411,} catch (UnsupportedOperationException ex) {}
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,412,try {
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,413,"tkn.set(""x"");"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,414,fail();
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,415,} catch (UnsupportedOperationException ex) {}
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,416,try {
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,417,"tkn.add(""y"");"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,418,fail();
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,419,} catch (UnsupportedOperationException ex) {}
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,420,"assertEquals(true, tkn.hasNext());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,421,"assertEquals(""b"", tkn.next());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,422,"assertEquals(true, tkn.hasNext());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,423,"assertEquals(""c"", tkn.next());"
True,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,src/test/org/apache/commons/lang/text/StrTokenizerTest.java,424,"assertEquals(false, tkn.hasNext());"

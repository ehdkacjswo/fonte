is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,275,* Adds a number of years to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,276,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,278,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,279,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,280,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,281,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,283,"public static Date addYears(Date date, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,284,"return add(date, Calendar.YEAR, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,289,* Adds a number of months to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,290,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,292,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,293,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,294,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,295,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,297,"public static Date addMonths(Date date, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,298,"return add(date, Calendar.MONTH, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,303,* Adds a number of weeks to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,304,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,306,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,307,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,308,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,309,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,311,"public static Date addWeeks(Date date, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,312,"return add(date, Calendar.WEEK_OF_YEAR, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,317,* Adds a number of days to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,318,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,320,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,321,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,322,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,323,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,325,"public static Date addDays(Date date, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,326,"return add(date, Calendar.DAY_OF_MONTH, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,331,* Adds a number of hours to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,332,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,334,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,335,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,336,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,337,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,339,"public static Date addHours(Date date, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,340,"return add(date, Calendar.HOUR_OF_DAY, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,345,* Adds a number of minutes to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,346,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,348,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,349,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,350,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,351,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,353,"public static Date addMinutes(Date date, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,354,"return add(date, Calendar.MINUTE, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,359,* Adds a number of seconds to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,360,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,362,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,363,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,364,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,365,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,367,"public static Date addSeconds(Date date, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,368,"return add(date, Calendar.SECOND, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,373,* Adds a number of milliseconds to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,374,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,376,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,377,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,378,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,379,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,381,"public static Date addMilliseconds(Date date, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,382,"return add(date, Calendar.MILLISECOND, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,387,* Adds to a date returning a new object.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,388,* The original date object is unchanged.
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,390,"* @param date  the date, not null"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,391,* @param calendarField  the calendar field to add to
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,392,"* @param amount  the amount to add, may be negative"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,393,* @return the new date object with the amount added
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,394,* @throws IllegalArgumentException if the date is null
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,396,"public static Date add(Date date, int calendarField, int amount) {"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,397,if (date == null) {
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,398,"throw new IllegalArgumentException(""The date must not be null"");"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,400,Calendar c = Calendar.getInstance();
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,401,c.setTime(date);
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,402,"c.add(calendarField, amount);"
True,src/java/org/apache/commons/lang/time/DateUtils.java,src/java/org/apache/commons/lang/time/DateUtils.java,403,return c.getTime();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,47,private static final long MILLIS_TEST;
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,48,static {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,49,"GregorianCalendar cal = new GregorianCalendar(2000, 6, 5, 4, 3, 2);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,50,"cal.set(Calendar.MILLISECOND, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,51,MILLIS_TEST = cal.getTime().getTime();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,288,public void testAddYears() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,289,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,290,"Date result = DateUtils.addYears(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,291,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,292,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,293,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,295,"result = DateUtils.addYears(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,296,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,297,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,298,"assertDate(result, 2001, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,300,"result = DateUtils.addYears(base, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,301,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,302,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,303,"assertDate(result, 1999, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,307,public void testAddMonths() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,308,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,309,"Date result = DateUtils.addMonths(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,310,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,311,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,312,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,314,"result = DateUtils.addMonths(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,315,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,316,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,317,"assertDate(result, 2000, 7, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,319,"result = DateUtils.addMonths(base, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,320,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,321,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,322,"assertDate(result, 2000, 5, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,326,public void testAddWeeks() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,327,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,328,"Date result = DateUtils.addWeeks(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,329,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,330,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,331,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,333,"result = DateUtils.addWeeks(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,334,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,335,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,336,"assertDate(result, 2000, 6, 12, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,338,"result = DateUtils.addWeeks(base, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,339,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,340,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,341,"assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,345,public void testAddDays() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,346,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,347,"Date result = DateUtils.addDays(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,348,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,349,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,350,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,352,"result = DateUtils.addDays(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,353,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,354,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,355,"assertDate(result, 2000, 6, 6, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,357,"result = DateUtils.addDays(base, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,358,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,359,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,360,"assertDate(result, 2000, 6, 4, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,364,public void testAddHours() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,365,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,366,"Date result = DateUtils.addHours(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,367,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,368,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,369,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,371,"result = DateUtils.addHours(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,372,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,373,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,374,"assertDate(result, 2000, 6, 5, 5, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,376,"result = DateUtils.addHours(base, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,377,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,378,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,379,"assertDate(result, 2000, 6, 5, 3, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,383,public void testAddMinutes() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,384,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,385,"Date result = DateUtils.addMinutes(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,386,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,387,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,388,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,390,"result = DateUtils.addMinutes(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,391,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,392,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,393,"assertDate(result, 2000, 6, 5, 4, 4, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,395,"result = DateUtils.addMinutes(base, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,396,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,397,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,398,"assertDate(result, 2000, 6, 5, 4, 2, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,402,public void testAddSeconds() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,403,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,404,"Date result = DateUtils.addSeconds(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,405,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,406,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,407,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,409,"result = DateUtils.addSeconds(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,410,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,411,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,412,"assertDate(result, 2000, 6, 5, 4, 3, 3, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,414,"result = DateUtils.addSeconds(base, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,415,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,416,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,417,"assertDate(result, 2000, 6, 5, 4, 3, 1, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,421,public void testAddMilliseconds() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,422,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,423,"Date result = DateUtils.addMilliseconds(base, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,424,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,425,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,426,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,428,"result = DateUtils.addMilliseconds(base, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,429,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,430,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,431,"assertDate(result, 2000, 6, 5, 4, 3, 2, 2);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,433,"result = DateUtils.addMilliseconds(base, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,434,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,435,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,436,"assertDate(result, 2000, 6, 5, 4, 3, 2, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,440,public void testAddByField() throws Exception {
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,441,Date base = new Date(MILLIS_TEST);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,442,"Date result = DateUtils.add(base, Calendar.YEAR, 0);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,443,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,444,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,445,"assertDate(result, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,447,"result = DateUtils.add(base, Calendar.YEAR, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,448,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,449,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,450,"assertDate(result, 2001, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,452,"result = DateUtils.add(base, Calendar.YEAR, -1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,453,"assertNotSame(base, result);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,454,"assertDate(base, 2000, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,455,"assertDate(result, 1999, 6, 5, 4, 3, 2, 1);"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,459,"private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,460,GregorianCalendar cal = new GregorianCalendar();
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,461,cal.setTime(date);
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,462,"assertEquals(year, cal.get(Calendar.YEAR));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,463,"assertEquals(month, cal.get(Calendar.MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,464,"assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,465,"assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,466,"assertEquals(min, cal.get(Calendar.MINUTE));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,467,"assertEquals(sec, cal.get(Calendar.SECOND));"
True,src/test/org/apache/commons/lang/time/DateUtilsTest.java,src/test/org/apache/commons/lang/time/DateUtilsTest.java,468,"assertEquals(mil, cal.get(Calendar.MILLISECOND));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,34,rivate final Comparator comparator;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,34,private final Comparator<T> comparator;
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,48,ublic static <T extends Comparable> Range is(T element) {
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,49,"eturn new Range(element, element, ComparableComparator.INSTANCE);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,48,public static <T extends Comparable<T>> Range<T> is(T element) {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,49,"return new Range<T>(element, element, ComparableComparator.<T>getInstance());"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,66,"ublic static <T extends Comparable> Range between(T element1, T element2) {"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,67,"eturn new Range( element1, element2, ComparableComparator.INSTANCE);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,66,"public static <T extends Comparable<T>> Range<T> between(T element1, T element2) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,67,"return new Range<T>( element1, element2, ComparableComparator.<T>getInstance());"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,80,"ublic static <T> Range is(T element, Comparator c) {"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,81,"eturn new Range(element, element, c);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,80,"public static <T> Range<T> is(T element, Comparator<T> c) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,81,"return new Range<T>(element, element, c);"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,98,"ublic static <T> Range between(T element1, T element2, Comparator c) {"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,99,"eturn new Range(element1, element2, c);"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,98,"public static <T> Range<T> between(T element1, T element2, Comparator<T> c) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,99,"return new Range<T>(element1, element2, c);"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,102,"rivate Range(T element1, T element2, Comparator c) {"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,102,"private Range(T element1, T element2, Comparator<T> c) {"
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,148,ublic Comparator getComparator() {
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,148,public Comparator<T> getComparator() {
False,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,290,ange range = (Range) obj;
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,290,"@SuppressWarnings(""unchecked"") // OK because we checked the class above"
True,src/java/org/apache/commons/lang/Range.java,src/java/org/apache/commons/lang/Range.java,291,Range<T> range = (Range<T>) obj;

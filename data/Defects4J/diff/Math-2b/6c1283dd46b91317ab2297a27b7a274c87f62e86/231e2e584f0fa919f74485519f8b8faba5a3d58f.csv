is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,25, {@link QRDecomposition} or {@link LUDecomposition}. All these algorithms
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,26, decompose an A matrix has a product of several specific matrices from
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,27, which they can solve A &times; X = B.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,28," <p>Depending on the solver, the solution is either an exact linear solution"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,29," or a least squares solution. When an exact linear solution exist, both the"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,30, linear and the least squares solution are equal. When no exact linear solution
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,31," exist, a least square solution gives an X which such that A &times; X is the"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,32, closest possible to B.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,25,"* {@link QRDecomposition}, {@link LUDecomposition} or {@link"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,26,* SingularValueDecomposition}. All these algorithms decompose an A matrix has a
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,27,* product of several specific matrices from which they can solve A &times; X = B
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,28,* in least squares sense: they find X such that ||A &times; X - B|| is minimal.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,29,* <p>Some solvers like {@link LUDecomposition} can only find the solution for
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,30,"* square matrices and when the solution is an exact linear solution, i.e. when"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,31,* ||A &times; X - B|| is exactly 0. Other solvers can also find solutions
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,32,* with non-square matrix A and with non-null minimal norm. If an exact linear
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,33,* solution exists it is also the minimal norm solution.</p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,41,* Decompose a matrix.
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,42,* @param matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,43,* @exception InvalidMatrixException if matrix does not fulfill
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,44,* the decomposition requirements (for example non-square matrix
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,45,* for {@link LUDecomposition})
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,47,void decompose(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,48,throws InvalidMatrixException;
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,40, <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,51,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,52,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,43, @throws IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,44, @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,55,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,56,* has not been called
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,57,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,58,* @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,47,"hrows IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,61,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,50, <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,64,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,65,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,53, @throws IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,54, @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,68,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,69,* has not been called
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,70,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,71,* @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,57,"hrows IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,74,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,60, <p>The A matrix is implicit here. It is </p>
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,77,* <p>The A matrix is implicit here. It <strong>must</strong> have
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,78,* already been provided by a previous call to {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,63, @throws IllegalArgumentException if matrices dimensions don't match
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,64, @throws InvalidMatrixException if decomposed matrix is singular
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,81,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,82,* has not been called
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,83,* @exception IllegalArgumentException if matrices dimensions don't match
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,84,* @exception InvalidMatrixException if decomposed matrix is singular
False,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,67,"hrows IllegalArgumentException, InvalidMatrixException;"
True,src/java/org/apache/commons/math/linear/DecompositionSolver.java,src/java/org/apache/commons/math/linear/DecompositionSolver.java,87,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException;"
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,27, <p>This interface is similar to the class with similar name from the now defunct
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,27,* <p>This interface is based on the class with similar name from the now defunct
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,29, exception of the <code>det</code> method which has been renamed as {@link
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,30, #getDeterminant() getDeterminant}.</p>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,29,* following changes:</p>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,30,* <ul>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,31,"*   <li>several signatures have been added for the <code>solve</code> methods (in the superinterface),</code>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,32,"*   <li>a <code>decompose</code> method has been added (in the superinterface),</code>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,33,*   <li>the <code>det</code> method has been renamed as {@link #getDeterminant() getDeterminant}.</li>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,34,* </ul>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,44,* Computes a new
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,45,"* <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,46,"* LU decomposition</a> for this matrix, storing the result for use by other methods."
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,47,* <p>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,48,* <strong>Implementation Note</strong>:<br>
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,49,"* Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm"">"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,50,"* Crout's algorithm</a>, with partial pivoting.</p>"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,51,* @param matrix The matrix to decompose.
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,52,* @param singularityThreshold threshold (based on partial row norm)
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,53,* under which a matrix is considered singular
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,54,* @exception InvalidMatrixException if matrix is not square
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,56,"void decompose(RealMatrix matrix, double singularityThreshold);"
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,62,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,63,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,44,ealMatrix getL();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,65,RealMatrix getL() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,71,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,72,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,51,ealMatrix getU();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,74,RealMatrix getU() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,83,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,84,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,62,ealMatrix getP();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,87,RealMatrix getP() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,92,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,93,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,69,nt[] getPivot();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,96,int[] getPivot() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,101,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,102,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,76,oolean isNonSingular();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,105,boolean isNonSingular() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,110,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,111,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,83,ouble getDeterminant();
True,src/java/org/apache/commons/math/linear/LUDecomposition.java,src/java/org/apache/commons/math/linear/LUDecomposition.java,114,double getDeterminant() throws IllegalStateException;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,35,rivate static final long serialVersionUID = -1606789599960880183L;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,37,** Bound to determine effective singularity in LU decomposition */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,38,rivate final double singularityThreshold;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,40,** Size of the matrix. */
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,41,rivate final int m;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,35,private static final long serialVersionUID = -9052751605297201067L;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,44,rivate final double lu[][];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,38,private double lu[][];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,47,rivate final int[] pivot;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,41,private int[] pivot;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,62,* Build a new instance.
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,63,* <p>Note that either {@link #decompose(RealMatrix)} or
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,64,"* {@link #decompose(RealMatrix, double)} <strong>must</strong> be called"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,65,"* before any of the {@link #getP()}, {@link #getPivot()}, {@link #getL()},"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,66,"* {@link #getU()}, {@link #getDeterminant()}, {@link #isNonSingular()},"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,67,"* {@link #solve(double[])}, {@link #solve(RealMatrix)}, {@link #solve(RealVector)}"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,68,* or {@link #solve(RealVectorImpl)} methods can be called.</p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,69,* @see #decompose(RealMatrix)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,70,"* @see #decompose(RealMatrix, double)"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,72,public LUDecompositionImpl() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,77,* <p>Calling this constructor is equivalent to first call the no-arguments
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,78,* constructor and then call {@link #decompose(RealMatrix)}.</p>
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,75,"his(matrix, DEFAULT_TOO_SMALL);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,84,decompose(matrix);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,89,* <p>Calling this constructor is equivalent to first call the no-arguments
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,90,"* constructor and then call {@link #decompose(RealMatrix, double)}.</p>"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,97,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,98,"decompose(matrix, singularityThreshold);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,101,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,102,public void decompose(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,103,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,104,"decompose(matrix, DEFAULT_TOO_SMALL);"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,107,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,108,"public void decompose(RealMatrix matrix, double singularityThreshold)"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,91,his.singularityThreshold = singularityThreshold;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,92, = matrix.getColumnDimension();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,113,final int m = matrix.getColumnDimension();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,99,/ perform decomposition
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,100,uDecompose();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,120,// Initialize permutation array and parity
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,121,for (int row = 0; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,122,pivot[row] = row;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,124,parity = 1;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,125,singular = false;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,127,// Loop over columns
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,128,for (int col = 0; col < m; col++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,130,double sum = 0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,132,// upper
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,133,for (int row = 0; row < col; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,134,final double[] luRow = lu[row];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,135,sum = luRow[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,136,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,137,sum -= luRow[i] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,139,luRow[col] = sum;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,142,// lower
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,143,int max = col; // permutation row
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,144,double largest = Double.NEGATIVE_INFINITY;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,145,for (int row = col; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,146,final double[] luRow = lu[row];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,147,sum = luRow[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,148,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,149,sum -= luRow[i] * lu[i][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,151,luRow[col] = sum;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,153,// maintain best permutation choice
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,154,if (Math.abs(sum) > largest) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,155,largest = Math.abs(sum);
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,156,max = row;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,160,// Singularity check
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,161,if (Math.abs(lu[max][col]) < singularityThreshold) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,162,singular = true;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,163,return;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,166,// Pivot if necessary
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,167,if (max != col) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,168,double tmp = 0;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,169,for (int i = 0; i < m; i++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,170,tmp = lu[max][i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,171,lu[max][i] = lu[col][i];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,172,lu[col][i] = tmp;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,174,int temp = pivot[max];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,175,pivot[max] = pivot[col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,176,pivot[col] = temp;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,177,parity = -parity;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,180,"// Divide the lower elements by the ""winning"" diagonal elt."
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,181,final double luDiag = lu[col][col];
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,182,for (int row = col + 1; row < m; row++) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,183,lu[row][col] /= luDiag;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,105,ublic RealMatrix getL() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,190,public RealMatrix getL()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,191,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,192,checkDecomposed();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,194,final int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,118,ublic RealMatrix getU() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,206,public RealMatrix getU()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,207,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,208,checkDecomposed();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,210,final int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,130,ublic RealMatrix getP() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,221,public RealMatrix getP()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,222,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,223,checkDecomposed();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,225,final int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,142,ublic int[] getPivot() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,236,public int[] getPivot()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,237,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,238,checkDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,147,ublic boolean isNonSingular() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,243,public boolean isNonSingular()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,244,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,245,checkDecomposed();
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,152,ublic double getDeterminant() {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,250,public double getDeterminant()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,251,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,252,checkDecomposed();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,256,final int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,166,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,267,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,269,checkDecomposed();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,270,final int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,203,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,306,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,311,checkDecomposed();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,312,final int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,250,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,355,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,256,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,361,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,363,checkDecomposed();
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,364,final int m = pivot.length;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,309, Computes a new
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,310," <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf"">"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,311," LU decomposition</a> for this matrix, storing the result for use by other methods."
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,312, <p>
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,313, <strong>Implementation Note</strong>:<br>
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,314," Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/people/sd/lectures/nummeth98/linear.htm"">"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,315," Crout's algorithm</a>, with partial pivoting.</p>"
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,316, <p>
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,317, <strong>Usage Note</strong>:<br>
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,318, This method should rarely be invoked directly. Its only use is
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,319, to force recomputation of the LU decomposition when changes have been
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,320, made to the underlying data using direct array references. Changes
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,321, made using setXxx methods will trigger recomputation when needed
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,322, automatically.</p>
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,417,* Check if either {@link #decompose(RealMatrix)} or {@link
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,418,"* #decompose(RealMatrix, double) has been called."
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,419,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,420,* has not been called
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,324,rivate void luDecompose() {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,326,/ Initialize permutation array and parity
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,327,or (int row = 0; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,328,ivot[row] = row;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,330,arity = 1;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,331,ingular = false;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,333,/ Loop over columns
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,334,or (int col = 0; col < m; col++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,336,ouble sum = 0;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,338,/ upper
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,339,or (int row = 0; row < col; row++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,340,inal double[] luRow = lu[row];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,341,um = luRow[col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,342,or (int i = 0; i < row; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,343,um -= luRow[i] * lu[i][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,345,uRow[col] = sum;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,348,/ lower
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,349,nt max = col; // permutation row
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,350,ouble largest = Double.NEGATIVE_INFINITY;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,351,or (int row = col; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,352,inal double[] luRow = lu[row];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,353,um = luRow[col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,354,or (int i = 0; i < col; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,355,um -= luRow[i] * lu[i][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,357,uRow[col] = sum;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,359,/ maintain best permutation choice
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,360,f (Math.abs(sum) > largest) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,361,argest = Math.abs(sum);
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,362,ax = row;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,366,/ Singularity check
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,367,f (Math.abs(lu[max][col]) < singularityThreshold) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,368,ingular = true;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,369,eturn;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,372,/ Pivot if necessary
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,373,f (max != col) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,374,ouble tmp = 0;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,375,or (int i = 0; i < m; i++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,376,mp = lu[max][i];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,377,u[max][i] = lu[col][i];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,378,u[col][i] = tmp;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,380,nt temp = pivot[max];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,381,ivot[max] = pivot[col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,382,ivot[col] = temp;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,383,arity = -parity;
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,386,"/ Divide the lower elements by the ""winning"" diagonal elt."
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,387,inal double luDiag = lu[col][col];
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,388,or (int row = col + 1; row < m; row++) {
False,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,389,u[row][col] /= luDiag;
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,422,private void checkDecomposed()
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,423,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,424,if (lu == null) {
True,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,src/java/org/apache/commons/math/linear/LUDecompositionImpl.java,425,"throw new IllegalStateException(""no matrix have been decomposed yet"");"
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,23, <p>This interface is similar to the class with similar name from the now defunct
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,24," <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library.</p>"
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,23,* <p>This interface is based on the class with similar name from the now defunct
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,24,"* <a href=""http://math.nist.gov/javanumerics/jama/"">JAMA</a> library, with the"
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,25,* following changes:</p>
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,26,* <ul>
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,27,"*   <li>several signatures have been added for the <code>solve</code> methods (in the superinterface),</code>"
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,28,"*   <li>a <code>decompose</code> method has been added (in the superinterface),</code>"
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,29,* </ul>
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,42,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,43,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,38,ealMatrix getR();
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,45,RealMatrix getR() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,51,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,52,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,45,ealMatrix getQ();
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,54,RealMatrix getQ() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,62,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,63,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,54,ealMatrix getH();
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,65,RealMatrix getH() throws IllegalStateException;
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,70,* @exception IllegalStateException if {@link
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,71,* DecompositionSolver#decompose(RealMatrix) decompose} has not been called
False,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,60,oolean isFullRank();
True,src/java/org/apache/commons/math/linear/QRDecomposition.java,src/java/org/apache/commons/math/linear/QRDecomposition.java,73,boolean isFullRank() throws IllegalStateException;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,37,rivate static final long serialVersionUID = 3965943878043764074L;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,37,private static final long serialVersionUID = 7125583145349720380L;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,45,rivate final double[][] qr;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,45,private double[][] qr;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,48, The diagonal elements of R.
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,50,rivate final double[] rDiag;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,47,/** The diagonal elements of R. */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,48,private double[] rDiag;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,62," The row dimension of the given matrix. The size of Q will be m x m, the"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,63, size of R will be m x n.
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,60,* Build a new instance.
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,61,* <p>Note that {@link #decompose(RealMatrix)} <strong>must</strong> be called
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,62,"* before any of the {@link #getQ()}, {@link #getR()}, {@link #getH()},"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,63,"* {@link #isFullRank()}, {@link #solve(double[])}, {@link #solve(RealMatrix)},"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,64,* {@link #solve(RealVector)} or {@link #solve(RealVectorImpl)} methods can be
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,65,* called.</p>
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,66,* @see #decompose(RealMatrix)
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,65,rivate final int m;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,68, The column dimension of the given matrix. The size of R will be m x n.
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,70,rivate final int n;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,68,public QRDecompositionImpl() {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,73, Calculates the QR decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,72,* Calculates the QR-decomposition of the given matrix.
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,73,* <p>Calling this constructor is equivalent to first call the no-arguments
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,74,* constructor and then call {@link #decompose(RealMatrix)}.</p>
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,76,* @exception InvalidMatrixException if matrix is not square
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,77,ublic QRDecompositionImpl(RealMatrix matrix) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,78, = matrix.getRowDimension();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,79, = matrix.getColumnDimension();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,78,public QRDecompositionImpl(RealMatrix matrix)
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,79,throws InvalidMatrixException {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,80,decompose(matrix);
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,83,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,84,public void decompose(RealMatrix matrix) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,85,final int m = matrix.getRowDimension();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,86,final int n = matrix.getColumnDimension();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,150,ublic RealMatrix getR() {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,157,public RealMatrix getR()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,158,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,162,checkDecomposed();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,165,final int m = qr.length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,166,final int n = qr[0].length;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,175,ublic RealMatrix getQ() {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,187,public RealMatrix getQ()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,188,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,192,checkDecomposed();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,195,final int m = qr.length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,196,final int n = qr[0].length;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,219,ublic RealMatrix getH() {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,236,public RealMatrix getH()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,237,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,241,checkDecomposed();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,243,final int m = qr.length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,244,final int n = qr[0].length;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,240,ublic boolean isFullRank() {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,263,public boolean isFullRank()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,264,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,266,checkDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,251,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,279,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,253,f (b.length != m) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,254,"hrow new IllegalArgumentException(""Incorrect row dimension"");"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,256,f (!isFullRank()) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,257,"hrow new InvalidMatrixException(""Matrix is rank-deficient"");"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,281,checkDecomposed();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,260,inal double[] x = new double[n];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,261,inal double[] y = b.clone();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,283,final int m = qr.length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,284,final int n = qr[0].length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,285,if (b.length != m) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,286,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,288,if (!isFullRank()) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,289,"throw new InvalidMatrixException(""Matrix is rank-deficient"");"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,263,/ apply Householder transforms to solve Q.y = b
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,264,"or (int minor = 0; minor < Math.min(m, n); minor++) {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,292,final double[] x = new double[n];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,293,final double[] y = b.clone();
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,266,ouble dotProduct = 0;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,267,or (int row = minor; row < m; row++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,268,otProduct += y[row] * qr[row][minor];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,270,otProduct /= rDiag[minor] * qr[minor][minor];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,295,// apply Householder transforms to solve Q.y = b
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,296,"for (int minor = 0; minor < Math.min(m, n); minor++) {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,272,or (int row = minor; row < m; row++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,273,[row] += dotProduct * qr[row][minor];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,298,double dotProduct = 0;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,299,for (int row = minor; row < m; row++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,300,dotProduct += y[row] * qr[row][minor];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,302,dotProduct /= rDiag[minor] * qr[minor][minor];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,304,for (int row = minor; row < m; row++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,305,y[row] += dotProduct * qr[row][minor];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,278,/ solve triangular system R.x = y
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,279,or (int row = n - 1; row >= 0; --row) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,280,[row] /= rDiag[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,281,inal double yRow = y[row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,282,[row] = yRow;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,283,or (int i = 0; i < row; i++) {
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,284,[i] -= yRow * qr[i][row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,310,// solve triangular system R.x = y
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,311,for (int row = n - 1; row >= 0; --row) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,312,y[row] /= rDiag[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,313,final double yRow = y[row];
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,314,x[row] = yRow;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,315,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,316,y[i] -= yRow * qr[i][row];
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,288,eturn x;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,320,return x;
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,294,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,326,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,330,checkDecomposed();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,339,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,340,* has not been called
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,310,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,345,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
False,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,316,"hrows IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,351,"throws IllegalStateException, IllegalArgumentException, InvalidMatrixException {"
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,353,checkDecomposed();
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,355,final int m = qr.length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,356,final int n = qr[0].length;
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,407,* Check if {@link #decompose(RealMatrix)} has been called.
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,408,* @exception IllegalStateException if {@link #decompose(RealMatrix) decompose}
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,409,* has not been called
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,411,private void checkDecomposed()
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,412,throws IllegalStateException {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,413,if (qr == null) {
True,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,src/java/org/apache/commons/math/linear/QRDecompositionImpl.java,414,"throw new IllegalStateException(""no matrix have been decomposed yet"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,91,/** test no call to decompose */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,92,public void testNoDecompose() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,93,try {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,94,new LUDecompositionImpl().getPivot();
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,95,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,96,} catch (IllegalStateException ise) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,97,// expected behavior
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,98,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,99,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,103,/** test threshold impact */
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,104,public void testThreshold() {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,105,final RealMatrix matrix = new RealMatrixImpl(new double[][] {
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,106,"{ 1.0, 2.0, 3.0},"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,107,"{ 2.0, 5.0, 3.0},"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,108,"{ 4.000001, 9.0, 9.0}"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,109,"}, false);"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,110,"assertFalse(new LUDecompositionImpl(matrix, 1.0e-5).isNonSingular());"
True,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,src/test/org/apache/commons/math/linear/LUDecompositionImplTest.java,111,"assertTrue(new LUDecompositionImpl(matrix, 1.0e-10).isNonSingular());"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,352,/** test no call to decompose */
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,353,public void testNoDecompose() {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,354,try {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,355,new QRDecompositionImpl().isFullRank();
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,356,"fail(""an exception should have been caught"");"
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,357,} catch (IllegalStateException ise) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,358,// expected behavior
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,359,} catch (Exception e) {
True,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java,360,"fail(""wrong exception caught"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,276,* Returns {@code true} if there is no double value strictly between the
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,277,* arguments or the reltaive difference between them is smaller or equal
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,278,* to the given tolerance.
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,280,* @param x First value.
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,281,* @param y Second value.
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,282,* @param eps Amount of allowed relative error.
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,283,* @return {@code true} if the values are two adjacent floating point
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,284,* numbers or they are within range of each other.
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,286,"public static boolean equalsWithRelativeTolerance(double x, double y, double eps) {"
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,287,"if (equals(x, y, 1)) {"
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,288,return true;
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,291,"final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));"
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,292,final double relativeDifference = FastMath.abs((x - y) / absoluteMax);
True,src/main/java/org/apache/commons/math3/util/Precision.java,src/main/java/org/apache/commons/math3/util/Precision.java,294,return relativeDifference <= eps;
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,30,@Test
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,31,public void testEqualsWithRelativeTolerance() {
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,32,"Assert.assertTrue(Precision.equalsWithRelativeTolerance(0d, 0d, 0d));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,33,"Assert.assertTrue(Precision.equalsWithRelativeTolerance(0d, 1 / Double.NEGATIVE_INFINITY, 0d));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,35,final double eps = 1e-14;
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,36,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.987654687654968, 1.987654687654988, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,37,"Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.987654687654968, 1.987654687654987, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,38,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.987654687654968, 1.987654687654948, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,39,"Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.987654687654968, 1.987654687654949, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,41,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(Precision.SAFE_MIN, 0.0, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,43,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.0000000000001e-300, 1e-300, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,44,"Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.00000000000001e-300, 1e-300, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,46,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY, 1.23, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,47,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.POSITIVE_INFINITY, 1.23, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,49,"Assert.assertTrue(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,50,"Assert.assertTrue(Precision.equalsWithRelativeTolerance(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,51,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,53,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NaN, 1.23, eps));"
True,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,src/test/java/org/apache/commons/math3/util/PrecisionTest.java,54,"Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NaN, Double.NaN, eps));"

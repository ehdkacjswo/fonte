is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,101, part is zero.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,101,* part is zero).
False,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,125,"ublic static Quaternion product(final Quaternion q1, final Quaternion q2) {"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,125,"public static Quaternion multiply(final Quaternion q1, final Quaternion q2) {"
False,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,154,"eturn product(this, q);"
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,154,"return multiply(this, q);"
False,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,223, Compute the dot-product of the instance by a quaternion.
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,223,* Computes the dot-product of the instance by a quaternion.
False,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,229,eturn dotProduct(q);
True,src/main/java/org/apache/commons/math3/complex/Quaternion.java,src/main/java/org/apache/commons/math3/complex/Quaternion.java,229,"return dotProduct(this, q);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,9,mport org.apache.commons.math3.util.Precision;
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,79,"inal Quaternion qResult = Quaternion.product(qA, qB);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,78,"final Quaternion qResult = Quaternion.multiply(qA, qB);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,107,"inal Quaternion conjugateOfProduct = Quaternion.product(qB.getConjugate(), qA.getConjugate());"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,108,"inal Quaternion productOfConjugate = (Quaternion.product(qA, qB)).getConjugate();"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,106,final Quaternion conjugateOfProduct = qB.getConjugate().multiply(qA.getConjugate());
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,107,final Quaternion productOfConjugate = (qA.multiply(qB)).getConjugate();
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,123,"inal Quaternion qResultQxV = Quaternion.product(quaternion, new Quaternion(vector));"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,122,"final Quaternion qResultQxV = Quaternion.multiply(quaternion, new Quaternion(vector));"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,146,"inal Quaternion qResultVxQ = Quaternion.product(new Quaternion(vector), quaternion);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,145,"final Quaternion qResultVxQ = Quaternion.multiply(new Quaternion(vector), quaternion);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,175,"inal double actual = Quaternion.dotProduct(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,174,"final double actual1 = Quaternion.dotProduct(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,175,final double actual2 = q1.dotProduct(q2);
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,177,"ssert.assertEquals(expected, actual, EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,177,"Assert.assertEquals(expected, actual1, EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,178,"Assert.assertEquals(expected, actual2, EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,210,"inal Quaternion q = Quaternion.add(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,211,"final Quaternion qa = Quaternion.add(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,212,final Quaternion qb = q1.add(q2);
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,212,"ssert.assertEquals(w, q.getQ0(), EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,213,"ssert.assertEquals(x, q.getQ1(), EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,214,"ssert.assertEquals(y, q.getQ2(), EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,215,"ssert.assertEquals(z, q.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,214,"Assert.assertEquals(w, qa.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,215,"Assert.assertEquals(x, qa.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,216,"Assert.assertEquals(y, qa.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,217,"Assert.assertEquals(z, qa.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,219,"Assert.assertEquals(w, qb.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,220,"Assert.assertEquals(x, qb.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,221,"Assert.assertEquals(y, qb.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,222,"Assert.assertEquals(z, qb.getQ3(), EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,229,"inal Quaternion q = Quaternion.subtract(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,236,"final Quaternion qa = Quaternion.subtract(q1, q2);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,237,final Quaternion qb = q1.subtract(q2);
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,231,"ssert.assertEquals(w, q.getQ0(), EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,232,"ssert.assertEquals(x, q.getQ1(), EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,233,"ssert.assertEquals(y, q.getQ2(), EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,234,"ssert.assertEquals(z, q.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,239,"Assert.assertEquals(w, qa.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,240,"Assert.assertEquals(x, qa.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,241,"Assert.assertEquals(y, qa.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,242,"Assert.assertEquals(z, qa.getQ3(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,244,"Assert.assertEquals(w, qb.getQ0(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,245,"Assert.assertEquals(x, qb.getQ1(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,246,"Assert.assertEquals(y, qb.getQ2(), EPS);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,247,"Assert.assertEquals(z, qb.getQ3(), EPS);"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,250,"inal double normSquareRef = Quaternion.product(q, q.getConjugate()).getScalarPart();"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,263,"final double normSquareRef = Quaternion.multiply(q, q.getConjugate()).getScalarPart();"
False,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,385,"inal Quaternion product = Quaternion.product(inverseQ, q);"
True,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,src/test/java/org/apache/commons/math3/complex/QuaternionTest.java,398,"final Quaternion product = Quaternion.multiply(inverseQ, q);"

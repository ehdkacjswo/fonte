is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,24, @version $Revision: 1.3 $ $Date: 2004/05/23 05:45:11 $
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,24,* @version $Revision: 1.4 $ $Date: 2004/05/24 05:29:05 $
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,30,"* Computes a paired, 2-sample t-statistic based on the data in the input"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,31,* arrays.  The t-statistic returned is equivalent to what would be returned by
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,32,"* computing the one-sample t-statistic {@link #t(double, double[])}, with"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,33,* <code>mu = 0</code> and the sample array consisting of the (signed)
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,34,* differences between corresponding entries in <code>sample1</code> and
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,35,* <code>sample2.</code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,36,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,37,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,38,* <li>The input arrays must have the same length and their common length
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,39,* must be at least 2.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,40,* </li></ul>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,42,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,43,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,44,* @return t statistic
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,45,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,46,* @throws MathException if the statistic can not be computed do to a
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,47,*         convergence or other numerical error.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,49,"double pairedT(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,50,"throws IllegalArgumentException, MathException;"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,53,"* Returns the <i>observed significance level</i>, or"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,54,"* <a href=""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,55,"* p-value</a>, associated with a paired, two-sample, two-tailed t-test"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,56,* based on the data in the input arrays.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,57,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,58,* The number returned is the smallest significance level
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,59,* at which one can reject the null hypothesis that the mean of the paired
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,60,* differences is 0 in favor of the two-sided alternative that the mean paired
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,61,"* difference is not equal to 0. For a one-sided test, divide the returned"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,62,* value by 2.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,63,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,64,* This test is equivalent to a one-sample t-test computed using
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,65,"*  {@link #tTest(double, double[])} with <code>mu = 0</code> and the sample array"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,66,*  consisting of the signed differences between corresponding elements of
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,67,* <code>sample1</code> and <code>sample2.</code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,68,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,69,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,70,* The validity of the p-value depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,71,"* t-test procedure, as discussed"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,72,"* <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,73,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,74,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,75,* <li>The input array lengths must be the same and their common length must
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,76,* be at least 2.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,77,* </li></ul>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,79,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,80,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,81,* @return p-value for t-test
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,82,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,83,* @throws MathException if an error occurs computing the p-value
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,85,"double pairedTTest(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,86,"throws IllegalArgumentException, MathException;"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,89,* Performs a paired t-test</a> evaluating that null hypothesis that the
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,90,* mean of the paired differences between <code>sample1</code> and
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,91,* <code>sample2</code> is 0 in favor of the two-sided alternative that the
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,92,"* mean paired difference is not equal to 0, with significance level"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,93,* <code>alpha</code>.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,94,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,95,* Returns <code>true</code> iff the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,96,"* confidence <code>1 - alpha</code>.  To perform a 1-sided test, use"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,97,* <code>alpha / 2</code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,98,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,99,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,100,* The validity of the test depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,101,"* t-test procedure, as discussed"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,102,"* <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,103,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,104,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,105,* <li>The input array lengths must be the same and their common length must be at least 2.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,106,* </li>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,107,* <li> <code> 0 < alpha < 0.5 </code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,108,* </li></ul>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,110,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,111,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,112,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,113,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,114,* confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,115,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,116,* @throws MathException if an error occurs performing the test
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,118,"boolean pairedTTest(double[] sample1, double[] sample2, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,119,"throws IllegalArgumentException, MathException;"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,140,"* Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"">"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,141,* t statistic </a> to use in comparing the dataset described by <code>sampleStats</code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,142,*  to <code>mu</code>.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,143,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,144,* This statistic can be used to perform a one sample t-test for the mean.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,145,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,146,* <strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,147,* <li><code>observed.getN() > = 2</code>.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,148,* </li></ul>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,150,* @param mu comparison constant
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,151,* @param sampleStats DescriptiveStatistics holding sample summary statitstics
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,152,* @return t statistic
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,153,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,155,"double t(double mu, StatisticalSummary sampleStats)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,156,throws IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,67," Returns the <i>observed significance level</i>, or"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,68," <a href=""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,69," p-value</a>, associated with a two-sample, two-tailed t-test"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,70, comparing the means of the input arrays.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,71, <p>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,72, The number returned is the smallest significance level
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,73, at which one can reject the null hypothesis that the two means are
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,74, equal in favor of the two-sided alternative that they are different.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,75," For a one-sided test, divide the returned value by 2."
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,76, <p>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,77, The test does not assume that the underlying popuation variances are
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,78, equal and it uses approximated degrees of freedom computed from the
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,79, sample data as described
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,80," <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">here</a>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,180,"* Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,181,"* 2-sample t statistic </a>, comparing the means of the datasets described"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,182,* by two {@link StatisticalSummary} instances without the assumption of equal sample variances.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,82, <strong>Usage Note:</strong><br>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,83, The validity of the p-value depends on the assumptions of the parametric
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,84," t-test procedure, as discussed"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,85," <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,184,* This statistic can be used to perform a two-sample t-test to compare
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,185,* sample means.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,88, <li>The observed array lengths must both be at least 2.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,188,* <li>The datasets described by the two Univariates must each contain
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,189,* at least 2 observations.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,91, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,92, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,93, @return p-value for t-test
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,192,* @param sampleStats1 StatisticalSummary describing data from the first sample
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,193,* @param sampleStats2 StatisticalSummary describing data from the second sample
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,194,* @return t statistic
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,95, @throws MathException if an error occurs computing the p-value
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,97,"ouble tTest(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,98,"hrows IllegalArgumentException, MathException;"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,197,"double t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,198,throws IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,101," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,102, two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,103," and <code>sample2</code> are drawn from populations with the same mean,"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,104, with significance level <code>alpha</code>.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,105, <p>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,106, Returns <code>true</code> iff the null hypothesis that the means are
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,107, equal can be rejected with confidence <code>1 - alpha</code>.  To
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,108," perform a 1-sided test, use <code>alpha / 2</code>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,109, <p>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,110, <strong>Examples:</strong><br><ol>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,111, <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,112," the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,113, </li>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,114, <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,115," at the 99% level, first verify that the measured mean of"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,116, <code>sample 1</code> is less than the mean of <code>sample 2</code>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,117," and then use <br><code>tTest(sample1, sample2, 0.005) </code>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,118, </li></ol>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,201,"* Returns the <i>observed significance level</i>, or"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,202,"* <a href=""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,203,"* p-value</a>, associated with a one-sample, two-tailed t-test"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,204,* comparing the mean of the input array with the constant <code>mu</code>.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,120, The test does not assume that the underlying popuation variances are
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,121, equal and it uses approximated degrees of freedom computed from the
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,122, sample data as described
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,123," <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">here</a>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,206,* The number returned is the smallest significance level
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,207,* at which one can reject the null hypothesis that the mean equals
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,208,* <code>mu</code> in favor of the two-sided alternative that the mean
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,209,"* is different from <code>mu</code>. For a one-sided test, divide the"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,210,* returned value by 2.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,131, <li>The observed array lengths must both be at least 2.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,132, </li>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,133, <li> <code> 0 < alpha < 0.5 </code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,218,* <li>The observed array length must be at least 2.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,136, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,137, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,138, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,139, @return true if the null hypothesis can be rejected with
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,140, confidence 1 - alpha
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,141, @throws IllegalArgumentException if the preconditions are not met
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,142, @throws MathException if an error occurs performing the test
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,221,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,222,* @param sample array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,223,* @return p-value
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,224,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,225,* @throws MathException if an error occurs computing the p-value
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,144,"oolean tTest(double[] sample1, double[] sample2, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,227,"double tTest(double mu, double[] sample)"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,189, comparing the mean of the input array with the constant <code>mu</code>.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,272,* comparing the mean of the dataset described by <code>sampleStats</code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,273,* with the constant <code>mu</code>.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,203, <li>The observed array length must be at least 2.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,287,* <li>The sample must contain at least 2 observations.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,207, @param sample array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,291,* @param sampleStats StatisticalSummary describing sample data
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,212,"ouble tTest(double mu, double[] sample)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,296,"double tTest(double mu, StatisticalSummary sampleStats)"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,216," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section2/prc22.htm#formula"">"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,217, t statistic </a> to use in comparing the dataset described by <code>sampleStats</code>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,218,  to <code>mu</code>.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,300,"* Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,301,* two-sided t-test</a> evaluating the null hypothesis that the mean of the population from
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,302,* which the dataset described by <code>stats</code> is drawn equals <code>mu</code>.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,220, This statistic can be used to perform a one sample t-test for the mean.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,304,* Returns <code>true</code> iff the null hypothesis can be
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,305,* rejected with confidence <code>1 - alpha</code>.  To
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,306,"* perform a 1-sided test, use <code>alpha / 2</code>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,222, <strong>Preconditions</strong>: <ul>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,223, <li><code>observed.getN() > = 2</code>.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,224, </li></ul>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,226, @param mu comparison constant
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,227, @param sampleStats DescriptiveStatistics holding sample summary statitstics
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,228, @return t statistic
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,229, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,231,"ouble t(double mu, StatisticalSummary sampleStats)"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,232,hrows IllegalArgumentException;
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,235," Computes a <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,236," 2-sample t statistic </a>, comparing the means of the datasets described"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,237, by two {@link StatisticalSummary} instances without the assumption of equal sample variances.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,308,* <strong>Examples:</strong><br><ol>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,309,* <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,310,"* the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,311,* </li>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,312,* <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,313,"* at the 99% level, first verify that the measured sample mean is less"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,314,* than <code>mu</code> and then use
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,315,"* <br><code>tTest(mu, sampleStats, 0.005) </code>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,316,* </li></ol>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,239, This statistic can be used to perform a two-sample t-test to compare
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,240, sample means.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,318,* <strong>Usage Note:</strong><br>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,319,* The validity of the test depends on the assumptions of the one-sample
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,320,"* parametric t-test procedure, as discussed"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,321,"* <a href=""http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample"">here</a>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,243, <li>The datasets described by the two Univariates must each contain
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,244, at least 2 observations.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,324,* <li>The sample must include at least 2 observations.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,247, @param sampleStats1 StatisticalSummary describing data from the first sample
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,248, @param sampleStats2 StatisticalSummary describing data from the second sample
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,249, @return t statistic
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,327,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,328,* @param sampleStats StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,329,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,330,* @return p-value
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,332,* @throws MathException if an error occurs computing the p-value
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,252,"ouble t(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,253,hrows IllegalArgumentException;
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,334,"boolean tTest(double mu, StatisticalSummary sampleStats, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,335,"throws IllegalArgumentException, MathException;"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,259, comparing the means of the datasets described by two Univariates.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,341,* comparing the means of the input arrays.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,277, <li>The datasets described by the two Univariates must each contain
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,278, at least 2 observations.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,359,* <li>The observed array lengths must both be at least 2.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,281, @param sampleStats1 StatisticalSummary describing data from the first sample
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,282, @param sampleStats2 StatisticalSummary describing data from the second sample
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,362,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,363,* @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,287,"ouble tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,368,"double tTest(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,292, two-sided t-test</a> evaluating the null hypothesis that <code>sampleStats1</code>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,293, and <code>sampleStats2</code> describe datasets drawn from populations with the
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,294," same mean, with significance level <code>alpha</code>."
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,373,* two-sided t-test</a> evaluating the null hypothesis that <code>sample1</code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,374,"* and <code>sample2</code> are drawn from populations with the same mean,"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,375,* with significance level <code>alpha</code>.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,302," the 95% level, use"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,303," <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,383,"* the 95% level, use <br><code>tTest(sample1, sample2, 0.05) </code>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,308," and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,388,"* and then use <br><code>tTest(sample1, sample2, 0.005) </code>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,322, <li>The datasets described by the two Univariates must each contain
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,323, at least 2 observations.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,402,* <li>The observed array lengths must both be at least 2.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,328, @param sampleStats1 StatisticalSummary describing sample data values
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,329, @param sampleStats2 StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,407,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,408,* @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,336,"oolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,337,ouble alpha)
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,415,"boolean tTest(double[] sample1, double[] sample2, double alpha)"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,341," Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,342, two-sided t-test</a> evaluating the null hypothesis that the mean of the population from
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,343, which the dataset described by <code>stats</code> is drawn equals <code>mu</code>.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,419,"* Returns the <i>observed significance level</i>, or"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,420,"* <a href=""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,421,"* p-value</a>, associated with a two-sample, two-tailed t-test"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,422,* comparing the means of the datasets described by two Univariates.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,345, Returns <code>true</code> iff the null hypothesis can be
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,346, rejected with confidence <code>1 - alpha</code>.  To
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,347," perform a 1-sided test, use <code>alpha / 2</code>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,424,* The number returned is the smallest significance level
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,425,* at which one can reject the null hypothesis that the two means are
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,426,* equal in favor of the two-sided alternative that they are different.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,427,"* For a one-sided test, divide the returned value by 2."
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,349, <strong>Examples:</strong><br><ol>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,350, <li>To test the (2-sided) hypothesis <code>sample mean = mu </code> at
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,351," the 95% level, use <br><code>tTest(mu, sampleStats, 0.05) </code>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,352, </li>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,353, <li>To test the (one-sided) hypothesis <code> sample mean < mu </code>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,354," at the 99% level, first verify that the measured sample mean is less"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,355, than <code>mu</code> and then use
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,356," <br><code>tTest(mu, sampleStats, 0.005) </code>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,357, </li></ol>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,429,* The test does not assume that the underlying popuation variances are
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,430,* equal and it uses approximated degrees of freedom computed from the
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,431,* sample data as described
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,432,"* <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,360, The validity of the test depends on the assumptions of the one-sample
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,361," parametric t-test procedure, as discussed"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,362," <a href=""http://www.basic.nwu.edu/statguidefiles/sg_glos.html#one-sample"">here</a>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,435,* The validity of the p-value depends on the assumptions of the parametric
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,436,"* t-test procedure, as discussed"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,437,"* <a href=""http://www.basic.nwu.edu/statguidefiles/ttest_unpaired_ass_viol.html"">here</a>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,365, <li>The sample must include at least 2 observations.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,440,* <li>The datasets described by the two Univariates must each contain
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,441,* at least 2 observations.
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,368, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,369, @param sampleStats StatisticalSummary describing sample data values
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,370, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,371, @return p-value
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,444,* @param sampleStats1 StatisticalSummary describing data from the first sample
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,445,* @param sampleStats2 StatisticalSummary describing data from the second sample
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,446,* @return p-value for t-test
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,375,"oolean tTest(double mu, StatisticalSummary sampleStats, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,450,"double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,379," Returns the <i>observed significance level</i>, or"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,380," <a href=""http://www.cas.lancs.ac.uk/glossary_v1.1/hyptest.html#pvalue"">"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,381," p-value</a>, associated with a one-sample, two-tailed t-test"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,382, comparing the mean of the dataset described by <code>sampleStats</code>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,383, with the constant <code>mu</code>.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,454,"* Performs a <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda353.htm"">"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,455,* two-sided t-test</a> evaluating the null hypothesis that <code>sampleStats1</code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,456,* and <code>sampleStats2</code> describe datasets drawn from populations with the
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,457,"* same mean, with significance level <code>alpha</code>."
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,385, The number returned is the smallest significance level
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,386, at which one can reject the null hypothesis that the mean equals
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,387, <code>mu</code> in favor of the two-sided alternative that the mean
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,388," is different from <code>mu</code>. For a one-sided test, divide the"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,389, returned value by 2.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,459,* Returns <code>true</code> iff the null hypothesis that the means are
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,460,* equal can be rejected with confidence <code>1 - alpha</code>.  To
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,461,"* perform a 1-sided test, use <code>alpha / 2</code>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,462,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,463,* <strong>Examples:</strong><br><ol>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,464,* <li>To test the (2-sided) hypothesis <code>mean 1 = mean 2 </code> at
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,465,"* the 95% level, use"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,466,"* <br><code>tTest(sampleStats1, sampleStats2, 0.05) </code>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,467,* </li>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,468,* <li>To test the (one-sided) hypothesis <code> mean 1 < mean 2 </code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,469,"* at the 99% level, first verify that the measured mean of"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,470,* <code>sample 1</code> is less than the mean of <code>sample 2</code>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,471,"* and then use <br><code>tTest(sampleStats1, sampleStats2, 0.005) </code>"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,472,* </li></ol>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,473,* <p>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,474,* The test does not assume that the underlying popuation variances are
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,475,* equal and it uses approximated degrees of freedom computed from the
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,476,* sample data as described
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,477,"* <a href=""http://www.itl.nist.gov/div898/handbook/prc/section3/prc31.htm"">here</a>"
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,397, <li>The sample must contain at least 2 observations.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,485,* <li>The datasets described by the two Univariates must each contain
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,486,* at least 2 observations.
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,487,* </li>
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,488,* <li> <code> 0 < alpha < 0.5 </code>
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,400, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,401, @param sampleStats StatisticalSummary describing sample data
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,402, @return p-value
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,403, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,404, @throws MathException if an error occurs computing the p-value
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,491,* @param sampleStats1 StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,492,* @param sampleStats2 StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,493,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,494,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,495,* confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,496,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,497,* @throws MathException if an error occurs performing the test
False,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,406,"ouble tTest(double mu, StatisticalSummary sampleStats)"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,499,"boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,"
True,src/java/org/apache/commons/math/stat/inference/TTest.java,src/java/org/apache/commons/math/stat/inference/TTest.java,500,double alpha)
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,29, @version $Revision: 1.2 $ $Date: 2004/05/23 05:04:48 $
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,29,* @version $Revision: 1.3 $ $Date: 2004/05/24 05:29:05 $
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,40,//----------------------------------------------- Protected methods
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,41, @param mu comparison constant
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,42, @param observed array of values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,43, @return t statistic
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,44, @throws IllegalArgumentException if input array length is less than 2
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,43,* Computes approximate degrees of freedom for 2-sample t-test.
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,45,* @param v1 first sample variance
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,46,* @param v2 second sample variance
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,47,* @param n1 first sample n
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,48,* @param n2 second sample n
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,49,* @return approximate degrees of freedom
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,46,"ublic double t(double mu, double[] observed)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,47,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,48,f ((observed == null) || (observed.length < 2)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,51,"protected double df(double v1, double v2, double n1, double n2) {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,52,return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,53,((v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) /
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,54,(n2 * n2 * (n2 - 1d)));
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,57,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,58,"* @see org.apache.commons.math.stat.inference.TTest#pairedT(double[], double[])"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,60,"public double pairedT(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,61,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,62,if ((sample1 == null) || (sample2 == null ||
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,63,"Math.min(sample1.length, sample2.length) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,51,"eturn t(StatUtils.mean(observed), mu, StatUtils.variance(observed), observed.length);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,66,"double meanDifference = StatUtils.meanDifference(sample1, sample2);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,67,"return t(meanDifference, 0,"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,68,"StatUtils.varianceDifference(sample1, sample2, meanDifference),"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,69,(double) sample1.length);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,55, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,56, @param sample array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,57, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,58, @return p-value
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,59, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,60, @throws MathException if an error occurs computing the p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,72,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,73,"* @see org.apache.commons.math.stat.inference.TTest#pairedTTest(double[], double[])"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,62,"ublic boolean tTest(double mu, double[] sample, double alpha)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,63,"hrows IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,64,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,65,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,67,"eturn (tTest(mu, sample) < alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,75,"public double pairedTTest(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,76,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,77,"double meanDifference = StatUtils.meanDifference(sample1, sample2);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,78,"return tTest(meanDifference, 0,"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,79,"StatUtils.varianceDifference(sample1, sample2, meanDifference),"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,80,(double) sample1.length);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,71, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,72, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,73, @return t-statistic
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,74, @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,83,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,84,"* @see org.apache.commons.math.stat.inference.TTest#pairedTTest(double[], double[], double)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,76,"ublic double t(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,77,hrows IllegalArgumentException {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,78,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,79,"ath.min(sample1.length, sample2.length) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,80,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,82,"eturn t(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,83,"tatUtils.variance(sample2),  (double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,86,public boolean pairedTTest(
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,87,"double[] sample1,"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,88,"double[] sample2,"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,89,double alpha)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,90,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,91,// TODO Auto-generated method stub
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,92,return false;
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,88, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,89, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,90, @return tTest p-value
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,91, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,92, @throws MathException if an error occurs computing the p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,96,* Computes t test statistic for 1-sample t-test.
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,98,* @param m sample mean
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,99,* @param mu constant to test against
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,100,* @param v sample variance
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,101,* @param n sample n
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,102,* @return t test statistic
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,94,"ublic double tTest(double[] sample1, double[] sample2)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,95,"hrows IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,96,f ((sample1 == null) || (sample2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,97,"ath.min(sample1.length, sample2.length) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,98,"hrow new IllegalArgumentException(""insufficient data"");"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,100,"eturn tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,101,"tatUtils.variance(sample2), (double) sample1.length, (double) sample2.length);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,104,"protected double t(double m, double mu, double v, double n) {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,105,return (m - mu) / Math.sqrt(v / n);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,105, @param sample1 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,106, @param sample2 array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,107, @param alpha significance level
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,108, @return true if the null hypothesis can be rejected with
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,109,     confidence 1 - alpha
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,110, @throws IllegalArgumentException if the preconditions are not met
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,111, @throws MathException if an error occurs performing the test
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,109,* Computes t test statistic for 2-sample t-test.
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,111,* @param m1 first sample mean
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,112,* @param m2 second sample mean
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,113,* @param v1 first sample variance
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,114,* @param v2 second sample variance
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,115,* @param n1 first sample n
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,116,* @param n2 second sample n
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,117,* @return t test statistic
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,113,"ublic boolean tTest(double[] sample1, double[] sample2, double alpha)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,114,"hrows IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,115,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,116,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,118,"eturn (tTest(sample1, sample2) < alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,119,"protected double t(double m1, double m2,  double v1, double v2, double n1,double n2)  {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,120,return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,122, @param mu constant value to compare sample mean against
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,123, @param sample array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,124, @return p-value
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,125, @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,126, @throws MathException if an error occurs computing the p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,124,* @param mu comparison constant
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,125,* @param observed array of values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,126,* @return t statistic
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,127,* @throws IllegalArgumentException if input array length is less than 2
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,128,"ublic double tTest(double mu, double[] sample)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,129,"hrows IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,130,f ((sample == null) || (sample.length < 2)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,129,"public double t(double mu, double[] observed)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,130,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,131,if ((observed == null) || (observed.length < 2)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,133,"eturn tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample), sample.length);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,134,"return t(StatUtils.mean(observed), mu, StatUtils.variance(observed), observed.length);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,152,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,153,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,154,* @return t-statistic
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,155,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,157,"public double t(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,158,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,159,if ((sample1 == null) || (sample2 == null ||
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,160,"Math.min(sample1.length, sample2.length) < 2)) {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,161,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,163,"return t(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,164,"StatUtils.variance(sample2),  (double) sample1.length, (double) sample2.length);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,168, @param sampleStats1 StatisticalSummary describing data from the first sample
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,169, @param sampleStats2 StatisticalSummary describing data from the second sample
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,170, @return p-value for t-test
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,171, @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,185,"* Computes p-value for 2-sided, 1-sample t-test."
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,187,* @param m sample mean
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,188,* @param mu constant to test against
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,189,* @param v sample variance
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,190,* @param n sample n
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,191,* @return p-value
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,174,"ublic double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,175,"hrows IllegalArgumentException, MathException {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,176,f ((sampleStats1 == null) || (sampleStats2 == null ||
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,177,"ath.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,178,"hrow new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,180,"eturn tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,181,"ampleStats2.getVariance(), (double) sampleStats1.getN(), (double) sampleStats2.getN());"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,194,"protected double tTest(double m, double mu, double v, double n)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,195,throws MathException {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,196,"double t = Math.abs(t(m, mu, v, n));"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,197,TDistribution tDistribution =
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,198,DistributionFactory.newInstance().createTDistribution(n - 1);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,199,"return 1.0 - tDistribution.cumulativeProbability(-t, t);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,185, @param sampleStats1 StatisticalSummary describing sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,186, @param sampleStats2 StatisticalSummary describing sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,187, @param alpha significance level of the test
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,188, @return true if the null hypothesis can be rejected with
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,189,     confidence 1 - alpha
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,190, @throws IllegalArgumentException if the preconditions are not met
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,191, @throws MathException if an error occurs performing the test
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,203,"* Computes p-value for 2-sided, 2-sample t-test."
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,205,* @param m1 first sample mean
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,206,* @param m2 second sample mean
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,207,* @param v1 first sample variance
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,208,* @param v2 second sample variance
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,209,* @param n1 first sample n
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,210,* @param n2 second sample n
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,211,* @return p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,212,* @throws MathException if an error occurs computing the p-value
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,193,"ublic boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,194,ouble alpha)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,214,"protected double tTest(double m1, double m2, double v1, double v2, double n1, double n2)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,215,throws MathException {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,216,"double t = Math.abs(t(m1, m2, v1, v2, n1, n2));"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,217,TDistribution tDistribution =
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,218,"DistributionFactory.newInstance().createTDistribution(df(v1, v2, n1, n2));"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,219,"return 1.0 - tDistribution.cumulativeProbability(-t, t);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,223,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,224,* @param sample array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,225,* @return p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,226,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,227,* @throws MathException if an error occurs computing the p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,229,"public double tTest(double mu, double[] sample)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,196,f ((alpha <= 0) || (alpha > 0.5)) {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,197,"hrow new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,231,if ((sample == null) || (sample.length < 2)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,232,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,199,"eturn (tTest(sampleStats1, sampleStats2) < alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,234,"return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample), sample.length);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,204, @param sampleStats StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,239,* @param sample array of sample data values
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,210,"ublic boolean tTest( double mu, StatisticalSummary sampleStats,double alpha)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,245,"public boolean tTest(double mu, double[] sample, double alpha)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,215,"eturn (tTest(mu, sampleStats) < alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,250,"return (tTest(mu, sample) < alpha);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,233,/----------------------------------------------- Protected methods
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,236, Computes approximate degrees of freedom for 2-sample t-test.
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,238, @param v1 first sample variance
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,239, @param v2 second sample variance
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,240, @param n1 first sample n
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,241, @param n2 second sample n
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,242, @return approximate degrees of freedom
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,269,* @param mu constant value to compare sample mean against
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,270,* @param sampleStats StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,271,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,272,* @return p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,273,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,274,* @throws MathException if an error occurs computing the p-value
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,244,"rotected double df(double v1, double v2, double n1, double n2) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,245,eturn (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,246,(v1 * v1) / (n1 * n1 * (n1 - 1d)) + (v2 * v2) /
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,247,n2 * n2 * (n2 - 1d)));
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,276,"public boolean tTest( double mu, StatisticalSummary sampleStats,double alpha)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,277,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,278,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,279,"throw new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,281,"return (tTest(mu, sampleStats) < alpha);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,251, Computes t test statistic for 2-sample t-test.
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,253, @param m1 first sample mean
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,254, @param m2 second sample mean
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,255, @param v1 first sample variance
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,256, @param v2 second sample variance
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,257, @param n1 first sample n
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,258, @param n2 second sample n
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,259, @return t test statistic
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,286,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,287,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,288,* @return tTest p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,289,* @throws IllegalArgumentException if the precondition is not met
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,290,* @throws MathException if an error occurs computing the p-value
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,261,"rotected double t(double m1, double m2,  double v1, double v2, double n1,double n2)  {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,262,eturn (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,292,"public double tTest(double[] sample1, double[] sample2)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,293,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,294,if ((sample1 == null) || (sample2 == null ||
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,295,"Math.min(sample1.length, sample2.length) < 2)) {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,296,"throw new IllegalArgumentException(""insufficient data"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,298,"return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2), StatUtils.variance(sample1),"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,299,"StatUtils.variance(sample2), (double) sample1.length, (double) sample2.length);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,266, Computes t test statistic for 1-sample t-test.
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,268, @param m sample mean
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,269, @param mu constant to test against
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,270, @param v sample variance
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,271, @param n sample n
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,272, @return t test statistic
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,303,* @param sample1 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,304,* @param sample2 array of sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,305,* @param alpha significance level
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,306,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,307,*     confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,308,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,309,* @throws MathException if an error occurs performing the test
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,274,"rotected double t(double m, double mu, double v, double n) {"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,275,eturn (m - mu) / Math.sqrt(v / n);
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,311,"public boolean tTest(double[] sample1, double[] sample2, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,312,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,313,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,314,"throw new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,316,"return (tTest(sample1, sample2) < alpha);"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,279," Computes p-value for 2-sided, 2-sample t-test."
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,281, @param m1 first sample mean
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,282, @param m2 second sample mean
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,283, @param v1 first sample variance
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,284, @param v2 second sample variance
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,285, @param n1 first sample n
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,286, @param n2 second sample n
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,287, @return p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,320,* @param sampleStats1 StatisticalSummary describing data from the first sample
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,321,* @param sampleStats2 StatisticalSummary describing data from the second sample
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,322,* @return p-value for t-test
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,323,* @throws IllegalArgumentException if the precondition is not met
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,290,"rotected double tTest(double m1, double m2, double v1, double v2, double n1, double n2)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,291,hrows MathException {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,292,"ouble t = Math.abs(t(m1, m2, v1, v2, n1, n2));"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,293,Distribution tDistribution =
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,294,"istributionFactory.newInstance().createTDistribution(df(v1, v2, n1, n2));"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,295,"eturn 1.0 - tDistribution.cumulativeProbability(-t, t);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,326,"public double tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2)"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,327,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,328,if ((sampleStats1 == null) || (sampleStats2 == null ||
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,329,"Math.min(sampleStats1.getN(), sampleStats2.getN()) < 2)) {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,330,"throw new IllegalArgumentException(""insufficient data for t statistic"");"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,332,"return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,333,"sampleStats2.getVariance(), (double) sampleStats1.getN(), (double) sampleStats2.getN());"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,299," Computes p-value for 2-sided, 1-sample t-test."
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,301, @param m sample mean
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,302, @param mu constant to test against
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,303, @param v sample variance
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,304, @param n sample n
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,305, @return p-value
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,306, @throws MathException if an error occurs computing the p-value
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,337,* @param sampleStats1 StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,338,* @param sampleStats2 StatisticalSummary describing sample data values
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,339,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,340,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,341,*     confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,342,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,343,* @throws MathException if an error occurs performing the test
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,308,"rotected double tTest(double m, double mu, double v, double n)"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,309,hrows MathException {
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,310,"ouble t = Math.abs(t(m, mu, v, n));"
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,311,Distribution tDistribution =
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,312,istributionFactory.newInstance().createTDistribution(n - 1);
False,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,313,"eturn 1.0 - tDistribution.cumulativeProbability(-t, t);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,345,"public boolean tTest(StatisticalSummary sampleStats1, StatisticalSummary sampleStats2,"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,346,double alpha)
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,347,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,348,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,349,"throw new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,src/java/org/apache/commons/math/stat/inference/TTestImpl.java,351,"return (tTest(sampleStats1, sampleStats2) < alpha);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,17,package org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,19,import org.apache.commons.discovery.tools.DiscoverClass;
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,22,* Abstract factory class used to create {@link FirstOrderIntegrator} instances.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,23,* <p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,24,* Integrators implementing the following fixed stepsize algorithms are supported:
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,25,* <ul>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,26,* <li>Euler</li>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,27,* <li>midpoint</li>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,28,* <li>classical Runge-Kutta</li>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,29,* <li>Gill</li>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,30,* <li>3/8</li>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,31,* </ul>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,32,"* Concrete factories extending this class also specify a default fixed stepsize integrator,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,33,* instances of which are returned by <code>newDefaultFixedStepsizeIntegrator</code>.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,34,* <p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,35,* <p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,36,* Integrators implementing the following adaptive stepsize algorithms are supported:
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,37,* <ul>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,38,* <li>Higham-Hall</li>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,39,* <li>Dormand-Prince 5(4)</li>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,40,"* <li>Dormand-Pince 8(5,3)</li>"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,41,* <li>Gragg-Bulirsch-Stoer</li>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,42,* </ul>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,43,"* Concrete factories extending this class also specify default adaptive stepsize integrators,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,44,* instances of which are returned by the two <code>newDefaultAdaptiveStepsizeIntegrator</code>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,45,* methods.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,46,* <p>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,47,* Common usage:<pre>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,48,* FirstOrderIntegratorFactory factory = FirstOrderIntegratorFactory.newInstance();
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,50,"* // create a Dormand-Prince 8(5,3) integrator to use with some step control parameters"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,51,* AdaptiveStepsizeIntegrator integrator =
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,52,"*   factory.newDormandPrince853Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,53,"*                                         scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,54,*                                         scalRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,55,* </pre>
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,57,"* <a href=""http://jakarta.apache.org/commons/discovery/"">Jakarta Commons Discovery</a>"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,58,* is used to determine the concrete factory returned by
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,59,* <code>FirstOrderIntegratorFactory.newInstance().</code>  The default is
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,60,* {@link FirstOrderIntegratorFactoryImpl}
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,62,"* @version $Revision: 480440 $ $Date: 2006-11-29 08:14:12 +0100 (mer., 29 nov. 2006) $"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,64,public abstract class FirstOrderIntegratorFactory {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,67,* Default constructor.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,69,protected FirstOrderIntegratorFactory() {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,73,* Create a new factory.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,74,* @return a new factory
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,76,public static FirstOrderIntegratorFactory newInstance() {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,77,FirstOrderIntegratorFactory factory = null;
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,78,try {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,79,DiscoverClass dc = new DiscoverClass();
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,80,factory = (FirstOrderIntegratorFactory) dc.newInstance(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,81,"FirstOrderIntegratorFactory.class,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,82,"""org.apache.commons.math.analysis.FirstOrderIntegratorFactoryImpl"");"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,83,} catch(Throwable t) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,84,return new FirstOrderIntegratorFactoryImpl();
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,86,return factory;
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,90,* Create a new fixed stepsize {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,91,* The actual integrator returned is determined by the underlying factory.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,92,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,93,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,95,public abstract FirstOrderIntegrator newDefaultFixedStepsizeIntegrator(double step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,98,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,99,* The actual integrator returned is determined by the underlying factory.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,100,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,101,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,102,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,103,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,104,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,105,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,106,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,108,public abstract AdaptiveStepsizeIntegrator newDefaultAdaptiveStepsizeIntegrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,109,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,110,"double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,111,double scalRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,114,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,115,* The actual integrator returned is determined by the underlying factory.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,116,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,117,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,118,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,119,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,120,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,121,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,122,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,124,public abstract AdaptiveStepsizeIntegrator newDefaultAdaptiveStepsizeIntegrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,125,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,126,"double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,127,double[] vecRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,130,* Create a new {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,131,* The integrator is an implementation of the Euler method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,132,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,133,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,135,public abstract FirstOrderIntegrator newEulerIntegrator(double step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,138,* Create a new {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,139,* The integrator is an implementation of the midpoint method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,140,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,141,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,143,public abstract FirstOrderIntegrator newMidpointIntegrator(double step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,146,* Create a new {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,147,* The integrator is an implementation of the classical Runge-Kutta method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,148,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,149,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,151,public abstract FirstOrderIntegrator newClassicalRungeKuttaIntegrator(double step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,154,* Create a new {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,155,* The integrator is an implementation of the Gill method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,156,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,157,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,159,public abstract FirstOrderIntegrator newGillIntegrator(double step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,162,* Create a new {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,163,* The integrator is an implementation of the 3/8 method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,164,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,165,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,167,public abstract FirstOrderIntegrator newThreeEighthesIntegrator(double step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,170,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,171,* The integrator is an implementation of the Higham-Hall method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,172,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,173,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,174,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,175,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,176,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,177,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,178,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,180,public abstract AdaptiveStepsizeIntegrator newHighamHall54Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,181,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,182,"double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,183,double scalRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,186,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,187,* The integrator is an implementation of the Higham-Hall method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,188,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,189,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,190,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,191,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,192,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,193,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,194,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,196,public abstract AdaptiveStepsizeIntegrator newHighamHall54Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,197,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,198,"double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,199,double[] vecRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,202,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,203,* The integrator is an implementation of the Dormand-Prince 5(4) method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,204,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,205,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,206,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,207,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,208,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,209,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,210,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,212,public abstract AdaptiveStepsizeIntegrator newDormandPrince54Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,213,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,214,"double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,215,double scalRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,218,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,219,* The integrator is an implementation of the Dormand-Prince 5(4) method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,220,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,221,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,222,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,223,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,224,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,225,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,226,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,228,public abstract AdaptiveStepsizeIntegrator newDormandPrince54Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,229,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,230,"double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,231,double[] vecRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,234,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,235,"* The integrator is an implementation of the Dormand-Prince 8(5,3) method."
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,236,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,237,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,238,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,239,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,240,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,241,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,242,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,244,public abstract AdaptiveStepsizeIntegrator newDormandPrince853Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,245,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,246,"double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,247,double scalRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,250,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,251,"* The integrator is an implementation of the Dormand-Prince 8(5,3) method."
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,252,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,253,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,254,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,255,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,256,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,257,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,258,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,260,public abstract AdaptiveStepsizeIntegrator newDormandPrince853Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,261,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,262,"double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,263,double[] vecRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,266,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,267,* The integrator is an implementation of the Gragg-Burlisch-Stoer method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,268,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,269,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,270,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,271,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,272,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,273,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,274,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,276,public abstract AdaptiveStepsizeIntegrator newGraggBulirschStoerIntegrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,277,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,278,"double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,279,double scalRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,282,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,283,* The integrator is an implementation of the Gragg-Burlisch-Stoer method.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,284,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,285,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,286,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,287,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,288,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,289,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,290,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,292,public abstract AdaptiveStepsizeIntegrator newGraggBulirschStoerIntegrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,293,"double minStep, double maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,294,"double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactory.java,295,double[] vecRelativeTolerance);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,17,package org.apache.commons.math.ode;
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,20,* Provide a default implementation for several functions useful to generic
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,21,* integrators.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,23,"* @version $Revision: 480440 $ $Date: 2006-11-29 08:14:12 +0100 (mer., 29 nov. 2006) $"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,25,public class FirstOrderIntegratorFactoryImpl extends
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,26,FirstOrderIntegratorFactory {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,29,* Create a new fixed stepsize {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,30,* This factory buid a {@link ClassicalRungeKuttaIntegrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,31,* classical Runge-Kutta} integrator by default.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,32,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,33,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,35,public FirstOrderIntegrator newDefaultFixedStepsizeIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,36,return newClassicalRungeKuttaIntegrator(step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,40,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,41,* This factory buid a {@link DormandPrince853Integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,42,"* Dormand-Prince 8(5,3)} integrator by default."
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,43,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,44,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,45,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,46,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,47,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,48,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,49,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,51,public AdaptiveStepsizeIntegrator newDefaultAdaptiveStepsizeIntegrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,52,"double minStep, double maxStep, double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,53,double scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,54,"return newDormandPrince853Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,55,"scalAbsoluteTolerance, scalRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,59,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,60,* This factory buid a {@link DormandPrince853Integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,61,"* Dormand-Prince 8(5,3)} integrator by default."
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,62,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,63,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,64,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,65,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,66,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,67,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,68,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,70,public AdaptiveStepsizeIntegrator newDefaultAdaptiveStepsizeIntegrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,71,"double minStep, double maxStep, double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,72,double[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,73,"return newDormandPrince853Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,74,"vecAbsoluteTolerance, vecRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,78,* Create a new fixed stepsize {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,79,* This factory buid a {@link EulerIntegrator Euler} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,80,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,81,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,83,public FirstOrderIntegrator newEulerIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,84,return new EulerIntegrator(step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,88,* Create a new fixed stepsize {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,89,* This factory buid a {@link MidpointIntegrator midpoint} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,90,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,91,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,93,public FirstOrderIntegrator newMidpointIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,94,return new MidpointIntegrator(step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,97,* Create a new fixed stepsize {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,98,* This factory buid a {@link ClassicalRungeKuttaIntegrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,99,* classical Runge-Kutta} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,100,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,101,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,104,public FirstOrderIntegrator newClassicalRungeKuttaIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,105,return new ClassicalRungeKuttaIntegrator(step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,109,* Create a new fixed stepsize {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,110,* This factory buid a {@link GillIntegrator Gill} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,111,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,112,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,114,public FirstOrderIntegrator newGillIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,115,return new GillIntegrator(step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,119,* Create a new fixed stepsize {@link FirstOrderIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,120,* This factory buid a {@link ThreeEighthesIntegrator 3/8} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,121,* @param step the fixed stepsize.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,122,* @return the new fixed step integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,124,public FirstOrderIntegrator newThreeEighthesIntegrator(double step) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,125,return new ThreeEighthesIntegrator(step);
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,129,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,130,* This factory buid a {@link HighamHall54Integrator Higham-Hall} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,131,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,132,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,133,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,134,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,135,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,136,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,137,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,139,"public AdaptiveStepsizeIntegrator newHighamHall54Integrator(double minStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,140,"double maxStep, double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,141,double scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,142,"return new HighamHall54Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,143,"scalAbsoluteTolerance, scalRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,147,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,148,* This factory buid a {@link HighamHall54Integrator Higham-Hall} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,149,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,150,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,151,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,152,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,153,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,154,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,155,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,157,"public AdaptiveStepsizeIntegrator newHighamHall54Integrator(double minStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,158,"double maxStep, double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,159,double[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,160,"return new HighamHall54Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,161,"vecAbsoluteTolerance, vecRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,165,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,166,* This factory buid a {@link DormandPrince54Integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,167,* Dormand-Prince 5(4)} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,168,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,169,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,170,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,171,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,172,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,173,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,174,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,176,public AdaptiveStepsizeIntegrator newDormandPrince54Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,177,"double minStep, double maxStep, double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,178,double scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,179,"return new DormandPrince54Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,180,"scalAbsoluteTolerance, scalRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,184,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,185,* This factory buid a {@link DormandPrince54Integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,186,* Dormand-Prince 5(4)} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,187,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,188,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,189,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,190,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,191,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,192,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,193,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,195,"public AdaptiveStepsizeIntegrator newDormandPrince54Integrator(double minStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,196,"double maxStep, double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,197,double[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,198,"return new DormandPrince54Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,199,"vecAbsoluteTolerance, vecRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,203,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,204,* This factory buid a {@link DormandPrince853Integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,205,"* Dormand-Prince 8(5,3)} integrator."
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,206,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,207,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,208,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,209,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,210,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,211,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,212,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,214,public AdaptiveStepsizeIntegrator newDormandPrince853Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,215,"double minStep, double maxStep, double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,216,double scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,217,"return new DormandPrince853Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,218,"scalAbsoluteTolerance, scalRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,222,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,223,* This factory buid a {@link DormandPrince853Integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,224,"* Dormand-Prince 8(5,3)} integrator."
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,225,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,226,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,227,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,228,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,229,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,230,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,231,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,233,public AdaptiveStepsizeIntegrator newDormandPrince853Integrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,234,"double minStep, double maxStep, double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,235,double[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,236,"return new DormandPrince853Integrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,237,"vecAbsoluteTolerance, vecRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,241,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,242,* This factory buid a {@link GraggBulirschStoerIntegrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,243,* Gragg-Bulirsch-Stoer} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,244,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,245,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,246,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,247,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,248,* @param scalAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,249,* @param scalRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,250,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,252,public AdaptiveStepsizeIntegrator newGraggBulirschStoerIntegrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,253,"double minStep, double maxStep, double scalAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,254,double scalRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,255,"return new GraggBulirschStoerIntegrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,256,"scalAbsoluteTolerance, scalRelativeTolerance);"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,260,* Create a new {@link AdaptiveStepsizeIntegrator}.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,261,* This factory buid a {@link GraggBulirschStoerIntegrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,262,* Gragg-Bulirsch-Stoer} integrator.
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,263,* @param minStep minimal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,264,"* integration), the last step can be smaller than this"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,265,* @param maxStep maximal step (must be positive even for backward
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,266,* integration)
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,267,* @param vecAbsoluteTolerance allowed absolute error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,268,* @param vecRelativeTolerance allowed relative error
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,269,* @return the new adaptive stepsize integrator
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,271,public AdaptiveStepsizeIntegrator newGraggBulirschStoerIntegrator(
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,272,"double minStep, double maxStep, double[] vecAbsoluteTolerance,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,273,double[] vecRelativeTolerance) {
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,274,"return new GraggBulirschStoerIntegrator(minStep, maxStep,"
True,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,src/java/org/apache/commons/math/ode/FirstOrderIntegratorFactoryImpl.java,275,"vecAbsoluteTolerance, vecRelativeTolerance);"
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,40,raggBulirschStoerIntegrator integrator =
False,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,41,"ew GraggBulirschStoerIntegrator(0.0, 1.0, 1.0e-10, 1.0e-10);"
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,40,FirstOrderIntegratorFactory factory =
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,41,FirstOrderIntegratorFactory.newInstance();
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,42,AdaptiveStepsizeIntegrator integrator =
True,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,src/test/org/apache/commons/math/ode/GraggBulirschStoerIntegratorTest.java,43,"factory.newGraggBulirschStoerIntegrator(0.0, 1.0, 1.0e-10, 1.0e-10);"

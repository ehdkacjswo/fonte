is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,131,"NTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,131,"INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,24,mport org.apache.commons.math.linear.RealMatrix;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,40, s<sub>k</sub>(n) = h<sup>k</sup>/k! y(k)<sub>n</sub> for k<sup>th</sup> derivative
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,39,* s<sub>k</sub>(n) = h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub> for k<sup>th</sup> derivative
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,51," large step changes because when the step is multiplied by a factor a, the"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,50,"* large step changes because when the step is multiplied by factor a, the"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,68," <p>(h<sup>2</sup>/2 y'', h<sup>3</sup>/6 y''' ..., h<sup>k</sup>/k! y(k))</p>"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,67,"* <p>(h<sup>2</sup>/2 y'', h<sup>3</sup>/6 y''' ..., h<sup>k</sup>/k! y<sup>(k)</sup>)</p>"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,117,f (nSteps <= 0) {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,116,if (nSteps <= 1) {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,119,"ocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,118,"LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS,"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,222,tarter.addStepHandler(new NordsieckInitializer(y0.length));
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,221,"starter.addStepHandler(new NordsieckInitializer(nSteps, y0.length));"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,228, catch (MathUserException mue) {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,229,f (!(mue instanceof InitializationCompletedMarkerException)) {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,230,/ this is not the expected nominal interruption of the start integrator
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,231,hrow mue;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,227,} catch (InitializationCompletedMarkerException icme) {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,228,// this is the expected nominal interruption of the start integrator
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,241, @param first first scaled derivative at step start
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,242," @param multistep scaled derivatives after step start (hy'1, ..., hy'k-1)"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,243, will be modified
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,244, @return high order scaled derivatives at step start
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,237,* @param h step size to use for scaling
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,238,* @param t first steps times
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,239,* @param y first steps states
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,240,* @param yDot first steps derivatives
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,241,"* @return Nordieck vector at first step (h<sup>2</sup>/2 y''<sub>n</sub>,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,242,* h<sup>3</sup>/6 y'''<sub>n</sub> ... h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub>)
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,246,"rotected abstract Array2DRowRealMatrix initializeHighOrderDerivatives(final double[] first,"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,247,inal double[][] multistep);
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,244,"protected abstract Array2DRowRealMatrix initializeHighOrderDerivatives(final double h, final double[] t,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,245,"final double[][] y,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,246,final double[][] yDot);
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,302, @param first first scaled derivative at step start
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,303," @param multistep scaled derivatives after step start (hy'1, ..., hy'k-1)"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,304, will be modified
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,305, @return high order derivatives at step start
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,301,* @param h step size to use for scaling
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,302,* @param t first steps times
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,303,* @param y first steps states
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,304,* @param yDot first steps derivatives
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,305,"* @return Nordieck vector at first step (h<sup>2</sup>/2 y''<sub>n</sub>,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,306,* h<sup>3</sup>/6 y'''<sub>n</sub> ... h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub>)
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,307,"ealMatrix initializeHighOrderDerivatives(double[] first, double[][] multistep);"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,308,"Array2DRowRealMatrix initializeHighOrderDerivatives(final double h, final double[] t,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,309,"final double[][] y,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,310,final double[][] yDot);
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,313,** Problem dimension. */
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,314,rivate final int n;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,316,/** Steps counter. */
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,317,int count;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,319,/** First steps times. */
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,320,final double[] t;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,322,/** First steps states. */
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,323,final double[][] y;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,325,/** First steps derivatives. */
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,326,final double[][] yDot;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,329,* @param nSteps number of steps of the multistep method (excluding the one being computed)
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,319,ublic NordsieckInitializer(final int n) {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,320,his.n = n;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,332,"public NordsieckInitializer(final int nSteps, final int n) {"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,333,this.count = 0;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,334,this.t     = new double[nSteps];
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,335,this.y     = new double[nSteps][n];
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,336,this.yDot  = new double[nSteps][n];
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,324,"ublic void handleStep(StepInterpolator interpolator, boolean isLast)"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,325,hrows MathUserException {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,340,"public void handleStep(StepInterpolator interpolator, boolean isLast) {"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,329,tepStart = prev;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,330,tepSize  = (curr - prev) / (nSteps + 1);
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,332,/ compute the first scaled derivative
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,333,nterpolator.setInterpolatedTime(prev);
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,334,caled = interpolator.getInterpolatedDerivatives().clone();
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,335,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,336,caled[j] *= stepSize;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,345,if (count == 0) {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,346,"// first step, we need to store also the beginning of the step"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,347,interpolator.setInterpolatedTime(prev);
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,348,t[0] = prev;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,349,"System.arraycopy(interpolator.getInterpolatedState(), 0,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,350,"y[0],    0, y[0].length);"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,351,"System.arraycopy(interpolator.getInterpolatedDerivatives(), 0,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,352,"yDot[0], 0, yDot[0].length);"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,339,/ compute the high order scaled derivatives
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,340,inal double[][] multistep = new double[nSteps][];
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,341,or (int i = 1; i <= nSteps; ++i) {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,342,nterpolator.setInterpolatedTime(prev + stepSize * i);
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,343,inal double[] msI = interpolator.getInterpolatedDerivatives().clone();
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,344,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,345,sI[j] *= stepSize;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,355,// store the end of the step
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,356,++count;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,357,interpolator.setInterpolatedTime(curr);
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,358,t[count] = curr;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,359,"System.arraycopy(interpolator.getInterpolatedState(), 0,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,360,"y[count],    0, y[count].length);"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,361,"System.arraycopy(interpolator.getInterpolatedDerivatives(), 0,"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,362,"yDot[count], 0, yDot[count].length);"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,364,if (count == t.length - 1) {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,366,"// this was the last step we needed, we can compute the derivatives"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,367,stepStart = t[0];
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,368,stepSize  = (t[t.length - 1] - t[0]) / (t.length - 1);
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,370,// first scaled derivative
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,371,scaled = yDot[0].clone();
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,372,for (int j = 0; j < scaled.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,373,scaled[j] *= stepSize;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,347,ultistep[i - 1] = msI;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,349,"ordsieck = initializeHighOrderDerivatives(scaled, multistep);"
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,351,/ stop the integrator after the first step has been handled
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,352,hrow new InitializationCompletedMarkerException();
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,376,// higher order derivatives
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,377,"nordsieck = initializeHighOrderDerivatives(stepSize, t, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,379,// stop the integrator now that all needed steps have been handled
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,380,throw new InitializationCompletedMarkerException();
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,370,xtends MathUserException {
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,400,extends MathRuntimeException {
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,373,rivate static final long serialVersionUID = -4105805787353488365L;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,403,private static final long serialVersionUID = -1914085471038046418L;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,59, s<sub>k</sub>(n) = h<sup>k</sup>/k! y(k)<sub>n</sub> for k<sup>th</sup> derivative
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,59,* s<sub>k</sub>(n) = h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub> for k<sup>th</sup> derivative
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,38, Build an Adams integrator with the given order and step control prameters.
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,38,* Build an Adams integrator with the given order and step control parameters.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,96,"rotected Array2DRowRealMatrix initializeHighOrderDerivatives(final double[] first,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,97,inal double[][] multistep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,98,"eturn transformer.initializeHighOrderDerivatives(first, multistep);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,96,"protected Array2DRowRealMatrix initializeHighOrderDerivatives(final double h, final double[] t,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,97,"final double[][] y,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,98,final double[][] yDot) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,99,"return transformer.initializeHighOrderDerivatives(h, t, y, yDot);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,65, s<sub>k</sub>(n) = h<sup>k</sup>/k! y(k)<sub>n</sub> for k<sup>th</sup> derivative
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,65,* s<sub>k</sub>(n) = h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub> for k<sup>th</sup> derivative
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,27,mport org.apache.commons.math.linear.DefaultFieldMatrixChangingVisitor;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,31,import org.apache.commons.math.linear.QRDecomposition;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,32,import org.apache.commons.math.linear.QRDecompositionImpl;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,34, <p>This class i used by {@link AdamsBashforthIntegrator Adams-Bashforth} and
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,35,* <p>This class is used by {@link AdamsBashforthIntegrator Adams-Bashforth} and
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,45, s<sub>k</sub>(n) = h<sup>k</sup>/k! y(k)<sub>n</sub> for k<sup>th</sup> derivative
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,46,* s<sub>k</sub>(n) = h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub> for k<sup>th</sup> derivative
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,139,"** Initialization matrix for the higher order derivatives wrt y'', y''' ... */"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,140,rivate final Array2DRowRealMatrix initialization;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,176,"/ initialization coefficients, computed from a R matrix = abs(P)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,177,igP.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<BigFraction>(BigFraction.ZERO) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,178,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,179,Override
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,180,"ublic BigFraction visit(int row, int column, BigFraction value) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,181,eturn ((column & 0x1) == 0x1) ? value : value.negate();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,184,ieldMatrix<BigFraction> bigRInverse =
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,185,ew FieldLUDecompositionImpl<BigFraction>(bigP).getSolver().getInverse();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,188,nitialization = MatrixUtils.bigFractionMatrixToRealMatrix(bigRInverse);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,254,** Initialize the high order scaled derivatives at step start.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,255, @param first first scaled derivative at step start
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,256," @param multistep scaled derivatives after step start (hy'1, ..., hy'k-1)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,257, will be modified
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,258, @return high order derivatives at step start
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,260,"ublic Array2DRowRealMatrix initializeHighOrderDerivatives(final double[] first,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,261,inal double[][] multistep) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,262,or (int i = 0; i < multistep.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,263,inal double[] msI = multistep[i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,264,or (int j = 0; j < first.length; ++j) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,265,sI[j] -= first[j];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,240,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,241,"public Array2DRowRealMatrix initializeHighOrderDerivatives(final double h, final double[] t,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,242,"final double[][] y,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,243,final double[][] yDot) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,245,"// using Taylor series with di = ti - t0, we get:"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,246,//  y(ti)  - y(t0)  - di y'(t0) =   di^2 / h^2 s2 + ... +   di^k     / h^k sk + O(h^(k+1))
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,247,//  y'(ti) - y'(t0)             = 2 di   / h^2 s2 + ... + k di^(k-1) / h^k sk + O(h^k)
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,248,// we write these relations for i = 1 to i= n-1 as a set of 2(n-1) linear
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,249,// equations depending on the Nordsieck vector [s2 ... sk]
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,250,final double[][] a     = new double[2 * (y.length - 1)][c1.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,251,final double[][] b     = new double[2 * (y.length - 1)][y[0].length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,252,final double[]   y0    = y[0];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,253,final double[]   yDot0 = yDot[0];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,254,for (int i = 1; i < y.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,256,final double di    = t[i] - t[0];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,257,final double ratio = di / h;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,258,double dikM1Ohk    =  1 / h;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,260,// linear coefficients of equations
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,261,// y(ti) - y(t0) - di y'(t0) and y'(ti) - y'(t0)
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,262,final double[] aI    = a[2 * i - 2];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,263,final double[] aDotI = a[2 * i - 1];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,264,for (int j = 0; j < aI.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,265,dikM1Ohk *= ratio;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,266,aI[j]     = di      * dikM1Ohk;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,267,aDotI[j]  = (j + 2) * dikM1Ohk;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,270,// expected value of the previous equations
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,271,final double[] yI    = y[i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,272,final double[] yDotI = yDot[i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,273,final double[] bI    = b[2 * i - 2];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,274,final double[] bDotI = b[2 * i - 1];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,275,for (int j = 0; j < yI.length; ++j) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,276,bI[j]    = yI[j] - y0[j] - di * yDot0[j];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,277,bDotI[j] = yDotI[j] - yDot0[j];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,268,"eturn initialization.multiply(new Array2DRowRealMatrix(multistep, false));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,282,// solve the rectangular system in the least square sense
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,283,// to get the best estimate of the Nordsieck vector [s2 ... sk]
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,284,"QRDecomposition decomposition = new QRDecompositionImpl(new Array2DRowRealMatrix(a, false));"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,285,"return new Array2DRowRealMatrix(decomposition.getSolver().solve(b), false);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,85,/ the 31 and 36 factors are only valid for this test
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,85,// the 50 and 300 factors are only valid for this test
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,88,ssert.assertTrue(handler.getMaximalValueError() > (31.0 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,89,ssert.assertTrue(handler.getMaximalValueError() < (36.0 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,88,Assert.assertTrue(handler.getMaximalValueError() > (50.0 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,89,Assert.assertTrue(handler.getMaximalValueError() < (300.0 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,129,ssert.assertTrue(handler.getLastError() < 1.0e-8);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,130,ssert.assertTrue(handler.getMaximalValueError() < 1.0e-8);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,129,Assert.assertTrue(handler.getLastError() < 1.5e-8);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,130,Assert.assertTrue(handler.getMaximalValueError() < 1.5e-8);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,140,or (int nSteps = 1; nSteps < 8; ++nSteps) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,140,for (int nSteps = 2; nSteps < 8; ++nSteps) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,142,"ew AdamsBashforthIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-10, 1.0e-10);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,142,"new AdamsBashforthIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-5, 1.0e-5);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,148,ssert.assertTrue(integ.getEvaluations() > 150);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,148,Assert.assertTrue(handler.getMaximalValueError() > 1.0e-03);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,150,ssert.assertTrue(integ.getEvaluations() < 70);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java,150,Assert.assertTrue(handler.getMaximalValueError() < 4.0e-12);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,85,/ the 0.15 and 3.0 factors are only valid for this test
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,85,// the 0.5 and 11.0 factors are only valid for this test
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,88,ssert.assertTrue(handler.getMaximalValueError() > (0.15 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,89,ssert.assertTrue(handler.getMaximalValueError() < (3.0 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,88,Assert.assertTrue(handler.getMaximalValueError() > ( 0.5 * scalAbsoluteTolerance));
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,89,Assert.assertTrue(handler.getMaximalValueError() < (11.0 * scalAbsoluteTolerance));
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,140,or (int nSteps = 1; nSteps < 7; ++nSteps) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,140,for (int nSteps = 2; nSteps < 8; ++nSteps) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,142,"ew AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,142,"new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-5, 1.0e-5);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,148,ssert.assertTrue(integ.getEvaluations() > 140);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,148,Assert.assertTrue(handler.getMaximalValueError() > 7.0e-04);
False,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,150,ssert.assertTrue(integ.getEvaluations() < 90);
True,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,150,Assert.assertTrue(handler.getMaximalValueError() < 3.0e-13);

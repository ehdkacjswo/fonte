is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,18,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,20,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,21,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,24,* Implementation of the uniform integer distribution.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,26,"* @see <a href=""http://en.wikipedia.org/wiki/Uniform_distribution_(discrete)"""
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,27,"* >Uniform distribution (discrete), at Wikipedia</a>"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,29,* @version $Id$
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,30,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,32,public class UniformIntegerDistribution extends AbstractIntegerDistribution {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,33,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,34,private static final long serialVersionUID = 20120109L;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,36,/** Lower bound (inclusive) of this distribution. */
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,37,private final int lower;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,39,/** Upper bound (inclusive) of this distribution. */
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,40,private final int upper;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,43,* Creates a new uniform integer distribution using the given lower and
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,44,* upper bounds (both inclusive).
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,46,* @param lower Lower bound (inclusive) of this distribution.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,47,* @param upper Upper bound (inclusive) of this distribution.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,48,* @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,50,"public UniformIntegerDistribution(int lower, int upper) throws NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,51,if (lower >= upper) {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,52,throw new NumberIsTooLargeException(
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,53,"LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,54,"lower, upper, false);"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,56,this.lower = lower;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,57,this.upper = upper;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,60,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,61,public double probability(int x) {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,62,if (x < lower || x > upper) {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,63,return 0;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,65,return 1.0 / (upper - lower + 1);
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,68,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,69,public double cumulativeProbability(int x) {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,70,if (x < lower) {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,71,return 0;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,73,if (x > upper) {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,74,return 1;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,76,return (x - lower + 1.0) / (upper - lower + 1.0);
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,80,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,82,"* For lower bound {@code lower} and upper bound {@code upper}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,83,* {@code 0.5 * (lower + upper)}.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,85,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,86,return 0.5 * (lower + upper);
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,90,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,92,"* For lower bound {@code lower} and upper bound {@code upper}, and"
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,93,"* {@code n = upper - lower + 1}, the variance is {@code (n^2 - 1) / 12}."
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,95,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,96,double n = upper - lower + 1;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,97,return (n * n - 1) / 12.0;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,101,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,103,* The lower bound of the support is equal to the lower bound parameter
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,104,* of the distribution.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,106,* @return lower bound of the support
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,108,public int getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,109,return lower;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,113,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,115,* The upper bound of the support is equal to the upper bound parameter
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,116,* of the distribution.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,118,* @return upper bound of the support
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,120,public int getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,121,return upper;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,125,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,127,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,129,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,131,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,132,return true;
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,135,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,136,@Override
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,137,public int sample() {
True,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformIntegerDistribution.java,138,"return randomData.nextInt(lower, upper);"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,18,package org.apache.commons.math.distribution;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,20,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,21,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,24,* Implementation of the uniform real distribution.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,26,"* @see <a href=""http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)"""
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,27,"* >Uniform distribution (continuous), at Wikipedia</a>"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,29,* @version $Id$
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,30,* @since 3.0
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,32,public class UniformRealDistribution extends AbstractRealDistribution {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,33,/** Default inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,34,public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,36,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,37,private static final long serialVersionUID = 20120109L;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,39,/** Lower bound of this distribution (inclusive). */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,40,private final double lower;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,42,/** Upper bound of this distribution (exclusive). */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,43,private final double upper;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,45,/** Inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,46,private final double solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,49,* Create a uniform real distribution using the given lower and upper
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,50,* bounds.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,52,* @param lower Lower bound of this distribution (inclusive).
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,53,* @param upper Upper bound of this distribution (exclusive).
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,54,* @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,56,"public UniformRealDistribution(double lower, double upper)"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,57,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,58,"this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,62,"* Create a normal distribution using the given mean, standard deviation and"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,63,* inverse cumulative distribution accuracy.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,65,* @param lower Lower bound of this distribution (inclusive).
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,66,* @param upper Upper bound of this distribution (exclusive).
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,67,* @param inverseCumAccuracy Inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,68,* @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,70,"public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy)"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,71,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,72,if (lower >= upper) {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,73,throw new NumberIsTooLargeException(
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,74,"LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,75,"lower, upper, false);"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,78,this.lower = lower;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,79,this.upper = upper;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,80,solverAbsoluteAccuracy = inverseCumAccuracy;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,84,* Create a standard uniform real distribution with lower bound (inclusive)
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,85,* equal to zero and upper bound (exclusive) equal to one.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,87,public UniformRealDistribution() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,88,"this(0, 1);"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,92,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,94,* For this distribution {@code P(X = x)} always evaluates to 0.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,96,* @return 0
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,98,public double probability(double x) {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,99,return 0.0;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,102,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,103,public double density(double x) {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,104,if (x < lower || x > upper) {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,105,return 0.0;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,107,return 1 / (upper - lower);
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,110,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,111,public double cumulativeProbability(double x)  {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,112,if (x <= lower) {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,113,return 0;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,115,if (x >= upper) {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,116,return 1;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,118,return (x - lower) / (upper - lower);
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,121,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,122,@Override
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,123,protected double getSolverAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,124,return solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,128,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,130,"* For lower bound {@code lower} and upper bound {@code upper}, the mean is"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,131,* {@code 0.5 * (lower + upper)}.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,133,public double getNumericalMean() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,134,return 0.5 * (lower + upper);
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,138,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,140,"* For lower bound {@code lower} and upper bound {@code upper}, the"
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,141,* variance is {@code (upper - lower)^2 / 12}.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,143,public double getNumericalVariance() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,144,double ul = upper - lower;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,145,return ul * ul / 12;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,149,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,151,* The lower bound of the support is equal to the lower bound parameter
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,152,* of the distribution.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,154,* @return lower bound of the support
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,156,public double getSupportLowerBound() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,157,return lower;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,161,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,163,* The upper bound of the support is equal to the upper bound parameter
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,164,* of the distribution.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,166,* @return upper bound of the support
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,168,public double getSupportUpperBound() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,169,return upper;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,172,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,173,public boolean isSupportLowerBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,174,return true;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,177,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,178,public boolean isSupportUpperBoundInclusive() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,179,return false;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,183,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,185,* The support of this distribution is connected.
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,187,* @return {@code true}
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,189,public boolean isSupportConnected() {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,190,return true;
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,193,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,194,@Override
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,195,public double sample()  {
True,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math/distribution/UniformRealDistribution.java,196,"return randomData.nextUniform(lower, upper, true);"
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,206," (<code>lower</code>,<code>upper</code>) (i.e., endpoints excluded)."
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,206,"* {@code (lower, upper)} (i.e., endpoints excluded)."
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,214, <p>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,215, <strong>Preconditions</strong>:<ul>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,216, <li><code>lower < upper</code> (otherwise an IllegalArgumentException
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,217,     is thrown.)</li>
False,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,218, </ul></p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,223,* Generates a uniformly distributed random value from the interval
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,224,"* {@code (lower, upper)} or the interval {@code [lower, upper)}. The lower"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,225,"* bound is thus optionally included, while the upper bound is always"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,226,* excluded.
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,227,* <p>
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,228,* <strong>Definition</strong>:
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,229,"* <a href=""http://www.itl.nist.gov/div898/handbook/eda/section3/eda3662.htm"">"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,230,* Uniform Distribution</a> <code>lower</code> and
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,231,* <code>upper - lower</code> are the
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,232,"* <a href = ""http://www.itl.nist.gov/div898/handbook/eda/section3/eda364.htm"">"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,233,"* location and scale parameters</a>, respectively.</p>"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,235,* @param lower lower endpoint of the interval of support
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,236,* @param upper upper endpoint of the interval of support
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,237,* @param lowerInclusive {@code true} if the lower bound is included in the
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,238,* interval
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,239,"* @return uniformly distributed random value in the {@code (lower, upper)}"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,240,"* interval, if {@code lowerInclusive} is {@code false}, or in the"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,241,"* {@code [lower, upper)} interval, if {@code lowerInclusive} is {@code true}"
True,src/main/java/org/apache/commons/math/random/RandomData.java,src/main/java/org/apache/commons/math/random/RandomData.java,243,"double nextUniform(double lower, double upper, boolean lowerInclusive);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,596,"return nextUniform(lower, upper, false);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,600,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,601,* <p>
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,602,"* <strong>Algorithm Description</strong>: if the lower bound is excluded,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,603,"* scales the output of Random.nextDouble(), but rejects 0 values (i.e.,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,604,* will generate another random double if Random.nextDouble() returns 0).
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,605,* This is necessary to provide a symmetric output interval (both
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,606,* endpoints excluded).
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,607,* </p>
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,609,* @param lower
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,610,*            the lower bound.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,611,* @param upper
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,612,*            the upper bound.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,613,* @param lowerInclusive
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,614,*            whether the lower bound is included in the interval
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,615,"* @return a uniformly distributed random value from the interval (lower,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,616,*         upper)
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,617,* @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,618,* @since 3.0
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,620,"public double nextUniform(double lower, double upper, boolean lowerInclusive) {"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,597,"hrow new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,598,"ower, upper);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,622,"throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,623,"lower, upper, false);"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,613,hile (u <= 0.0) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,638,while (!lowerInclusive && u <= 0.0) {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,20,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,24,* Test cases for UniformIntegerDistribution. See class javadoc for
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,25,* {@link IntegerDistributionAbstractTest} for further details.
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,27,public class UniformIntegerDistributionTest extends IntegerDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,29,// --- Override tolerance -------------------------------------------------
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,31,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,32,public void setUp() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,33,super.setUp();
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,34,setTolerance(1e-9);
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,37,//--- Implementations for abstract methods --------------------------------
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,39,/** Creates the default discrete distribution instance to use in tests. */
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,40,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,41,public IntegerDistribution makeDistribution() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,42,"return new UniformIntegerDistribution(-3, 5);"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,45,/** Creates the default probability density test input values. */
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,46,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,47,public int[] makeDensityTestPoints() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,48,"return new int[] {-4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6};"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,51,/** Creates the default probability density test expected values. */
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,52,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,53,public double[] makeDensityTestValues() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,54,double d = 1.0 / (5 - -3 + 1);
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,55,"return new double[] {0, d, d, d, d, d, d, d, d, d, 0};"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,58,/** Creates the default cumulative probability density test input values. */
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,59,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,60,public int[] makeCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,61,return makeDensityTestPoints();
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,64,/** Creates the default cumulative probability density test expected values. */
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,65,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,66,public double[] makeCumulativeTestValues() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,67,"return new double[] {0, 1 / 9.0, 2 / 9.0, 3 / 9.0, 4 / 9.0, 5 / 9.0,"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,68,"6 / 9.0, 7 / 9.0, 8 / 9.0, 1, 1};"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,71,/** Creates the default inverse cumulative probability test input values */
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,72,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,73,public double[] makeInverseCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,74,"return new double[] {0, 0.001, 0.010, 0.025, 0.050, 0.100, 0.200,"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,75,"0.5, 0.999, 0.990, 0.975, 0.950, 0.900, 1};"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,78,/** Creates the default inverse cumulative probability density test expected values */
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,79,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,80,public int[] makeInverseCumulativeTestValues() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,81,"return new int[] {-3, -3, -3, -3, -3, -3, -2, 1, 5, 5, 5, 5, 5, 5};"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,84,//--- Additional test cases -----------------------------------------------
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,86,/** Test mean/variance. */
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,87,@Test
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,88,public void testMoments() {
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,89,UniformIntegerDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,91,"dist = new UniformIntegerDistribution(0, 5);"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,92,"Assert.assertEquals(dist.getNumericalMean(), 2.5, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,93,"Assert.assertEquals(dist.getNumericalVariance(), 35 / 12.0, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,95,"dist = new UniformIntegerDistribution(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,96,"Assert.assertEquals(dist.getNumericalMean(), 0.5, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformIntegerDistributionTest.java,97,"Assert.assertEquals(dist.getNumericalVariance(), 3 / 12.0, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,20,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,21,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,22,import org.junit.Test;
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,25,* Test cases for UniformRealDistribution. See class javadoc for
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,26,* {@link RealDistributionAbstractTest} for further details.
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,28,public class UniformRealDistributionTest extends RealDistributionAbstractTest {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,30,// --- Override tolerance -------------------------------------------------
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,32,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,33,public void setUp() throws Exception {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,34,super.setUp();
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,35,setTolerance(1e-4);
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,38,//--- Implementations for abstract methods --------------------------------
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,40,/** Creates the default uniform real distribution instance to use in tests. */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,41,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,42,public UniformRealDistribution makeDistribution() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,43,"return new UniformRealDistribution(-0.5, 1.25);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,46,/** Creates the default cumulative probability distribution test input values */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,47,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,48,public double[] makeCumulativeTestPoints() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,49,"return new double[] {-0.5001, -0.5, -0.4999, -0.25, -0.0001, 0.0,"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,50,"0.0001, 0.25, 1.0, 1.2499, 1.25, 1.2501};"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,53,/** Creates the default cumulative probability density test expected values */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,54,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,55,public double[] makeCumulativeTestValues() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,56,"return new double[] {0.0, 0.0, 0.0001, 0.25/1.75, 0.4999/1.75,"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,57,"0.5/1.75, 0.5001/1.75, 0.75/1.75, 1.5/1.75,"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,58,"1.7499/1.75, 1.0, 1.0};"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,61,/** Creates the default probability density test expected values */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,62,@Override
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,63,public double[] makeDensityTestValues() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,64,double d = 1 / 1.75;
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,65,"return new double[] {0, d, d, d, d, d, d, d, d, d, d, 0};"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,68,//--- Additional test cases -----------------------------------------------
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,70,/** Test lower bound getter. */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,71,@Test
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,72,public void testGetLowerBound() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,73,UniformRealDistribution distribution = makeDistribution();
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,74,"Assert.assertEquals(-0.5, distribution.getSupportLowerBound(), 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,77,/** Test upper bound getter. */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,78,@Test
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,79,public void testGetUpperBound() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,80,UniformRealDistribution distribution = makeDistribution();
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,81,"Assert.assertEquals(1.25, distribution.getSupportUpperBound(), 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,84,/** Test pre-condition for equal lower/upper bound. */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,85,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,86,public void testPreconditions1() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,87,"new UniformRealDistribution(0, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,90,/** Test pre-condition for lower bound larger than upper bound. */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,91,@Test(expected=NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,92,public void testPreconditions2() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,93,"new UniformRealDistribution(1, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,96,/** Test mean/variance. */
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,97,@Test
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,98,public void testMeanVariance() {
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,99,UniformRealDistribution dist;
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,101,"dist = new UniformRealDistribution(0, 1);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,102,"Assert.assertEquals(dist.getNumericalMean(), 0.5, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,103,"Assert.assertEquals(dist.getNumericalVariance(), 1/12.0, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,105,"dist = new UniformRealDistribution(-1.5, 0.6);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,106,"Assert.assertEquals(dist.getNumericalMean(), -0.45, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,107,"Assert.assertEquals(dist.getNumericalVariance(), 0.3675, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,109,"dist = new UniformRealDistribution(-0.5, 1.25);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,110,"Assert.assertEquals(dist.getNumericalMean(), 0.375, 0);"
True,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/UniformRealDistributionTest.java,111,"Assert.assertEquals(dist.getNumericalVariance(), 0.2552083333333333, 0);"

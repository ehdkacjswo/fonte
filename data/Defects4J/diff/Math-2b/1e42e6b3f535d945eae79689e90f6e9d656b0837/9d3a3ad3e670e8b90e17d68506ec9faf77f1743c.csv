is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,29,"ublic abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm, Serializable {"
False,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,32,  Serialization UID.
False,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,34,rivate static final long serialVersionUID = 1L;
True,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java,28,public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm{
False,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,54,** Serializable version identifier. */
False,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java,55,rivate static final long serialVersionUID = -331962723352824098L;
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,39,** Serializable version identifier. */
False,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java,40,rivate static final long serialVersionUID = 4616482344304576900L;
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,38,** Serializable version identifier. */
False,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java,39,rivate static final long serialVersionUID = 2535890386567281329L;
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,37,** Serializable version identifier. */
False,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java,38,rivate static final long serialVersionUID = 6963842845860399200L;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,33,"ublic class PolynomialFunction implements DifferentiableUnivariateRealFunction, Serializable {"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,35,** Serializable version identifier */
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,36,rivate static final long serialVersionUID = -7726511984200295583L;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,31,public class PolynomialFunction implements DifferentiableUnivariateRealFunction {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,38,"ublic class PolynomialFunctionLagrangeForm implements UnivariateRealFunction,"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,39,erializable {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,41,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,42,tatic final long serialVersionUID = -3965199246151093920L;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java,36,public class PolynomialFunctionLagrangeForm implements UnivariateRealFunction {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,38,"ublic class PolynomialFunctionNewtonForm implements UnivariateRealFunction,"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,39,erializable {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,41,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,42,tatic final long serialVersionUID = -3353896576191389897L;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,37,public class PolynomialFunctionNewtonForm implements UnivariateRealFunction {
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,62,"mplements DifferentiableUnivariateRealFunction, Serializable {"
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,64,** Serializable version identifier */
False,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,65,rivate static final long serialVersionUID = 1619940313389547244L;
True,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java,61,implements DifferentiableUnivariateRealFunction {
False,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,33,ublic class BisectionSolver extends UnivariateRealSolverImpl implements Serializable {
True,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,31,public class BisectionSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,35,** Serializable version identifier */
False,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,36,rivate static final long serialVersionUID = 5227509383222989438L;
False,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,41,ublic class LaguerreSolver extends UnivariateRealSolverImpl implements Serializable {
False,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,43,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,44,rivate static final long serialVersionUID = -3775334783473775723L;
True,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,39,public class LaguerreSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,40,ublic class MullerSolver extends UnivariateRealSolverImpl implements Serializable {
False,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,42,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,43,rivate static final long serialVersionUID = 7768903775784754323L;
True,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,38,public class MullerSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,36,ublic class NewtonSolver extends UnivariateRealSolverImpl implements Serializable {
True,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,34,public class NewtonSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,38,** Serializable version identifier */
False,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,39,rivate static final long serialVersionUID = 7579593514004764309L;
False,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,39,ublic class RiddersSolver extends UnivariateRealSolverImpl implements Serializable {
False,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,41,** serializable version identifier */
False,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,42,rivate static final long serialVersionUID = -1556464494585337088L;
True,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,37,public class RiddersSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,44,ublic class SecantSolver extends UnivariateRealSolverImpl implements Serializable {
True,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,42,public class SecantSolver extends UnivariateRealSolverImpl {
False,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,46,** Serializable version identifier */
False,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,47,rivate static final long serialVersionUID = 2477470651270304246L;
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,34,** Serializable version ID. */
False,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,35,rivate static final long serialVersionUID = 1L;
False,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,71,rivate static final long serialVersionUID = 1043729002768873023L;
False,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,49,ublic interface SecondOrderDifferentialEquations extends Serializable {
True,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java,47,public interface SecondOrderDifferentialEquations {
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,20,mport java.io.Serializable;
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,48,"mplements DifferentiableMultivariateRealOptimizer, Serializable {"
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,50,** Serializable version identifier. */
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,51,rivate static final long serialVersionUID = -6545223926568155458L;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,46,implements DifferentiableMultivariateRealOptimizer {
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,245,"rivate static class IdentityPreconditioner implements Preconditioner, Serializable {"
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,247,** Serializable version identifier. */
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,248,rivate static final long serialVersionUID = 1868235977809734023L;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,240,private static class IdentityPreconditioner implements Preconditioner {
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,266,"rivate class LineSearchFunction implements UnivariateRealFunction, Serializable {"
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,267,/ TODO: Add Serializable documentation
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,268,/ TODO: Check Serializable implementation
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,270,** Serializable version identifier. */
False,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,271,rivate static final long serialVersionUID = 8184683950487801424L;
True,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,258,private class LineSearchFunction implements UnivariateRealFunction {
False,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,37,** Serializable version identifier. */
False,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java,38,rivate static final long serialVersionUID = 4543031162377070699L;
False,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,34,** Serializable version identifier */
False,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,35,rivate static final long serialVersionUID = 7185472920191999565L;
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,19,mport java.io.Serializable;
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,28,"ublic class Expm1Function implements DifferentiableUnivariateRealFunction, Serializable {"
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,30,rivate static final long serialVersionUID = 1410052725961159179L;
True,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,26,public class Expm1Function implements DifferentiableUnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/Expm1Function.java,src/test/org/apache/commons/math/analysis/Expm1Function.java,39,rivate static final long serialVersionUID = 5621329502844531460L;
False,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,19,mport java.io.Serializable;
False,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,28,"ublic class MonitoredFunction implements UnivariateRealFunction, Serializable {"
False,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,30,rivate static final long serialVersionUID = -8403645545888892674L;
True,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,src/test/org/apache/commons/math/analysis/MonitoredFunction.java,26,public class MonitoredFunction implements UnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,19,mport java.io.Serializable;
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,28,"ublic class QuinticFunction implements DifferentiableUnivariateRealFunction, Serializable {"
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,30,rivate static final long serialVersionUID = -8866263034920607152L;
True,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,26,public class QuinticFunction implements DifferentiableUnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/QuinticFunction.java,src/test/org/apache/commons/math/analysis/QuinticFunction.java,41,rivate static final long serialVersionUID = 5265867813333370L;
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,33,"ublic class SinFunction implements DifferentiableUnivariateRealFunction, Serializable {"
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,35,rivate static final long serialVersionUID = 6422911699694536977L;
True,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,33,public class SinFunction implements DifferentiableUnivariateRealFunction {
False,src/test/org/apache/commons/math/analysis/SinFunction.java,src/test/org/apache/commons/math/analysis/SinFunction.java,48,rivate static final long serialVersionUID = -309931502404170015L;
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,20,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,188, Test Serialization and Recovery
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,190,ublic void testSerialization() throws MathException {
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,191,nivariateRealFunction f = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,192,ouble result;
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,194,isectionSolver solver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,195,nivariateRealSolver solver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver);
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,197,"esult = solver.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,198,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,199,"ssertEquals(solver2.solve(f, -0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,201,"esult = solver.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,202,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,203,"ssertEquals(solver2.solve(f, -0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,205,"esult = solver.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,206,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,207,"ssertEquals(solver2.solve(f, -0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,209,"esult = solver.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,210,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,211,"ssertEquals(solver2.solve(f, 0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,213,"esult = solver.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,214,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,215,"ssertEquals(solver2.solve(f, 0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,217,"esult = solver.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,218,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,219,"ssertEquals(solver2.solve(f, 0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,221,"esult = solver.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,222,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,223,"ssertEquals(solver2.solve(f, 0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,225,"esult = solver.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,226,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,227,"ssertEquals(solver2.solve(f, 0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,229,"esult = solver.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,230,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,231,"ssertEquals(solver2.solve(f, 0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,233,"esult = solver.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,234,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,235,"ssertEquals(solver2.solve(f, 0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,237,"esult = solver.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,238,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,239,"ssertEquals(solver2.solve(f, 0.85, 5), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,241,* Test Reset */
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,242,ouble newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,243, = (UnivariateRealFunction)TestUtils.serializeAndRecover(new QuinticFunction());
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,244,olver = new BisectionSolver();
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,246,ouble oldValue = solver.getRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,247,olver.setRelativeAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,248,olver.resetRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,249,"ssertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,251,olver2 = (UnivariateRealSolver)TestUtils.serializeAndRecover(solver);
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,253,"ssertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,255,olver2.setRelativeAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,256,olver2.resetRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,258,"ssertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,20,mport org.apache.commons.math.TestUtils;
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,112, Test Serialization and Recovery
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,114,ublic void testSerialization() throws MathException {
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,115,ifferentiableUnivariateRealFunction f = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,116,ouble result;
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,118,ewtonSolver solver = new NewtonSolver();
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,119,ewtonSolver solver2 = (NewtonSolver)TestUtils.serializeAndRecover(solver);
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,121,"esult = solver.solve(f, -0.2, 0.2);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,122,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,123,"ssertEquals(solver2.solve(f, -0.2, 0.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,125,"esult = solver.solve(f, -0.1, 0.3);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,126,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,127,"ssertEquals(solver2.solve(f, -0.1, 0.3), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,129,"esult = solver.solve(f, -0.3, 0.45);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,130,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,131,"ssertEquals(solver2.solve(f, -0.3, 0.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,133,"esult = solver.solve(f, 0.3, 0.7);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,134,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,135,"ssertEquals(solver2.solve(f, 0.3, 0.7), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,137,"esult = solver.solve(f, 0.2, 0.6);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,138,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,139,"ssertEquals(solver2.solve(f, 0.2, 0.6), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,141,"esult = solver.solve(f, 0.05, 0.95);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,142,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,143,"ssertEquals(solver2.solve(f, 0.05, 0.95), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,145,"esult = solver.solve(f, 0.85, 1.25);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,146,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,147,"ssertEquals(solver2.solve(f, 0.85, 1.25), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,149,"esult = solver.solve(f, 0.8, 1.2);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,150,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,151,"ssertEquals(solver2.solve(f, 0.8, 1.2), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,153,"esult = solver.solve(f, 0.85, 1.75);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,154,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,155,"ssertEquals(solver2.solve(f, 0.85, 1.75), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,157,"esult = solver.solve(f, 0.55, 1.45);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,158,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,159,"ssertEquals(solver2.solve(f, 0.55, 1.45), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,161,"esult = solver.solve(f, 0.85, 5);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,162,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,163,"ssertEquals(solver2.solve(f, 0.85, 5), result, solver2.getAbsoluteAccuracy());"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,165,* Test Reset */
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,166,ouble newValue = 1.0e-2;
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,167, = new QuinticFunction();
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,168,olver = new NewtonSolver();
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,170,ouble oldValue = solver.getRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,171,olver.setRelativeAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,172,olver.resetRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,173,"ssertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,175,olver2 = (NewtonSolver)TestUtils.serializeAndRecover(solver);
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,177,"ssertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,179,olver2.setRelativeAccuracy(newValue);
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,180,olver2.resetRelativeAccuracy();
False,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,182,"ssertEquals(oldValue, solver2.getRelativeAccuracy(), 1.0e-2);"
False,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,81,rivate static final long serialVersionUID = -7926271579508637558L;
False,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,83,rivate int n;
True,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java,81,private int n;

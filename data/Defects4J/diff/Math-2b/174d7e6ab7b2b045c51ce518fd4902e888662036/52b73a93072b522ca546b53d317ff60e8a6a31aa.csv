is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1026,inal RealMatrix aInv = aDec.getSolver().getInverse();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1026,final DecompositionSolver aSolver = aDec.getSolver();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1027,if (!aSolver.isNonSingular()) {
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1028,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1030,final RealMatrix aInv = aSolver.getInverse();
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1029,inal RealMatrix dInv = dDec.getSolver().getInverse();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1033,final DecompositionSolver dSolver = dDec.getSolver();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1034,if (!dSolver.isNonSingular()) {
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1035,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1037,final RealMatrix dInv = dSolver.getInverse();
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1033,inal RealMatrix result00 = tmp1Dec.getSolver().getInverse();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1041,final DecompositionSolver tmp1Solver = tmp1Dec.getSolver();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1042,if (!tmp1Solver.isNonSingular()) {
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1043,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1045,final RealMatrix result00 = tmp1Solver.getInverse();
False,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1037,inal RealMatrix result11 = tmp2Dec.getSolver().getInverse();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1049,final DecompositionSolver tmp2Solver = tmp2Dec.getSolver();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1050,if (!tmp2Solver.isNonSingular()) {
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1051,throw new SingularMatrixException();
True,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,src/main/java/org/apache/commons/math3/linear/MatrixUtils.java,1053,final RealMatrix result11 = tmp2Solver.getInverse();
True,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,367,@Test(expected=SingularMatrixException.class)
True,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,368,public void testBlockInverseNonInvertible() {
True,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,369,final double[][] data = {
True,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,370,"{ -1, 0, 123, 4 },"
True,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,371,"{ -56, 78.9, -0.1, -23.4 },"
True,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,372,"{ 5.67, 8, -9, 1011 },"
True,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,373,"{ 5.67, 8, -9, 1011 },"
True,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java,376,"MatrixUtils.blockInverse(new Array2DRowRealMatrix(data), 2);"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,143,nt idx = n - 1;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,144,hile (idx >= 0) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,143,int iu = n - 1;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,144,while (iu >= 0) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,147,"inal int l = findSmallSubDiagonalElement(idx, norm);"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,147,"final int il = findSmallSubDiagonalElement(iu, norm);"
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,150,f (l == idx) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,150,if (il == iu) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,152,atrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,153,dx--;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,152,matrixT[iu][iu] = matrixT[iu][iu] + shift.exShift;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,153,iu--;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,155, else if (l == idx - 1) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,155,} else if (il == iu - 1) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,157,hift.w = matrixT[idx][idx - 1] * matrixT[idx - 1][idx];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,158,ouble p = (matrixT[idx - 1][idx - 1] - matrixT[idx][idx]) / 2.0;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,159,ouble q = p * p + shift.w;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,160,ouble z = FastMath.sqrt(FastMath.abs(q));
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,161,atrixT[idx][idx] = matrixT[idx][idx] + shift.exShift;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,162,atrixT[idx - 1][idx - 1] = matrixT[idx - 1][idx - 1] + shift.exShift;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,163,hift.x = matrixT[idx][idx];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,157,double p = (matrixT[iu - 1][iu - 1] - matrixT[iu][iu]) / 2.0;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,158,double q = p * p + matrixT[iu][iu - 1] * matrixT[iu - 1][iu];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,159,matrixT[iu][iu] += shift.exShift;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,160,matrixT[iu - 1][iu - 1] += shift.exShift;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,163,double z = FastMath.sqrt(FastMath.abs(q));
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,171,hift.x = matrixT[idx][idx - 1];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,172,ouble s = FastMath.abs(shift.x) + FastMath.abs(z);
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,173, = shift.x / s;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,169,final double x = matrixT[iu][iu - 1];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,170,final double s = FastMath.abs(x) + FastMath.abs(z);
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,171,p = x / s;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,175,ouble r = FastMath.sqrt(p * p + q * q);
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,173,final double r = FastMath.sqrt(p * p + q * q);
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,180,or (int j = idx - 1; j < n; j++) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,181, = matrixT[idx - 1][j];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,182,atrixT[idx - 1][j] = q * z + p * matrixT[idx][j];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,183,atrixT[idx][j] = q * matrixT[idx][j] - p * z;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,178,for (int j = iu - 1; j < n; j++) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,179,z = matrixT[iu - 1][j];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,180,matrixT[iu - 1][j] = q * z + p * matrixT[iu][j];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,181,matrixT[iu][j] = q * matrixT[iu][j] - p * z;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,187,or (int i = 0; i <= idx; i++) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,188, = matrixT[i][idx - 1];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,189,atrixT[i][idx - 1] = q * z + p * matrixT[i][idx];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,190,atrixT[i][idx] = q * matrixT[i][idx] - p * z;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,185,for (int i = 0; i <= iu; i++) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,186,z = matrixT[i][iu - 1];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,187,matrixT[i][iu - 1] = q * z + p * matrixT[i][iu];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,188,matrixT[i][iu] = q * matrixT[i][iu] - p * z;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,195, = matrixP[i][idx - 1];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,196,atrixP[i][idx - 1] = q * z + p * matrixP[i][idx];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,197,atrixP[i][idx] = q * matrixP[i][idx] - p * z;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,193,z = matrixP[i][iu - 1];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,194,matrixP[i][iu - 1] = q * z + p * matrixP[i][iu];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,195,matrixP[i][iu] = q * matrixP[i][iu] - p * z;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,200,dx -= 2;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,198,iu -= 2;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,205,"omputeShift(l, idx, iteration, shift);"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,202,"computeShift(il, iu, iteration, shift);"
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,213,/ Look for two consecutive small sub-diagonal elements
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,214,nt m = idx - 2;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,219,hile (m >= l) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,220,ouble z = matrixT[m][m];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,221,Vec[2] = shift.x - z;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,222,ouble s = shift.y - z;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,223,Vec[0] = (hVec[2] * s - shift.w) / matrixT[m + 1][m] + matrixT[m][m + 1];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,224,Vec[1] = matrixT[m + 1][m + 1] - z - hVec[2] - s;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,225,Vec[2] = matrixT[m + 2][m + 1];
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,226, = FastMath.abs(hVec[0]) + FastMath.abs(hVec[1]) + FastMath.abs(hVec[2]);
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,228,f (m == l) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,229,reak;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,232,or (int i = 0; i < hVec.length; i++) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,233,Vec[i] /= s;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,236,inal double lhs = FastMath.abs(matrixT[m][m - 1]) *
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,237,FastMath.abs(hVec[1]) + FastMath.abs(hVec[2]));
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,239,inal double rhs = FastMath.abs(hVec[0]) *
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,240,FastMath.abs(matrixT[m - 1][m - 1]) + FastMath.abs(z) +
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,241,astMath.abs(matrixT[m + 1][m + 1]));
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,243,f (lhs < epsilon * rhs) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,244,reak;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,246,--;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,249,"erformDoubleQRStep(l, m, idx, shift, hVec);"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,213,"final int im = initQRStep(il, iu, shift, hVec);"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,214,"performDoubleQRStep(il, im, iu, shift, hVec);"
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,281,"f (Precision.equals(s, 0.0, epsilon)) {"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,246,if (s == 0.0) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,315,ouble s = FastMath.abs(matrixT[idx][idx - 1]) + FastMath.abs(matrixT[idx - 1][idx - 2]);
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,316,hift.x = shift.y = 0.75 * s;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,280,final double s = FastMath.abs(matrixT[idx][idx - 1]) + FastMath.abs(matrixT[idx - 1][idx - 2]);
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,281,shift.x = 0.75 * s;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,282,shift.y = 0.75 * s;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,324,"f (Precision.compareTo(s, 0.0d, epsilon) > 0) {"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,290,if (s > 0.0) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,306,* Initialize the householder vectors for the QR step.
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,308,* @param il the index of the small sub-diagonal element
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,309,* @param iu the current eigenvalue index
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,310,* @param shift shift information holder
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,311,* @param hVec the initial houseHolder vector
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,312,* @return the start index for the QR step
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,314,"private int initQRStep(int il, final int iu, final ShiftInfo shift, double[] hVec) {"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,315,// Look for two consecutive small sub-diagonal elements
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,316,int im = iu - 2;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,317,while (im >= il) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,318,final double z = matrixT[im][im];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,319,final double r = shift.x - z;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,320,double s = shift.y - z;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,321,hVec[0] = (r * s - shift.w) / matrixT[im + 1][im] + matrixT[im][im + 1];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,322,hVec[1] = matrixT[im + 1][im + 1] - z - r - s;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,323,hVec[2] = matrixT[im + 2][im + 1];
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,325,if (im == il) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,326,break;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,329,final double lhs = FastMath.abs(matrixT[im][im - 1]) * (FastMath.abs(hVec[1]) + FastMath.abs(hVec[2]));
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,330,final double rhs = FastMath.abs(hVec[0]) * (FastMath.abs(matrixT[im - 1][im - 1]) +
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,331,FastMath.abs(z) +
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,332,FastMath.abs(matrixT[im + 1][im + 1]));
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,334,if (lhs < epsilon * rhs) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,335,break;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,337,im--;
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,340,return im;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,342, @param l the index of the small sub-diagonal element
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,343, @param m the start index for the QR step
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,344, @param idx the current eigenvalue index
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,346,* @param il the index of the small sub-diagonal element
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,347,* @param im the start index for the QR step
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,348,* @param iu the current eigenvalue index
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,348,"rivate void performDoubleQRStep(final int l, final int m, final int idx,"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,352,"private void performDoubleQRStep(final int il, final int im, final int iu,"
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,356,or (int k = m; k <= idx - 1; k++) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,357,oolean notlast = k != idx - 1;
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,358,f (k != m) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,360,for (int k = im; k <= iu - 1; k++) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,361,boolean notlast = k != (iu - 1);
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,362,if (k != im) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,369,"f (Precision.equals(shift.x, 0.0, epsilon)) {"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,373,if (shift.x == 0.0) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,376,"f (!Precision.equals(s, 0.0, epsilon)) {"
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,377,f (k != m) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,380,if (s != 0.0) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,381,if (k != im) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,379, else if (l != m) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,383,} else if (il != im) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,401,"or (int i = 0; i <= FastMath.min(idx, k + 3); i++) {"
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,405,"for (int i = 0; i <= FastMath.min(iu, k + 3); i++) {"
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,426,or (int i = m+2; i <= idx; i++) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,430,for (int i = im + 2; i <= iu; i++) {
False,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,428,f (i > m+2) {
True,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,src/main/java/org/apache/commons/math3/linear/SchurTransformer.java,432,if (i > im + 2) {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,411,@Test
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,412,public void testMath848() {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,413,double[][] data = {
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,414,"{ 0.1849449280, -0.0646971046,  0.0774755812, -0.0969651755, -0.0692648806,  0.3282344352, -0.0177423074,  0.2063136340},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,415,"{-0.0742700134, -0.0289063030, -0.0017269460, -0.0375550146, -0.0487737922, -0.2616837868, -0.0821201295, -0.2530000167},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,416,"{ 0.2549910127,  0.0995733692, -0.0009718388,  0.0149282808,  0.1791878897, -0.0823182816,  0.0582629256,  0.3219545182},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,417,"{-0.0694747557, -0.1880649148, -0.2740630911,  0.0720096468, -0.1800836914, -0.3518996425,  0.2486747833,  0.6257938167},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,418,"{ 0.0536360918, -0.1339297778,  0.2241579764, -0.0195327484, -0.0054103808,  0.0347564518,  0.5120802482, -0.0329902864},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,419,"{-0.5933332356, -0.2488721082,  0.2357173629,  0.0177285473,  0.0856630593, -0.3567126300, -0.1600668126, -0.1010899621},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,420,"{-0.0514349819, -0.0854319435,  0.1125050061,  0.0063453560, -0.2250000688, -0.2209343090,  0.1964623477, -0.1512329924},"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,421,"{ 0.0197395947, -0.1997170581, -0.1425959019, -0.2749477910, -0.0969467073,  0.0603688520, -0.2826905192,  0.1794315473}};"
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,422,RealMatrix m = MatrixUtils.createRealMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,src/test/java/org/apache/commons/math3/linear/EigenDecompositionTest.java,423,checkUnsymmetricMatrix(m);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,133,@Test
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,134,public void testMath848() {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,135,double[][] data = {
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,136,"{ 0.1849449280, -0.0646971046,  0.0774755812, -0.0969651755, -0.0692648806,  0.3282344352, -0.0177423074,  0.2063136340},"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,137,"{-0.0742700134, -0.0289063030, -0.0017269460, -0.0375550146, -0.0487737922, -0.2616837868, -0.0821201295, -0.2530000167},"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,138,"{ 0.2549910127,  0.0995733692, -0.0009718388,  0.0149282808,  0.1791878897, -0.0823182816,  0.0582629256,  0.3219545182},"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,139,"{-0.0694747557, -0.1880649148, -0.2740630911,  0.0720096468, -0.1800836914, -0.3518996425,  0.2486747833,  0.6257938167},"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,140,"{ 0.0536360918, -0.1339297778,  0.2241579764, -0.0195327484, -0.0054103808,  0.0347564518,  0.5120802482, -0.0329902864},"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,141,"{-0.5933332356, -0.2488721082,  0.2357173629,  0.0177285473,  0.0856630593, -0.3567126300, -0.1600668126, -0.1010899621},"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,142,"{-0.0514349819, -0.0854319435,  0.1125050061,  0.0063453560, -0.2250000688, -0.2209343090,  0.1964623477, -0.1512329924},"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,143,"{ 0.0197395947, -0.1997170581, -0.1425959019, -0.2749477910, -0.0969467073,  0.0603688520, -0.2826905192,  0.1794315473}};"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,144,RealMatrix m = MatrixUtils.createRealMatrix(data);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,145,RealMatrix s = checkAEqualPTPt(m);
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,146,checkSchurForm(s);
False,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,146,"ssert.assertEquals(0, norm, 1.0e-10);"
True,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,src/test/java/org/apache/commons/math3/linear/SchurTransformerTest.java,162,"Assert.assertEquals(0, norm, 1.0e-9);"

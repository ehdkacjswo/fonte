is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,111,"* <p>Also note that the integrator expect that once an event has occurred,"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,112,* the sign of the switching function at the start of the next step (i.e.
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,113,* just after the event) is the opposite of the sign just before the event.
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,114,"* This consistency between the steps <string>must</strong> be preserved,"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,115,* otherwise {@link org.apache.commons.math3.exception.NoBracketingException
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,116,* exceptions} related to root not being bracketed will occur.</p>
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,117,* <p>This need for consistency is sometimes tricky to achieve. A typical
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,118,* example is using an event to model a ball bouncing on the floor. The first
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,119,* idea to represent this would be to have {@code g(t) = h(t)} where h is the
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,120,"* height above the floor at time {@code t}. When {@code g(t)} reaches 0, the"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,121,"* ball is on the floor, so it should bounce and the typical way to do this is"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,122,"* to reverse its vertical velocity. However, this would mean that before the"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,123,"* event {@code g(t)} was decreasing from positive values to 0, and after the"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,124,* event {@code g(t)} would be increasing from 0 to positive values again.
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,125,* Consistency is broken here! The solution here is to have {@code g(t) = sign
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,126,"* * h(t)}, where sign is a variable with initial value set to {@code +1}. Each"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,127,"* time {@link #eventOccurred(double, double[], boolean) eventOccurred} is called,"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,128,* {@code sign} is reset to {@code -sign}. This allows the {@code g(t)}
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,129,"* function to remain continuous (and even smooth) even across events, despite"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,130,"* {@code h(t)} is not. Basically, the event is used to <em>fold</em> {@code h(t)}"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,131,"* at bounce points, and {@code sign} is used to <em>unfold</em> it back, so the"
True,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,src/main/java/org/apache/commons/math3/ode/events/EventHandler.java,132,* solvers sees a {@code g(t)} function which behaves smoothly even across events.</p>

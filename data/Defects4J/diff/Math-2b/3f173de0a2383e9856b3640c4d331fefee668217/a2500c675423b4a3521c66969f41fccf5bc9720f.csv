is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,19,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,20,import org.apache.commons.math3.exception.MathUnsupportedOperationException;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,21,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,22,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,23,import org.apache.commons.math3.linear.ArrayRealVector;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,24,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,25,import org.apache.commons.math3.linear.DiagonalMatrix;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,26,import org.apache.commons.math3.linear.DecompositionSolver;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,27,import org.apache.commons.math3.linear.MatrixUtils;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,28,import org.apache.commons.math3.linear.QRDecomposition;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,29,import org.apache.commons.math3.linear.EigenDecomposition;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,30,import org.apache.commons.math3.optim.ConvergenceChecker;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,31,import org.apache.commons.math3.optim.BaseOptimizer;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,32,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,33,import org.apache.commons.math3.optim.OptimizationData;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,34,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,37,* Base class for implementing least-squares optimizers.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,38,* It provides methods for error estimation.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,40,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,41,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,43,public abstract class AbstractLeastSquaresOptimizer
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,44,extends BaseOptimizer<PointVectorValuePair> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,45,/** Target values for the model function at optimum. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,46,private final double[] target;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,47,/** Weight matrix. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,48,private final RealMatrix weight;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,49,/** Model function. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,50,private final MultivariateVectorFunction model;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,51,/** Jacobian of the model function. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,52,private final MultivariateMatrixFunction jacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,53,/** Square-root of the weight matrix. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,54,private final RealMatrix weightSqrt;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,55,/** Initial guess. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,56,private final double[] start;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,59,* @param target Observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,60,* @param weight Weight of the observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,61,"* For performance, no defensive copy is performed."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,62,* @param weightSqrt Square-root of the {@code weight} matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,63,"* If {@code null}, it will be computed; otherwise it is the caller's"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,64,* responsibility that {@code weight} and {@code weightSqrt} are
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,65,* consistent.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,66,* No defensive copy is performed.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,67,* @param model ModelFunction.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,68,* @param jacobian Jacobian of the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,69,* @param checker Convergence checker.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,70,* @param start Initial guess.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,71,* @param maxEval Maximum number of evaluations of the model
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,72,* function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,73,* @param maxIter Maximum number of iterations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,75,"protected AbstractLeastSquaresOptimizer(double[] target,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,76,"RealMatrix weight,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,77,"RealMatrix weightSqrt,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,78,"MultivariateVectorFunction model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,79,"MultivariateMatrixFunction jacobian,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,80,"ConvergenceChecker<PointVectorValuePair> checker,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,81,"double[] start,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,82,"int maxEval,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,83,int maxIter) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,84,"super(checker, maxEval, maxIter);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,86,this.target = target;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,87,this.weight = weight;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,88,this.model = model;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,89,this.jacobian = jacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,90,this.start = start;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,92,this.weightSqrt = weightSqrt == null ?
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,93,(weight == null ?
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,94,null : squareRoot(weight)) : weightSqrt;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,98,* Gets the target values.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,100,* @return the target values.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,102,public double[] getTarget() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,103,return target == null ? null : target.clone();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,107,* Gets the initial guess.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,109,* @return the initial guess values.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,111,public double[] getStart() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,112,return start == null ? null : start.clone();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,116,* Gets the square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,118,* @return the square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,120,public RealMatrix getWeightSquareRoot() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,121,return weightSqrt == null ? null : weightSqrt.copy();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,125,* Gets the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,127,* @return the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,129,public MultivariateVectorFunction getModel() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,130,return model;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,134,* Gets the model function's Jacobian.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,136,* @return the Jacobian.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,138,public MultivariateMatrixFunction getJacobian() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,139,return jacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,143,* Get the covariance matrix of the optimized parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,144,* <br/>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,145,* Note that this operation involves the inversion of the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,146,"* <code>J<sup>T</sup>J</code> matrix, where {@code J} is the"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,147,* Jacobian matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,148,* The {@code threshold} parameter is a way for the caller to specify
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,149,"* that the result of this computation should be considered meaningless,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,150,* and thus trigger an exception.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,152,* @param params Model parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,153,* @param threshold Singularity threshold.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,154,* @return the covariance matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,155,* @throws org.apache.commons.math3.linear.SingularMatrixException
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,156,* if the covariance matrix cannot be computed (singular problem).
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,158,"public double[][] computeCovariances(double[] params,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,159,double threshold) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,160,// Set up the Jacobian.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,161,final RealMatrix j = computeWeightedJacobian(params);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,163,// Compute transpose(J)J.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,164,final RealMatrix jTj = j.transpose().multiply(j);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,166,// Compute the covariances matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,167,final DecompositionSolver solver
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,168,"= new QRDecomposition(jTj, threshold).getSolver();"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,169,return solver.getInverse().getData();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,173,* Computes an estimate of the standard deviation of the parameters. The
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,174,* returned values are the square root of the diagonal coefficients of the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,175,"* covariance matrix, {@code sd(a[i]) ~= sqrt(C[i][i])}, where {@code a[i]}"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,176,"* is the optimized value of the {@code i}-th parameter, and {@code C} is"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,177,* the covariance matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,179,* @param params Model parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,180,* @param covarianceSingularityThreshold Singularity threshold (see
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,181,"* {@link #computeCovariances(double[],double) computeCovariances})."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,182,* @return an estimate of the standard deviation of the optimized parameters
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,183,* @throws org.apache.commons.math3.linear.SingularMatrixException
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,184,* if the covariance matrix cannot be computed.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,186,"public double[] computeSigma(double[] params,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,187,double covarianceSingularityThreshold) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,188,final int nC = params.length;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,189,final double[] sig = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,190,"final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,191,for (int i = 0; i < nC; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,192,sig[i] = FastMath.sqrt(cov[i][i]);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,194,return sig;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,198,* Gets the weight matrix of the observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,200,* @return the weight matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,202,public RealMatrix getWeight() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,203,return weight.copy();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,207,* Computes the normalized cost.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,208,"* It is the square-root of the sum of squared of the residuals, divided"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,209,* by the number of measurements.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,211,* @param params Model function parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,212,* @return the cost.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,214,public double computeRMS(double[] params) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,215,final double cost = computeCost(computeResiduals(getModel().value(params)));
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,216,return FastMath.sqrt(cost * cost / target.length);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,220,* Calling this method will raise an exception.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,222,* @param optData Obsolete.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,223,* @return nothing.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,224,* @throws MathUnsupportedOperationException if called.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,225,* @deprecated Do not use this method.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,227,@Deprecated
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,228,@Override
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,229,public PointVectorValuePair optimize(OptimizationData... optData)
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,230,throws MathUnsupportedOperationException {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,231,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,235,* Gets a reference to the corresponding field.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,236,* Altering it could jeopardize the consistency of this class.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,238,* @return the reference.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,240,protected double[] getTargetInternal() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,241,return target;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,245,* Gets a reference to the corresponding field.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,246,* Altering it could jeopardize the consistency of this class.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,248,* @return the reference.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,250,protected RealMatrix getWeightInternal() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,251,return weight;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,255,* Gets a reference to the corresponding field.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,256,* Altering it could jeopardize the consistency of this class.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,258,* @return the reference.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,260,protected RealMatrix getWeightSquareRootInternal() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,261,return weightSqrt;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,265,* Computes the objective function value.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,266,* This method <em>must</em> be called by subclasses to enforce the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,267,* evaluation counter limit.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,269,* @param params Point at which the objective function must be evaluated.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,270,* @return the objective function value at the specified point.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,271,* @throws org.apache.commons.math3.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,272,* if the maximal number of evaluations (of the model vector function) is
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,273,* exceeded.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,275,protected double[] computeObjectiveValue(double[] params) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,276,super.incrementEvaluationCount();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,277,return model.value(params);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,281,* Computes the weighted Jacobian matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,283,* @param params Model parameters at which to compute the Jacobian.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,284,* @return the weighted Jacobian: W<sup>1/2</sup> J.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,285,* @throws DimensionMismatchException if the Jacobian dimension does not
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,286,* match problem dimension.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,288,protected RealMatrix computeWeightedJacobian(double[] params) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,289,return weightSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,293,* Computes the Jacobian matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,295,* @param params Point at which the Jacobian must be evaluated.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,296,* @return the Jacobian at the specified point.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,298,protected double[][] computeJacobian(final double[] params) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,299,return jacobian.value(params);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,303,* Computes the cost.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,305,* @param residuals Residuals.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,306,* @return the cost.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,307,* @see #computeResiduals(double[])
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,309,protected double computeCost(double[] residuals) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,310,final ArrayRealVector r = new ArrayRealVector(residuals);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,311,return FastMath.sqrt(r.dotProduct(weight.operate(r)));
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,315,* Computes the residuals.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,316,* The residual is the difference between the observed (target)
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,317,* values and the model (objective function) value.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,318,* There is one residual for each element of the vector-valued
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,319,* function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,321,* @param objectiveValue Value of the the objective function. This is
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,322,* the value returned from a call to
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,323,* {@link #computeObjectiveValue(double[]) computeObjectiveValue}
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,324,* (whose array argument contains the model parameters).
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,325,* @return the residuals.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,326,* @throws DimensionMismatchException if {@code params} has a wrong
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,327,* length.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,329,protected double[] computeResiduals(double[] objectiveValue) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,330,if (objectiveValue.length != target.length) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,331,"throw new DimensionMismatchException(target.length,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,332,objectiveValue.length);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,335,final double[] residuals = new double[target.length];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,336,for (int i = 0; i < target.length; i++) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,337,residuals[i] = target[i] - objectiveValue[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,340,return residuals;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,344,* Computes the square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,346,"* @param m Symmetric, positive-definite (weight) matrix."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,347,* @return the square-root of the weight matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,349,private RealMatrix squareRoot(RealMatrix m) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,350,if (m instanceof DiagonalMatrix) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,351,final int dim = m.getRowDimension();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,352,final RealMatrix sqrtM = new DiagonalMatrix(dim);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,353,for (int i = 0; i < dim; i++) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,354,"sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,356,return sqrtM;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,357,} else {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,358,final EigenDecomposition dec = new EigenDecomposition(m);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer.java,359,return dec.getSquareRoot();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,19,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,20,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,21,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,22,import org.apache.commons.math3.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,23,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,24,import org.apache.commons.math3.exception.MathInternalError;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,25,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,26,import org.apache.commons.math3.linear.ArrayRealVector;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,27,import org.apache.commons.math3.linear.BlockRealMatrix;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,28,import org.apache.commons.math3.linear.DecompositionSolver;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,29,import org.apache.commons.math3.linear.LUDecomposition;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,30,import org.apache.commons.math3.linear.QRDecomposition;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,31,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,32,import org.apache.commons.math3.linear.SingularMatrixException;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,33,import org.apache.commons.math3.optim.ConvergenceChecker;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,34,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,37,* Gauss-Newton least-squares solver.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,39,* <p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,40,* This class solve a least-square problem by solving the normal equations
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,41,* of the linearized problem at each iteration. Either LU decomposition or
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,42,* QR decomposition can be used to solve the normal equations. LU decomposition
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,43,* is faster but QR decomposition is more robust for difficult problems.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,44,* </p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,46,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,47,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,50,public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,51,"implements WithTarget<GaussNewtonOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,52,"WithWeight<GaussNewtonOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,53,"WithModelAndJacobian<GaussNewtonOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,54,"WithConvergenceChecker<GaussNewtonOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,55,"WithStartPoint<GaussNewtonOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,56,"WithMaxIterations<GaussNewtonOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,57,WithMaxEvaluations<GaussNewtonOptimizer> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,58,/** Indicator for using LU decomposition. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,59,private final boolean useLU;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,62,* Constructor called by the various {@code withXxx} methods.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,64,* @param target Observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,65,* @param weight Weight of the observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,66,"* For performance, no defensive copy is performed."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,67,* @param weightSqrt Square-root of the {@code weight} matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,68,"* If {@code null}, it will be computed; otherwise it is the caller's"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,69,* responsibility that {@code weight} and {@code weightSqrt} are
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,70,* consistent.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,71,* No defensive copy is performed.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,72,* @param model ModelFunction.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,73,* @param jacobian Jacobian of the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,74,* @param checker Convergence checker.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,75,* @param start Initial guess.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,76,* @param maxEval Maximum number of evaluations of the model
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,77,* function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,78,* @param maxIter Maximum number of iterations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,79,* @param useLU Whether to use LU decomposition.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,81,"private GaussNewtonOptimizer(double[] target,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,82,"RealMatrix weight,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,83,"RealMatrix weightSqrt,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,84,"MultivariateVectorFunction model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,85,"MultivariateMatrixFunction jacobian,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,86,"ConvergenceChecker<PointVectorValuePair> checker,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,87,"double[] start,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,88,"int maxEval,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,89,"int maxIter,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,90,boolean useLU) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,91,"super(target, weight, weightSqrt, model, jacobian, checker, start, maxEval, maxIter);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,93,this.useLU = useLU;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,97,* Creates a bare-bones instance.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,98,* Several calls to {@code withXxx} methods are necessary to obtain
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,99,* an object with all necessary fields set to sensible values.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,100,* <br/>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,101,* The default for the algorithm is to solve the normal equations
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,102,* using LU decomposition.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,104,* @return an instance of this class.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,106,public static GaussNewtonOptimizer create() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,107,"return new GaussNewtonOptimizer(null, null, null, null, null, null, null,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,108,"0, 0, true);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,111,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,112,public GaussNewtonOptimizer withTarget(double[] target) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,113,"return new GaussNewtonOptimizer(target,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,114,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,115,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,116,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,117,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,118,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,119,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,120,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,121,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,122,useLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,125,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,126,public GaussNewtonOptimizer withWeight(RealMatrix weight) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,127,"return new GaussNewtonOptimizer(getTargetInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,128,"weight,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,129,"null,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,130,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,131,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,132,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,133,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,134,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,135,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,136,useLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,139,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,140,"public GaussNewtonOptimizer withModelAndJacobian(MultivariateVectorFunction model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,141,MultivariateMatrixFunction jacobian) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,142,"return new GaussNewtonOptimizer(getTargetInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,143,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,144,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,145,"model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,146,"jacobian,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,147,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,148,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,149,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,150,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,151,useLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,154,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,155,public GaussNewtonOptimizer withConvergenceChecker(ConvergenceChecker<PointVectorValuePair> checker) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,156,"return new GaussNewtonOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,157,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,158,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,159,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,160,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,161,"checker,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,162,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,163,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,164,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,165,useLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,168,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,169,public GaussNewtonOptimizer withStartPoint(double[] start) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,170,"return new GaussNewtonOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,171,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,172,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,173,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,174,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,175,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,176,"start,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,177,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,178,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,179,useLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,182,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,183,public GaussNewtonOptimizer withMaxIterations(int maxIter) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,184,"return new GaussNewtonOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,185,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,186,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,187,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,188,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,189,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,190,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,191,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,192,"maxIter,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,193,useLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,196,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,197,public GaussNewtonOptimizer withMaxEvaluations(int maxEval) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,198,"return new GaussNewtonOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,199,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,200,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,201,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,202,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,203,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,204,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,205,"maxEval,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,206,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,207,useLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,211,* Creates a new instance.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,213,* @param withLU Whether to use LU decomposition.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,214,* @return a new instance with all fields identical to this instance except
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,215,* for the givens arguments.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,217,public GaussNewtonOptimizer withLU(boolean withLU) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,218,"return new GaussNewtonOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,219,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,220,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,221,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,222,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,223,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,224,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,225,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,226,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,227,withLU);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,230,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,231,@Override
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,232,public PointVectorValuePair doOptimize() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,233,final ConvergenceChecker<PointVectorValuePair> checker
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,234,= getConvergenceChecker();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,236,"// Computation will be useless without a checker (see ""for-loop"")."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,237,if (checker == null) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,238,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,241,final double[] targetValues = getTarget();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,242,final int nR = targetValues.length; // Number of observed data.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,244,final RealMatrix weightMatrix = getWeight();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,245,if (weightMatrix.getRowDimension() != nR) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,246,"throw new DimensionMismatchException(weightMatrix.getRowDimension(), nR);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,248,if (weightMatrix.getColumnDimension() != nR) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,249,"throw new DimensionMismatchException(weightMatrix.getColumnDimension(), nR);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,252,// Diagonal of the weight matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,253,final double[] residualsWeights = new double[nR];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,254,for (int i = 0; i < nR; i++) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,255,"residualsWeights[i] = weightMatrix.getEntry(i, i);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,258,final double[] currentPoint = getStart();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,259,final int nC = currentPoint.length;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,261,// iterate until convergence is reached
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,262,PointVectorValuePair current = null;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,263,for (boolean converged = false; !converged;) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,264,incrementIterationCount();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,266,// evaluate the objective function and its jacobian
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,267,PointVectorValuePair previous = current;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,268,"// Value of the objective function at ""currentPoint""."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,269,final double[] currentObjective = computeObjectiveValue(currentPoint);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,270,final double[] currentResiduals = computeResiduals(currentObjective);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,271,final RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,272,"current = new PointVectorValuePair(currentPoint, currentObjective);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,274,// build the linear problem
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,275,final double[]   b = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,276,final double[][] a = new double[nC][nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,277,for (int i = 0; i < nR; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,279,final double[] grad   = weightedJacobian.getRow(i);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,280,final double weight   = residualsWeights[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,281,final double residual = currentResiduals[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,283,// compute the normal equation
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,284,final double wr = weight * residual;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,285,for (int j = 0; j < nC; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,286,b[j] += wr * grad[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,289,// build the contribution matrix for measurement i
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,290,for (int k = 0; k < nC; ++k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,291,double[] ak = a[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,292,double wgk = weight * grad[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,293,for (int l = 0; l < nC; ++l) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,294,ak[l] += wgk * grad[l];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,299,// Check convergence.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,300,if (previous != null) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,301,"converged = checker.converged(getIterations(), previous, current);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,302,if (converged) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,303,return current;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,307,try {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,308,// solve the linearized least squares problem
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,309,RealMatrix mA = new BlockRealMatrix(a);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,310,DecompositionSolver solver = useLU ?
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,311,new LUDecomposition(mA).getSolver() :
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,312,new QRDecomposition(mA).getSolver();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,313,"final double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,314,// update the estimated parameters
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,315,for (int i = 0; i < nC; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,316,currentPoint[i] += dX[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,318,} catch (SingularMatrixException e) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,319,throw new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,322,// Must never happen.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer.java,323,throw new MathInternalError();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,19,import java.util.Arrays;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,20,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,21,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,22,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,23,import org.apache.commons.math3.exception.ConvergenceException;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,24,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,25,import org.apache.commons.math3.optim.ConvergenceChecker;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,26,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,27,import org.apache.commons.math3.util.Precision;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,28,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,32,* This class solves a least-squares problem using the Levenberg-Marquardt
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,33,* algorithm.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,35,* <p>This implementation <em>should</em> work even for over-determined systems
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,36,* (i.e. systems having more point than equations). Over-determined systems
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,37,* are solved by ignoring the point which have the smallest impact according
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,38,* to their jacobian column norm. Only the rank of the matrix and some loop bounds
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,39,* are changed to implement this.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,41,* <p>The resolution engine is a simple translation of the MINPACK <a
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,42,"* href=""http://www.netlib.org/minpack/lmder.f"">lmder</a> routine with minor"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,43,"* changes. The changes include the over-determined resolution, the use of"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,44,* inherited convergence checker and the Q.R. decomposition which has been
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,45,* rewritten following the algorithm described in the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,46,* P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,47,"* appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,48,* <p>The authors of the original fortran version are:
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,49,* <ul>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,50,* <li>Argonne National Laboratory. MINPACK project. March 1980</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,51,* <li>Burton S. Garbow</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,52,* <li>Kenneth E. Hillstrom</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,53,* <li>Jorge J. More</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,54,* </ul>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,55,* The redistribution policy for MINPACK is available <a
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,56,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for convenience, it"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,57,* is reproduced below.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,59,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,60,* <tr><td>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,61,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,62,*    All rights reserved
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,63,* </td></tr>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,64,* <tr><td>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,65,"* Redistribution and use in source and binary forms, with or without"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,66,"* modification, are permitted provided that the following conditions"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,67,* are met:
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,68,* <ol>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,69,*  <li>Redistributions of source code must retain the above copyright
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,70,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,71,* <li>Redistributions in binary form must reproduce the above
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,72,"*     copyright notice, this list of conditions and the following"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,73,*     disclaimer in the documentation and/or other materials provided
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,74,*     with the distribution.</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,75,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,76,*     must include the following acknowledgment:
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,77,*     <code>This product includes software developed by the University of
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,78,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,79,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,80,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,81,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,82,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,83,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,84,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,85,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,86,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,87,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,88,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,89,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,90,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,91,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,92,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,93,*     BE CORRECTED.</strong></li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,94,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,95,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,96,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,97,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,98,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,99,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,100,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,101,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,102,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,103,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,104,* <ol></td></tr>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,105,* </table>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,107,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,108,* @since 2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,110,public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,111,"implements WithTarget<LevenbergMarquardtOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,112,"WithWeight<LevenbergMarquardtOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,113,"WithModelAndJacobian<LevenbergMarquardtOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,114,"WithConvergenceChecker<LevenbergMarquardtOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,115,"WithStartPoint<LevenbergMarquardtOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,116,"WithMaxIterations<LevenbergMarquardtOptimizer>,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,117,WithMaxEvaluations<LevenbergMarquardtOptimizer> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,118,"/** Twice the ""epsilon machine"". */"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,119,private static final double TWO_EPS = 2 * Precision.EPSILON;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,120,/** Positive input variable used in determining the initial step bound. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,121,private final double initialStepBoundFactor;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,122,/** Desired relative error in the sum of squares. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,123,private final double costRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,124,/**  Desired relative error in the approximate solution parameters. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,125,private final double parRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,126,/** Desired max cosine on the orthogonality between the function vector
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,127,* and the columns of the jacobian. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,128,private final double orthoTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,129,/** Threshold for QR ranking. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,130,private final double qrRankingThreshold;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,131,/** Levenberg-Marquardt parameter. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,132,private double lmPar;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,133,/** Parameters evolution direction associated with lmPar. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,134,private double[] lmDir;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,137,* Constructor called by the various {@code withXxx} methods.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,139,* @param target Observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,140,* @param weight Weight of the observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,141,"* For performance, no defensive copy is performed."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,142,* @param weightSqrt Square-root of the {@code weight} matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,143,"* If {@code null}, it will be computed; otherwise it is the caller's"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,144,* responsibility that {@code weight} and {@code weightSqrt} are
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,145,* consistent.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,146,* No defensive copy is performed.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,147,* @param model ModelFunction.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,148,* @param jacobian Jacobian of the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,149,* @param checker Convergence checker.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,150,* @param start Initial guess.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,151,* @param maxEval Maximum number of evaluations of the model
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,152,* function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,153,* @param maxIter Maximum number of iterations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,154,* @param initialStepBoundFactor Positive input variable used in
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,155,* determining the initial step bound. This bound is set to the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,156,* product of initialStepBoundFactor and the euclidean norm of
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,157,"* {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,158,* itself. In most cases factor should lie in the interval
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,159,"* {@code (0.1, 100.0)}. {@code 100} is a generally recommended value."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,160,* @param costRelativeTolerance Desired relative error in the sum of
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,161,* squares.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,162,* @param parRelativeTolerance Desired relative error in the approximate
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,163,* solution parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,164,* @param orthoTolerance Desired max cosine on the orthogonality between
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,165,* the function vector and the columns of the Jacobian.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,166,* @param threshold Desired threshold for QR ranking. If the squared norm
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,167,* of a column vector is smaller or equal to this threshold during QR
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,168,"* decomposition, it is considered to be a zero vector and hence the rank"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,169,* of the matrix is reduced.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,171,"private LevenbergMarquardtOptimizer(double[] target,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,172,"RealMatrix weight,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,173,"RealMatrix weightSqrt,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,174,"MultivariateVectorFunction model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,175,"MultivariateMatrixFunction jacobian,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,176,"ConvergenceChecker<PointVectorValuePair> checker,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,177,"double[] start,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,178,"int maxEval,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,179,"int maxIter,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,180,"double initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,181,"double costRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,182,"double parRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,183,"double orthoTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,184,double threshold) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,185,"super(target, weight, weightSqrt, model, jacobian, checker, start, maxEval, maxIter);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,187,this.initialStepBoundFactor = initialStepBoundFactor;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,188,this.costRelativeTolerance = costRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,189,this.parRelativeTolerance = parRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,190,this.orthoTolerance = orthoTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,191,this.qrRankingThreshold = threshold;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,195,* Creates a bare-bones instance.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,196,* Several calls to {@code withXxx} methods are necessary to obtain
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,197,* an object with all necessary fields set to sensible values.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,198,* <br/>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,199,* The default values for the algorithm settings are:
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,200,* <ul>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,201,*  <li>Initial step bound factor: 100</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,202,*  <li>Cost relative tolerance: 1e-10</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,203,*  <li>Parameters relative tolerance: 1e-10</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,204,*  <li>Orthogonality tolerance: 1e-10</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,205,*  <li>QR ranking threshold: {@link Precision#SAFE_MIN}</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,206,* </ul>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,208,* @return an instance of this class.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,210,public static LevenbergMarquardtOptimizer create() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,211,"return new LevenbergMarquardtOptimizer(null, null, null, null, null, null, null,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,212,"0, 0, 100, 1e-10, 1e-10, 1e-10,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,213,Precision.SAFE_MIN);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,216,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,217,public LevenbergMarquardtOptimizer withTarget(double[] target) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,218,"return new LevenbergMarquardtOptimizer(target,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,219,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,220,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,221,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,222,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,223,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,224,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,225,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,226,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,227,"initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,228,"costRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,229,"parRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,230,"orthoTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,231,qrRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,234,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,235,public LevenbergMarquardtOptimizer withWeight(RealMatrix weight) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,236,"return new LevenbergMarquardtOptimizer(getTargetInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,237,"weight,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,238,"null,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,239,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,240,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,241,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,242,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,243,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,244,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,245,"initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,246,"costRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,247,"parRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,248,"orthoTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,249,qrRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,252,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,253,"public LevenbergMarquardtOptimizer withModelAndJacobian(MultivariateVectorFunction model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,254,MultivariateMatrixFunction jacobian) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,255,"return new LevenbergMarquardtOptimizer(getTargetInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,256,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,257,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,258,"model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,259,"jacobian,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,260,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,261,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,262,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,263,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,264,"initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,265,"costRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,266,"parRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,267,"orthoTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,268,qrRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,271,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,272,public LevenbergMarquardtOptimizer withConvergenceChecker(ConvergenceChecker<PointVectorValuePair> checker) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,273,"return new LevenbergMarquardtOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,274,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,275,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,276,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,277,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,278,"checker,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,279,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,280,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,281,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,282,"initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,283,"costRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,284,"parRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,285,"orthoTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,286,qrRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,289,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,290,public LevenbergMarquardtOptimizer withStartPoint(double[] start) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,291,"return new LevenbergMarquardtOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,292,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,293,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,294,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,295,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,296,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,297,"start,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,298,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,299,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,300,"initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,301,"costRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,302,"parRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,303,"orthoTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,304,qrRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,307,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,308,public LevenbergMarquardtOptimizer withMaxIterations(int maxIter) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,309,"return new LevenbergMarquardtOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,310,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,311,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,312,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,313,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,314,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,315,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,316,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,317,"maxIter,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,318,"initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,319,"costRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,320,"parRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,321,"orthoTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,322,qrRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,325,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,326,public LevenbergMarquardtOptimizer withMaxEvaluations(int maxEval) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,327,"return new LevenbergMarquardtOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,328,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,329,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,330,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,331,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,332,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,333,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,334,"maxEval,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,335,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,336,"initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,337,"costRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,338,"parRelativeTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,339,"orthoTolerance,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,340,qrRankingThreshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,344,* Creates a new instance.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,346,* @param initStepBoundFactor Positive input variable used in
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,347,* determining the initial step bound. This bound is set to the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,348,* product of initialStepBoundFactor and the euclidean norm of
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,349,"* {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,350,* itself. In most cases factor should lie in the interval
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,351,"* {@code (0.1, 100.0)}. {@code 100} is a generally recommended value."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,352,* @param costRelTol Desired relative error in the sum of squares.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,353,* @param parRelTol Desired relative error in the approximate solution
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,354,* parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,355,* @param orthoTol Desired max cosine on the orthogonality between
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,356,* the function vector and the columns of the Jacobian.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,357,* @param threshold Desired threshold for QR ranking. If the squared norm
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,358,* of a column vector is smaller or equal to this threshold during QR
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,359,"* decomposition, it is considered to be a zero vector and hence the rank"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,360,* of the matrix is reduced.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,361,* @return a new instance with all fields identical to this instance except
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,362,* for the givens arguments.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,364,"public LevenbergMarquardtOptimizer withTuningParameters(double initStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,365,"double costRelTol,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,366,"double parRelTol,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,367,"double orthoTol,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,368,double threshold) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,369,"return new LevenbergMarquardtOptimizer(getTarget(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,370,"getWeightInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,371,"getWeightSquareRootInternal(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,372,"getModel(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,373,"getJacobian(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,374,"getConvergenceChecker(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,375,"getStart(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,376,"getMaxEvaluations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,377,"getMaxIterations(),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,378,"initStepBoundFactor,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,379,"costRelTol,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,380,"parRelTol,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,381,"orthoTol,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,382,threshold);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,386,* Gets the value of a tuning parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,387,"* @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,389,* @return the parameter's value.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,391,public double getInitialStepBoundFactor() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,392,return initialStepBoundFactor;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,396,* Gets the value of a tuning parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,397,"* @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,399,* @return the parameter's value.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,401,public double getCostRelativeTolerance() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,402,return costRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,406,* Gets the value of a tuning parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,407,"* @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,409,* @return the parameter's value.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,411,public double getParRelativeTolerance() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,412,return parRelativeTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,416,* Gets the value of a tuning parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,417,"* @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,419,* @return the parameter's value.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,421,public double getOrthoTolerance() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,422,return orthoTolerance;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,426,* Gets the value of a tuning parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,427,"* @see #withTuningParameters(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,429,* @return the parameter's value.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,431,public double getRankingThreshold() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,432,return qrRankingThreshold;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,435,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,436,@Override
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,437,protected PointVectorValuePair doOptimize() {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,438,final int nR = getTarget().length; // Number of observed data.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,439,final double[] currentPoint = getStart();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,440,final int nC = currentPoint.length; // Number of parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,442,// arrays shared with the other private methods
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,443,"final int solvedCols  = FastMath.min(nR, nC);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,444,lmDir = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,445,lmPar = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,447,// local point
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,448,double   delta   = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,449,double   xNorm   = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,450,double[] diag    = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,451,double[] oldX    = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,452,double[] oldRes  = new double[nR];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,453,double[] oldObj  = new double[nR];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,454,double[] qtf     = new double[nR];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,455,double[] work1   = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,456,double[] work2   = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,457,double[] work3   = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,459,final RealMatrix weightMatrixSqrt = getWeightSquareRoot();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,461,// Evaluate the function at the starting point and calculate its norm.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,462,double[] currentObjective = computeObjectiveValue(currentPoint);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,463,double[] currentResiduals = computeResiduals(currentObjective);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,464,"PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,465,double currentCost = computeCost(currentResiduals);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,467,// Outer loop.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,468,boolean firstIteration = true;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,469,final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,470,while (true) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,471,incrementIterationCount();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,473,final PointVectorValuePair previous = current;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,475,// QR decomposition of the jacobian matrix
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,476,"final InternalData internalData = qrDecomposition(computeWeightedJacobian(currentPoint),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,477,solvedCols);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,478,final double[][] weightedJacobian = internalData.weightedJacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,479,final int[] permutation = internalData.permutation;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,480,final double[] diagR = internalData.diagR;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,481,final double[] jacNorm = internalData.jacNorm;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,483,double[] weightedResidual = weightMatrixSqrt.operate(currentResiduals);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,484,for (int i = 0; i < nR; i++) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,485,qtf[i] = weightedResidual[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,488,// compute Qt.res
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,489,"qTy(qtf, internalData);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,491,"// now we don't need Q anymore,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,492,// so let jacobian contain the R matrix with its diagonal elements
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,493,for (int k = 0; k < solvedCols; ++k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,494,int pk = permutation[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,495,weightedJacobian[k][pk] = diagR[pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,498,if (firstIteration) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,499,// scale the point according to the norms of the columns
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,500,// of the initial jacobian
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,501,xNorm = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,502,for (int k = 0; k < nC; ++k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,503,double dk = jacNorm[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,504,if (dk == 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,505,dk = 1.0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,507,double xk = dk * currentPoint[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,508,xNorm  += xk * xk;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,509,diag[k] = dk;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,511,xNorm = FastMath.sqrt(xNorm);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,513,// initialize the step bound delta
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,514,delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,517,// check orthogonality between function vector and jacobian columns
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,518,double maxCosine = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,519,if (currentCost != 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,520,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,521,int    pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,522,double s  = jacNorm[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,523,if (s != 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,524,double sum = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,525,for (int i = 0; i <= j; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,526,sum += weightedJacobian[i][pj] * qtf[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,528,"maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * currentCost));"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,532,if (maxCosine <= orthoTolerance) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,533,// Convergence has been reached.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,534,return current;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,537,// rescale if necessary
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,538,for (int j = 0; j < nC; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,539,"diag[j] = FastMath.max(diag[j], jacNorm[j]);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,542,// Inner loop.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,543,for (double ratio = 0; ratio < 1.0e-4;) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,545,// save the state
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,546,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,547,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,548,oldX[pj] = currentPoint[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,550,final double previousCost = currentCost;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,551,double[] tmpVec = weightedResidual;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,552,weightedResidual = oldRes;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,553,oldRes    = tmpVec;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,554,tmpVec    = currentObjective;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,555,currentObjective = oldObj;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,556,oldObj    = tmpVec;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,558,// determine the Levenberg-Marquardt parameter
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,559,"determineLMParameter(qtf, delta, diag,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,560,"internalData, solvedCols,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,561,"work1, work2, work3);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,563,// compute the new point and the norm of the evolution direction
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,564,double lmNorm = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,565,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,566,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,567,lmDir[pj] = -lmDir[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,568,currentPoint[pj] = oldX[pj] + lmDir[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,569,double s = diag[pj] * lmDir[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,570,lmNorm  += s * s;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,572,lmNorm = FastMath.sqrt(lmNorm);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,573,"// on the first iteration, adjust the initial step bound."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,574,if (firstIteration) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,575,"delta = FastMath.min(delta, lmNorm);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,578,// Evaluate the function at x + p and calculate its norm.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,579,currentObjective = computeObjectiveValue(currentPoint);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,580,currentResiduals = computeResiduals(currentObjective);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,581,"current = new PointVectorValuePair(currentPoint, currentObjective);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,582,currentCost = computeCost(currentResiduals);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,584,// compute the scaled actual reduction
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,585,double actRed = -1.0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,586,if (0.1 * currentCost < previousCost) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,587,double r = currentCost / previousCost;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,588,actRed = 1.0 - r * r;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,591,// compute the scaled predicted reduction
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,592,// and the scaled directional derivative
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,593,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,594,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,595,double dirJ = lmDir[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,596,work1[j] = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,597,for (int i = 0; i <= j; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,598,work1[i] += weightedJacobian[i][pj] * dirJ;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,601,double coeff1 = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,602,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,603,coeff1 += work1[j] * work1[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,605,double pc2 = previousCost * previousCost;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,606,coeff1 = coeff1 / pc2;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,607,double coeff2 = lmPar * lmNorm * lmNorm / pc2;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,608,double preRed = coeff1 + 2 * coeff2;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,609,double dirDer = -(coeff1 + coeff2);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,611,// ratio of the actual to the predicted reduction
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,612,ratio = (preRed == 0) ? 0 : (actRed / preRed);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,614,// update the step bound
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,615,if (ratio <= 0.25) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,616,double tmp =
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,617,(actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,618,if ((0.1 * currentCost >= previousCost) || (tmp < 0.1)) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,619,tmp = 0.1;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,621,"delta = tmp * FastMath.min(delta, 10.0 * lmNorm);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,622,lmPar /= tmp;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,623,} else if ((lmPar == 0) || (ratio >= 0.75)) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,624,delta = 2 * lmNorm;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,625,lmPar *= 0.5;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,628,// test for successful iteration.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,629,if (ratio >= 1.0e-4) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,630,"// successful iteration, update the norm"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,631,firstIteration = false;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,632,xNorm = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,633,for (int k = 0; k < nC; ++k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,634,double xK = diag[k] * currentPoint[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,635,xNorm += xK * xK;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,637,xNorm = FastMath.sqrt(xNorm);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,639,// tests for convergence.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,640,"if (checker != null && checker.converged(getIterations(), previous, current)) {"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,641,return current;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,643,} else {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,644,"// failed iteration, reset the previous values"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,645,currentCost = previousCost;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,646,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,647,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,648,currentPoint[pj] = oldX[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,650,tmpVec    = weightedResidual;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,651,weightedResidual = oldRes;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,652,oldRes    = tmpVec;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,653,tmpVec    = currentObjective;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,654,currentObjective = oldObj;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,655,oldObj    = tmpVec;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,656,"// Reset ""current"" to previous values."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,657,"current = new PointVectorValuePair(currentPoint, currentObjective);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,660,// Default convergence criteria.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,661,if ((FastMath.abs(actRed) <= costRelativeTolerance &&
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,662,preRed <= costRelativeTolerance &&
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,663,ratio <= 2.0) ||
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,664,delta <= parRelativeTolerance * xNorm) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,665,return current;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,668,// tests for termination and stringent tolerances
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,669,if (FastMath.abs(actRed) <= TWO_EPS &&
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,670,preRed <= TWO_EPS &&
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,671,ratio <= 2.0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,672,"throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,673,costRelativeTolerance);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,674,} else if (delta <= TWO_EPS * xNorm) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,675,"throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,676,parRelativeTolerance);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,677,} else if (maxCosine <= TWO_EPS) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,678,"throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,679,orthoTolerance);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,686,* Holds internal data.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,687,"* This structure was created so that all optimizer fields can be ""final""."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,688,* Code should be further refactored in order to not pass around arguments
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,689,"* that will modified in-place (cf. ""work"" arrays)."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,691,private static class InternalData {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,692,/** Weighted Jacobian. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,693,final double[][] weightedJacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,694,/** Columns permutation array. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,695,final int[] permutation;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,696,/** Rank of the Jacobian matrix. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,697,final int rank;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,698,/** Diagonal elements of the R matrix in the QR decomposition. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,699,final double[] diagR;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,700,/** Norms of the columns of the jacobian matrix. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,701,final double[] jacNorm;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,702,/** Coefficients of the Householder transforms vectors. */
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,703,final double[] beta;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,706,* @param weightedJacobian Weighted Jacobian.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,707,* @param permutation Columns permutation array.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,708,* @param rank Rank of the Jacobian matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,709,* @param diagR Diagonal elements of the R matrix in the QR decomposition.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,710,* @param jacNorm Norms of the columns of the jacobian matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,711,* @param beta Coefficients of the Householder transforms vectors.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,713,"InternalData(double[][] weightedJacobian,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,714,"int[] permutation,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,715,"int rank,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,716,"double[] diagR,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,717,"double[] jacNorm,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,718,double[] beta) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,719,this.weightedJacobian = weightedJacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,720,this.permutation = permutation;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,721,this.rank = rank;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,722,this.diagR = diagR;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,723,this.jacNorm = jacNorm;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,724,this.beta = beta;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,729,* Determines the Levenberg-Marquardt parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,731,* <p>This implementation is a translation in Java of the MINPACK
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,732,"* <a href=""http://www.netlib.org/minpack/lmpar.f"">lmpar</a>"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,733,* routine.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,734,* <p>This method sets the lmPar and lmDir attributes.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,735,* <p>The authors of the original fortran function are:</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,736,* <ul>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,737,*   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,738,*   <li>Burton  S. Garbow</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,739,*   <li>Kenneth E. Hillstrom</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,740,*   <li>Jorge   J. More</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,741,* </ul>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,742,* <p>Luc Maisonobe did the Java translation.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,744,* @param qy Array containing qTy.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,745,* @param delta Upper bound on the euclidean norm of diagR * lmDir.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,746,* @param diag Diagonal matrix.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,747,* @param internalData Data (modified in-place in this method).
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,748,* @param solvedCols Number of solved point.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,749,* @param work1 work array
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,750,* @param work2 work array
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,751,* @param work3 work array
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,753,"private void determineLMParameter(double[] qy, double delta, double[] diag,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,754,"InternalData internalData, int solvedCols,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,755,"double[] work1, double[] work2, double[] work3) {"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,756,final double[][] weightedJacobian = internalData.weightedJacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,757,final int[] permutation = internalData.permutation;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,758,final int rank = internalData.rank;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,759,final double[] diagR = internalData.diagR;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,761,final int nC = weightedJacobian[0].length;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,763,"// compute and store in x the gauss-newton direction, if the"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,764,"// jacobian is rank-deficient, obtain a least squares solution"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,765,for (int j = 0; j < rank; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,766,lmDir[permutation[j]] = qy[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,768,for (int j = rank; j < nC; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,769,lmDir[permutation[j]] = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,771,for (int k = rank - 1; k >= 0; --k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,772,int pk = permutation[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,773,double ypk = lmDir[pk] / diagR[pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,774,for (int i = 0; i < k; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,775,lmDir[permutation[i]] -= ypk * weightedJacobian[i][pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,777,lmDir[pk] = ypk;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,780,"// evaluate the function at the origin, and test"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,781,// for acceptance of the Gauss-Newton direction
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,782,double dxNorm = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,783,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,784,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,785,double s = diag[pj] * lmDir[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,786,work1[pj] = s;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,787,dxNorm += s * s;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,789,dxNorm = FastMath.sqrt(dxNorm);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,790,double fp = dxNorm - delta;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,791,if (fp <= 0.1 * delta) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,792,lmPar = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,793,return;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,796,"// if the jacobian is not rank deficient, the Newton step provides"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,797,"// a lower bound, parl, for the zero of the function,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,798,// otherwise set this bound to zero
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,799,double sum2;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,800,double parl = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,801,if (rank == solvedCols) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,802,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,803,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,804,work1[pj] *= diag[pj] / dxNorm;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,806,sum2 = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,807,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,808,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,809,double sum = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,810,for (int i = 0; i < j; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,811,sum += weightedJacobian[i][pj] * work1[permutation[i]];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,813,double s = (work1[pj] - sum) / diagR[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,814,work1[pj] = s;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,815,sum2 += s * s;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,817,parl = fp / (delta * sum2);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,820,"// calculate an upper bound, paru, for the zero of the function"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,821,sum2 = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,822,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,823,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,824,double sum = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,825,for (int i = 0; i <= j; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,826,sum += weightedJacobian[i][pj] * qy[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,828,sum /= diag[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,829,sum2 += sum * sum;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,831,double gNorm = FastMath.sqrt(sum2);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,832,double paru = gNorm / delta;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,833,if (paru == 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,834,"paru = Precision.SAFE_MIN / FastMath.min(delta, 0.1);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,837,"// if the input par lies outside of the interval (parl,paru),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,838,// set par to the closer endpoint
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,839,"lmPar = FastMath.min(paru, FastMath.max(lmPar, parl));"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,840,if (lmPar == 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,841,lmPar = gNorm / dxNorm;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,844,for (int countdown = 10; countdown >= 0; --countdown) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,846,// evaluate the function at the current value of lmPar
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,847,if (lmPar == 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,848,"lmPar = FastMath.max(Precision.SAFE_MIN, 0.001 * paru);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,850,double sPar = FastMath.sqrt(lmPar);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,851,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,852,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,853,work1[pj] = sPar * diag[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,855,"determineLMDirection(qy, work1, work2, internalData, solvedCols, work3);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,857,dxNorm = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,858,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,859,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,860,double s = diag[pj] * lmDir[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,861,work3[pj] = s;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,862,dxNorm += s * s;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,864,dxNorm = FastMath.sqrt(dxNorm);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,865,double previousFP = fp;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,866,fp = dxNorm - delta;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,868,"// if the function is small enough, accept the current value"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,869,"// of lmPar, also test for the exceptional cases where parl is zero"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,870,if (FastMath.abs(fp) <= 0.1 * delta ||
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,871,(parl == 0 &&
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,872,fp <= previousFP &&
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,873,previousFP < 0)) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,874,return;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,877,// compute the Newton correction
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,878,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,879,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,880,work1[pj] = work3[pj] * diag[pj] / dxNorm;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,882,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,883,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,884,work1[pj] /= work2[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,885,double tmp = work1[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,886,for (int i = j + 1; i < solvedCols; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,887,work1[permutation[i]] -= weightedJacobian[i][pj] * tmp;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,890,sum2 = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,891,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,892,double s = work1[permutation[j]];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,893,sum2 += s * s;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,895,double correction = fp / (delta * sum2);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,897,"// depending on the sign of the function, update parl or paru."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,898,if (fp > 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,899,"parl = FastMath.max(parl, lmPar);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,900,} else if (fp < 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,901,"paru = FastMath.min(paru, lmPar);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,904,// compute an improved estimate for lmPar
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,905,"lmPar = FastMath.max(parl, lmPar + correction);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,908,return;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,912,* Solve a*x = b and d*x = 0 in the least squares sense.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,913,* <p>This implementation is a translation in Java of the MINPACK
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,914,"* <a href=""http://www.netlib.org/minpack/qrsolv.f"">qrsolv</a>"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,915,* routine.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,916,* <p>This method sets the lmDir and lmDiag attributes.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,917,* <p>The authors of the original fortran function are:</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,918,* <ul>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,919,*   <li>Argonne National Laboratory. MINPACK project. March 1980</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,920,*   <li>Burton  S. Garbow</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,921,*   <li>Kenneth E. Hillstrom</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,922,*   <li>Jorge   J. More</li>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,923,* </ul>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,924,* <p>Luc Maisonobe did the Java translation.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,926,* @param qy array containing qTy
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,927,* @param diag diagonal matrix
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,928,* @param lmDiag diagonal elements associated with lmDir
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,929,* @param internalData Data (modified in-place in this method).
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,930,* @param solvedCols Number of sloved point.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,931,* @param work work array
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,933,"private void determineLMDirection(double[] qy, double[] diag,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,934,"double[] lmDiag,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,935,"InternalData internalData,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,936,"int solvedCols,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,937,double[] work) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,938,final int[] permutation = internalData.permutation;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,939,final double[][] weightedJacobian = internalData.weightedJacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,940,final double[] diagR = internalData.diagR;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,942,// copy R and Qty to preserve input and initialize s
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,943,"//  in particular, save the diagonal elements of R in lmDir"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,944,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,945,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,946,for (int i = j + 1; i < solvedCols; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,947,weightedJacobian[i][pj] = weightedJacobian[j][permutation[i]];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,949,lmDir[j] = diagR[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,950,work[j]  = qy[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,953,// eliminate the diagonal matrix d using a Givens rotation
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,954,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,956,"// prepare the row of d to be eliminated, locating the"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,957,// diagonal element using p from the Q.R. factorization
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,958,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,959,double dpj = diag[pj];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,960,if (dpj != 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,961,"Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,963,lmDiag[j] = dpj;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,965,//  the transformations to eliminate the row of d
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,966,// modify only a single element of Qty
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,967,"// beyond the first n, which is initially zero."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,968,double qtbpj = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,969,for (int k = j; k < solvedCols; ++k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,970,int pk = permutation[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,972,// determine a Givens rotation which eliminates the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,973,// appropriate element in the current row of d
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,974,if (lmDiag[k] != 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,976,final double sin;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,977,final double cos;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,978,double rkk = weightedJacobian[k][pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,979,if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,980,final double cotan = rkk / lmDiag[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,981,sin   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,982,cos   = sin * cotan;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,983,} else {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,984,final double tan = lmDiag[k] / rkk;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,985,cos = 1.0 / FastMath.sqrt(1.0 + tan * tan);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,986,sin = cos * tan;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,989,// compute the modified diagonal element of R and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,990,"// the modified element of (Qty,0)"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,991,weightedJacobian[k][pk] = cos * rkk + sin * lmDiag[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,992,final double temp = cos * work[k] + sin * qtbpj;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,993,qtbpj = -sin * work[k] + cos * qtbpj;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,994,work[k] = temp;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,996,// accumulate the tranformation in the row of s
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,997,for (int i = k + 1; i < solvedCols; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,998,double rik = weightedJacobian[i][pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,999,final double temp2 = cos * rik + sin * lmDiag[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1000,lmDiag[i] = -sin * rik + cos * lmDiag[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1001,weightedJacobian[i][pk] = temp2;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1006,// store the diagonal element of s and restore
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1007,// the corresponding diagonal element of R
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1008,lmDiag[j] = weightedJacobian[j][permutation[j]];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1009,weightedJacobian[j][permutation[j]] = lmDir[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1012,"// solve the triangular system for z, if the system is"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1013,"// singular, then obtain a least squares solution"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1014,int nSing = solvedCols;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1015,for (int j = 0; j < solvedCols; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1016,if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1017,nSing = j;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1019,if (nSing < solvedCols) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1020,work[j] = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1023,if (nSing > 0) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1024,for (int j = nSing - 1; j >= 0; --j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1025,int pj = permutation[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1026,double sum = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1027,for (int i = j + 1; i < nSing; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1028,sum += weightedJacobian[i][pj] * work[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1030,work[j] = (work[j] - sum) / lmDiag[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1034,// permute the components of z back to components of lmDir
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1035,for (int j = 0; j < lmDir.length; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1036,lmDir[permutation[j]] = work[j];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1041,* Decompose a matrix A as A.P = Q.R using Householder transforms.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1042,* <p>As suggested in the P. Lascaux and R. Theodor book
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1043,* <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1044,"* l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1045,* the Householder transforms with u<sub>k</sub> unit vectors such that:
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1046,* <pre>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1047,* H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1048,* </pre>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1049,* we use <sub>k</sub> non-unit vectors such that:
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1050,* <pre>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1051,* H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1052,* </pre>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1053,* where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1054,* The beta<sub>k</sub> coefficients are provided upon exit as recomputing
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1055,* them from the v<sub>k</sub> vectors would be costly.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1056,* <p>This decomposition handles rank deficient cases since the tranformations
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1057,* are performed in non-increasing columns norms order thanks to columns
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1058,* pivoting. The diagonal elements of the R matrix are therefore also in
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1059,* non-increasing absolute values order.</p>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1061,* @param jacobian Weighted Jacobian matrix at the current point.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1062,* @param solvedCols Number of solved point.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1063,* @return data used in other methods of this class.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1064,* @throws ConvergenceException if the decomposition cannot be performed.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1066,"private InternalData qrDecomposition(RealMatrix jacobian,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1067,int solvedCols) throws ConvergenceException {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1068,"// Code in this class assumes that the weighted Jacobian is -(W^(1/2) J),"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1069,// hence the multiplication by -1.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1070,final double[][] weightedJacobian = jacobian.scalarMultiply(-1).getData();
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1072,final int nR = weightedJacobian.length;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1073,final int nC = weightedJacobian[0].length;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1075,final int[] permutation = new int[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1076,final double[] diagR = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1077,final double[] jacNorm = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1078,final double[] beta = new double[nC];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1080,// initializations
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1081,for (int k = 0; k < nC; ++k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1082,permutation[k] = k;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1083,double norm2 = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1084,for (int i = 0; i < nR; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1085,double akk = weightedJacobian[i][k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1086,norm2 += akk * akk;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1088,jacNorm[k] = FastMath.sqrt(norm2);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1091,// transform the matrix column after column
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1092,for (int k = 0; k < nC; ++k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1094,// select the column with the greatest norm on active components
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1095,int nextColumn = -1;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1096,double ak2 = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1097,for (int i = k; i < nC; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1098,double norm2 = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1099,for (int j = k; j < nR; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1100,double aki = weightedJacobian[j][permutation[i]];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1101,norm2 += aki * aki;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1103,if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1104,"throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1105,"nR, nC);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1107,if (norm2 > ak2) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1108,nextColumn = i;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1109,ak2        = norm2;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1112,if (ak2 <= qrRankingThreshold) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1113,"return new InternalData(weightedJacobian, permutation, k, diagR, jacNorm, beta);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1115,int pk = permutation[nextColumn];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1116,permutation[nextColumn] = permutation[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1117,permutation[k] = pk;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1119,// choose alpha such that Hk.u = alpha ek
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1120,double akk = weightedJacobian[k][pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1121,double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1122,double betak = 1.0 / (ak2 - akk * alpha);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1123,beta[pk] = betak;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1125,// transform the current column
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1126,diagR[pk] = alpha;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1127,weightedJacobian[k][pk] -= alpha;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1129,// transform the remaining columns
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1130,for (int dk = nC - 1 - k; dk > 0; --dk) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1131,double gamma = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1132,for (int j = k; j < nR; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1133,gamma += weightedJacobian[j][pk] * weightedJacobian[j][permutation[k + dk]];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1135,gamma *= betak;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1136,for (int j = k; j < nR; ++j) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1137,weightedJacobian[j][permutation[k + dk]] -= gamma * weightedJacobian[j][pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1142,"return new InternalData(weightedJacobian, permutation, solvedCols, diagR, jacNorm, beta);"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1146,* Compute the product Qt.y for some Q.R. decomposition.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1148,* @param y vector to multiply (will be overwritten with the result)
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1149,* @param internalData Data.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1151,"private void qTy(double[] y,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1152,InternalData internalData) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1153,final double[][] weightedJacobian = internalData.weightedJacobian;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1154,final int[] permutation = internalData.permutation;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1155,final double[] beta = internalData.beta;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1157,final int nR = weightedJacobian.length;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1158,final int nC = weightedJacobian[0].length;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1160,for (int k = 0; k < nC; ++k) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1161,int pk = permutation[k];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1162,double gamma = 0;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1163,for (int i = k; i < nR; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1164,gamma += weightedJacobian[i][pk] * y[i];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1166,gamma *= beta[pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1167,for (int i = k; i < nR; ++i) {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer.java,1168,y[i] -= gamma * weightedJacobian[i][pk];
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,19,import org.apache.commons.math3.optim.ConvergenceChecker;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,20,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,23,"* Interface for ""fluent-API"" that advertizes a capability of the optimizer."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,25,* @param <T> Concrete optimizer implementation.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,28,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,30,public interface WithConvergenceChecker<T> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,32,* Creates a new instance with the specified parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,34,* @param checker Convergence checker.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,35,* @return a new optimizer instance with all fields identical to this
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,36,* instance except for the given argument.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithConvergenceChecker.java,38,T withConvergenceChecker(ConvergenceChecker<PointVectorValuePair> checker);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,20,"* Interface for ""fluent-API"" that advertizes a capability of the optimizer."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,22,* @param <T> Concrete optimizer implementation.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,25,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,27,public interface WithMaxEvaluations<T> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,29,* Creates a new instance with the specified parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,31,* @param maxEval Maximum number of evaluations of the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,32,* @return a new optimizer instance with all fields identical to this
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,33,* instance except for the given argument.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxEvaluations.java,35,T withMaxEvaluations(int maxEval);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,20,"* Interface for ""fluent-API"" that advertizes a capability of the optimizer."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,22,* @param <T> Concrete optimizer implementation.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,25,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,27,public interface WithMaxIterations<T> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,29,* Creates a new instance with the specified parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,31,* @param maxIter Maximum number of iterations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,32,* @return a new optimizer instance with all fields identical to this
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,33,* instance except for the given argument.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithMaxIterations.java,35,T withMaxIterations(int maxIter);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,19,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,20,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,23,"* Interface for ""fluent-API"" that advertizes a capability of the optimizer."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,25,* @param <T> Concrete optimizer implementation.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,27,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,28,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,30,public interface WithModelAndJacobian<T> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,32,* Creates a new instance with the specified parameters.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,34,* @param model ModelFunction.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,35,* @param jacobian Jacobian of the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,36,* @return a new optimizer instance with all fields identical to this
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,37,* instance except for the given arguments.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,39,"T withModelAndJacobian(MultivariateVectorFunction model,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithModelAndJacobian.java,40,MultivariateMatrixFunction jacobian);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,20,"* Interface for ""fluent-API"" that advertizes a capability of the optimizer."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,22,* @param <T> Concrete optimizer implementation.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,25,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,27,public interface WithStartPoint<T> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,29,* Creates a new instance with the specified parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,31,* @param start Initial guess for the parameters of the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,32,* @return a new optimizer instance with all fields identical to this
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,33,* instance except for the given argument.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithStartPoint.java,35,T withStartPoint(double[] start);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,20,"* Interface for ""fluent-API"" that advertizes a capability of the optimizer."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,22,* @param <T> Concrete optimizer implementation.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,24,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,25,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,27,public interface WithTarget<T> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,29,* Creates a new instance with the specified parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,31,* @param target Objective points of the model function.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,32,* @return a new optimizer instance with all fields identical to this
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,33,* instance except for the given argument.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithTarget.java,35,T withTarget(double[] target);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,19,import org.apache.commons.math3.linear.RealMatrix;
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,22,"* Interface for ""fluent-API"" that advertizes a capability of the optimizer."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,24,* @param <T> Concrete optimizer implementation.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,26,* @version $Id$
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,27,* @since 3.3
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,29,public interface WithWeight<T> {
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,31,* Creates a new instance with the specified parameter.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,33,* @param weight Weight matrix of the observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,34,* @return a new optimizer instance with all fields identical to this
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,35,* instance except for the given argument.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/WithWeight.java,37,T withWeight(RealMatrix weight);
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,19,* This package provides algorithms that minimize the residuals
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,20,* between observations and model values.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,21,* The {@link org.apache.commons.math3.fitting.leastsquares.AbstractLeastSquaresOptimizer
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,22,* non-linear least-squares optimizers} minimize the distance (called <em>cost</em> or
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,23,* <em>&chi;<sup>2</sup></em>) between model and observations.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,25,* <br/>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,26,* Algorithms in this category need access to a <em>model function</em>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,27,* (represented by a {@link org.apache.commons.math3.analysis.MultivariateVectorFunction
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,28,* MultivariateVectorFunction}).
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,29,* Such a model predicts a set of values which the algorithm tries to match with a set
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,30,* of given set of {@link WithTarget observed values}.
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,31,* <br/>
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,32,* The algorithms implemented in this package also require that the user specifies the
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,33,* Jacobian matrix of the model (represented by a
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,34,* {@link org.apache.commons.math3.analysis.MultivariateMatrixFunction
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,35,* MultivariateMatrixFunction}).
True,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,src/main/java/org/apache/commons/math3/fitting/leastsquares/package-info.java,37,package org.apache.commons.math3.fitting.leastsquares;
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,48,"this(checker, 0, Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,52,* @param checker Convergence checker.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,53,* @param maxEval Maximum number of objective function evaluations.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,54,* @param maxIter Maximum number of algorithm iterations.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,56,"protected BaseOptimizer(ConvergenceChecker<PAIR> checker,"
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,57,"int maxEval,"
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,58,int maxIter) {
False,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,50,"valuations = new Incrementor(0, new MaxEvalCallback());"
False,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,51,"terations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());"
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,61,"evaluations = new Incrementor(maxEval, new MaxEvalCallback());"
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,62,"iterations = new Incrementor(maxIter, new MaxIterCallback());"
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,158,* Performs the optimization.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,160,* @return a point/value pair that satifies the convergence criteria.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,161,* @throws TooManyEvaluationsException if the maximal number of
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,162,* evaluations is exceeded.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,163,* @throws TooManyIterationsException if the maximal number of
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,164,* iterations is exceeded.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,166,public PAIR optimize()
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,167,"throws TooManyEvaluationsException,"
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,168,TooManyIterationsException {
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,169,// Reset counters.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,170,evaluations.resetCount();
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,171,iterations.resetCount();
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,172,// Perform optimization.
True,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java,173,return doOptimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,19,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,20,import java.io.Serializable;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,21,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,22,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,23,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,24,import org.apache.commons.math3.exception.ConvergenceException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,25,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,26,import org.apache.commons.math3.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,27,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,28,import org.apache.commons.math3.linear.BlockRealMatrix;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,29,import org.apache.commons.math3.linear.RealMatrix;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,30,import org.apache.commons.math3.linear.DiagonalMatrix;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,31,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,32,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,33,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,34,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,37,* Some of the unit tests are re-implementations of the MINPACK
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,38,"* <a href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,39,"* <a href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,40,* The redistribution policy for MINPACK is available
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,41,"* <a href=""http://www.netlib.org/minpack/disclaimer"">here</a>."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,43,* <T> Concrete implementation of an optimizer.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,45,* @version $Id$
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,47,public abstract class AbstractLeastSquaresOptimizerAbstractTest<T extends AbstractLeastSquaresOptimizer &
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,48,WithTarget<T> &
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,49,WithWeight<T> &
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,50,WithModelAndJacobian<T> &
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,51,WithConvergenceChecker<T> &
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,52,WithStartPoint<T> &
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,53,WithMaxIterations<T> &
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,54,WithMaxEvaluations<T>> {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,56,* @return a concrete optimizer.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,58,public abstract T createOptimizer();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,61,* @return the default number of allowed iterations (which will be
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,62,* used when not specified otherwise).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,64,public abstract int getMaxIterations();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,66,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,67,public void testGetIterations() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,68,T optim = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,69,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,70,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,71,.withTarget(new double[] { 1 })
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,72,.withWeight(new DiagonalMatrix(new double[] { 1 }))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,73,.withStartPoint(new double[] { 3 })
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,74,.withModelAndJacobian(new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,75,public double[] value(double[] point) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,76,return new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,77,"FastMath.pow(point[0], 4)"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,80,new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,81,public double[][] value(double[] point) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,82,return new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,83,"{ 0.25 * FastMath.pow(point[0], 3) }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,88,optim.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,89,Assert.assertTrue(optim.getIterations() > 0);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,92,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,93,public void testTrivial() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,94,LinearProblem problem
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,95,"= new LinearProblem(new double[][] { { 2 } },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,96,new double[] { 3 });
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,97,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,98,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,99,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,100,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,101,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,102,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,103,.withWeight(new DiagonalMatrix(new double[] { 1 }))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,104,.withStartPoint(new double[] { 0 });
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,106,PointVectorValuePair optimum = optimizer.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,108,"Assert.assertEquals(0, optimizer.computeRMS(optimum.getPoint()), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,109,"Assert.assertEquals(1.5, optimum.getPoint()[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,110,"Assert.assertEquals(3.0, optimum.getValue()[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,113,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,114,public void testQRColumnsPermutation() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,115,LinearProblem problem
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,116,"= new LinearProblem(new double[][] { { 1, -1 }, { 0, 2 }, { 1, -2 } },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,117,"new double[] { 4, 6, 1 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,119,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,120,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,121,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,122,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,123,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,124,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,125,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,126,".withStartPoint(new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,128,PointVectorValuePair optimum = optimizer.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,130,"Assert.assertEquals(0, optimizer.computeRMS(optimum.getPoint()), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,131,"Assert.assertEquals(7, optimum.getPoint()[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,132,"Assert.assertEquals(3, optimum.getPoint()[1], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,133,"Assert.assertEquals(4, optimum.getValue()[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,134,"Assert.assertEquals(6, optimum.getValue()[1], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,135,"Assert.assertEquals(1, optimum.getValue()[2], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,138,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,139,public void testNoDependency() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,140,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,141,"{ 2, 0, 0, 0, 0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,142,"{ 0, 2, 0, 0, 0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,143,"{ 0, 0, 2, 0, 0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,144,"{ 0, 0, 0, 2, 0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,145,"{ 0, 0, 0, 0, 2, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,146,"{ 0, 0, 0, 0, 0, 2 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,147,"}, new double[] { 0, 1.1, 2.2, 3.3, 4.4, 5.5 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,148,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,149,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,150,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,151,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,152,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,153,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,154,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1, 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,155,".withStartPoint(new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,157,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,158,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,159,for (int i = 0; i < problem.target.length; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,160,"Assert.assertEquals(0.55 * i, optimum[i], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,164,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,165,public void testOneSet() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,166,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,167,"{  1,  0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,168,"{ -1,  1, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,169,"{  0, -1, 1 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,170,"}, new double[] { 1, 1, 1});"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,172,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,173,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,174,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,175,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,176,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,177,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,178,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,179,".withStartPoint(new double[] { 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,181,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,182,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,183,"Assert.assertEquals(1, optimum[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,184,"Assert.assertEquals(2, optimum[1], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,185,"Assert.assertEquals(3, optimum[2], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,188,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,189,public void testTwoSets() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,190,double epsilon = 1e-7;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,191,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,192,"{  2,  1,   0,  4,       0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,193,"{ -4, -2,   3, -7,       0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,194,"{  4,  1,  -2,  8,       0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,195,"{  0, -3, -12, -1,       0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,196,"{  0,  0,   0,  0, epsilon, 1 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,197,"{  0,  0,   0,  0,       1, 1 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,198,"}, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,200,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,201,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,202,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,203,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,204,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,205,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,206,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1, 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,207,".withStartPoint(new double[] { 0, 0, 0, 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,209,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,211,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,212,"Assert.assertEquals(3, optimum[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,213,"Assert.assertEquals(4, optimum[1], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,214,"Assert.assertEquals(-1, optimum[2], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,215,"Assert.assertEquals(-2, optimum[3], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,216,"Assert.assertEquals(1 + epsilon, optimum[4], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,217,"Assert.assertEquals(1 - epsilon, optimum[5], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,220,@Test(expected=ConvergenceException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,221,public void testNonInvertible() throws Exception {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,222,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,223,"{  1, 2, -3 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,224,"{  2, 1,  3 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,225,"{ -3, 0, -9 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,226,"}, new double[] { 1, 1, 1 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,228,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,229,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,230,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,231,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,232,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,233,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,234,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,235,".withStartPoint(new double[] { 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,237,optimizer.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,240,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,241,public void testIllConditioned() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,242,LinearProblem problem1 = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,243,"{ 10, 7,  8,  7 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,244,"{  7, 5,  6,  5 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,245,"{  8, 6, 10,  9 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,246,"{  7, 5,  9, 10 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,247,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,248,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,249,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,250,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,251,".withModelAndJacobian(problem1.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,252,problem1.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,253,.withTarget(problem1.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,254,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,255,".withStartPoint(new double[] { 0, 1, 2, 3 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,257,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,259,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,260,"Assert.assertEquals(1, optimum[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,261,"Assert.assertEquals(1, optimum[1], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,262,"Assert.assertEquals(1, optimum[2], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,263,"Assert.assertEquals(1, optimum[3], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,265,LinearProblem problem2 = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,266,"{ 10.00, 7.00, 8.10, 7.20 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,267,"{  7.08, 5.04, 6.00, 5.00 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,268,"{  8.00, 5.98, 9.89, 9.00 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,269,"{  6.99, 4.99, 9.00, 9.98 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,270,"}, new double[] { 32, 23, 33, 31 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,272,optimizer = optimizer
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,273,".withModelAndJacobian(problem2.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,274,problem2.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,275,.withTarget(problem2.getTarget());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,277,optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,279,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,280,"Assert.assertEquals(-81, optimum[0], 1e-8);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,281,"Assert.assertEquals(137, optimum[1], 1e-8);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,282,"Assert.assertEquals(-34, optimum[2], 1e-8);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,283,"Assert.assertEquals( 22, optimum[3], 1e-8);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,286,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,287,public void testMoreEstimatedParametersSimple() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,288,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,289,"{ 3, 2,  0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,290,"{ 0, 1, -1, 1 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,291,"{ 2, 0,  1, 0 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,292,"}, new double[] { 7, 3, 5 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,294,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,295,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,296,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,297,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,298,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,299,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,300,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,301,".withStartPoint(new double[] { 7, 6, 5, 4 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,303,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,304,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,307,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,308,public void testMoreEstimatedParametersUnsorted() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,309,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,310,"{ 1, 1,  0,  0, 0,  0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,311,"{ 0, 0,  1,  1, 1,  0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,312,"{ 0, 0,  0,  0, 1, -1 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,313,"{ 0, 0, -1,  1, 0,  1 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,314,"{ 0, 0,  0, -1, 1,  0 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,315,"}, new double[] { 3, 12, -1, 7, 1 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,317,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,318,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,319,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,320,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,321,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,322,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,323,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,324,".withStartPoint(new double[] { 2, 2, 2, 2, 2, 2 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,326,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,328,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,329,"Assert.assertEquals(3, optimum[2], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,330,"Assert.assertEquals(4, optimum[3], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,331,"Assert.assertEquals(5, optimum[4], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,332,"Assert.assertEquals(6, optimum[5], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,335,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,336,public void testRedundantEquations() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,337,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,338,"{ 1,  1 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,339,"{ 1, -1 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,340,"{ 1,  3 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,341,"}, new double[] { 3, 1, 5 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,343,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,344,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,345,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,346,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,347,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,348,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,349,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,350,".withStartPoint(new double[] { 1, 1 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,352,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,354,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,355,"Assert.assertEquals(2, optimum[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,356,"Assert.assertEquals(1, optimum[1], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,359,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,360,public void testInconsistentEquations() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,361,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,362,"{ 1,  1 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,363,"{ 1, -1 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,364,"{ 1,  3 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,365,"}, new double[] { 3, 1, 4 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,367,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,368,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,369,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,370,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,371,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,372,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,373,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,374,".withStartPoint(new double[] { 1, 1 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,376,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,378,Assert.assertTrue(optimizer.computeRMS(optimum) > 0.1);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,381,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,382,public void testInconsistentSizes1() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,383,LinearProblem problem
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,384,"= new LinearProblem(new double[][] { { 1, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,385,"{ 0, 1 } },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,386,"new double[] { -1, 1 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,387,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,388,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,389,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,390,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,391,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,392,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,393,".withWeight(new DiagonalMatrix(new double[] { 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,394,".withStartPoint(new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,396,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,398,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,399,"Assert.assertEquals(-1, optimum[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,400,"Assert.assertEquals(1, optimum[1], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,402,optimizer.withWeight(new DiagonalMatrix(new double[] { 1 })).optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,405,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,406,public void testInconsistentSizes2() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,407,LinearProblem problem
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,408,"= new LinearProblem(new double[][] { { 1, 0 }, { 0, 1 } },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,409,"new double[] { -1, 1 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,411,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,412,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,413,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,414,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,415,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,416,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,417,".withWeight(new DiagonalMatrix(new double[] { 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,418,".withStartPoint(new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,420,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,422,"Assert.assertEquals(0, optimizer.computeRMS(optimum), 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,423,"Assert.assertEquals(-1, optimum[0], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,424,"Assert.assertEquals(1, optimum[1], 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,426,optimizer
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,427,.withTarget(new double[] { 1 })
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,428,.withWeight(new DiagonalMatrix(new double[] { 1 }))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,429,.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,432,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,433,public void testCircleFitting() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,434,CircleVectorial circle = new CircleVectorial();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,435,"circle.addPoint( 30,  68);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,436,"circle.addPoint( 50,  -6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,437,"circle.addPoint(110, -20);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,438,"circle.addPoint( 35,  15);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,439,"circle.addPoint( 45,  97);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,441,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,442,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,443,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,444,".withModelAndJacobian(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,445,circle.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,446,".withTarget(new double[] { 0, 0, 0, 0, 0 })"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,447,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,448,".withStartPoint(new double[] { 98.680, 47.345 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,450,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,451,Assert.assertTrue(optimizer.getEvaluations() < 10);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,453,double rms = optimizer.computeRMS(optimum);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,454,"Assert.assertEquals(1.768262623567235,  FastMath.sqrt(circle.getN()) * rms, 1e-10);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,456,"Vector2D center = new Vector2D(optimum[0], optimum[1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,457,"Assert.assertEquals(69.96016176931406, circle.getRadius(center), 1e-6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,458,"Assert.assertEquals(96.07590211815305, center.getX(), 1e-6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,459,"Assert.assertEquals(48.13516790438953, center.getY(), 1e-6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,461,"double[][] cov = optimizer.computeCovariances(optimum, 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,462,"Assert.assertEquals(1.839, cov[0][0], 0.001);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,463,"Assert.assertEquals(0.731, cov[0][1], 0.001);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,464,"Assert.assertEquals(cov[0][1], cov[1][0], 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,465,"Assert.assertEquals(0.786, cov[1][1], 0.001);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,467,// add perfect measurements and check errors are reduced
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,468,double  r = circle.getRadius(center);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,469,for (double d= 0; d < 2 * FastMath.PI; d += 0.01) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,470,"circle.addPoint(center.getX() + r * FastMath.cos(d), center.getY() + r * FastMath.sin(d));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,473,double[] target = new double[circle.getN()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,474,"Arrays.fill(target, 0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,475,double[] weights = new double[circle.getN()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,476,"Arrays.fill(weights, 2);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,477,optimizer = optimizer.withTarget(target).withWeight(new DiagonalMatrix(weights));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,478,optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,480,"cov = optimizer.computeCovariances(optimum, 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,481,"Assert.assertEquals(0.0016, cov[0][0], 0.001);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,482,"Assert.assertEquals(3.2e-7, cov[0][1], 1e-9);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,483,"Assert.assertEquals(cov[0][1], cov[1][0], 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,484,"Assert.assertEquals(0.0016, cov[1][1], 0.001);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,487,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,488,public void testCircleFittingBadInit() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,489,CircleVectorial circle = new CircleVectorial();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,490,double[][] points = circlePoints;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,491,double[] target = new double[points.length];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,492,"Arrays.fill(target, 0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,493,double[] weights = new double[points.length];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,494,"Arrays.fill(weights, 2);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,495,for (int i = 0; i < points.length; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,496,"circle.addPoint(points[i][0], points[i][1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,498,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,499,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,500,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,501,".withModelAndJacobian(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,502,circle.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,503,.withTarget(target)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,504,.withWeight(new DiagonalMatrix(weights))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,505,".withStartPoint(new double[] { -12, -12 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,507,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,509,"Vector2D center = new Vector2D(optimum[0], optimum[1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,510,Assert.assertTrue(optimizer.getEvaluations() < 25);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,511,"Assert.assertEquals( 0.043, optimizer.computeRMS(optimum), 1e-3);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,512,"Assert.assertEquals( 0.292235,  circle.getRadius(center), 1e-6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,513,"Assert.assertEquals(-0.151738,  center.getX(), 1e-6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,514,"Assert.assertEquals( 0.2075001, center.getY(), 1e-6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,517,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,518,public void testCircleFittingGoodInit() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,519,CircleVectorial circle = new CircleVectorial();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,520,double[][] points = circlePoints;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,521,double[] target = new double[points.length];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,522,"Arrays.fill(target, 0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,523,double[] weights = new double[points.length];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,524,"Arrays.fill(weights, 2);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,525,for (int i = 0; i < points.length; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,526,"circle.addPoint(points[i][0], points[i][1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,528,T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,529,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,530,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,531,".withModelAndJacobian(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,532,circle.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,533,.withTarget(target)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,534,.withWeight(new DiagonalMatrix(weights))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,535,".withStartPoint(new double[] { 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,537,double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,539,"Assert.assertEquals(-0.1517383071957963, optimum[0], 1e-6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,540,"Assert.assertEquals(0.2074999736353867,  optimum[1], 1e-6);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,541,"Assert.assertEquals(0.04268731682389561, optimizer.computeRMS(optimum), 1e-8);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,544,private final double[][] circlePoints = new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,545,"{-0.312967,  0.072366}, {-0.339248,  0.132965}, {-0.379780,  0.202724},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,546,"{-0.390426,  0.260487}, {-0.361212,  0.328325}, {-0.346039,  0.392619},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,547,"{-0.280579,  0.444306}, {-0.216035,  0.470009}, {-0.149127,  0.493832},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,548,"{-0.075133,  0.483271}, {-0.007759,  0.452680}, { 0.060071,  0.410235},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,549,"{ 0.103037,  0.341076}, { 0.118438,  0.273884}, { 0.131293,  0.192201},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,550,"{ 0.115869,  0.129797}, { 0.072223,  0.058396}, { 0.022884,  0.000718},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,551,"{-0.053355, -0.020405}, {-0.123584, -0.032451}, {-0.216248, -0.032862},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,552,"{-0.278592, -0.005008}, {-0.337655,  0.056658}, {-0.385899,  0.112526},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,553,"{-0.405517,  0.186957}, {-0.415374,  0.262071}, {-0.387482,  0.343398},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,554,"{-0.347322,  0.397943}, {-0.287623,  0.458425}, {-0.223502,  0.475513},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,555,"{-0.135352,  0.478186}, {-0.061221,  0.483371}, { 0.003711,  0.422737},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,556,"{ 0.065054,  0.375830}, { 0.108108,  0.297099}, { 0.123882,  0.222850},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,557,"{ 0.117729,  0.134382}, { 0.085195,  0.056820}, { 0.029800, -0.019138},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,558,"{-0.027520, -0.072374}, {-0.102268, -0.091555}, {-0.200299, -0.106578},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,559,"{-0.292731, -0.091473}, {-0.356288, -0.051108}, {-0.420561,  0.014926},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,560,"{-0.471036,  0.074716}, {-0.488638,  0.182508}, {-0.485990,  0.254068},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,561,"{-0.463943,  0.338438}, {-0.406453,  0.404704}, {-0.334287,  0.466119},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,562,"{-0.254244,  0.503188}, {-0.161548,  0.495769}, {-0.075733,  0.495560},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,563,"{ 0.001375,  0.434937}, { 0.082787,  0.385806}, { 0.115490,  0.323807},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,564,"{ 0.141089,  0.223450}, { 0.138693,  0.131703}, { 0.126415,  0.049174},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,565,"{ 0.066518, -0.010217}, {-0.005184, -0.070647}, {-0.080985, -0.103635},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,566,"{-0.177377, -0.116887}, {-0.260628, -0.100258}, {-0.335756, -0.056251},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,567,"{-0.405195, -0.000895}, {-0.444937,  0.085456}, {-0.484357,  0.175597},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,568,"{-0.472453,  0.248681}, {-0.438580,  0.347463}, {-0.402304,  0.422428},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,569,"{-0.326777,  0.479438}, {-0.247797,  0.505581}, {-0.152676,  0.519380},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,570,"{-0.071754,  0.516264}, { 0.015942,  0.472802}, { 0.076608,  0.419077},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,571,"{ 0.127673,  0.330264}, { 0.159951,  0.262150}, { 0.153530,  0.172681},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,572,"{ 0.140653,  0.089229}, { 0.078666,  0.024981}, { 0.023807, -0.037022},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,573,"{-0.048837, -0.077056}, {-0.127729, -0.075338}, {-0.221271, -0.067526}"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,576,"public void doTestStRD(final StatisticalReferenceDataset dataset,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,577,"final double errParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,578,final double errParamsSd) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,579,final double[] w = new double[dataset.getNumObservations()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,580,"Arrays.fill(w, 1);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,582,final double[][] data = dataset.getData();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,583,final double[] initial = dataset.getStartingPoint(0);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,584,final StatisticalReferenceDataset.LeastSquaresProblem problem = dataset.getLeastSquaresProblem();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,586,final T optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,587,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,588,.withMaxIterations(getMaxIterations())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,589,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,590,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,591,.withTarget(data[1])
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,592,.withWeight(new DiagonalMatrix(w))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,593,.withStartPoint(initial);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,595,final double[] actual = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,596,for (int i = 0; i < actual.length; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,597,double expected = dataset.getParameter(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,598,double delta = FastMath.abs(errParams * expected);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,599,"Assert.assertEquals(dataset.getName() + "", param #"" + i,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,600,"expected, actual[i], delta);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,604,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,605,public void testKirby2() throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,606,"doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(), 1E-7, 1E-7);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,609,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,610,public void testHahn1() throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,611,"doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(), 1E-7, 1E-4);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,614,static class LinearProblem {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,615,private final RealMatrix factors;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,616,private final double[] target;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,618,"public LinearProblem(double[][] factors, double[] target) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,619,this.factors = new BlockRealMatrix(factors);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,620,this.target  = target;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,623,public double[] getTarget() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,624,return target;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,627,public MultivariateVectorFunction getModelFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,628,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,629,public double[] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,630,return factors.operate(params);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,635,public MultivariateMatrixFunction getModelFunctionJacobian() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,636,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,637,public double[][] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java,638,return factors.getData();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,12,* governing permissions and limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,14,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,16,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,17,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,18,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,19,import org.apache.commons.math3.linear.DiagonalMatrix;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,20,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,21,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,24,* The only features tested here are utility methods defined
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,25,* in {@link AbstractLeastSquaresOptimizer} that compute the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,26,* chi-square and parameters standard-deviations.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,28,public class AbstractLeastSquaresOptimizerTest {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,29,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,30,public void testComputeCost() throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,31,final StatisticalReferenceDataset dataset
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,32,= StatisticalReferenceDatasetFactory.createKirby2();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,33,final double[] a = dataset.getParameters();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,34,final double[] y = dataset.getData()[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,35,final double[] w = new double[y.length];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,36,"Arrays.fill(w, 1d);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,38,StatisticalReferenceDataset.LeastSquaresProblem problem
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,39,= dataset.getLeastSquaresProblem();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,41,final LevenbergMarquardtOptimizer optim = LevenbergMarquardtOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,42,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,43,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,44,.withTarget(y)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,45,.withWeight(new DiagonalMatrix(w))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,46,.withStartPoint(a);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,48,final double expected = dataset.getResidualSumOfSquares();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,49,final double cost = optim.computeCost(optim.computeResiduals(optim.getModel().value(optim.getStart())));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,50,final double actual = cost * cost;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,51,"Assert.assertEquals(dataset.getName(), expected, actual, 1e-11 * expected);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,54,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,55,public void testComputeRMS() throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,56,final StatisticalReferenceDataset dataset
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,57,= StatisticalReferenceDatasetFactory.createKirby2();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,58,final double[] a = dataset.getParameters();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,59,final double[] y = dataset.getData()[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,60,final double[] w = new double[y.length];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,61,"Arrays.fill(w, 1d);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,63,StatisticalReferenceDataset.LeastSquaresProblem problem
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,64,= dataset.getLeastSquaresProblem();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,66,final LevenbergMarquardtOptimizer optim = LevenbergMarquardtOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,67,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,68,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,69,.withTarget(y)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,70,.withWeight(new DiagonalMatrix(w))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,71,.withStartPoint(a);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,73,final double expected = FastMath.sqrt(dataset.getResidualSumOfSquares() /
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,74,dataset.getNumObservations());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,75,final double actual = optim.computeRMS(optim.getStart());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,76,"Assert.assertEquals(dataset.getName(), expected, actual, 1e-11 * expected);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,79,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,80,public void testComputeSigma() throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,81,final StatisticalReferenceDataset dataset
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,82,= StatisticalReferenceDatasetFactory.createKirby2();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,83,final double[] a = dataset.getParameters();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,84,final double[] y = dataset.getData()[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,85,final double[] w = new double[y.length];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,86,"Arrays.fill(w, 1d);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,88,StatisticalReferenceDataset.LeastSquaresProblem problem
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,89,= dataset.getLeastSquaresProblem();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,91,final LevenbergMarquardtOptimizer optim = LevenbergMarquardtOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,92,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,93,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,94,.withTarget(y)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,95,.withWeight(new DiagonalMatrix(w))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,96,.withStartPoint(a);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,98,final double[] expected = dataset.getParametersStandardDeviations();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,100,final double cost = optim.computeCost(optim.computeResiduals(optim.getModel().value(optim.getStart())));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,101,"final double[] sig = optim.computeSigma(optim.getStart(), 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,102,final int dof = y.length - a.length;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,103,for (int i = 0; i < sig.length; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,104,final double actual = FastMath.sqrt(cost * cost / dof) * sig[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,105,"Assert.assertEquals(dataset.getName() + "", parameter #"" + i,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTest.java,106,"expected[i], actual, 1e-6 * expected[i]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,3,* contributor license agreements. See the NOTICE file distributed with this
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,4,* work for additional information regarding copyright ownership. The ASF
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,5,"* licenses this file to You under the Apache License, Version 2.0 (the"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,6,"* ""License""); you may not use this file except in compliance with the License."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,7,* You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,8,* http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,9,"* or agreed to in writing, software distributed under the License is"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,10,"* distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,11,"* KIND, either express or implied. See the License for the specific language"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,12,* governing permissions and limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,14,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,16,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,17,import java.util.List;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,18,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,19,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,20,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,21,import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,22,import org.apache.commons.math3.stat.descriptive.StatisticalSummary;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,23,import org.apache.commons.math3.linear.DiagonalMatrix;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,24,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,29,* This class demonstrates the main functionality of the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,30,"* {@link AbstractLeastSquaresOptimizer}, common to the"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,31,* optimizer implementations in package
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,32,* {@link org.apache.commons.math3.fitting.leastsquares}.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,33,* <br/>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,34,"* Not enabled by default, as the class name does not end with ""Test""."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,35,* <br/>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,36,* Invoke by running
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,37,* <pre><code>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,38,*  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,39,* </code></pre>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,40,* or by running
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,41,* <pre><code>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,42,"*  mvn test -Dtest=AbstractLeastSquaresOptimizerTestValidation -DargLine=""-DmcRuns=1234 -server"""
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,43,* </code></pre>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,45,public class AbstractLeastSquaresOptimizerTestValidation {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,46,/** Number of runs. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,47,"private static final int MONTE_CARLO_RUNS = Integer.parseInt(System.getProperty(""mcRuns"","
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,48,"""100""));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,51,"* Using a Monte-Carlo procedure, this test checks the error estimations"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,52,* as provided by the square-root of the diagonal elements of the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,53,* covariance matrix.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,54,* <br/>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,55,"* The test generates sets of observations, each sampled from"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,56,* a Gaussian distribution.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,57,* <br/>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,58,* The optimization problem solved is defined in class
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,59,* {@link StraightLineProblem}.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,60,* <br/>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,61,* The output (on stdout) will be a table summarizing the distribution
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,62,* of parameters generated by the Monte-Carlo process and by the direct
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,63,* estimation provided by the diagonal elements of the covariance matrix.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,65,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,66,public void testParametersErrorMonteCarloObservations() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,67,// Error on the observations.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,68,final double yError = 15;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,70,// True values of the parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,71,final double slope = 123.456;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,72,final double offset = -98.765;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,74,// Samples generator.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,75,final RandomStraightLinePointGenerator lineGenerator
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,76,"= new RandomStraightLinePointGenerator(slope, offset,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,77,"yError,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,78,"-1e3, 1e4,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,79,138577L);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,81,// Number of observations.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,82,final int numObs = 100; // XXX Should be a command-line option.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,83,// number of parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,84,final int numParams = 2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,86,// Parameters found for each of Monte-Carlo run.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,87,final SummaryStatistics[] paramsFoundByDirectSolution = new SummaryStatistics[numParams];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,88,// Sigma estimations (square-root of the diagonal elements of the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,89,"// covariance matrix), for each Monte-Carlo run."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,90,final SummaryStatistics[] sigmaEstimate = new SummaryStatistics[numParams];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,92,// Initialize statistics accumulators.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,93,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,94,paramsFoundByDirectSolution[i] = new SummaryStatistics();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,95,sigmaEstimate[i] = new SummaryStatistics();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,98,"final double[] init = { slope, offset };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,100,// Monte-Carlo (generates many sets of observations).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,101,final int mcRepeat = MONTE_CARLO_RUNS;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,102,int mcCount = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,103,while (mcCount < mcRepeat) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,104,// Observations.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,105,final Point2D.Double[] obs = lineGenerator.generate(numObs);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,107,final StraightLineProblem problem = new StraightLineProblem(yError);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,108,for (int i = 0; i < numObs; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,109,final Point2D.Double p = obs[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,110,"problem.addPoint(p.x, p.y);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,113,// Direct solution (using simple regression).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,114,final double[] regress = problem.solve();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,116,// Estimation of the standard deviation (diagonal elements of the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,117,// covariance matrix).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,118,// Dummy optimizer (to compute the covariance matrix).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,119,final AbstractLeastSquaresOptimizer optim = LevenbergMarquardtOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,120,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,121,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,122,.withTarget(problem.target())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,123,.withWeight(new DiagonalMatrix(problem.weight()));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,125,"final double[] sigma = optim.computeSigma(init, 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,127,// Accumulate statistics.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,128,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,129,paramsFoundByDirectSolution[i].addValue(regress[i]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,130,sigmaEstimate[i].addValue(sigma[i]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,133,// Next Monte-Carlo.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,134,++mcCount;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,137,// Print statistics.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,138,"final String line = ""--------------------------------------------------------------"";"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,139,"System.out.println(""                 True value       Mean        Std deviation"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,140,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,141,System.out.println(line);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,142,"System.out.println(""Parameter #"" + i);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,144,StatisticalSummary s = paramsFoundByDirectSolution[i].getSummary();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,145,"System.out.printf(""              %+.6e   %+.6e   %+.6e\n"","
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,146,"init[i],"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,147,"s.getMean(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,148,s.getStandardDeviation());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,150,s = sigmaEstimate[i].getSummary();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,151,"System.out.printf(""sigma: %+.6e (%+.6e)\n"","
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,152,"s.getMean(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,153,s.getStandardDeviation());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,155,System.out.println(line);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,157,// Check the error estimation.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,158,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,159,"Assert.assertEquals(paramsFoundByDirectSolution[i].getSummary().getStandardDeviation(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,160,"sigmaEstimate[i].getSummary().getMean(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,161,8e-2);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,166,"* In this test, the set of observations is fixed."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,167,"* Using a Monte-Carlo procedure, it generates sets of parameters,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,168,* and determine the parameter change that will result in the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,169,* normalized chi-square becoming larger by one than the value from
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,170,* the best fit solution.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,171,* <br/>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,172,* The optimization problem solved is defined in class
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,173,* {@link StraightLineProblem}.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,174,* <br/>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,175,* The output (on stdout) will be a list of lines containing:
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,176,* <ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,177,"*  <li>slope of the straight line,</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,178,"*  <li>intercept of the straight line,</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,179,*  <li>chi-square of the solution defined by the above two values.</li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,180,* </ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,181,* The output is separated into two blocks (with a blank line between
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,182,* them); the first block will contain all parameter sets for which
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,183,* {@code chi2 < chi2_b + 1}
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,184,"* and the second block, all sets for which"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,185,* {@code chi2 >= chi2_b + 1}
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,186,* where {@code chi2_b} is the lowest chi-square (corresponding to the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,187,* best solution).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,189,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,190,public void testParametersErrorMonteCarloParameters() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,191,// Error on the observations.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,192,final double yError = 15;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,194,// True values of the parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,195,final double slope = 123.456;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,196,final double offset = -98.765;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,198,// Samples generator.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,199,final RandomStraightLinePointGenerator lineGenerator
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,200,"= new RandomStraightLinePointGenerator(slope, offset,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,201,"yError,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,202,"-1e3, 1e4,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,203,13839013L);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,205,// Number of observations.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,206,final int numObs = 10;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,207,// number of parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,208,final int numParams = 2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,210,// Create a single set of observations.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,211,final Point2D.Double[] obs = lineGenerator.generate(numObs);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,213,final StraightLineProblem problem = new StraightLineProblem(yError);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,214,for (int i = 0; i < numObs; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,215,final Point2D.Double p = obs[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,216,"problem.addPoint(p.x, p.y);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,219,// Direct solution (using simple regression).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,220,final double[] regress = problem.solve();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,222,// Dummy optimizer (to compute the chi-square).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,223,final AbstractLeastSquaresOptimizer optim = LevenbergMarquardtOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,224,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,225,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,226,.withTarget(problem.target())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,227,.withWeight(new DiagonalMatrix(problem.weight()));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,229,"final double[] init = { slope, offset };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,230,// Get chi-square of the best parameters set for the given set of
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,231,// observations.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,232,"final double bestChi2N = getChi2N(optim, problem, regress);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,233,"final double[] sigma = optim.computeSigma(regress, 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,235,// Monte-Carlo (generates a grid of parameters).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,236,final int mcRepeat = MONTE_CARLO_RUNS;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,237,final int gridSize = (int) FastMath.sqrt(mcRepeat);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,239,// Parameters found for each of Monte-Carlo run.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,240,// Index 0 = slope
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,241,// Index 1 = offset
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,242,// Index 2 = normalized chi2
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,243,final List<double[]> paramsAndChi2 = new ArrayList<double[]>(gridSize * gridSize);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,245,final double slopeRange = 10 * sigma[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,246,final double offsetRange = 10 * sigma[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,247,final double minSlope = slope - 0.5 * slopeRange;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,248,final double minOffset = offset - 0.5 * offsetRange;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,249,final double deltaSlope =  slopeRange/ gridSize;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,250,final double deltaOffset = offsetRange / gridSize;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,251,for (int i = 0; i < gridSize; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,252,final double s = minSlope + i * deltaSlope;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,253,for (int j = 0; j < gridSize; j++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,254,final double o = minOffset + j * deltaOffset;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,255,"final double chi2N = getChi2N(optim, problem, new double[] {s, o});"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,257,"paramsAndChi2.add(new double[] {s, o, chi2N});"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,261,"// Output (for use with ""gnuplot"")."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,263,// Some info.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,265,// For plotting separately sets of parameters that have a large chi2.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,266,final double chi2NPlusOne = bestChi2N + 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,267,int numLarger = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,269,"final String lineFmt = ""%+.10e %+.10e   %.8e\n"";"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,271,// Point with smallest chi-square.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,272,"System.out.printf(lineFmt, regress[0], regress[1], bestChi2N);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,273,System.out.println(); // Empty line.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,275,// Points within the confidence interval.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,276,for (double[] d : paramsAndChi2) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,277,if (d[2] <= chi2NPlusOne) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,278,"System.out.printf(lineFmt, d[0], d[1], d[2]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,281,System.out.println(); // Empty line.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,283,// Points outside the confidence interval.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,284,for (double[] d : paramsAndChi2) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,285,if (d[2] > chi2NPlusOne) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,286,++numLarger;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,287,"System.out.printf(lineFmt, d[0], d[1], d[2]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,290,System.out.println(); // Empty line.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,292,"System.out.println(""# sigma="" + Arrays.toString(sigma));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,293,"System.out.println(""# "" + numLarger + "" sets filtered out"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,297,* @return the normalized chi-square.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,299,"private double getChi2N(AbstractLeastSquaresOptimizer optim,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,300,"StraightLineProblem problem,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,301,double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,302,final double[] t = problem.target();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,303,final double[] w = problem.weight();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,304,final double cost = optim.computeCost(optim.computeResiduals(optim.getModel().value(params)));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerTestValidation.java,305,return cost * cost / (t.length - params.length);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,19,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,20,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,21,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,22,import org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,23,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,26,* Class that models a circle.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,27,* The parameters of problem are:
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,28,* <ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,29,"*  <li>the x-coordinate of the circle center,</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,30,"*  <li>the y-coordinate of the circle center,</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,31,*  <li>the radius of the circle.</li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,32,* </ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,33,* The model functions are:
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,34,* <ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,35,"*  <li>for each triplet (cx, cy, r), the (x, y) coordinates of a point on the"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,36,*   corresponding circle.</li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,37,* </ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,39,class CircleProblem {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,40,/** Cloud of points assumed to be fitted by a circle. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,41,private final ArrayList<double[]> points;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,42,/** Error on the x-coordinate of the points. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,43,private final double xSigma;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,44,/** Error on the y-coordinate of the points. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,45,private final double ySigma;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,46,/** Number of points on the circumference (when searching which
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,47,"model point is closest to a given ""observation"". */"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,48,private final int resolution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,51,* @param xError Assumed error for the x-coordinate of the circle points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,52,* @param yError Assumed error for the y-coordinate of the circle points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,53,* @param searchResolution Number of points to try when searching the one
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,54,"* that is closest to a given ""observed"" point."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,56,"public CircleProblem(double xError,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,57,"double yError,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,58,int searchResolution) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,59,points = new ArrayList<double[]>();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,60,xSigma = xError;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,61,ySigma = yError;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,62,resolution = searchResolution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,66,* @param xError Assumed error for the x-coordinate of the circle points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,67,* @param yError Assumed error for the y-coordinate of the circle points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,69,"public CircleProblem(double xError,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,70,double yError) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,71,"this(xError, yError, 500);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,74,"public void addPoint(double px, double py) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,75,"points.add(new double[] { px, py });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,78,public double[] target() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,79,final double[] t = new double[points.size() * 2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,80,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,81,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,82,final int index = i * 2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,83,t[index] = p[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,84,t[index + 1] = p[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,87,return t;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,90,public double[] weight() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,91,final double wX = 1 / (xSigma * xSigma);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,92,final double wY = 1 / (ySigma * ySigma);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,93,final double[] w = new double[points.size() * 2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,94,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,95,final int index = i * 2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,96,w[index] = wX;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,97,w[index + 1] = wY;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,100,return w;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,103,public MultivariateVectorFunction getModelFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,104,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,105,public double[] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,106,final double cx = params[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,107,final double cy = params[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,108,final double r = params[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,110,final double[] model = new double[points.size() * 2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,112,final double deltaTheta = MathUtils.TWO_PI / resolution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,113,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,114,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,115,final double px = p[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,116,final double py = p[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,118,double bestX = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,119,double bestY = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,120,double dMin = Double.POSITIVE_INFINITY;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,122,// Find the angle for which the circle passes closest to the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,123,// current point (using a resolution of 100 points along the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,124,// circumference).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,125,for (double theta = 0; theta <= MathUtils.TWO_PI; theta += deltaTheta) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,126,final double currentX = cx + r * FastMath.cos(theta);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,127,final double currentY = cy + r * FastMath.sin(theta);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,128,final double dX = currentX - px;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,129,final double dY = currentY - py;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,130,final double d = dX * dX + dY * dY;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,131,if (d < dMin) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,132,dMin = d;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,133,bestX = currentX;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,134,bestY = currentY;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,138,final int index = i * 2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,139,model[index] = bestX;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,140,model[index + 1] = bestY;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,143,return model;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,148,public MultivariateMatrixFunction getModelFunctionJacobian() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,149,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,150,public double[][] value(double[] point) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,151,return jacobian(point);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,156,private double[][] jacobian(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,157,final double[][] jacobian = new double[points.size() * 2][3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,159,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,160,final int index = i * 2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,161,// Partial derivative wrt x-coordinate of center.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,162,jacobian[index][0] = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,163,jacobian[index + 1][0] = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,164,// Partial derivative wrt y-coordinate of center.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,165,jacobian[index][1] = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,166,jacobian[index + 1][1] = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,167,// Partial derivative wrt radius.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,168,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,169,jacobian[index][2] = (p[0] - params[0]) / params[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,170,jacobian[index + 1][2] = (p[1] - params[1]) / params[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleProblem.java,173,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,19,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,20,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,21,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,22,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,25,* Class used in the tests.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,27,class CircleVectorial {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,28,private ArrayList<Vector2D> points;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,30,public CircleVectorial() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,31,points  = new ArrayList<Vector2D>();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,34,"public void addPoint(double px, double py) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,35,"points.add(new Vector2D(px, py));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,38,public int getN() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,39,return points.size();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,42,public double getRadius(Vector2D center) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,43,double r = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,44,for (Vector2D point : points) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,45,r += point.distance(center);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,47,return r / points.size();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,50,public MultivariateVectorFunction getModelFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,51,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,52,public double[] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,53,"Vector2D center = new Vector2D(params[0], params[1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,54,double radius = getRadius(center);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,55,double[] residuals = new double[points.size()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,56,for (int i = 0; i < residuals.length; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,57,residuals[i] = points.get(i).distance(center) - radius;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,60,return residuals;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,65,public MultivariateMatrixFunction getModelFunctionJacobian() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,66,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,67,public double[][] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,68,final int n = points.size();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,69,"final Vector2D center = new Vector2D(params[0], params[1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,71,double dRdX = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,72,double dRdY = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,73,for (Vector2D pk : points) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,74,double dk = pk.distance(center);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,75,dRdX += (center.getX() - pk.getX()) / dk;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,76,dRdY += (center.getY() - pk.getY()) / dk;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,78,dRdX /= n;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,79,dRdY /= n;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,81,// Jacobian of the radius residuals.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,82,double[][] jacobian = new double[n][2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,83,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,84,final Vector2D pi = points.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,85,final double di = pi.distance(center);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,86,jacobian[i][0] = (center.getX() - pi.getX()) / di - dRdX;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,87,jacobian[i][1] = (center.getY() - pi.getY()) / di - dRdY;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/CircleVectorial.java,90,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,18,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,20,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,21,import org.apache.commons.math3.exception.ConvergenceException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,22,import org.apache.commons.math3.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,23,import org.apache.commons.math3.exception.MathUnsupportedOperationException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,24,import org.apache.commons.math3.optim.SimpleVectorValueChecker;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,25,import org.apache.commons.math3.linear.DiagonalMatrix;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,29,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,30,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,31,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,32,* The redistribution policy for MINPACK is available <a
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,33,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>/"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,35,* @version $Id$
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,37,public class GaussNewtonOptimizerTest
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,38,extends AbstractLeastSquaresOptimizerAbstractTest<GaussNewtonOptimizer> {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,39,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,40,public GaussNewtonOptimizer createOptimizer() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,41,return GaussNewtonOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,42,".withConvergenceChecker(new SimpleVectorValueChecker(1e-6, 1e-6));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,45,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,46,public int getMaxIterations() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,47,return 1000;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,50,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,51,@Test(expected=ConvergenceException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,52,public void testMoreEstimatedParametersSimple() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,54,* Exception is expected with this optimizer
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,56,super.testMoreEstimatedParametersSimple();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,59,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,60,@Test(expected=ConvergenceException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,61,public void testMoreEstimatedParametersUnsorted() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,63,* Exception is expected with this optimizer
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,65,super.testMoreEstimatedParametersUnsorted();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,68,@Test(expected=TooManyEvaluationsException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,69,public void testMaxEvaluations() throws Exception {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,70,CircleVectorial circle = new CircleVectorial();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,71,"circle.addPoint( 30.0,  68.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,72,"circle.addPoint( 50.0,  -6.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,73,"circle.addPoint(110.0, -20.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,74,"circle.addPoint( 35.0,  15.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,75,"circle.addPoint( 45.0,  97.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,77,GaussNewtonOptimizer optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,78,".withConvergenceChecker(new SimpleVectorValueChecker(1e-30, 1e-30))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,79,.withMaxIterations(Integer.MAX_VALUE)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,80,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,81,".withModelAndJacobian(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,82,circle.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,83,".withTarget(new double[] { 0, 0, 0, 0, 0 })"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,84,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,85,".withStartPoint(new double[] { 98.680, 47.345 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,87,optimizer.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,90,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,91,@Test(expected=ConvergenceException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,92,public void testCircleFittingBadInit() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,94,* This test does not converge with this optimizer.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,96,super.testCircleFittingBadInit();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,99,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,100,@Test(expected=ConvergenceException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,101,public void testHahn1()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,102,throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,104,* TODO This test leads to a singular problem with the Gauss-Newton
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,105,* optimizer. This should be inquired.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.java,107,super.testHahn1();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,18,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,20,import java.io.Serializable;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,22,import java.util.List;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,23,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,24,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,25,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,26,import org.apache.commons.math3.exception.ConvergenceException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,27,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,28,import org.apache.commons.math3.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,29,import org.apache.commons.math3.exception.MathUnsupportedOperationException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,30,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,31,import org.apache.commons.math3.linear.SingularMatrixException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,32,import org.apache.commons.math3.linear.DiagonalMatrix;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,33,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,34,import org.apache.commons.math3.util.Precision;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,35,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,36,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,37,import org.junit.Ignore;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,40,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,41,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,42,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,43,* The redistribution policy for MINPACK is available <a
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,44,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,46,* @version $Id$
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,48,public class LevenbergMarquardtOptimizerTest
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,49,extends AbstractLeastSquaresOptimizerAbstractTest<LevenbergMarquardtOptimizer> {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,50,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,51,public LevenbergMarquardtOptimizer createOptimizer() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,52,return LevenbergMarquardtOptimizer.create();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,55,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,56,public int getMaxIterations() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,57,return 25;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,60,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,61,@Test(expected=SingularMatrixException.class)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,62,public void testNonInvertible() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,64,"* Overrides the method from parent class, since the default singularity"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,65,* threshold (1e-14) does not trigger the expected exception.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,67,LinearProblem problem = new LinearProblem(new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,68,"{  1, 2, -3 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,69,"{  2, 1,  3 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,70,"{ -3, 0, -9 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,71,"}, new double[] { 1, 1, 1 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,73,final LevenbergMarquardtOptimizer optimizer = createOptimizer()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,74,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,75,.withMaxIterations(20)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,76,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,77,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,78,.withTarget(problem.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,79,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,80,".withStartPoint(new double[] { 0, 0, 0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,82,final double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,83,Assert.assertTrue(FastMath.sqrt(optimizer.getTarget().length) * optimizer.computeRMS(optimum) > 0.6);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,85,"optimizer.computeCovariances(optimum, 1.5e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,88,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,89,public void testControlParameters() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,90,CircleVectorial circle = new CircleVectorial();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,91,"circle.addPoint( 30.0,  68.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,92,"circle.addPoint( 50.0,  -6.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,93,"circle.addPoint(110.0, -20.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,94,"circle.addPoint( 35.0,  15.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,95,"circle.addPoint( 45.0,  97.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,96,"checkEstimate(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,97,"circle.getModelFunctionJacobian(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,98,"0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,99,"checkEstimate(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,100,"circle.getModelFunctionJacobian(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,101,"0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,102,"checkEstimate(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,103,"circle.getModelFunctionJacobian(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,104,"0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,105,"circle.addPoint(300, -300);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,106,"checkEstimate(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,107,"circle.getModelFunctionJacobian(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,108,"0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,111,"private void checkEstimate(MultivariateVectorFunction problem,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,112,"MultivariateMatrixFunction problemJacobian,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,113,"double initialStepBoundFactor, int maxCostEval,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,114,"double costRelativeTolerance, double parRelativeTolerance,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,115,"double orthoTolerance, boolean shouldFail) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,116,try {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,117,final LevenbergMarquardtOptimizer optimizer = LevenbergMarquardtOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,118,".withTuningParameters(initialStepBoundFactor,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,119,"costRelativeTolerance,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,120,"parRelativeTolerance,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,121,"orthoTolerance,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,122,Precision.SAFE_MIN)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,123,.withMaxEvaluations(maxCostEval)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,124,.withMaxIterations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,125,".withModelAndJacobian(problem, problemJacobian)"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,126,".withTarget(new double[] { 0, 0, 0, 0, 0 })"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,127,".withWeight(new DiagonalMatrix(new double[] { 1, 1, 1, 1, 1 }))"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,128,".withStartPoint(new double[] { 98.680, 47.345 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,130,optimizer.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,132,Assert.assertTrue(!shouldFail);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,133,} catch (DimensionMismatchException ee) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,134,Assert.assertTrue(shouldFail);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,135,} catch (TooManyEvaluationsException ee) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,136,Assert.assertTrue(shouldFail);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,141,* Non-linear test case: fitting of decay curve (from Chapter 8 of
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,142,"* Bevington's textbook, ""Data reduction and analysis for the physical sciences"")."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,143,"* XXX The expected (""reference"") values may not be accurate and the tolerance too"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,144,* relaxed for this test to be currently really useful (the issue is under
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,145,* investigation).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,147,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,148,public void testBevington() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,149,final double[][] dataPoints = {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,150,// column 1 = times
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,151,"{ 15, 30, 45, 60, 75, 90, 105, 120, 135, 150,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,152,"165, 180, 195, 210, 225, 240, 255, 270, 285, 300,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,153,"315, 330, 345, 360, 375, 390, 405, 420, 435, 450,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,154,"465, 480, 495, 510, 525, 540, 555, 570, 585, 600,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,155,"615, 630, 645, 660, 675, 690, 705, 720, 735, 750,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,156,"765, 780, 795, 810, 825, 840, 855, 870, 885, },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,157,// column 2 = measured counts
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,158,"{ 775, 479, 380, 302, 185, 157, 137, 119, 110, 89,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,159,"74, 61, 66, 68, 48, 54, 51, 46, 55, 29,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,160,"28, 37, 49, 26, 35, 29, 31, 24, 25, 35,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,161,"24, 30, 26, 28, 21, 18, 20, 27, 17, 17,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,162,"14, 17, 24, 11, 22, 17, 12, 10, 13, 16,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,163,"9, 9, 14, 21, 17, 13, 12, 18, 10, },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,166,final BevingtonProblem problem = new BevingtonProblem();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,168,final int len = dataPoints[0].length;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,169,final double[] weights = new double[len];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,170,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,171,"problem.addPoint(dataPoints[0][i],"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,172,dataPoints[1][i]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,174,weights[i] = 1 / dataPoints[1][i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,177,final LevenbergMarquardtOptimizer optimizer = LevenbergMarquardtOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,178,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,179,.withMaxIterations(20)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,180,".withModelAndJacobian(problem.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,181,problem.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,182,.withTarget(dataPoints[1])
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,183,.withWeight(new DiagonalMatrix(weights))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,184,".withStartPoint(new double[] { 10, 900, 80, 27, 225 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,186,final PointVectorValuePair optimum = optimizer.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,187,final double[] solution = optimum.getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,188,"final double[] expectedSolution = { 10.4, 958.3, 131.4, 33.9, 205.0 };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,190,"final double[][] covarMatrix = optimizer.computeCovariances(solution, 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,191,final double[][] expectedCovarMatrix = {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,192,"{ 3.38, -3.69, 27.98, -2.34, -49.24 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,193,"{ -3.69, 2492.26, 81.89, -69.21, -8.9 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,194,"{ 27.98, 81.89, 468.99, -44.22, -615.44 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,195,"{ -2.34, -69.21, -44.22, 6.39, 53.80 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,196,"{ -49.24, -8.9, -615.44, 53.8, 929.45 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,199,final int numParams = expectedSolution.length;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,201,// Check that the computed solution is within the reference error range.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,202,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,203,final double error = FastMath.sqrt(expectedCovarMatrix[i][i]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,204,"Assert.assertEquals(""Parameter "" + i, expectedSolution[i], solution[i], error);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,207,// Check that each entry of the computed covariance matrix is within 10%
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,208,// of the reference matrix entry.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,209,for (int i = 0; i < numParams; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,210,for (int j = 0; j < numParams; j++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,211,"Assert.assertEquals(""Covariance matrix ["" + i + ""]["" + j + ""]"","
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,212,"expectedCovarMatrix[i][j],"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,213,"covarMatrix[i][j],"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,214,FastMath.abs(0.1 * expectedCovarMatrix[i][j]));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,219,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,220,public void testCircleFitting2() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,221,final double xCenter = 123.456;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,222,final double yCenter = 654.321;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,223,final double xSigma = 10;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,224,final double ySigma = 15;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,225,final double radius = 111.111;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,226,// The test is extremely sensitive to the seed.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,227,final long seed = 59421061L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,228,final RandomCirclePointGenerator factory
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,229,"= new RandomCirclePointGenerator(xCenter, yCenter, radius,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,230,"xSigma, ySigma,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,231,seed);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,232,"final CircleProblem circle = new CircleProblem(xSigma, ySigma);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,234,final int numPoints = 10;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,235,for (Vector2D p : factory.generate(numPoints)) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,236,"circle.addPoint(p.getX(), p.getY());"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,239,// First guess for the center's coordinates and radius.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,240,"final double[] init = { 90, 659, 115 };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,242,final LevenbergMarquardtOptimizer optimizer = LevenbergMarquardtOptimizer.create()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,243,.withMaxEvaluations(100)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,244,.withMaxIterations(50)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,245,".withModelAndJacobian(circle.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,246,circle.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,247,.withTarget(circle.target())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,248,.withWeight(new DiagonalMatrix(circle.weight()))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,249,.withStartPoint(init);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,251,final PointVectorValuePair optimum = optimizer.optimize();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,252,final double[] paramFound = optimum.getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,254,// Retrieve errors estimation.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,255,"final double[] asymptoticStandardErrorFound = optimizer.computeSigma(paramFound, 1e-14);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,257,// Check that the parameters are found within the assumed error bars.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,258,"Assert.assertEquals(xCenter, paramFound[0], asymptoticStandardErrorFound[0]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,259,"Assert.assertEquals(yCenter, paramFound[1], asymptoticStandardErrorFound[1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,260,"Assert.assertEquals(radius, paramFound[2], asymptoticStandardErrorFound[2]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,263,private static class QuadraticProblem {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,264,private List<Double> x;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,265,private List<Double> y;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,267,public QuadraticProblem() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,268,x = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,269,y = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,272,"public void addPoint(double x, double y) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,273,this.x.add(x);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,274,this.y.add(y);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,277,public MultivariateVectorFunction getModelFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,278,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,279,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,280,double[] values = new double[x.size()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,281,for (int i = 0; i < values.length; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,282,values[i] = (variables[0] * x.get(i) + variables[1]) * x.get(i) + variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,284,return values;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,289,public MultivariateMatrixFunction getModelFunctionJacobian() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,290,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,291,public double[][] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,292,double[][] jacobian = new double[x.size()][3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,293,for (int i = 0; i < jacobian.length; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,294,jacobian[i][0] = x.get(i) * x.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,295,jacobian[i][1] = x.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,296,jacobian[i][2] = 1.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,298,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,304,private static class BevingtonProblem {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,305,private List<Double> time;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,306,private List<Double> count;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,308,public BevingtonProblem() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,309,time = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,310,count = new ArrayList<Double>();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,313,"public void addPoint(double t, double c) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,314,time.add(t);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,315,count.add(c);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,318,public MultivariateVectorFunction getModelFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,319,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,320,public double[] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,321,double[] values = new double[time.size()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,322,for (int i = 0; i < values.length; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,323,final double t = time.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,324,values[i] = params[0] +
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,325,params[1] * Math.exp(-t / params[3]) +
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,326,params[2] * Math.exp(-t / params[4]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,328,return values;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,333,public MultivariateMatrixFunction getModelFunctionJacobian() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,334,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,335,public double[][] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,336,double[][] jacobian = new double[time.size()][5];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,338,for (int i = 0; i < jacobian.length; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,339,final double t = time.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,340,jacobian[i][0] = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,342,final double p3 =  params[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,343,final double p4 =  params[4];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,344,final double tOp3 = t / p3;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,345,final double tOp4 = t / p4;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,346,jacobian[i][1] = Math.exp(-tOp3);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,347,jacobian[i][2] = Math.exp(-tOp4);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,348,jacobian[i][3] = params[1] * Math.exp(-tOp3) * tOp3 / p3;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,349,jacobian[i][4] = params[2] * Math.exp(-tOp4) * tOp4 / p4;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java,351,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,18,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,20,import java.io.Serializable;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,21,import java.util.Arrays;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,22,import org.apache.commons.math3.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,23,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,24,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,25,import org.apache.commons.math3.optim.PointVectorValuePair;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,26,import org.apache.commons.math3.linear.DiagonalMatrix;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,27,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,28,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,29,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,32,* <p>Some of the unit tests are re-implementations of the MINPACK <a
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,33,"* href=""http://www.netlib.org/minpack/ex/file17"">file17</a> and <a"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,34,"* href=""http://www.netlib.org/minpack/ex/file22"">file22</a> test files."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,35,* The redistribution policy for MINPACK is available <a
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,36,"* href=""http://www.netlib.org/minpack/disclaimer"">here</a>, for"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,37,"* convenience, it is reproduced below.</p>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,39,"* <table border=""0"" width=""80%"" cellpadding=""10"" align=""center"" bgcolor=""#E0E0E0"">"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,40,* <tr><td>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,41,*    Minpack Copyright Notice (1999) University of Chicago.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,42,*    All rights reserved
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,43,* </td></tr>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,44,* <tr><td>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,45,"* Redistribution and use in source and binary forms, with or without"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,46,"* modification, are permitted provided that the following conditions"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,47,* are met:
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,48,* <ol>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,49,*  <li>Redistributions of source code must retain the above copyright
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,50,"*      notice, this list of conditions and the following disclaimer.</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,51,* <li>Redistributions in binary form must reproduce the above
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,52,"*     copyright notice, this list of conditions and the following"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,53,*     disclaimer in the documentation and/or other materials provided
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,54,*     with the distribution.</li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,55,"* <li>The end-user documentation included with the redistribution, if any,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,56,*     must include the following acknowledgment:
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,57,*     <code>This product includes software developed by the University of
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,58,"*           Chicago, as Operator of Argonne National Laboratory.</code>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,59,"*     Alternately, this acknowledgment may appear in the software itself,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,60,*     if and wherever such third-party acknowledgments normally appear.</li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,61,"* <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED ""AS IS"""
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,62,"*     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,63,"*     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,64,"*     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,65,"*     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,66,"*     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,67,"*     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,68,"*     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,69,"*     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,70,"*     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,71,*     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,72,"*     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,73,*     BE CORRECTED.</strong></li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,74,* <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,75,"*     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,76,"*     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,77,"*     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,78,"*     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,79,"*     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,80,"*     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,81,"*     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,82,*     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,83,*     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,84,* <ol></td></tr>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,85,* </table>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,87,* @author Argonne National Laboratory. MINPACK project. March 1980 (original fortran minpack tests)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,88,* @author Burton S. Garbow (original fortran minpack tests)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,89,* @author Kenneth E. Hillstrom (original fortran minpack tests)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,90,* @author Jorge J. More (original fortran minpack tests)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,91,* @author Luc Maisonobe (non-minpack tests and minpack tests Java translation)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,93,public class MinpackTest {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,95,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,96,public void testMinpackLinearFullRank() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,97,"minpackTest(new LinearFullRankFunction(10, 5, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,98,"5.0, 2.23606797749979), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,99,"minpackTest(new LinearFullRankFunction(50, 5, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,100,"8.06225774829855, 6.70820393249937), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,103,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,104,public void testMinpackLinearRank1() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,105,"minpackTest(new LinearRank1Function(10, 5, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,106,"291.521868819476, 1.4638501094228), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,107,"minpackTest(new LinearRank1Function(50, 5, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,108,"3101.60039334535, 3.48263016573496), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,111,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,112,public void testMinpackLinearRank1ZeroColsAndRows() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,113,"minpackTest(new LinearRank1ZeroColsAndRowsFunction(10, 5, 1.0), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,114,"minpackTest(new LinearRank1ZeroColsAndRowsFunction(50, 5, 1.0), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,117,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,118,public void testMinpackRosenbrok() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,119,"minpackTest(new RosenbrockFunction(new double[] { -1.2, 1.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,120,"FastMath.sqrt(24.2)), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,121,"minpackTest(new RosenbrockFunction(new double[] { -12.0, 10.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,122,"FastMath.sqrt(1795769.0)), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,123,"minpackTest(new RosenbrockFunction(new double[] { -120.0, 100.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,124,"11.0 * FastMath.sqrt(169000121.0)), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,127,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,128,public void testMinpackHelicalValley() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,129,"minpackTest(new HelicalValleyFunction(new double[] { -1.0, 0.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,130,"50.0), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,131,"minpackTest(new HelicalValleyFunction(new double[] { -10.0, 0.0, 0.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,132,"102.95630140987), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,133,"minpackTest(new HelicalValleyFunction(new double[] { -100.0, 0.0, 0.0},"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,134,"991.261822123701), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,137,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,138,public void testMinpackPowellSingular() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,139,"minpackTest(new PowellSingularFunction(new double[] { 3.0, -1.0, 0.0, 1.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,140,"14.6628782986152), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,141,"minpackTest(new PowellSingularFunction(new double[] { 30.0, -10.0, 0.0, 10.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,142,"1270.9838708654), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,143,"minpackTest(new PowellSingularFunction(new double[] { 300.0, -100.0, 0.0, 100.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,144,"126887.903284750), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,147,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,148,public void testMinpackFreudensteinRoth() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,149,"minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,150,"20.0124960961895, 6.99887517584575,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,151,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,152,"11.4124844654993,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,153,-0.896827913731509
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,154,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,155,"minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,156,"12432.833948863, 6.9988751744895,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,157,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,158,"11.41300466147456,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,159,-0.896796038685959
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,160,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,161,"minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,162,"11426454.595762, 6.99887517242903,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,163,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,164,"11.412781785788564,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,165,-0.8968051074920405
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,166,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,169,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,170,public void testMinpackBard() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,171,"minpackTest(new BardFunction(1.0, 6.45613629515967, 0.0906359603390466,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,172,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,173,"0.0824105765758334,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,174,"1.1330366534715,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,175,2.34369463894115
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,176,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,177,"minpackTest(new BardFunction(10.0, 36.1418531596785, 4.17476870138539,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,178,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,179,"0.840666673818329,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,180,"-158848033.259565,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,181,-164378671.653535
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,182,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,183,"minpackTest(new BardFunction(100.0, 384.114678637399, 4.17476870135969,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,184,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,185,"0.840666673867645,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,186,"-158946167.205518,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,187,-164464906.857771
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,188,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,191,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,192,public void testMinpackKowalikOsborne() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,193,"minpackTest(new KowalikOsborneFunction(new double[] { 0.25, 0.39, 0.415, 0.39 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,194,"0.0728915102882945,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,195,"0.017535837721129,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,196,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,197,"0.192807810476249,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,198,"0.191262653354071,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,199,"0.123052801046931,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,200,0.136053221150517
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,201,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,202,"minpackTest(new KowalikOsborneFunction(new double[] { 2.5, 3.9, 4.15, 3.9 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,203,"2.97937007555202,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,204,"0.032052192917937,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,205,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,206,"728675.473768287,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,207,"-14.0758803129393,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,208,"-32977797.7841797,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,209,-20571594.1977912
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,210,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,211,"minpackTest(new KowalikOsborneFunction(new double[] { 25.0, 39.0, 41.5, 39.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,212,"29.9590617016037,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,213,"0.0175364017658228,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,214,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,215,"0.192948328597594,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,216,"0.188053165007911,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,217,"0.122430604321144,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,218,0.134575665392506
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,219,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,222,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,223,public void testMinpackMeyer() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,224,"minpackTest(new MeyerFunction(new double[] { 0.02, 4000.0, 250.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,225,"41153.4665543031, 9.37794514651874,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,226,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,227,"0.00560963647102661,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,228,"6181.34634628659,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,229,345.223634624144
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,230,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,231,"minpackTest(new MeyerFunction(new double[] { 0.2, 40000.0, 2500.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,232,"4168216.89130846, 792.917871779501,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,233,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,234,"1.42367074157994e-11,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,235,"33695.7133432541,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,236,901.268527953801
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,237,"}), true);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,240,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,241,public void testMinpackWatson() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,242,"minpackTest(new WatsonFunction(6, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,243,"5.47722557505166, 0.0478295939097601,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,244,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,245,"-0.0157249615083782, 1.01243488232965,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,246,"-0.232991722387673,  1.26043101102818,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,247,"-1.51373031394421,   0.99299727291842"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,248,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,249,"minpackTest(new WatsonFunction(6, 10.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,250,"6433.12578950026, 0.0478295939096951,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,251,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,252,"-0.0157251901386677, 1.01243485860105,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,253,"-0.232991545843829,  1.26042932089163,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,254,"-1.51372776706575,   0.99299573426328"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,255,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,256,"minpackTest(new WatsonFunction(6, 100.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,257,"674256.040605213, 0.047829593911544,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,258,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,259,"-0.0157247019712586, 1.01243490925658,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,260,"-0.232991922761641,  1.26043292929555,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,261,"-1.51373320452707,   0.99299901922322"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,262,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,263,"minpackTest(new WatsonFunction(9, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,264,"5.47722557505166, 0.00118311459212420,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,265,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,266,"-0.153070644166722e-4, 0.999789703934597,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,267,"0.0147639634910978,   0.146342330145992,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,268,"1.00082109454817,    -2.61773112070507,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,269,"4.10440313943354,    -3.14361226236241,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,270,1.05262640378759
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,271,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,272,"minpackTest(new WatsonFunction(9, 10.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,273,"12088.127069307, 0.00118311459212513,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,274,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,275,"-0.153071334849279e-4, 0.999789703941234,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,276,"0.0147639629786217,   0.146342334818836,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,277,"1.00082107321386,    -2.61773107084722,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,278,"4.10440307655564,    -3.14361222178686,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,279,1.05262639322589
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,280,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,281,"minpackTest(new WatsonFunction(9, 100.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,282,"1269109.29043834, 0.00118311459212384,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,283,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,284,"-0.153069523352176e-4, 0.999789703958371,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,285,"0.0147639625185392,   0.146342341096326,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,286,"1.00082104729164,    -2.61773101573645,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,287,"4.10440301427286,    -3.14361218602503,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,288,1.05262638516774
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,289,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,290,"minpackTest(new WatsonFunction(12, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,291,"5.47722557505166, 0.217310402535861e-4,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,292,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,293,"-0.660266001396382e-8, 1.00000164411833,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,294,"-0.000563932146980154, 0.347820540050756,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,295,"-0.156731500244233,    1.05281515825593,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,296,"-3.24727109519451,     7.2884347837505,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,297,"-10.271848098614,       9.07411353715783,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,298,"-4.54137541918194,     1.01201187975044"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,299,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,300,"minpackTest(new WatsonFunction(12, 10.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,301,"19220.7589790951, 0.217310402518509e-4,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,302,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,303,"-0.663710223017410e-8, 1.00000164411787,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,304,"-0.000563932208347327, 0.347820540486998,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,305,"-0.156731503955652,    1.05281517654573,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,306,"-3.2472711515214,      7.28843489430665,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,307,"-10.2718482369638,      9.07411364383733,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,308,"-4.54137546533666,     1.01201188830857"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,309,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,310,"minpackTest(new WatsonFunction(12, 100.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,311,"2018918.04462367, 0.217310402539845e-4,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,312,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,313,"-0.663806046485249e-8, 1.00000164411786,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,314,"-0.000563932210324959, 0.347820540503588,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,315,"-0.156731504091375,    1.05281517718031,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,316,"-3.24727115337025,     7.28843489775302,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,317,"-10.2718482410813,      9.07411364688464,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,318,"-4.54137546660822,     1.0120118885369"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,319,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,322,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,323,public void testMinpackBox3Dimensional() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,324,"minpackTest(new Box3DimensionalFunction(10, new double[] { 0.0, 10.0, 20.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,325,"32.1115837449572), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,328,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,329,public void testMinpackJennrichSampson() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,330,"minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,331,"64.5856498144943, 11.1517793413499,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,332,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,333,"//                                                     0.2578330049, 0.257829976764542"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,334,"0.2578199266368004, 0.25782997676455244"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,335,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,338,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,339,public void testMinpackBrownDennis() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,340,"minpackTest(new BrownDennisFunction(20,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,341,"new double[] { 25.0, 5.0, -5.0, -1.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,342,"2815.43839161816, 292.954288244866,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,343,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,344,"-11.59125141003, 13.2024883984741,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,345,"-0.403574643314272, 0.236736269844604"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,346,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,347,"minpackTest(new BrownDennisFunction(20,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,348,"new double[] { 250.0, 50.0, -50.0, -10.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,349,"555073.354173069, 292.954270581415,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,350,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,351,"-11.5959274272203, 13.2041866926242,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,352,"-0.403417362841545, 0.236771143410386"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,353,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,354,"minpackTest(new BrownDennisFunction(20,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,355,"new double[] { 2500.0, 500.0, -500.0, -100.0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,356,"61211252.2338581, 292.954306151134,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,357,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,358,"-11.5902596937374, 13.2020628854665,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,359,"-0.403688070279258, 0.236665033746463"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,360,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,363,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,364,public void testMinpackChebyquad() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,365,"minpackTest(new ChebyquadFunction(1, 8, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,366,"1.88623796907732, 1.88623796907732,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,367,"new double[] { 0.5 }), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,368,"minpackTest(new ChebyquadFunction(1, 8, 10.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,369,"5383344372.34005, 1.88424820499951,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,370,"new double[] { 0.9817314924684 }), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,371,"minpackTest(new ChebyquadFunction(1, 8, 100.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,372,"0.118088726698392e19, 1.88424820499347,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,373,"new double[] { 0.9817314852934 }), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,374,"minpackTest(new ChebyquadFunction(8, 8, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,375,"0.196513862833975, 0.0593032355046727,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,376,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,377,"0.0431536648587336, 0.193091637843267,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,378,"0.266328593812698,  0.499999334628884,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,379,"0.500000665371116,  0.733671406187302,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,380,"0.806908362156733,  0.956846335141266"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,381,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,382,"minpackTest(new ChebyquadFunction(9, 9, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,383,"0.16994993465202, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,384,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,385,"0.0442053461357828, 0.199490672309881,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,386,"0.23561910847106,   0.416046907892598,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,387,"0.5,                0.583953092107402,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,388,"0.764380891528940,  0.800509327690119,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,389,0.955794653864217
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,390,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,391,"minpackTest(new ChebyquadFunction(10, 10, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,392,"0.183747831178711, 0.0806471004038253,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,393,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,394,"0.0596202671753563, 0.166708783805937,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,395,"0.239171018813509,  0.398885290346268,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,396,"0.398883667870681,  0.601116332129320,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,397,"0.60111470965373,   0.760828981186491,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,398,"0.833291216194063,  0.940379732824644"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,399,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,402,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,403,public void testMinpackBrownAlmostLinear() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,404,"minpackTest(new BrownAlmostLinearFunction(10, 0.5,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,405,"16.5302162063499, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,406,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,407,"0.979430303349862, 0.979430303349862,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,408,"0.979430303349862, 0.979430303349862,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,409,"0.979430303349862, 0.979430303349862,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,410,"0.979430303349862, 0.979430303349862,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,411,"0.979430303349862, 1.20569696650138"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,412,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,413,"minpackTest(new BrownAlmostLinearFunction(10, 5.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,414,"9765624.00089211, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,415,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,416,"0.979430303349865, 0.979430303349865,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,417,"0.979430303349865, 0.979430303349865,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,418,"0.979430303349865, 0.979430303349865,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,419,"0.979430303349865, 0.979430303349865,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,420,"0.979430303349865, 1.20569696650135"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,421,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,422,"minpackTest(new BrownAlmostLinearFunction(10, 50.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,423,"0.9765625e17, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,424,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,425,"1.0, 1.0, 1.0, 1.0, 1.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,426,"1.0, 1.0, 1.0, 1.0, 1.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,427,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,428,"minpackTest(new BrownAlmostLinearFunction(30, 0.5,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,429,"83.476044467848, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,430,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,431,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,432,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,433,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,434,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,435,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,436,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,437,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,438,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,439,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,440,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,441,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,442,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,443,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,444,"0.997754216442807, 0.997754216442807,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,445,"0.997754216442807, 1.06737350671578"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,446,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,447,"minpackTest(new BrownAlmostLinearFunction(40, 0.5,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,448,"128.026364472323, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,449,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,450,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,451,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,452,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,453,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,454,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,455,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,456,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,457,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,458,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,459,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,460,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,461,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,462,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,463,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,464,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,465,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,466,"1.00000000000002, 1.00000000000002,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,467,0.999999999999121
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,468,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,471,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,472,public void testMinpackOsborne1() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,473,"minpackTest(new Osborne1Function(new double[] { 0.5, 1.5, -1.0, 0.01, 0.02, },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,474,"0.937564021037838, 0.00739249260904843,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,475,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,476,"0.375410049244025, 1.93584654543108,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,477,"-1.46468676748716, 0.0128675339110439,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,478,0.0221227011813076
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,479,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,482,@Test
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,483,public void testMinpackOsborne2() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,484,minpackTest(new Osborne2Function(new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,485,"1.3, 0.65, 0.65, 0.7, 0.6,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,486,"3.0, 5.0, 7.0, 2.0, 4.5, 5.5"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,488,"1.44686540984712, 0.20034404483314,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,489,new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,490,"1.30997663810096,  0.43155248076,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,491,"0.633661261602859, 0.599428560991695,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,492,"0.754179768272449, 0.904300082378518,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,493,"1.36579949521007, 4.82373199748107,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,494,"2.39868475104871, 4.56887554791452,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,495,5.67534206273052
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,496,"}), false);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,499,"private void minpackTest(MinpackFunction function, boolean exceptionExpected) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,500,final double tol = 2.22044604926e-16;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,501,LevenbergMarquardtOptimizer optimizer = LevenbergMarquardtOptimizer.create();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,502,optimizer = optimizer
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,503,".withTuningParameters(optimizer.getInitialStepBoundFactor(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,504,"FastMath.sqrt(tol),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,505,"FastMath.sqrt(tol),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,506,"tol,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,507,optimizer.getRankingThreshold())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,508,.withMaxEvaluations(400 * (function.getN() + 1))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,509,.withMaxIterations(2000)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,510,".withModelAndJacobian(function.getModelFunction(),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,511,function.getModelFunctionJacobian())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,512,.withTarget(function.getTarget())
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,513,.withWeight(new DiagonalMatrix(function.getWeight()))
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,514,.withStartPoint(function.getStartPoint());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,516,try {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,517,final double[] optimum = optimizer.optimize().getPoint();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,518,Assert.assertFalse(exceptionExpected);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,519,function.checkTheoreticalMinCost(optimizer.computeRMS(optimum));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,520,function.checkTheoreticalMinParams(optimum);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,521,} catch (TooManyEvaluationsException e) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,522,Assert.assertTrue(exceptionExpected);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,526,private static abstract class MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,527,protected int      n;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,528,protected int      m;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,529,protected double[] startParams;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,530,protected double   theoreticalMinCost;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,531,protected double[] theoreticalMinParams;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,532,protected double   costAccuracy;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,533,protected double   paramsAccuracy;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,535,"protected MinpackFunction(int m, double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,536,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,537,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,538,this.m = m;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,539,this.n = startParams.length;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,540,this.startParams          = startParams.clone();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,541,this.theoreticalMinCost   = theoreticalMinCost;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,542,this.theoreticalMinParams = theoreticalMinParams;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,543,this.costAccuracy         = 1.0e-8;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,544,this.paramsAccuracy       = 1.0e-5;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,547,"protected static double[] buildArray(int n, double x) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,548,double[] array = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,549,"Arrays.fill(array, x);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,550,return array;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,553,public double[] getTarget() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,554,"return buildArray(m, 0.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,557,public double[] getWeight() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,558,"return buildArray(m, 1.0);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,561,public double[] getStartPoint() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,562,return startParams.clone();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,565,protected void setCostAccuracy(double costAccuracy) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,566,this.costAccuracy = costAccuracy;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,569,protected void setParamsAccuracy(double paramsAccuracy) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,570,this.paramsAccuracy = paramsAccuracy;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,573,public int getN() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,574,return startParams.length;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,577,public void checkTheoreticalMinCost(double rms) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,578,double threshold = costAccuracy * (1.0 + theoreticalMinCost);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,579,"Assert.assertEquals(theoreticalMinCost, FastMath.sqrt(m) * rms, threshold);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,582,public void checkTheoreticalMinParams(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,583,if (theoreticalMinParams != null) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,584,for (int i = 0; i < theoreticalMinParams.length; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,585,double mi = theoreticalMinParams[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,586,double vi = params[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,587,"Assert.assertEquals(mi, vi, paramsAccuracy * (1.0 + FastMath.abs(mi)));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,592,public MultivariateVectorFunction getModelFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,593,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,594,public double[] value(double[] point) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,595,return computeValue(point);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,600,public MultivariateMatrixFunction getModelFunctionJacobian() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,601,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,602,public double[][] value(double[] point) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,603,return computeJacobian(point);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,608,public abstract double[][] computeJacobian(double[] variables);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,609,public abstract double[] computeValue(double[] variables);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,612,private static class LinearFullRankFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,613,private static final long serialVersionUID = -9030323226268039536L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,615,"public LinearFullRankFunction(int m, int n, double x0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,616,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,617,double theoreticalMinCost) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,618,"super(m, buildArray(n, x0), theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,619,"buildArray(n, -1.0));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,622,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,623,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,624,double t = 2.0 / m;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,625,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,626,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,627,jacobian[i] = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,628,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,629,jacobian[i][j] = (i == j) ? (1 - t) : -t;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,632,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,635,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,636,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,637,double sum = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,638,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,639,sum += variables[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,641,double t  = 1 + 2 * sum / m;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,642,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,643,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,644,f[i] = variables[i] - t;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,646,"Arrays.fill(f, n, m, -t);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,647,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,651,private static class LinearRank1Function extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,652,private static final long serialVersionUID = 8494863245104608300L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,654,"public LinearRank1Function(int m, int n, double x0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,655,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,656,double theoreticalMinCost) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,657,"super(m, buildArray(n, x0), theoreticalMinCost, null);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,660,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,661,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,662,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,663,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,664,jacobian[i] = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,665,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,666,jacobian[i][j] = (i + 1) * (j + 1);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,669,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,672,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,673,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,674,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,675,double sum = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,676,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,677,sum += (i + 1) * variables[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,679,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,680,f[i] = (i + 1) * sum - 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,682,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,686,private static class LinearRank1ZeroColsAndRowsFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,687,private static final long serialVersionUID = -3316653043091995018L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,689,"public LinearRank1ZeroColsAndRowsFunction(int m, int n, double x0) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,690,"super(m, buildArray(n, x0),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,691,"FastMath.sqrt((m * (m + 3) - 6) / (2.0 * (2 * m - 3))),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,692,null);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,695,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,696,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,697,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,698,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,699,jacobian[i] = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,700,jacobian[i][0] = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,701,for (int j = 1; j < (n - 1); ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,702,if (i == 0) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,703,jacobian[i][j] = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,704,} else if (i != (m - 1)) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,705,jacobian[i][j] = i * (j + 1);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,706,} else {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,707,jacobian[i][j] = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,710,jacobian[i][n - 1] = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,712,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,715,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,716,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,717,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,718,double sum = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,719,for (int i = 1; i < (n - 1); ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,720,sum += (i + 1) * variables[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,722,for (int i = 0; i < (m - 1); ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,723,f[i] = i * sum - 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,725,f[m - 1] = -1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,726,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,730,private static class RosenbrockFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,731,private static final long serialVersionUID = 2893438180956569134L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,732,"public RosenbrockFunction(double[] startParams, double theoreticalStartCost) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,733,"super(2, startParams, 0.0, buildArray(2, 1.0));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,736,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,737,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,738,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,739,"return new double[][] { { -20 * x1, 10 }, { -1, 0 } };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,742,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,743,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,744,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,745,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,746,"return new double[] { 10 * (x2 - x1 * x1), 1 - x1 };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,750,private static class HelicalValleyFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,751,private static final long serialVersionUID = 220613787843200102L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,752,"public HelicalValleyFunction(double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,753,double theoreticalStartCost) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,754,"super(3, startParams, 0.0, new double[] { 1.0, 0.0, 0.0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,757,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,758,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,759,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,760,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,761,double tmpSquare = x1 * x1 + x2 * x2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,762,double tmp1 = twoPi * tmpSquare;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,763,double tmp2 = FastMath.sqrt(tmpSquare);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,764,return new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,765,"{  100 * x2 / tmp1, -100 * x1 / tmp1, 10 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,766,"{ 10 * x1 / tmp2, 10 * x2 / tmp2, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,767,"{ 0, 0, 1 }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,771,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,772,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,773,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,774,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,775,double x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,776,double tmp1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,777,if (x1 == 0) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,778,tmp1 = (x2 >= 0) ? 0.25 : -0.25;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,779,} else {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,780,tmp1 = FastMath.atan(x2 / x1) / twoPi;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,781,if (x1 < 0) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,782,tmp1 += 0.5;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,785,double tmp2 = FastMath.sqrt(x1 * x1 + x2 * x2);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,786,return new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,787,"10.0 * (x3 - 10 * tmp1),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,788,"10.0 * (tmp2 - 1),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,789,x3
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,793,private static final double twoPi = 2.0 * FastMath.PI;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,796,private static class PowellSingularFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,797,private static final long serialVersionUID = 7298364171208142405L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,799,"public PowellSingularFunction(double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,800,double theoreticalStartCost) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,801,"super(4, startParams, 0.0, buildArray(4, 0.0));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,804,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,805,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,806,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,807,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,808,double x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,809,double x4 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,810,return new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,811,"{ 1, 10, 0, 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,812,"{ 0, 0, sqrt5, -sqrt5 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,813,"{ 0, 2 * (x2 - 2 * x3), -4 * (x2 - 2 * x3), 0 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,814,"{ 2 * sqrt10 * (x1 - x4), 0, 0, -2 * sqrt10 * (x1 - x4) }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,818,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,819,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,820,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,821,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,822,double x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,823,double x4 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,824,return new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,825,"x1 + 10 * x2,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,826,"sqrt5 * (x3 - x4),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,827,"(x2 - 2 * x3) * (x2 - 2 * x3),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,828,sqrt10 * (x1 - x4) * (x1 - x4)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,832,private static final double sqrt5  = FastMath.sqrt( 5.0);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,833,private static final double sqrt10 = FastMath.sqrt(10.0);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,836,private static class FreudensteinRothFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,837,private static final long serialVersionUID = 2892404999344244214L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,839,"public FreudensteinRothFunction(double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,840,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,841,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,842,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,843,"super(2, startParams, theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,844,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,847,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,848,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,849,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,850,return new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,851,"{ 1, x2 * (10 - 3 * x2) -  2 },"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,852,"{ 1, x2 * ( 2 + 3 * x2) - 14, }"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,856,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,857,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,858,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,859,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,860,return new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,861,"-13.0 + x1 + ((5.0 - x2) * x2 -  2.0) * x2,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,862,-29.0 + x1 + ((1.0 + x2) * x2 - 14.0) * x2
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,867,private static class BardFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,868,private static final long serialVersionUID = 5990442612572087668L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,870,"public BardFunction(double x0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,871,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,872,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,873,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,874,"super(15, buildArray(3, x0), theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,875,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,878,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,879,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,880,double   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,881,double   x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,882,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,883,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,884,double tmp1 = i  + 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,885,double tmp2 = 15 - i;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,886,double tmp3 = (i <= 7) ? tmp1 : tmp2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,887,double tmp4 = x2 * tmp2 + x3 * tmp3;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,888,tmp4 *= tmp4;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,889,"jacobian[i] = new double[] { -1, tmp1 * tmp2 / tmp4, tmp1 * tmp3 / tmp4 };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,891,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,894,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,895,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,896,double   x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,897,double   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,898,double   x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,899,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,900,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,901,double tmp1 = i + 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,902,double tmp2 = 15 - i;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,903,double tmp3 = (i <= 7) ? tmp1 : tmp2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,904,f[i] = y[i] - (x1 + tmp1 / (x2 * tmp2 + x3 * tmp3));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,906,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,909,private static final double[] y = {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,910,"0.14, 0.18, 0.22, 0.25, 0.29,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,911,"0.32, 0.35, 0.39, 0.37, 0.58,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,912,"0.73, 0.96, 1.34, 2.10, 4.39"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,916,private static class KowalikOsborneFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,917,private static final long serialVersionUID = -4867445739880495801L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,919,"public KowalikOsborneFunction(double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,920,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,921,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,922,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,923,"super(11, startParams, theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,924,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,925,if (theoreticalStartCost > 20.0) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,926,setCostAccuracy(2.0e-4);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,927,setParamsAccuracy(5.0e-3);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,931,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,932,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,933,double   x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,934,double   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,935,double   x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,936,double   x4 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,937,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,938,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,939,double tmp = v[i] * (v[i] + x3) + x4;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,940,double j1  = -v[i] * (v[i] + x2) / tmp;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,941,double j2  = -v[i] * x1 / tmp;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,942,double j3  = j1 * j2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,943,double j4  = j3 / v[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,944,"jacobian[i] = new double[] { j1, j2, j3, j4 };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,946,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,949,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,950,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,951,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,952,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,953,double x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,954,double x4 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,955,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,956,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,957,f[i] = y[i] - x1 * (v[i] * (v[i] + x2)) / (v[i] * (v[i] + x3) + x4);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,959,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,962,private static final double[] v = {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,963,"4.0, 2.0, 1.0, 0.5, 0.25, 0.167, 0.125, 0.1, 0.0833, 0.0714, 0.0625"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,966,private static final double[] y = {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,967,"0.1957, 0.1947, 0.1735, 0.1600, 0.0844, 0.0627,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,968,"0.0456, 0.0342, 0.0323, 0.0235, 0.0246"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,972,private static class MeyerFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,973,private static final long serialVersionUID = -838060619150131027L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,975,"public MeyerFunction(double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,976,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,977,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,978,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,979,"super(16, startParams, theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,980,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,981,if (theoreticalStartCost > 1.0e6) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,982,setCostAccuracy(7.0e-3);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,983,setParamsAccuracy(2.0e-2);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,987,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,988,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,989,double   x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,990,double   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,991,double   x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,992,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,993,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,994,double temp = 5.0 * (i + 1) + 45.0 + x3;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,995,double tmp1 = x2 / temp;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,996,double tmp2 = FastMath.exp(tmp1);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,997,double tmp3 = x1 * tmp2 / temp;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,998,"jacobian[i] = new double[] { tmp2, tmp3, -tmp1 * tmp3 };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1000,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1003,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1004,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1005,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1006,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1007,double x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1008,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1009,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1010,f[i] = x1 * FastMath.exp(x2 / (5.0 * (i + 1) + 45.0 + x3)) - y[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1012,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1015,private static final double[] y = {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1016,"34780.0, 28610.0, 23650.0, 19630.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1017,"16370.0, 13720.0, 11540.0,  9744.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1018,"8261.0,  7030.0,  6005.0,  5147.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1019,"4427.0,  3820.0,  3307.0,  2872.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1023,private static class WatsonFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1024,private static final long serialVersionUID = -9034759294980218927L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1026,"public WatsonFunction(int n, double x0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1027,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1028,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1029,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1030,"super(31, buildArray(n, x0), theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1031,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1034,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1035,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1036,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1038,for (int i = 0; i < (m - 2); ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1039,double div = (i + 1) / 29.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1040,double s2  = 0.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1041,double dx  = 1.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1042,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1043,s2 += dx * variables[j];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1044,dx *= div;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1046,double temp= 2 * div * s2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1047,dx = 1.0 / div;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1048,jacobian[i] = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1049,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1050,jacobian[i][j] = dx * (j - temp);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1051,dx *= div;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1055,jacobian[m - 2]    = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1056,jacobian[m - 2][0] = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1058,jacobian[m - 1]   = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1059,jacobian[m - 1][0]= -2 * variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1060,jacobian[m - 1][1]= 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1062,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1065,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1066,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1067,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1068,for (int i = 0; i < (m - 2); ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1069,double div = (i + 1) / 29.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1070,double s1 = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1071,double dx = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1072,for (int j = 1; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1073,s1 += j * dx * variables[j];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1074,dx *= div;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1076,double s2 = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1077,dx = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1078,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1079,s2 += dx * variables[j];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1080,dx *= div;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1082,f[i] = s1 - s2 * s2 - 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1085,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1086,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1087,f[m - 2] = x1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1088,f[m - 1] = x2 - x1 * x1 - 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1090,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1094,private static class Box3DimensionalFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1095,private static final long serialVersionUID = 5511403858142574493L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1097,"public Box3DimensionalFunction(int m, double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1098,double theoreticalStartCost) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1099,"super(m, startParams, 0.0,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1100,"new double[] { 1.0, 10.0, 1.0 });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1103,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1104,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1105,double   x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1106,double   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1107,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1108,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1109,double tmp = (i + 1) / 10.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1110,jacobian[i] = new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1111,"-tmp * FastMath.exp(-tmp * x1),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1112,"tmp * FastMath.exp(-tmp * x2),"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1113,FastMath.exp(-i - 1) - FastMath.exp(-tmp)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1116,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1119,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1120,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1121,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1122,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1123,double x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1124,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1125,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1126,double tmp = (i + 1) / 10.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1127,f[i] = FastMath.exp(-tmp * x1) - FastMath.exp(-tmp * x2)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1128,+ (FastMath.exp(-i - 1) - FastMath.exp(-tmp)) * x3;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1130,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1134,private static class JennrichSampsonFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1135,private static final long serialVersionUID = -2489165190443352947L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1137,"public JennrichSampsonFunction(int m, double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1138,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1139,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1140,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1141,"super(m, startParams, theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1142,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1145,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1146,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1147,double   x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1148,double   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1149,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1150,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1151,double t = i + 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1152,"jacobian[i] = new double[] { -t * FastMath.exp(t * x1), -t * FastMath.exp(t * x2) };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1154,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1157,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1158,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1159,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1160,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1161,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1162,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1163,double temp = i + 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1164,f[i] = 2 + 2 * temp - FastMath.exp(temp * x1) - FastMath.exp(temp * x2);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1166,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1170,private static class BrownDennisFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1171,private static final long serialVersionUID = 8340018645694243910L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1173,"public BrownDennisFunction(int m, double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1174,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1175,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1176,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1177,"super(m, startParams, theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1178,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1179,setCostAccuracy(2.5e-8);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1182,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1183,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1184,double   x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1185,double   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1186,double   x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1187,double   x4 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1188,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1189,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1190,double temp = (i + 1) / 5.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1191,double ti   = FastMath.sin(temp);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1192,double tmp1 = x1 + temp * x2 - FastMath.exp(temp);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1193,double tmp2 = x3 + ti   * x4 - FastMath.cos(temp);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1194,jacobian[i] = new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1195,"2 * tmp1, 2 * temp * tmp1, 2 * tmp2, 2 * ti * tmp2"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1198,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1201,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1202,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1203,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1204,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1205,double x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1206,double x4 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1207,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1208,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1209,double temp = (i + 1) / 5.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1210,double tmp1 = x1 + temp * x2 - FastMath.exp(temp);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1211,double tmp2 = x3 + FastMath.sin(temp) * x4 - FastMath.cos(temp);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1212,f[i] = tmp1 * tmp1 + tmp2 * tmp2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1214,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1218,private static class ChebyquadFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1219,private static final long serialVersionUID = -2394877275028008594L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1221,"private static double[] buildChebyquadArray(int n, double factor) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1222,double[] array = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1223,double inv = factor / (n + 1);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1224,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1225,array[i] = (i + 1) * inv;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1227,return array;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1230,"public ChebyquadFunction(int n, int m, double factor,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1231,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1232,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1233,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1234,"super(m, buildChebyquadArray(n, factor), theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1235,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1238,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1239,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1240,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1241,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1242,jacobian[i] = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1245,double dx = 1.0 / n;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1246,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1247,double tmp1 = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1248,double tmp2 = 2 * variables[j] - 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1249,double temp = 2 * tmp2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1250,double tmp3 = 0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1251,double tmp4 = 2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1252,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1253,jacobian[i][j] = dx * tmp4;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1254,double ti = 4 * tmp2 + temp * tmp4 - tmp3;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1255,tmp3 = tmp4;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1256,tmp4 = ti;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1257,ti   = temp * tmp2 - tmp1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1258,tmp1 = tmp2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1259,tmp2 = ti;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1263,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1266,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1267,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1268,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1270,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1271,double tmp1 = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1272,double tmp2 = 2 * variables[j] - 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1273,double temp = 2 * tmp2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1274,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1275,f[i] += tmp2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1276,double ti = temp * tmp2 - tmp1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1277,tmp1 = tmp2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1278,tmp2 = ti;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1282,double dx = 1.0 / n;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1283,boolean iev = false;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1284,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1285,f[i] *= dx;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1286,if (iev) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1287,f[i] += 1.0 / (i * (i + 2));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1289,iev = ! iev;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1292,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1296,private static class BrownAlmostLinearFunction extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1297,private static final long serialVersionUID = 8239594490466964725L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1299,"public BrownAlmostLinearFunction(int m, double factor,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1300,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1301,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1302,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1303,"super(m, buildArray(m, factor), theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1304,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1307,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1308,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1309,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1310,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1311,jacobian[i] = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1314,double prod = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1315,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1316,prod *= variables[j];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1317,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1318,jacobian[i][j] = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1320,jacobian[j][j] = 2;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1323,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1324,double temp = variables[j];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1325,if (temp == 0) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1326,temp = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1327,prod = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1328,for (int k = 0; k < n; ++k) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1329,if (k != j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1330,prod *= variables[k];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1334,jacobian[n - 1][j] = prod / temp;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1337,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1340,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1341,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1342,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1343,double sum  = -(n + 1);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1344,double prod = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1345,for (int j = 0; j < n; ++j) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1346,sum  += variables[j];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1347,prod *= variables[j];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1349,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1350,f[i] = variables[i] + sum;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1352,f[n - 1] = prod - 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1353,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1357,private static class Osborne1Function extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1358,private static final long serialVersionUID = 4006743521149849494L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1360,"public Osborne1Function(double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1361,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1362,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1363,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1364,"super(33, startParams, theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1365,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1368,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1369,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1370,double   x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1371,double   x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1372,double   x4 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1373,double   x5 = variables[4];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1374,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1375,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1376,double temp = 10.0 * i;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1377,double tmp1 = FastMath.exp(-temp * x4);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1378,double tmp2 = FastMath.exp(-temp * x5);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1379,jacobian[i] = new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1380,"-1, -tmp1, -tmp2, temp * x2 * tmp1, temp * x3 * tmp2"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1383,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1386,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1387,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1388,double x1 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1389,double x2 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1390,double x3 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1391,double x4 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1392,double x5 = variables[4];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1393,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1394,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1395,double temp = 10.0 * i;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1396,double tmp1 = FastMath.exp(-temp * x4);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1397,double tmp2 = FastMath.exp(-temp * x5);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1398,f[i] = y[i] - (x1 + x2 * tmp1 + x3 * tmp2);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1400,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1403,private static final double[] y = {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1404,"0.844, 0.908, 0.932, 0.936, 0.925, 0.908, 0.881, 0.850, 0.818, 0.784, 0.751,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1405,"0.718, 0.685, 0.658, 0.628, 0.603, 0.580, 0.558, 0.538, 0.522, 0.506, 0.490,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1406,"0.478, 0.467, 0.457, 0.448, 0.438, 0.431, 0.424, 0.420, 0.414, 0.411, 0.406"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1410,private static class Osborne2Function extends MinpackFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1411,private static final long serialVersionUID = -8418268780389858746L;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1413,"public Osborne2Function(double[] startParams,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1414,"double theoreticalStartCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1415,"double theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1416,double[] theoreticalMinParams) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1417,"super(65, startParams, theoreticalMinCost,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1418,theoreticalMinParams);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1421,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1422,public double[][] computeJacobian(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1423,double   x01 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1424,double   x02 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1425,double   x03 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1426,double   x04 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1427,double   x05 = variables[4];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1428,double   x06 = variables[5];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1429,double   x07 = variables[6];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1430,double   x08 = variables[7];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1431,double   x09 = variables[8];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1432,double   x10 = variables[9];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1433,double   x11 = variables[10];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1434,double[][] jacobian = new double[m][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1435,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1436,double temp = i / 10.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1437,double tmp1 = FastMath.exp(-x05 * temp);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1438,double tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1439,double tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1440,double tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1441,jacobian[i] = new double[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1442,"-tmp1,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1443,"-tmp2,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1444,"-tmp3,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1445,"-tmp4,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1446,"temp * x01 * tmp1,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1447,"x02 * (temp - x09) * (temp - x09) * tmp2,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1448,"x03 * (temp - x10) * (temp - x10) * tmp3,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1449,"x04 * (temp - x11) * (temp - x11) * tmp4,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1450,"-2 * x02 * x06 * (temp - x09) * tmp2,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1451,"-2 * x03 * x07 * (temp - x10) * tmp3,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1452,-2 * x04 * x08 * (temp - x11) * tmp4
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1455,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1458,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1459,public double[] computeValue(double[] variables) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1460,double x01 = variables[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1461,double x02 = variables[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1462,double x03 = variables[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1463,double x04 = variables[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1464,double x05 = variables[4];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1465,double x06 = variables[5];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1466,double x07 = variables[6];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1467,double x08 = variables[7];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1468,double x09 = variables[8];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1469,double x10 = variables[9];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1470,double x11 = variables[10];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1471,double[] f = new double[m];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1472,for (int i = 0; i < m; ++i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1473,double temp = i / 10.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1474,double tmp1 = FastMath.exp(-x05 * temp);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1475,double tmp2 = FastMath.exp(-x06 * (temp - x09) * (temp - x09));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1476,double tmp3 = FastMath.exp(-x07 * (temp - x10) * (temp - x10));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1477,double tmp4 = FastMath.exp(-x08 * (temp - x11) * (temp - x11));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1478,f[i] = y[i] - (x01 * tmp1 + x02 * tmp2 + x03 * tmp3 + x04 * tmp4);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1480,return f;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1483,private static final double[] y = {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1484,"1.366, 1.191, 1.112, 1.013, 0.991,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1485,"0.885, 0.831, 0.847, 0.786, 0.725,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1486,"0.746, 0.679, 0.608, 0.655, 0.616,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1487,"0.606, 0.602, 0.626, 0.651, 0.724,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1488,"0.649, 0.649, 0.694, 0.644, 0.624,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1489,"0.661, 0.612, 0.558, 0.533, 0.495,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1490,"0.500, 0.423, 0.395, 0.375, 0.372,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1491,"0.391, 0.396, 0.405, 0.428, 0.429,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1492,"0.523, 0.562, 0.607, 0.653, 0.672,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1493,"0.708, 0.633, 0.668, 0.645, 0.632,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1494,"0.591, 0.559, 0.597, 0.625, 0.739,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1495,"0.710, 0.729, 0.720, 0.636, 0.581,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java,1496,"0.428, 0.292, 0.162, 0.098, 0.054"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,19,import org.apache.commons.math3.random.RandomGenerator;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,20,import org.apache.commons.math3.random.Well44497b;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,21,import org.apache.commons.math3.util.MathUtils;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,22,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,23,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,24,import org.apache.commons.math3.distribution.UniformRealDistribution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,25,import org.apache.commons.math3.distribution.NormalDistribution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,26,import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,29,* Factory for generating a cloud of points that approximate a circle.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,31,public class RandomCirclePointGenerator {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,32,/** RNG for the x-coordinate of the center. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,33,private final RealDistribution cX;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,34,/** RNG for the y-coordinate of the center. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,35,private final RealDistribution cY;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,36,/** RNG for the parametric position of the point. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,37,private final RealDistribution tP;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,38,/** Radius of the circle. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,39,private final double radius;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,42,* @param x Abscissa of the circle center.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,43,* @param y Ordinate of the circle center.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,44,* @param radius Radius of the circle.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,45,* @param xSigma Error on the x-coordinate of the circumference points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,46,* @param ySigma Error on the y-coordinate of the circumference points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,47,* @param seed RNG seed.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,49,"public RandomCirclePointGenerator(double x,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,50,"double y,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,51,"double radius,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,52,"double xSigma,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,53,"double ySigma,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,54,long seed) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,55,final RandomGenerator rng = new Well44497b(seed);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,56,this.radius = radius;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,57,"cX = new NormalDistribution(rng, x, xSigma,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,58,NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,59,"cY = new NormalDistribution(rng, y, ySigma,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,60,NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,61,"tP = new UniformRealDistribution(rng, 0, MathUtils.TWO_PI,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,62,UniformRealDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,66,* Point generator.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,68,* @param n Number of points to create.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,69,* @return the cloud of {@code n} points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,71,public Vector2D[] generate(int n) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,72,final Vector2D[] cloud = new Vector2D[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,73,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,74,cloud[i] = create();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,76,return cloud;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,80,* Create one point.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,82,* @return a point.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,84,private Vector2D create() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,85,final double t = tP.sample();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,86,final double pX = cX.sample() + radius * FastMath.cos(t);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,87,final double pY = cY.sample() + radius * FastMath.sin(t);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomCirclePointGenerator.java,89,"return new Vector2D(pX, pY);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,18,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,20,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,21,import org.apache.commons.math3.random.RandomGenerator;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,22,import org.apache.commons.math3.random.Well44497b;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,23,import org.apache.commons.math3.distribution.RealDistribution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,24,import org.apache.commons.math3.distribution.UniformRealDistribution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,25,import org.apache.commons.math3.distribution.NormalDistribution;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,28,* Factory for generating a cloud of points that approximate a straight line.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,30,public class RandomStraightLinePointGenerator {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,31,/** Slope. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,32,private final double slope;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,33,/** Intercept. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,34,private final double intercept;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,35,/** RNG for the x-coordinate. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,36,private final RealDistribution x;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,37,/** RNG for the error on the y-coordinate. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,38,private final RealDistribution error;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,41,* The generator will create a cloud of points whose x-coordinates
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,42,"* will be randomly sampled between {@code xLo} and {@code xHi}, and"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,43,* the corresponding y-coordinates will be computed as
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,44,* <pre><code>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,45,"*  y = a x + b + N(0, error)"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,46,* </code></pre>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,47,"* where {@code N(mean, sigma)} is a Gaussian distribution with the"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,48,* given mean and standard deviation.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,50,* @param a Slope.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,51,* @param b Intercept.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,52,* @param sigma Standard deviation on the y-coordinate of the point.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,53,* @param lo Lowest value of the x-coordinate.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,54,* @param hi Highest value of the x-coordinate.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,55,* @param seed RNG seed.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,57,"public RandomStraightLinePointGenerator(double a,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,58,"double b,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,59,"double sigma,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,60,"double lo,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,61,"double hi,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,62,long seed) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,63,final RandomGenerator rng = new Well44497b(seed);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,64,slope = a;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,65,intercept = b;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,66,"error = new NormalDistribution(rng, 0, sigma,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,67,NormalDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,68,"x = new UniformRealDistribution(rng, lo, hi,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,69,UniformRealDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,73,* Point generator.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,75,* @param n Number of points to create.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,76,* @return the cloud of {@code n} points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,78,public Point2D.Double[] generate(int n) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,79,final Point2D.Double[] cloud = new Point2D.Double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,80,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,81,cloud[i] = create();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,83,return cloud;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,87,* Create one point.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,89,* @return a point.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,91,private Point2D.Double create() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,92,final double abscissa = x.sample();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,93,final double yModel = slope * abscissa + intercept;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,94,final double ordinate = yModel + error.sample();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/RandomStraightLinePointGenerator.java,96,"return new Point2D.Double(abscissa, ordinate);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,19,import java.io.BufferedReader;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,20,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,22,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,23,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,24,import org.apache.commons.math3.util.MathArrays;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,27,* This class gives access to the statistical reference datasets provided by the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,28,* NIST (available
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,29,"* <a href=""http://www.itl.nist.gov/div898/strd/general/dataarchive.html"">here</a>)."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,30,* Instances of this class can be created by invocation of the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,31,* {@link StatisticalReferenceDatasetFactory}.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,33,public abstract class StatisticalReferenceDataset {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,34,/** The name of this dataset. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,35,private final String name;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,36,/** The total number of observations (data points). */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,37,private final int numObservations;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,38,/** The total number of parameters. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,39,private final int numParameters;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,40,/** The total number of starting points for the optimizations. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,41,private final int numStartingPoints;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,42,/** The values of the predictor. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,43,private final double[] x;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,44,/** The values of the response. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,45,private final double[] y;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,47,* The starting values. {@code startingValues[j][i]} is the value of the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,48,* {@code i}-th parameter in the {@code j}-th set of starting values.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,50,private final double[][] startingValues;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,51,/** The certified values of the parameters. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,52,private final double[] a;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,53,/** The certified values of the standard deviation of the parameters. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,54,private final double[] sigA;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,55,/** The certified value of the residual sum of squares. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,56,private double residualSumOfSquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,57,/** The least-squares problem. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,58,private final LeastSquaresProblem problem;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,61,* Creates a new instance of this class from the specified data file. The
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,62,* file must follow the StRD format.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,64,* @param in the data file
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,65,* @throws IOException if an I/O error occurs
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,67,public StatisticalReferenceDataset(final BufferedReader in)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,68,throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,70,final ArrayList<String> lines = new ArrayList<String>();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,71,for (String line = in.readLine(); line != null; line = in.readLine()) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,72,lines.add(line);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,74,"int[] index = findLineNumbers(""Data"", lines);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,75,if (index == null) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,76,"throw new AssertionError(""could not find line indices for data"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,78,this.numObservations = index[1] - index[0] + 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,79,this.x = new double[this.numObservations];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,80,this.y = new double[this.numObservations];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,81,for (int i = 0; i < this.numObservations; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,82,final String line = lines.get(index[0] + i - 1);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,83,"final String[] tokens = line.trim().split("" ++"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,84,// Data columns are in reverse order!!!
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,85,this.y[i] = Double.parseDouble(tokens[0]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,86,this.x[i] = Double.parseDouble(tokens[1]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,89,"index = findLineNumbers(""Starting Values"", lines);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,90,if (index == null) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,91,throw new AssertionError(
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,92,"""could not find line indices for starting values"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,94,this.numParameters = index[1] - index[0] + 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,96,double[][] start = null;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,97,this.a = new double[numParameters];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,98,this.sigA = new double[numParameters];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,99,for (int i = 0; i < numParameters; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,100,final String line = lines.get(index[0] + i - 1);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,101,"final String[] tokens = line.trim().split("" ++"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,102,if (start == null) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,103,start = new double[tokens.length - 4][numParameters];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,105,for (int j = 2; j < tokens.length - 2; j++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,106,start[j - 2][i] = Double.parseDouble(tokens[j]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,108,this.a[i] = Double.parseDouble(tokens[tokens.length - 2]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,109,this.sigA[i] = Double.parseDouble(tokens[tokens.length - 1]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,111,if (start == null) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,112,"throw new IOException(""could not find starting values"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,114,this.numStartingPoints = start.length;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,115,this.startingValues = start;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,117,double dummyDouble = Double.NaN;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,118,String dummyString = null;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,119,for (String line : lines) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,120,"if (line.contains(""Dataset Name:"")) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,121,dummyString = line
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,122,".substring(line.indexOf(""Dataset Name:"") + 13,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,123,"line.indexOf(""("")).trim();"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,125,"if (line.contains(""Residual Sum of Squares"")) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,126,"final String[] tokens = line.split("" ++"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,127,dummyDouble = Double.parseDouble(tokens[4].trim());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,130,if (Double.isNaN(dummyDouble)) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,131,throw new IOException(
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,132,"""could not find certified value of residual sum of squares"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,134,this.residualSumOfSquares = dummyDouble;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,136,if (dummyString == null) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,137,"throw new IOException(""could not find dataset name"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,139,this.name = dummyString;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,141,this.problem = new LeastSquaresProblem();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,144,class LeastSquaresProblem {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,145,public MultivariateVectorFunction getModelFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,146,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,147,public double[] value(final double[] a) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,148,final int n = getNumObservations();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,149,final double[] yhat = new double[n];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,150,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,151,"yhat[i] = getModelValue(getX(i), a);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,153,return yhat;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,158,public MultivariateMatrixFunction getModelFunctionJacobian() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,159,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,160,public double[][] value(final double[] a)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,161,throws IllegalArgumentException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,162,final int n = getNumObservations();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,163,final double[][] j = new double[n][];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,164,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,165,"j[i] = getModelDerivatives(getX(i), a);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,167,return j;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,174,* Returns the name of this dataset.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,176,* @return the name of the dataset
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,178,public String getName() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,179,return name;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,183,* Returns the total number of observations (data points).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,185,* @return the number of observations
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,187,public int getNumObservations() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,188,return numObservations;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,192,* Returns a copy of the data arrays. The data is laid out as follows <li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,193,"* {@code data[0][i] = x[i]},</li> <li>{@code data[1][i] = y[i]},</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,195,* @return the array of data points.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,197,public double[][] getData() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,198,return new double[][] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,199,"MathArrays.copyOf(x), MathArrays.copyOf(y)"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,204,* Returns the x-value of the {@code i}-th data point.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,206,* @param i the index of the data point
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,207,* @return the x-value
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,209,public double getX(final int i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,210,return x[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,214,* Returns the y-value of the {@code i}-th data point.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,216,* @param i the index of the data point
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,217,* @return the y-value
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,219,public double getY(final int i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,220,return y[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,224,* Returns the total number of parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,226,* @return the number of parameters
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,228,public int getNumParameters() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,229,return numParameters;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,233,* Returns the certified values of the paramters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,235,* @return the values of the parameters
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,237,public double[] getParameters() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,238,return MathArrays.copyOf(a);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,242,* Returns the certified value of the {@code i}-th parameter.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,244,* @param i the index of the parameter
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,245,* @return the value of the parameter
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,247,public double getParameter(final int i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,248,return a[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,252,* Reurns the certified values of the standard deviations of the parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,254,* @return the standard deviations of the parameters
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,256,public double[] getParametersStandardDeviations() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,257,return MathArrays.copyOf(sigA);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,261,* Returns the certified value of the standard deviation of the {@code i}-th
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,262,* parameter.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,264,* @param i the index of the parameter
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,265,* @return the standard deviation of the parameter
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,267,public double getParameterStandardDeviation(final int i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,268,return sigA[i];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,272,* Returns the certified value of the residual sum of squares.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,274,* @return the residual sum of squares
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,276,public double getResidualSumOfSquares() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,277,return residualSumOfSquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,281,* Returns the total number of starting points (initial guesses for the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,282,* optimization process).
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,284,* @return the number of starting points
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,286,public int getNumStartingPoints() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,287,return numStartingPoints;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,291,* Returns the {@code i}-th set of initial values of the parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,293,* @param i the index of the starting point
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,294,* @return the starting point
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,296,public double[] getStartingPoint(final int i) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,297,return MathArrays.copyOf(startingValues[i]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,301,* Returns the least-squares problem corresponding to fitting the model to
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,302,* the specified data.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,304,* @return the least-squares problem
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,306,public LeastSquaresProblem getLeastSquaresProblem() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,307,return problem;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,311,* Returns the value of the model for the specified values of the predictor
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,312,* variable and the parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,314,* @param x the predictor variable
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,315,* @param a the parameters
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,316,* @return the value of the model
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,318,"public abstract double getModelValue(final double x, final double[] a);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,321,* Returns the values of the partial derivatives of the model with respect
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,322,* to the parameters.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,324,* @param x the predictor variable
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,325,* @param a the parameters
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,326,* @return the partial derivatives
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,328,"public abstract double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,329,final double[] a);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,332,* <p>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,333,"* Parses the specified text lines, and extracts the indices of the first"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,334,* and last lines of the data defined by the specified {@code key}. This key
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,335,* must be one of
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,336,* </p>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,337,* <ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,338,"* <li>{@code ""Starting Values""},</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,339,"* <li>{@code ""Certified Values""},</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,340,"* <li>{@code ""Data""}.</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,341,* </ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,342,* <p>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,343,"* In the NIST data files, the line indices are separated by the keywords"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,344,"* {@code ""lines""} and {@code ""to""}."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,345,* </p>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,347,* @param lines the line of text to be parsed
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,348,* @return an array of two {@code int}s. First value is the index of the
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,349,"*         first line, second value is the index of the last line."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,350,*         {@code null} if the line could not be parsed.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,352,"private static int[] findLineNumbers(final String key,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,353,final Iterable<String> lines) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,354,for (String text : lines) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,355,"boolean flag = text.contains(key) && text.contains(""lines"") &&"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,356,"text.contains(""to"") && text.contains("")"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,357,if (flag) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,358,final int[] numbers = new int[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,359,"final String from = text.substring(text.indexOf(""lines"") + 5,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,360,"text.indexOf(""to""));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,361,numbers[0] = Integer.parseInt(from.trim());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,362,"final String to = text.substring(text.indexOf(""to"") + 2,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,363,"text.indexOf("")""));"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,364,numbers[1] = Integer.parseInt(to.trim());
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,365,return numbers;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset.java,368,return null;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,17,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,19,import java.io.BufferedReader;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,20,import java.io.IOException;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,21,import java.io.InputStream;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,22,import java.io.InputStreamReader;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,23,import org.apache.commons.math3.util.FastMath;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,26,* A factory to create instances of {@link StatisticalReferenceDataset} from
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,27,* available resources.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,29,public class StatisticalReferenceDatasetFactory {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,31,private StatisticalReferenceDatasetFactory() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,32,// Do nothing
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,36,* Creates a new buffered reader from the specified resource name.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,38,* @param name the name of the resource
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,39,* @return a buffered reader
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,40,* @throws IOException if an I/O error occured
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,42,public static BufferedReader createBufferedReaderFromResource(final String name)
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,43,throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,44,final InputStream resourceAsStream;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,45,resourceAsStream = StatisticalReferenceDatasetFactory.class
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,46,.getResourceAsStream(name);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,47,if (resourceAsStream == null) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,48,"throw new IOException(""could not find resource "" + name);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,50,return new BufferedReader(new InputStreamReader(resourceAsStream));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,53,public static StatisticalReferenceDataset createKirby2()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,54,throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,55,"final BufferedReader in = createBufferedReaderFromResource(""Kirby2.dat"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,56,StatisticalReferenceDataset dataset = null;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,57,try {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,58,dataset = new StatisticalReferenceDataset(in) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,60,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,61,"public double getModelValue(final double x, final double[] a) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,62,final double p = a[0] + x * (a[1] + x * a[2]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,63,final double q = 1.0 + x * (a[3] + x * a[4]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,64,return p / q;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,67,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,68,"public double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,69,final double[] a) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,70,final double[] dy = new double[5];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,71,final double p = a[0] + x * (a[1] + x * a[2]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,72,final double q = 1.0 + x * (a[3] + x * a[4]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,73,dy[0] = 1.0 / q;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,74,dy[1] = x / q;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,75,dy[2] = x * dy[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,76,dy[3] = -x * p / (q * q);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,77,dy[4] = x * dy[3];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,78,return dy;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,81,} finally {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,82,in.close();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,84,return dataset;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,87,public static StatisticalReferenceDataset createHahn1()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,88,throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,89,"final BufferedReader in = createBufferedReaderFromResource(""Hahn1.dat"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,90,StatisticalReferenceDataset dataset = null;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,91,try {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,92,dataset = new StatisticalReferenceDataset(in) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,94,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,95,"public double getModelValue(final double x, final double[] a) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,96,final double p = a[0] + x * (a[1] + x * (a[2] + x * a[3]));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,97,final double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6]));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,98,return p / q;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,101,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,102,"public double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,103,final double[] a) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,104,final double[] dy = new double[7];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,105,final double p = a[0] + x * (a[1] + x * (a[2] + x * a[3]));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,106,final double q = 1.0 + x * (a[4] + x * (a[5] + x * a[6]));
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,107,dy[0] = 1.0 / q;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,108,dy[1] = x * dy[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,109,dy[2] = x * dy[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,110,dy[3] = x * dy[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,111,dy[4] = -x * p / (q * q);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,112,dy[5] = x * dy[4];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,113,dy[6] = x * dy[5];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,114,return dy;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,117,} finally {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,118,in.close();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,120,return dataset;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,123,public static StatisticalReferenceDataset createMGH17()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,124,throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,125,"final BufferedReader in = createBufferedReaderFromResource(""MGH17.dat"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,126,StatisticalReferenceDataset dataset = null;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,127,try {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,128,dataset = new StatisticalReferenceDataset(in) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,130,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,131,"public double getModelValue(final double x, final double[] a) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,132,return a[0] + a[1] * FastMath.exp(-a[3] * x) + a[2] *
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,133,FastMath.exp(-a[4] * x);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,136,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,137,"public double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,138,final double[] a) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,139,final double[] dy = new double[5];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,140,dy[0] = 1.0;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,141,dy[1] = FastMath.exp(-x * a[3]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,142,dy[2] = FastMath.exp(-x * a[4]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,143,dy[3] = -x * a[1] * dy[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,144,dy[4] = -x * a[2] * dy[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,145,return dy;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,148,} finally {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,149,in.close();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,151,return dataset;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,154,public static StatisticalReferenceDataset createLanczos1()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,155,throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,156,final BufferedReader in =
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,157,"createBufferedReaderFromResource(""Lanczos1.dat"");"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,158,StatisticalReferenceDataset dataset = null;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,159,try {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,160,dataset = new StatisticalReferenceDataset(in) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,162,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,163,"public double getModelValue(final double x, final double[] a) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,164,"System.out.println(a[0]+"", ""+a[1]+"", ""+a[2]+"", ""+a[3]+"", ""+a[4]+"", ""+a[5]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,165,return a[0] * FastMath.exp(-a[3] * x) +
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,166,a[1] * FastMath.exp(-a[4] * x) +
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,167,a[2] * FastMath.exp(-a[5] * x);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,170,@Override
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,171,"public double[] getModelDerivatives(final double x,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,172,final double[] a) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,173,final double[] dy = new double[6];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,174,dy[0] = FastMath.exp(-x * a[3]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,175,dy[1] = FastMath.exp(-x * a[4]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,176,dy[2] = FastMath.exp(-x * a[5]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,177,dy[3] = -x * a[0] * dy[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,178,dy[4] = -x * a[1] * dy[1];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,179,dy[5] = -x * a[2] * dy[2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,180,return dy;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,183,} finally {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,184,in.close();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,186,return dataset;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,190,* Returns an array with all available reference datasets.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,192,* @return the array of datasets
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,193,* @throws IOException if an I/O error occurs
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,195,public StatisticalReferenceDataset[] createAll()
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,196,throws IOException {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,197,return new StatisticalReferenceDataset[] {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDatasetFactory.java,198,"createKirby2(), createMGH17()"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,18,package org.apache.commons.math3.fitting.leastsquares;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,20,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,21,import org.apache.commons.math3.analysis.MultivariateVectorFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,22,import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,23,import org.apache.commons.math3.analysis.UnivariateFunction;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,24,import org.apache.commons.math3.stat.regression.SimpleRegression;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,27,* Class that models a straight line defined as {@code y = a x + b}.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,28,* The parameters of problem are:
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,29,* <ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,30,*  <li>{@code a}</li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,31,*  <li>{@code b}</li>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,32,* </ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,33,* The model functions are:
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,34,* <ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,35,"*  <li>for each pair (a, b), the y-coordinate of the line.</li>"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,36,* </ul>
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,38,class StraightLineProblem {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,39,/** Cloud of points assumed to be fitted by a straight line. */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,40,private final ArrayList<double[]> points;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,41,/** Error (on the y-coordinate of the points). */
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,42,private final double sigma;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,45,* @param error Assumed error for the y-coordinate.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,47,public StraightLineProblem(double error) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,48,points = new ArrayList<double[]>();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,49,sigma = error;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,52,"public void addPoint(double px, double py) {"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,53,"points.add(new double[] { px, py });"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,57,* @return the list of x-coordinates.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,59,public double[] x() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,60,final double[] v = new double[points.size()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,61,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,62,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,63,v[i] = p[0]; // x-coordinate.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,66,return v;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,70,* @return the list of y-coordinates.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,72,public double[] y() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,73,final double[] v = new double[points.size()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,74,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,75,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,76,v[i] = p[1]; // y-coordinate.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,79,return v;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,82,public double[] target() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,83,return y();
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,86,public double[] weight() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,87,final double weight = 1 / (sigma * sigma);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,88,final double[] w = new double[points.size()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,89,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,90,w[i] = weight;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,93,return w;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,96,public MultivariateVectorFunction getModelFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,97,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,98,public double[] value(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,99,"final Model line = new Model(params[0], params[1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,101,final double[] model = new double[points.size()];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,102,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,103,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,104,model[i] = line.value(p[0]);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,107,return model;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,112,public MultivariateMatrixFunction getModelFunctionJacobian() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,113,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,114,public double[][] value(double[] point) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,115,return jacobian(point);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,121,"* Directly solve the linear problem, using the {@link SimpleRegression}"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,122,* class.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,124,public double[] solve() {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,125,final SimpleRegression regress = new SimpleRegression(true);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,126,for (double[] d : points) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,127,"regress.addData(d[0], d[1]);"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,130,"final double[] result = { regress.getSlope(), regress.getIntercept() };"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,131,return result;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,134,private double[][] jacobian(double[] params) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,135,final double[][] jacobian = new double[points.size()][2];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,137,for (int i = 0; i < points.size(); i++) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,138,final double[] p = points.get(i);
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,139,"// Partial derivative wrt ""a""."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,140,jacobian[i][0] = p[0];
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,141,"// Partial derivative wrt ""b""."
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,142,jacobian[i][1] = 1;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,145,return jacobian;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,149,* Linear function.
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,151,public static class Model implements UnivariateFunction {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,152,final double a;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,153,final double b;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,155,"public Model(double a,"
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,156,double b) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,157,this.a = a;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,158,this.b = b;
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,161,public double value(double x) {
True,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,src/test/java/org/apache/commons/math3/fitting/leastsquares/StraightLineProblem.java,162,return a * x + b;

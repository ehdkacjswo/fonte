is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,237,// User-defined convergence checker.
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,238,previous = current;
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,239,"current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,241,if (checker != null) {
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,242,"if (checker.converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,243,return current;
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,256,revious = current;
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,257,"urrent = new UnivariatePointValuePair(x, isMinim ? fx : -fx);"
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,259,/ User-defined convergence checker.
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,260,f (checker != null) {
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,261,"f (checker.converged(iter, previous, current)) {"
False,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java,262,eturn current;
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,18,package org.apache.commons.math3.optimization.univariate;
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,20,import org.apache.commons.math3.util.FastMath;
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,21,import org.apache.commons.math3.optimization.AbstractConvergenceChecker;
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,24,* Simple implementation of the
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,25,* {@link org.apache.commons.math3.optimization.ConvergenceChecker} interface
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,26,* that uses only objective function values.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,28,* Convergence is considered to have been reached if either the relative
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,29,* difference between the objective function values is smaller than a
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,30,* threshold or if either the absolute difference between the objective
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,31,* function values is smaller than another threshold.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,33,* @version $Id$
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,34,* @since 3.1
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,36,public class SimpleUnivariateValueChecker
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,37,extends AbstractConvergenceChecker<UnivariatePointValuePair> {
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,39,* Build an instance with default thresholds.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,41,public SimpleUnivariateValueChecker() {}
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,43,/** Build an instance with specified thresholds.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,45,"* In order to perform only relative checks, the absolute tolerance"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,46,* must be set to a negative value. In order to perform only absolute
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,47,"* checks, the relative tolerance must be set to a negative value."
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,49,* @param relativeThreshold relative tolerance threshold
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,50,* @param absoluteThreshold absolute tolerance threshold
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,52,"public SimpleUnivariateValueChecker(final double relativeThreshold,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,53,final double absoluteThreshold) {
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,54,"super(relativeThreshold, absoluteThreshold);"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,58,* Check if the optimization algorithm has converged considering the
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,59,* last two points.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,60,* This method may be called several time from the same algorithm
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,61,* iteration with different points. This can be detected by checking the
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,62,* iteration number at each call if needed. Each time this method is
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,63,"* called, the previous and current point correspond to points with the"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,64,"* same role at each iteration, so they can be compared. As an example,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,65,"* simplex-based algorithms call this method for all points of the simplex,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,66,* not only for the best or worst ones.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,68,* @param iteration Index of current iteration
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,69,* @param previous Best point in the previous iteration.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,70,* @param current Best point in the current iteration.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,71,* @return {@code true} if the algorithm has converged.
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,73,@Override
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,74,"public boolean converged(final int iteration,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,75,"final UnivariatePointValuePair previous,"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,76,final UnivariatePointValuePair current) {
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,77,final double p = previous.getValue();
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,78,final double c = current.getValue();
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,79,final double difference = FastMath.abs(p - c);
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,80,"final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));"
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,81,return difference <= size * getRelativeThreshold() ||
True,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java,82,difference <= getAbsoluteThreshold();
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,27,import org.apache.commons.math3.optimization.ConvergenceChecker;
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,55,@Test
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,56,public void testSinMinWithValueChecker() {
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,57,final UnivariateFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,58,"final ConvergenceChecker checker = new SimpleUnivariateValueChecker(1e-5, 1e-14);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,59,// The default stopping criterion of Brent's algorithm should not
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,60,"// pass, but the search will stop at the given relative tolerance"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,61,// for the function value.
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,62,"final UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14, checker);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,63,"final UnivariatePointValuePair result = optimizer.optimize(200, f, GoalType.MINIMIZE, 4, 5);"
True,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,64,"Assert.assertEquals(3 * Math.PI / 2, result.getPoint(), 1e-3);"

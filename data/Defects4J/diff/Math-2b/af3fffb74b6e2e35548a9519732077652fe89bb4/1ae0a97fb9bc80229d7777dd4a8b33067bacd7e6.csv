is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,46,rotected AbstractIntegerDistribution() {}
True,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java,46,protected AbstractIntegerDistribution() { }
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,40,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,41,rivate static final long serialVersionUID = -38038050983108802L;
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,43,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,44,private static final long serialVersionUID = -38038050983108802L;
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,53,rotected AbstractRealDistribution() {}
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,53,protected AbstractRealDistribution() { }
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,69,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,70,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,72,* The default implementation returns
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,73,* <ul>
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,74,"* <li>{@link #getSupportLowerBound()} for {@code p = 0},</li>"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,75,* <li>{@link #getSupportUpperBound()} for {@code p = 1}.</li>
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,76,* </ul>
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,80,* IMPLEMENTATION NOTES
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,82,"* Where applicable, use is made of the one-sided Chebyshev inequality"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,83,* to bracket the root. This inequality states that
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,84,"* P(X - mu >= k * sig) <= 1 / (1 + k^2),"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,85,"* mu: mean, sig: standard deviation. Equivalently"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,86,"* 1 - P(X < mu + k * sig) <= 1 / (1 + k^2),"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,87,* F(mu + k * sig) >= k^2 / (1 + k^2).
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,89,"* For k = sqrt(p / (1 - p)), we find"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,90,"* F(mu + k * sig) >= p,"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,91,* and (mu + k * sig) is an upper-bound for the root.
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,93,"* Then, introducing Y = -X, mean(Y) = -mu, sd(Y) = sig, and"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,94,"* P(Y >= -mu + k * sig) <= 1 / (1 + k^2),"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,95,"* P(-X >= -mu + k * sig) <= 1 / (1 + k^2),"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,96,"* P(X <= mu - k * sig) <= 1 / (1 + k^2),"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,97,* F(mu - k * sig) <= 1 / (1 + k^2).
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,99,"* For k = sqrt((1 - p) / p), we find"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,100,"* F(mu - k * sig) <= p,"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,101,* and (mu - k * sig) is a lower-bound for the root.
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,103,"* In cases where the Chebyshev inequality does not apply, geometric"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,104,"* progressions 1, 2, 4, ... and -1, -2, -4, ... are used to bracket"
True,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,105,* the root.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,148," Access the initial domain value, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,149, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,150, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,152, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,153, @return the initial domain value.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,154, TODO to be deleted when applying MATH-699
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,156,rotected abstract double getInitialDomain(double p);
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,159," Access the domain value lower bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,160, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,161, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,163, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,164," @return the domain value lower bound, i.e. {@code P(X < 'lower bound') < p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,165, TODO to be deleted when applying MATH-699
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,167,rotected abstract double getDomainLowerBound(double p);
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,170," Access the domain value upper bound, based on {@code p}, used to"
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,171, bracket a CDF root.  This method is used by
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,172, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,174, @param p Desired probability for the critical value.
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,175," @return the domain value upper bound, i.e. {@code P(X < 'upper bound') > p}."
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,176, TODO to be deleted when applying MATH-699
False,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractRealDistribution.java,178,rotected abstract double getDomainUpperBound(double p);
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,148,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,149,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,150,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,151,eturn p;
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,154,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,155,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,156,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,157,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,160,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,161,Override
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,162,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,src/main/java/org/apache/commons/math/distribution/BetaDistribution.java,163,eturn 1;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,147,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,148,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,149,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,150,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,152,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,153,et = -Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,154, else {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,155,et = median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,158,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,161,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,162,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,163,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,164,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,166,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,167,et = median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,168, else {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,169,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,172,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,175,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,176,Override
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,177,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,178,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,180,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,181,et = median - scale;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,182, else if (p > 0.5) {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,183,et = median + scale;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,184, else {
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,185,et = median;
False,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,src/main/java/org/apache/commons/math/distribution/CauchyDistribution.java,188,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,112,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,113,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,114,eturn Double.MIN_VALUE * gamma.getBeta();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,117,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,118,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,119,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,120,/ NOTE: chi squared is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,121,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,123,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,125,f (p < .5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,126,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,127,et = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,128, else {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,129,/ use max
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,130,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,133,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,136,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,137,Override
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,138,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,139,/ NOTE: chi squared is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,140,"/ NOTE: therefore, P(X < &mu;) > 0.5"
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,142,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,144,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,145,/ use 1/2 mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,146,et = getDegreesOfFreedom() * 0.5;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,147, else {
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,148,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,149,et = getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,152,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,178,eturn 2*getDegreesOfFreedom();
True,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,src/main/java/org/apache/commons/math/distribution/ChiSquaredDistribution.java,134,return 2 * getDegreesOfFreedom();
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,63,hrows NotStrictlyPositiveException{
True,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,63,throws NotStrictlyPositiveException {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,156,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,157,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,158,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,159,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,162,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,163,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,164,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,165,/ NOTE: exponential is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,166,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,168,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,169,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,170,eturn mean;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,171, else {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,172,/ use max
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,173,eturn Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,177,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,178,Override
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,179,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,180,/ TODO: try to improve on this estimate
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,181,/ TODO: what should really happen here is not derive from
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,182,/ AbstractContinuousDistribution
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,183,/ TODO: because the inverse cumulative distribution is simple.
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,184,"/ Exponential is skewed to the left, therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,185,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,186,/ use 1/2 mean
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,187,eturn mean * 0.5;
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,188, else {
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,189,/ use mean
False,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,src/main/java/org/apache/commons/math/distribution/ExponentialDistribution.java,190,eturn mean;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,34,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,35,rivate static final long serialVersionUID = -8516354193418641566L;
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,40,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,41,private static final long serialVersionUID = -8516354193418641566L;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,175,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,176,Override
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,177,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,178,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,181,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,182,Override
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,183,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,184,eturn Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,187,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,188,Override
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,189,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,190,ouble ret = 1;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,191,ouble d = denominatorDegreesOfFreedom;
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,192,f (d > 2) {
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,193,/ use mean
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,194,et = d / (d - 2);
False,src/main/java/org/apache/commons/math/distribution/FDistribution.java,src/main/java/org/apache/commons/math/distribution/FDistribution.java,196,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,164,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,165,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,166,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,167,/ TODO: try to improve on this estimate
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,168,eturn Double.MIN_VALUE;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,171,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,172,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,173,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,174,/ TODO: try to improve on this estimate
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,175,/ NOTE: gamma is skewed to the left
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,176,"/ NOTE: therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,178,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,180,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,181,/ use mean
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,182,et = alpha * beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,183, else {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,184,/ use max value
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,185,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,188,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,191,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,192,Override
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,193,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,194,/ TODO: try to improve on this estimate
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,195,"/ Gamma is skewed to the left, therefore, P(X < &mu;) > .5"
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,197,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,199,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,200,/ use 1/2 mean
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,201,et = alpha * beta * 0.5;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,202, else {
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,203,/ use mean
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,204,et = alpha * beta;
False,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,src/main/java/org/apache/commons/math/distribution/GammaDistribution.java,207,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,283,eturn (double)(getSampleSize() * getNumberOfSuccesses()) / (double)getPopulationSize();
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,283,return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
False,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,310,eturn ( n * m * (N - n) * (N - m) ) / ( (N*N * (N - 1)) );
True,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,src/main/java/org/apache/commons/math/distribution/HypergeometricDistribution.java,310,return ( n * m * (N - n) * (N - m) ) / ( (N * N * (N - 1)) );
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,96, @return the variance (possibly {@code Double.POSITIVE_INFINITY} as
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,97, for certain cases in {@link TDistributionImpl}) or
False,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,98, {@code Double.NaN} if it is not defined
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,96,* @return the variance (possibly {@code Double.POSITIVE_INFINITY} or
True,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java,97,* {@code Double.NaN} if it is not defined)
False,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,249,Frac *= (double)i / (double)n;
True,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java,249,pFrac *= (double) i / (double) n;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,175,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,176,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,177,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,178,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,180,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,181,et = -Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,182, else {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,183,et = mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,186,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,189,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,190,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,191,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,192,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,194,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,195,et = mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,196, else {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,197,et = Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,200,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,203,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,204,Override
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,205,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,206,ouble ret;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,208,f (p < 0.5) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,209,et = mean - standardDeviation;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,210, else if (p > 0.5) {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,211,et = mean + standardDeviation;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,212, else {
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,213,et = mean;
False,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,src/main/java/org/apache/commons/math/distribution/NormalDistribution.java,216,eturn ret;
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,142,et = FastMath.exp(-SaddlePointExpansion.getStirlingError(x)
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,143," SaddlePointExpansion.getDeviancePart(x, mean))"
False,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,144, FastMath.sqrt(MathUtils.TWO_PI * x);
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,142,ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,143,"SaddlePointExpansion.getDeviancePart(x, mean)) /"
True,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java,144,FastMath.sqrt(MathUtils.TWO_PI * x);
False,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,108, for certain cases in {@link TDistributionImpl}) or
False,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,109, {@code Double.NaN} if it is not defined
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,108,* for certain cases in {@link TDistribution}) or {@code Double.NaN} if it
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,109,* is not defined
False,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,114, Access the lower bound of the support.
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,114,* Access the lower bound of the support. This method must return the same
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,115,"* value as {@code inverseCumulativeProbability(0)}. In other words, this"
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,116,* method must return
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,117,* <p><code>inf {x in R | P(X <= x) > 0}</code>.</p>
False,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,122, Access the upper bound of the support.
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,125,* Access the upper bound of the support. This method must return the same
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,126,"* value as {@code inverseCumulativeProbability(1)}. In other words, this"
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,127,* method must return
True,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,src/main/java/org/apache/commons/math/distribution/RealDistribution.java,128,* <p><code>inf {x in R | P(X <= x) = 1}</code>.</p>
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,101,eturn FastMath.exp(Gamma.logGamma(nPlus1Over2)
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,102, 0.5 * (FastMath.log(FastMath.PI)
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,103, FastMath.log(n))
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,104, Gamma.logGamma(n/2)
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,105, nPlus1Over2 * FastMath.log(1 + x * x /n));
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,101,return FastMath.exp(Gamma.logGamma(nPlus1Over2) -
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,102,0.5 * (FastMath.log(FastMath.PI) +
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,103,FastMath.log(n)) -
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,104,Gamma.logGamma(n / 2) -
True,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,105,nPlus1Over2 * FastMath.log(1 + x * x / n));
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,146,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,147,Override
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,148,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,149,eturn -Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,152,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,153,Override
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,154,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,155,eturn Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,158,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,159,Override
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,160,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/TDistribution.java,src/main/java/org/apache/commons/math/distribution/TDistribution.java,161,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,38,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,39,rivate static final long serialVersionUID = 8589540077390120676L;
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,44,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,45,private static final long serialVersionUID = 8589540077390120676L;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,191,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,192,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,193,rotected double getDomainLowerBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,194,eturn 0;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,197,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,198,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,199,rotected double getDomainUpperBound(double p) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,200,eturn Double.MAX_VALUE;
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,203,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,204,Override
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,205,rotected double getInitialDomain(double p) {
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,206,/ use median
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,207,"eturn FastMath.pow(scale * FastMath.log(2.0), 1.0 / shape);"
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,272,eturn (sc * sc) * FastMath.exp(Gamma.logGamma(1 + (2 / sh)))
False,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,273, (mn * mn);
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,253,return (sc * sc) * FastMath.exp(Gamma.logGamma(1 + (2 / sh))) -
True,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,src/main/java/org/apache/commons/math/distribution/WeibullDistribution.java,254,(mn * mn);
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,67,Override
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,68,rotected double getDomainLowerBound(final double p) {
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,69,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,72,Override
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,73,rotected double getDomainUpperBound(final double p) {
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,74,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,77,Override
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,78,rotected double getInitialDomain(final double p) {
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,79,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,167,Override
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,168,rotected double getDomainLowerBound(final double p) {
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,169,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,172,Override
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,173,rotected double getDomainUpperBound(final double p) {
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,174,hrow new UnsupportedOperationException();
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,177,Override
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,178,rotected double getInitialDomain(final double p) {
False,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,src/test/java/org/apache/commons/math/distribution/AbstractRealDistributionTest.java,179,hrow new UnsupportedOperationException();

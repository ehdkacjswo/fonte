is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,26,mport org.apache.commons.math3.exception.NoDataException;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,26,import org.apache.commons.math3.exception.MathUnsupportedOperationException;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,84,xtends BaseAbstractMultivariateOptimizer<MultivariateFunction>
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,84,extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,245,"his(lambda, null, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,245,"this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,253, @param boundaries Boundaries for objective variables.
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,255,"ublic CMAESOptimizer(int lambda, double[] inputSigma,"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,256,ouble[][] boundaries) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,257,"his(lambda, inputSigma, boundaries, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,254,"public CMAESOptimizer(int lambda, double[] inputSigma) {"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,255,"this(lambda, inputSigma, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,265, @param boundaries Boundaries for objective variables.
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,278,"ouble[][] boundaries, int maxIterations, double stopFitness,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,275,"int maxIterations, double stopFitness,"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,281,"his(lambda, inputSigma, boundaries, maxIterations, stopFitness, isActiveCMA,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,278,"this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,289, @param boundaries Boundaries for objective variables.
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,303,"ouble[][] boundaries, int maxIterations, double stopFitness,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,299,"int maxIterations, double stopFitness,"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,310,f (boundaries == null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,311,his.boundaries = null;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,312, else {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,313,inal int len = boundaries.length;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,314,his.boundaries = new double[len][];
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,315,or (int i = 0; i < len; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,316,his.boundaries[i] =
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,317,oundaries[i] == null ? null : (double[]) boundaries[i].clone();
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,509,ouble[] init = getStartPoint();
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,510,f (boundaries != null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,511,f (boundaries.length != 2) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,512,"hrow new DimensionMismatchException(boundaries.length, 2);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,514,f (boundaries[0] == null || boundaries[1] == null) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,515,hrow new NoDataException();
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,517,f (boundaries[0].length != init.length) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,518,"hrow new DimensionMismatchException(boundaries[0].length, init.length);"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,520,f (boundaries[1].length != init.length) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,521,"hrow new DimensionMismatchException(boundaries[1].length, init.length);"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,495,final double[] init = getStartPoint();
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,496,final double[] lB = getLowerBound();
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,497,final double[] uB = getUpperBound();
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,499,// Checks whether there is at least one finite bound value.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,500,boolean hasFiniteBounds = false;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,501,for (int i = 0; i < lB.length; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,502,if (!Double.isInfinite(lB[i]) ||
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,503,!Double.isInfinite(uB[i])) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,504,hasFiniteBounds = true;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,505,break;
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,523,or (int i = 0; i < init.length; i++) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,524,f (boundaries[0][i] > init[i] || boundaries[1][i] < init[i]) {
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,525,"hrow new OutOfRangeException(init[i], boundaries[0][i],"
False,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,526,oundaries[1][i]);
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,508,// Checks whether there is at least one infinite bound value.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,509,boolean hasInfiniteBounds = false;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,510,if (hasFiniteBounds) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,511,for (int i = 0; i < lB.length; i++) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,512,if (Double.isInfinite(lB[i]) ||
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,513,Double.isInfinite(uB[i])) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,514,hasInfiniteBounds = true;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,515,break;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,519,if (hasInfiniteBounds) {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,520,"// If there is at least one finite bound, none can be infinite,"
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,521,// because mixed cases are not supported by the current code.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,522,throw new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,523,} else {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,524,// Convert API to internal handling of boundaries.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,525,boundaries = new double[2][];
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,526,boundaries[0] = lB;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,527,boundaries[1] = uB;
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,529,} else {
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,530,// Convert API to internal handling of boundaries.
True,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java,531,boundaries = null;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,25,import org.apache.commons.math3.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,26,import org.apache.commons.math3.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,26,mport org.apache.commons.math3.exception.NoDataException;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,28,import org.apache.commons.math3.exception.MathUnsupportedOperationException;
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,46,Test(expected = OutOfRangeException.class)
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,47,ublic void testInitOutofbounds() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,48,@Test(expected = NumberIsTooLargeException.class)
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,49,public void testInitOutofbounds1() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,59,@Test(expected = NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,60,public void testInitOutofbounds2() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,61,"double[] startPoint = point(DIM, -2);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,62,double[] insigma = null;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,63,"double[][] boundaries = boundaries(DIM,-1,2);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,64,PointValuePair expected =
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,65,"new PointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,66,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,67,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,68,"1e-13, 1e-6, 100000, expected);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,70,Test(expected = NoDataException.class)
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,71,ublic void testBoundariesNoData() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,83,@Test(expected = MathUnsupportedOperationException.class)
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,84,public void testUnsupportedBoundaries1() {
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,74,"ouble[][] boundaries = boundaries(DIM,-1,2);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,75,oundaries[1] = null;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,87,"double[][] boundaries = boundaries(DIM,-1, Double.POSITIVE_INFINITY);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,88,PointValuePair expected =
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,89,"new PointValuePair(point(DIM,1.0),0.0);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,90,"doTest(new Rosen(), startPoint, insigma, boundaries,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,91,"GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,92,"1e-13, 1e-6, 100000, expected);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,95,@Test(expected = MathUnsupportedOperationException.class)
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,96,public void testUnsupportedBoundaries2() {
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,97,"double[] startPoint = point(DIM, 0.5);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,98,double[] insigma = null;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,99,"final double[] lB = new double[] { -1, -1, -1, -1, -1, Double.NEGATIVE_INFINITY, -1, -1, -1, -1, -1, -1, -1 };"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,100,"final double[] uB = new double[] { 2, 2, 2, Double.POSITIVE_INFINITY, 2, 2, 2, 2, 2, 2, 2, 2, 2 };"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,101,double[][] boundaries = new double[2][];
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,102,boundaries[0] = lB;
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,103,boundaries[1] = uB;
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,378,ultivariateOptimizer optim =
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,379,ew CMAESOptimizer(
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,380,"ambda, inSigma, boundaries, 30000,"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,381,"topValue, isActive, diagonalOnly, 0, new MersenneTwister(),false);"
False,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,382,"ointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,406,"CMAESOptimizer optim = new CMAESOptimizer( lambda, inSigma, 30000,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,407,"stopValue, isActive, diagonalOnly,"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,408,"0, new MersenneTwister(), false);"
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,409,final double[] lB = boundaries == null ? null : boundaries[0];
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,410,final double[] uB = boundaries == null ? null : boundaries[1];
True,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,411,"PointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,17,package org.apache.commons.math3.distribution;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,19,import java.util.List;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,21,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,22,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,23,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,24,import org.apache.commons.math3.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,25,import org.apache.commons.math3.random.RandomGenerator;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,26,import org.apache.commons.math3.random.Well19937c;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,27,import org.apache.commons.math3.util.Pair;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,30,"* Class for representing <a href=""http://en.wikipedia.org/wiki/Mixture_model"">"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,31,* mixture model</a> distributions.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,33,* @param <T> Type of the mixture components.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,35,* @version $Id$
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,36,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,38,public class MixtureMultivariateRealDistribution<T extends MultivariateRealDistribution>
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,39,extends AbstractMultivariateRealDistribution {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,40,/** Normalized weight of each mixture component. */
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,41,private final double[] weight;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,42,/** Mixture components. */
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,43,private final List<T> distribution;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,46,* Creates a mixture model from a list of distributions and their
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,47,* associated weights.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,49,"* @param components List of (weight, distribution) pairs from which to sample."
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,51,"public MixtureMultivariateRealDistribution(List<Pair<Double, T>> components) {"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,52,"this(new Well19937c(), components);"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,56,* Creates a mixture model from a list of distributions and their
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,57,* associated weights.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,59,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,60,* @param components Distributions from which to sample.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,61,* @throws NotPositiveException if any of the weights is negative.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,62,* @throws DimensionMismatchException if not all components have the same
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,63,* number of variables.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,65,"public MixtureMultivariateRealDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,66,"List<Pair<Double, T>> components) {"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,67,"super(rng, components.get(0).getSecond().getDimension());"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,69,final int numComp = components.size();
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,70,final int dim = getDimension();
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,71,double weightSum = 0;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,72,for (int i = 0; i < numComp; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,73,"final Pair<Double, T> comp = components.get(i);"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,74,if (comp.getSecond().getDimension() != dim) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,75,"throw new DimensionMismatchException(comp.getSecond().getDimension(), dim);"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,77,if (comp.getFirst() < 0) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,78,throw new NotPositiveException(comp.getFirst());
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,80,weightSum += comp.getFirst();
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,83,// Check for overflow.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,84,if (Double.isInfinite(weightSum)) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,85,throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,88,// Store each distribution and its normalized weight.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,89,distribution = new ArrayList<T>();
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,90,weight = new double[numComp];
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,91,for (int i = 0; i < numComp; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,92,"final Pair<Double, T> comp = components.get(i);"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,93,weight[i] = comp.getFirst() / weightSum;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,94,distribution.add(comp.getSecond());
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,98,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,99,public double density(final double[] values) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,100,double p = 0;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,101,for (int i = 0; i < weight.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,102,p += weight[i] * distribution.get(i).density(values);
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,104,return p;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,107,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,108,public double[] sample() {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,109,// Sampled values.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,110,double[] vals = null;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,112,// Determine which component to sample from.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,113,final double randomValue = random.nextDouble();
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,114,double sum = 0;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,116,for (int i = 0; i < weight.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,117,sum += weight[i];
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,118,if (randomValue <= sum) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,119,// pick model i
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,120,vals = distribution.get(i).sample();
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,121,break;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,125,if (vals == null) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,126,"// This should never happen, but it ensures we won't return a null in"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,127,// case the loop above has some floating point inequality problem on
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,128,// the final iteration.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,129,vals = distribution.get(weight.length - 1).sample();
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,132,return vals;
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,135,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,136,public void reseedRandomGenerator(long seed) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,137,// Seed needs to be propagated to underlying components
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,138,// in order to maintain consistency between runs.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,139,super.reseedRandomGenerator(seed);
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,141,for (int i = 0; i < distribution.size(); i++) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,142,// Make each component's seed different in order to avoid
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,143,// using the same sequence of random numbers. XXX
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,144,// components.get(i).reseedRandomGenerator(i + 1 + seed);
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,145,distribution.get(i).reseedRandomGenerator(seed); // XXX original code.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,150,* Gets the distributions that make up the mixture model.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,152,* @return the component distributions and associated weights.
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,154,"public List<Pair<Double, T>> getComponents() {"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,155,"final List<Pair<Double, T>> list = new ArrayList<Pair<Double, T>>();"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,157,for (int i = 0; i < weight.length; i++) {
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,158,"list.add(new Pair<Double, T>(weight[i], distribution.get(i)));"
True,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/MixtureMultivariateRealDistribution.java,161,return list;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,17,package org.apache.commons.math3.distribution;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,19,import java.util.List;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,20,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,21,import org.apache.commons.math3.exception.NotPositiveException;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,23,import org.apache.commons.math3.util.Pair;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,28,* Test that demonstrates the use of {@link MixtureMultivariateRealDistribution}
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,29,* in order to create a mixture model composed of {@link MultivariateNormalDistribution
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,30,* normal distributions}.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,32,public class MultivariateNormalMixtureModelDistributionTest {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,34,@Test
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,35,public void testNonUnitWeightSum() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,36,"final double[] weights = { 1, 2 };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,37,"final double[][] means = { { -1.5, 2.0 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,38,"{ 4.0, 8.2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,39,"final double[][][] covariances = { { { 2.0, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,40,"{ -1.1, 2.0 } },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,41,"{ { 3.5, 1.5 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,42,"{ 1.5, 3.5 } } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,43,final MultivariateNormalMixtureModelDistribution d
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,44,"= create(weights, means, covariances);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,46,"final List<Pair<Double, MultivariateNormalDistribution>> comp = d.getComponents();"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,48,"Assert.assertEquals(1d / 3, comp.get(0).getFirst(), Math.ulp(1d));"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,49,"Assert.assertEquals(2d / 3, comp.get(1).getFirst(), Math.ulp(1d));"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,52,@Test(expected=MathArithmeticException.class)
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,53,public void testWeightSumOverFlow() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,54,"final double[] weights = { 0.5 * Double.MAX_VALUE, 0.51 * Double.MAX_VALUE };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,55,"final double[][] means = { { -1.5, 2.0 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,56,"{ 4.0, 8.2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,57,"final double[][][] covariances = { { { 2.0, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,58,"{ -1.1, 2.0 } },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,59,"{ { 3.5, 1.5 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,60,"{ 1.5, 3.5 } } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,61,final MultivariateNormalMixtureModelDistribution d
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,62,"= create(weights, means, covariances);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,65,@Test(expected=NotPositiveException.class)
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,66,public void testPreconditionPositiveWeights() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,67,"final double[] negativeWeights = { -0.5, 1.5 };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,68,"final double[][] means = { { -1.5, 2.0 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,69,"{ 4.0, 8.2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,70,"final double[][][] covariances = { { { 2.0, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,71,"{ -1.1, 2.0 } },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,72,"{ { 3.5, 1.5 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,73,"{ 1.5, 3.5 } } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,74,final MultivariateNormalMixtureModelDistribution d
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,75,"= create(negativeWeights, means, covariances);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,79,* Test the accuracy of the density calculation.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,81,@Test
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,82,public void testDensities() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,83,"final double[] weights = { 0.3, 0.7 };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,84,"final double[][] means = { { -1.5, 2.0 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,85,"{ 4.0, 8.2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,86,"final double[][][] covariances = { { { 2.0, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,87,"{ -1.1, 2.0 } },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,88,"{ { 3.5, 1.5 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,89,"{ 1.5, 3.5 } } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,90,final MultivariateNormalMixtureModelDistribution d
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,91,"= create(weights, means, covariances);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,93,// Test vectors
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,94,"final double[][] testValues = { { -1.5, 2 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,95,"{ 4, 8.2 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,96,"{ 1.5, -2 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,97,"{ 0, 0 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,99,// Densities that we should get back.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,100,// Calculated by assigning weights to multivariate normal distribution
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,101,// and summing
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,102,// values from dmvnorm function in R 2.15 CRAN package Mixtools v0.4.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,103,"// Like: .3*dmvnorm(val,mu1,sigma1)+.7*dmvnorm(val,mu2,sigma2)"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,104,"final double[] correctDensities = { 0.02862037278930575,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,105,"0.03523044847314091,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,106,"0.000416241365629767,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,107,0.009932042831700297 };
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,109,for (int i = 0; i < testValues.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,110,"Assert.assertEquals(correctDensities[i], d.density(testValues[i]), Math.ulp(1d));"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,115,* Test the accuracy of sampling from the distribution.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,117,@Test
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,118,public void testSampling() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,119,"final double[] weights = { 0.3, 0.7 };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,120,"final double[][] means = { { -1.5, 2.0 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,121,"{ 4.0, 8.2 } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,122,"final double[][][] covariances = { { { 2.0, -1.1 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,123,"{ -1.1, 2.0 } },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,124,"{ { 3.5, 1.5 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,125,"{ 1.5, 3.5 } } };"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,126,final MultivariateNormalMixtureModelDistribution d
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,127,"= create(weights, means, covariances);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,128,d.reseedRandomGenerator(50);
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,130,final double[][] correctSamples = getCorrectSamples();
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,131,final int n = correctSamples.length;
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,132,final double[][] samples = d.sample(n);
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,134,for (int i = 0; i < n; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,135,for (int j = 0; j < samples[i].length; j++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,136,"Assert.assertEquals(correctSamples[i][j], samples[i][j], 1e-16);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,142,* Creates a mixture of Gaussian distributions.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,144,* @param weights Weights.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,145,* @param means Means.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,146,* @param covariances Covariances.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,147,* @return the mixture distribution.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,149,"private MultivariateNormalMixtureModelDistribution create(double[] weights,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,150,"double[][] means,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,151,double[][][] covariances) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,152,"final List<Pair<Double, MultivariateNormalDistribution>> mvns"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,153,"= new ArrayList<Pair<Double, MultivariateNormalDistribution>>();"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,155,for (int i = 0; i < weights.length; i++) {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,156,final MultivariateNormalDistribution dist
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,157,"= new MultivariateNormalDistribution(means[i], covariances[i]);"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,158,"mvns.add(new Pair<Double, MultivariateNormalDistribution>(weights[i], dist));"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,161,return new MultivariateNormalMixtureModelDistribution(mvns);
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,165,* Values used in {@link #testSampling()}.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,167,private double[][] getCorrectSamples() {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,168,// These were sampled from the MultivariateNormalMixtureModel class
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,169,// with seed 50. They were then fit to a MVN mixture model in R
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,170,// using mixtools. The fitted parameters were:
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,172,"// - component weights: {0.3730363, 0.6269637}"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,173,"// - mean vectors: {-1.760221, 2.080246}, {4.042673 8.239901}"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,174,// - covariance matrices:
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,175,// {2.343314 -1.161423
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,176,"// -1.161423 2.168186},"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,177,// {4.538306 1.999180
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,178,// 1.999180 3.707478}
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,180,"// These parameters are quite close to the given test parameters,"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,181,// considering that the sample size is only 100. This indicates that
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,182,// we are sampling from the given distributions correctly.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,184,// MVN mixture model fitting is tested more directly in
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,185,// MultivariateNormalMixtureModelEMTest.java.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,186,return new double[][] {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,187,"{ 0.2583074099703975, 8.664499710373795 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,188,"{ -4.813531184031044, 3.9231359989545105 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,189,"{ -0.7419261132564453, 2.4007823469659315 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,190,"{ 5.509216904195162, 9.422233433392439 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,191,"{ -2.381049190850173, 4.943660886154495 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,192,"{ -0.8993376528270461, 0.8938743025320182 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,193,"{ 4.894770663858121, 12.166851725156436 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,194,"{ 4.0897683028395075, 6.918843155044206 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,195,"{ 4.719618558675267, 8.341707066796028 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,196,"{ 5.0119792918378385, 8.718202270235704 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,197,"{ -0.9575382403048307, 1.8229677546531289 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,198,"{ 6.096419130934251, 10.015298483992137 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,199,"{ -0.8680257551663279, 2.017226810559624 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,200,"{ 1.5561509591914775, 6.428382522063888 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,201,"{ 2.9573609580937585, 4.984112447026558 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,202,"{ 2.9607883517629716, 5.040859511876173 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,203,"{ 6.693223483958679, 8.293058555022974 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,204,"{ -0.49520319305205684, 2.654804424012847 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,205,"{ 2.5982446884625903, 4.403704372523807 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,206,"{ -2.8126962615987825, 1.524225284837275 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,207,"{ 4.617557399108285, 10.112045833514983 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,208,"{ -1.0505336217175474, -0.25620619814406176 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,209,"{ 6.468546093824413, 8.492764345471349 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,210,"{ -1.070959919055369, -0.21025004020250515 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,211,"{ 0.7096492923917137, 0.972470062045611 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,212,"{ 5.398941052924385, 9.02323432480054 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,213,"{ 4.0619884910872885, 3.9387544688324274 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,214,"{ 3.060654105075946, 8.375879742835302 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,215,"{ -1.1120837945401831, -0.5932624462175884 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,216,"{ 1.7076086958821626, 10.076176310641726 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,217,"{ 0.8025522475696087, 7.376934311816509 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,218,"{ -1.7692026721062535, 3.342422431805849 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,219,"{ 6.347756985325947, 9.473453725270733 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,220,"{ 5.881105197046502, 7.489181251843213 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,221,"{ 1.2360421752575719, 6.795186398153966 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,222,"{ 0.4401756166827726, 1.2313491852695706 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,223,"{ 2.3000936045037568, 8.287718300406317 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,224,"{ -0.670230868276056, 2.1130200354211004 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,225,"{ 0.3003945370882637, -1.5819884144799348 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,226,"{ 7.277242408774614, 10.927490482503183 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,227,"{ 7.923140481277026, 12.004508589648411 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,228,"{ 5.522112916642092, 9.78447909183086 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,229,"{ 1.7119808481577339, 6.085145192818114 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,230,"{ 2.105629604263621, 10.1449475519281 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,231,"{ 4.972245882289706, 9.190876138075419 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,232,"{ 3.55810426807224, 7.654818193514658 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,233,"{ -2.356177988964854, 2.532266732955841 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,234,"{ -4.1832049468547385, 4.506619880263655 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,235,"{ -3.830920610669877, 2.6251612200440366 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,236,"{ -0.06307681885555017, 2.099426408596512 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,237,"{ 0.36171488935238116, 0.6347956010120039 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,238,"{ 4.151714086462804, 8.647657431234045 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,239,"{ 0.7057392641959304, 6.692562958393579 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,240,"{ -0.6550353398872, 7.692019868324891 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,241,"{ 4.320276127581665, 7.202292152597195 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,242,"{ -3.2303904191995527, 1.961730492225101 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,243,"{ -2.954784139519494, 2.7707906587677087 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,244,"{ 4.467020781304962, 11.98783401317258 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,245,"{ 2.516614661485048, 5.7484664274488395 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,246,"{ 0.5769047448998346, 5.631710672821962 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,247,"{ 0.1160140182849414, 2.9315783896969196 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,248,"{ 2.5049583778078652, 8.761243869910377 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,249,"{ 5.709406025351957, 8.257826327804949 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,250,"{ 0.21312967519917736, 3.5654341612096037 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,251,"{ 3.6569574551599913, 5.771827106887553 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,252,"{ -0.8798149482991884, 2.6978303136418855 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,253,"{ 2.414118561546714, 4.53422981267982 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,254,"{ 1.4898922645162216, 7.761630474438329 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,255,"{ -2.541784545189355, 1.1738033253079712 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,256,"{ -3.879227113624057, 4.4006851836938345 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,257,"{ 6.661993934276366, 7.141516646050444 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,258,"{ 3.181178356801352, 8.231063903955624 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,259,"{ 1.8841679086668033, 7.8838333882950895 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,260,"{ -1.0951561728318044, 2.4280383085698944 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,261,"{ 5.35219559310147, 10.747404919992816 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,262,"{ 6.960010647189781, 6.95945895094293 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,263,"{ 8.66048279380016, 10.240215090544776 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,264,"{ 5.322414316267673, 11.183073632332036 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,265,"{ 4.286246289231014, 9.881220496364916 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,266,"{ 3.1594608386471306, 7.472785192202438 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,267,"{ 7.490325449520623, 9.327482647357861 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,268,"{ -1.6450957033850353, 1.7263141708037384 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,269,"{ 7.640267915158525, 9.040106401524124 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,270,"{ 3.225359471647853, 7.698098961183428 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,271,"{ 5.511639004578083, 9.186863380867411 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,272,"{ -1.5570773470706916, 2.3113691458388006 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,273,"{ 3.6254977322201625, 8.605119642693507 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,274,"{ 6.825831664908241, 8.090893354857114 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,275,"{ 4.614281342893763, 9.430714925646987 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,276,"{ 3.244449074987682, 7.4974070774986705 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,277,"{ -3.630882697488002, 2.0936948617188036 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,278,"{ 4.668632614740622, 9.56561505235852 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,279,"{ 3.291602850422323, 7.676202933382092 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,280,"{ -5.17676202387167, 3.486280073084009 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,281,"{ -0.8232665608471817, 1.035856623121346 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,282,"{ -2.664598562579467, 4.969780569462966 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,283,"{ -1.7320549381441652, 0.5626102308837451 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,284,"{ -3.3030769989674384, 1.2611477988721695 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,285,"{ -2.978115812942412, 3.0819389792053005 },"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,286,"{ 4.061270197659891, 10.977521917377931 }"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,292,* Class that implements a mixture of Gaussian ditributions.
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,294,class MultivariateNormalMixtureModelDistribution
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,295,extends MixtureMultivariateRealDistribution<MultivariateNormalDistribution> {
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,297,"public MultivariateNormalMixtureModelDistribution(List<Pair<Double, MultivariateNormalDistribution>> components) {"
True,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java,298,super(components);

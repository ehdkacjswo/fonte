is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,100,"hrows NullArgumentException, ZeroException {"
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,100,"throws NullArgumentException, ZeroException {"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,121,hrows NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,121,throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,151,"hrows NullArgumentException, ZeroException {"
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,151,"throws NullArgumentException, ZeroException {"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,178,hrows NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,178,throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,197,"hrows NullArgumentException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,197,"throws NullArgumentException, NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,221,"hrows NullArgumentException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,221,"throws NullArgumentException, NumberIsTooLargeException {"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,240,hrows NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,240,throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,258,hrows NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,258,throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,275,hrows NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,275,throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,292,hrows NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,292,throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,311,hrows NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,311,throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,330,hrows NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,330,throws NullArgumentException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,356,"hrows NullArgumentException, ZeroException {"
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,356,"throws NullArgumentException, ZeroException {"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,381,"hrows NullArgumentException, ZeroException {"
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,381,"throws NullArgumentException, ZeroException {"
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,416, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,418, @throws DimensionMismatchException if {@code v} is not the same size as
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,419, {@code this}.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,415,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,453, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,455, @throws DimensionMismatchException if {@code v} is not the same size as
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,456, {@code this}.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,447,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,490, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,492, @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,494,ublic FieldVector<T> mapAdd(T d) throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,479,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,480,public FieldVector<T> mapAdd(T d) {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,503, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,505, @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,507,ublic FieldVector<T> mapAddToSelf(T d) throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,488,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,489,public FieldVector<T> mapAddToSelf(T d) {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,515, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,517, @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,519,ublic FieldVector<T> mapSubtract(T d) throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,496,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,497,public FieldVector<T> mapSubtract(T d) {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,528, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,530, @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,532,ublic FieldVector<T> mapSubtractToSelf(T d) throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,505,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,506,public FieldVector<T> mapSubtractToSelf(T d) {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,540, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,542, @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,544,ublic FieldVector<T> mapMultiply(T d) throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,513,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,514,public FieldVector<T> mapMultiply(T d) {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,553, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,555, @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,557,ublic FieldVector<T> mapMultiplyToSelf(T d) throws NullArgumentException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,522,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,523,public FieldVector<T> mapMultiplyToSelf(T d) {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,565, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,567, @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,568, @throws MathArithmeticException if {@code d} is zero.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,530,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,583, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,585, @throws NullArgumentException if {@code d} is {@code null}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,586, @throws MathArithmeticException if {@code d} is zero.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,543,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,600, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,602, @throws MathArithmeticException if {@code d} is zero.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,555,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,618, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,620, @throws MathArithmeticException if {@code d} is zero.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,569,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,635, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,637, @throws DimensionMismatchException if {@code v} is not the same size as
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,638, {@code this}.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,582,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,672, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,674, @throws DimensionMismatchException if {@code v} is not the same size as
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,675, {@code this}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,676, @throws MathArithmeticException if one entry of {@code v} is zero.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,614,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,733, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,735, @throws DimensionMismatchException if {@code v} is not the same size as
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,736, {@code this}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,738,ublic T dotProduct(FieldVector<T> v) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,669,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,670,public T dotProduct(FieldVector<T> v)
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,671,throws DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,769, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,771, @throws DimensionMismatchException if {@code v} is not the same size as
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,772, {@code this}.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,773, @throws MathArithmeticException if {@code v} is the null vector.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,701,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,863, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,865, @throws OutOfRangeException if the index is not valid.
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,866, @throws NotPositiveException if the number of elements is not positive.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,789,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,893, {@inheritDoc}
False,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,895, @throws OutOfRangeException if the index is not valid.
True,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java,814,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,21,import org.apache.commons.math3.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,22,import org.apache.commons.math3.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,23,import org.apache.commons.math3.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,24,import org.apache.commons.math3.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,25,import org.apache.commons.math3.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,61, Compute the sum of {@code this} and {@code v}. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,62, {@link org.apache.commons.math3.exception.DimensionMismatchException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,63, {@code v} is not the same size as {@code this}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,66,* Compute the sum of {@code this} and {@code v}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,69,* @throws DimensionMismatchException if {@code v} is not the same size as
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,70,* {@code this}
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,68,ieldVector<T> add(FieldVector<T> v);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,72,FieldVector<T> add(FieldVector<T> v) throws DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,71, Compute {@code this} minus {@code v}. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,72, {@link org.apache.commons.math3.exception.DimensionMismatchException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,73, {@code v} is not the same size as {@code this}
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,75,* Compute {@code this} minus {@code v}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,78,* @throws DimensionMismatchException if {@code v} is not the same size as
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,79,* {@code this}
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,78,ieldVector<T> subtract(FieldVector<T> v);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,81,FieldVector<T> subtract(FieldVector<T> v) throws DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,81, Map an addition operation to each entry. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,82, {@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,83, {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,84,* Map an addition operation to each entry.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,91, Map an addition operation to each entry. The instance <strong>is</strong>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,92, changed by this method. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,93, {@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,94, {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,91,* Map an addition operation to each entry.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,92,* <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,102, Map a subtraction operation to each entry. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,103, {@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,104, {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,99,* Map a subtraction operation to each entry.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,112, Map a subtraction operation to each entry. The instance
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,113, <strong>is</strong> changed by this method. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,114, {@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,115, {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,106,* Map a subtraction operation to each entry.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,107,* <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,123, Map a multiplication operation to each entry. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,124, {@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,125, {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,114,* Map a multiplication operation to each entry.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,133, Map a multiplication operation to each entry. The instance
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,134, <strong>is</strong> changed by this method. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,135, {@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,136, {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,121,* Map a multiplication operation to each entry.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,122,* <p>The instance <strong>is</strong> changed by this method.</p>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,144, Map a division operation to each entry. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,145, <ul>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,146, <li>{@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,147,"     {@code d} is {@code null},</li>"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,148, <li>{@link org.apache.commons.math3.exception.MathArithmeticException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,149,     {@code d} is zero.</li>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,150, </ul>
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,129,* Map a division operation to each entry.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,132,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,133,* @throws MathArithmeticException if {@code d} is zero.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,155,ieldVector<T> mapDivide(T d);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,135,FieldVector<T> mapDivide(T d)
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,136,"throws NullArgumentException, MathArithmeticException;"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,158, Map a division operation to each entry. The instance <strong>is</strong>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,159, changed by this method.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,160, <ul>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,161, <li>{@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,162,"     {@code d} is {@code null},</li>"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,163, <li>{@link org.apache.commons.math3.exception.MathArithmeticException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,164,     {@code d} is zero.</li>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,165, </ul>
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,139,* Map a division operation to each entry.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,140,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,143,* @throws NullArgumentException if {@code d} is {@code null}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,144,* @throws MathArithmeticException if {@code d} is zero.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,170,ieldVector<T> mapDivideToSelf(T d);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,146,FieldVector<T> mapDivideToSelf(T d)
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,147,"throws NullArgumentException, MathArithmeticException;"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,173, Map the 1/x function to each entry. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,174, {@link org.apache.commons.math3.exception.MathArithmeticException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,175, one of the entries is zero.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,150,* Map the 1/x function to each entry.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,153,* @throws MathArithmeticException if one of the entries is zero.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,180,ieldVector<T> mapInv();
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,155,FieldVector<T> mapInv() throws MathArithmeticException;
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,183, Map the 1/x function to each entry. The instance <strong>is</strong>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,184, changed by this method. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,185, {@link org.apache.commons.math3.exception.MathArithmeticException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,186, one of the entries is zero.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,158,* Map the 1/x function to each entry.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,159,* <p>The instance <strong>is</strong> changed by this method.</p>
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,161,* @throws MathArithmeticException if one of the entries is zero.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,190,ieldVector<T> mapInvToSelf();
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,163,FieldVector<T> mapInvToSelf() throws MathArithmeticException;
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,193, Element-by-element multiplication. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,194, {@link org.apache.commons.math3.exception.DimensionMismatchException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,195, {@code v} is not the same size as {@code this}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,166,* Element-by-element multiplication.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,169,* @throws DimensionMismatchException if {@code v} is not the same size as
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,170,* {@code this}
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,200,ieldVector<T> ebeMultiply(FieldVector<T> v);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,172,FieldVector<T> ebeMultiply(FieldVector<T> v)
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,173,throws DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,203, Element-by-element division. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,204, <ul>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,205, <li>{@link org.apache.commons.math3.exception.DimensionMismatchException}
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,206,"     if {@code v} is not the same size as {@code this},</li>"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,207, <li>{@link org.apache.commons.math3.exception.MathArithmeticException}
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,208,     if one entry of {@code v} is zero.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,209, </li>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,210, </ul>
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,176,* Element-by-element division.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,179,* @throws DimensionMismatchException if {@code v} is not the same size as
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,180,* {@code this}
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,181,* @throws MathArithmeticException if one entry of {@code v} is zero.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,215,ieldVector<T> ebeDivide(FieldVector<T> v);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,183,FieldVector<T> ebeDivide(FieldVector<T> v)
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,184,"throws DimensionMismatchException, MathArithmeticException;"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,224, Compute the dot product. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,225, {@link org.apache.commons.math3.exception.DimensionMismatchException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,226, {@code v} is not the same size as {@code this}.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,193,* Compute the dot product.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,196,* @throws DimensionMismatchException if {@code v} is not the same size as
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,197,* {@code this}
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,231, dotProduct(FieldVector<T> v);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,199,T dotProduct(FieldVector<T> v) throws DimensionMismatchException;
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,234, Find the orthogonal projection of this vector onto another vector.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,235, Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,236, <ul>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,237, <li>{@link org.apache.commons.math3.exception.DimensionMismatchException}
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,238,"     if {@code v} is not the same size as {@code this},</li>"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,239, <li>{@link org.apache.commons.math3.exception.MathArithmeticException}
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,240,     if {@code v} is the null vector.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,241, </li>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,242, </ul>
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,201,/** Find the orthogonal projection of this vector onto another vector.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,204,* @throws DimensionMismatchException if {@code v} is not the same size as
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,205,* {@code this}
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,206,* @throws MathArithmeticException if {@code v} is the null vector.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,247,ieldVector<T> projection(FieldVector<T> v);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,208,FieldVector<T> projection(FieldVector<T> v)
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,209,"throws DimensionMismatchException, MathArithmeticException;"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,257, Returns the entry in the specified index. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,258, {@link org.apache.commons.math3.exception.OutOfRangeException} if the
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,259, index is not valid.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,219,* Returns the entry in the specified index.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,223,* @throws OutOfRangeException if the index is not valid.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,265, getEntry(int index);
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,226,T getEntry(int index) throws OutOfRangeException;
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,268, Set a single element. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,269, <ul>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,270, <li>{@link org.apache.commons.math3.exception.OutOfRangeException} if the
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,271,"     index is not valid,</li>"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,272, <li>{@link org.apache.commons.math3.exception.NullArgumentException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,273,     the value is {@code null}.</li>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,274, </ul>
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,229,* Set a single element.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,232,* @throws OutOfRangeException if the index is not valid.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,280,"oid setEntry(int index, T value);"
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,235,"void setEntry(int index, T value) throws OutOfRangeException;"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,303, Get a subvector from consecutive elements. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,304, <ul>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,305, <li>{@link org.apache.commons.math3.exception.OutOfRangeException} if the
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,306,"     index is not valid,</li>"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,307, <li>{@link org.apache.commons.math3.exception.NotPositiveException} if
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,308,     the number of elements is not positive.</li>
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,309, </ul>
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,258,* Get a subvector from consecutive elements.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,262,* @throws OutOfRangeException if the index is not valid.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,263,* @throws NotPositiveException if the number of elements if not positive.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,315,"ieldVector<T> getSubVector(int index, int n);"
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,265,"FieldVector<T> getSubVector(int index, int n)"
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,266,"throws OutOfRangeException, NotPositiveException;"
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,318, Set a set of consecutive elements. Implementations should throw
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,319, {@link org.apache.commons.math3.exception.OutOfRangeException} if the
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,320, index is not valid.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,269,* Set a set of consecutive elements.
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,272,* @throws OutOfRangeException if the index is not valid.
False,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,325,"oid setSubVector(int index, FieldVector<T> v);"
True,src/main/java/org/apache/commons/math3/linear/FieldVector.java,src/main/java/org/apache/commons/math3/linear/FieldVector.java,274,"void setSubVector(int index, FieldVector<T> v) throws OutOfRangeException;"

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,17,package org.apache.commons.math.stat.inference;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,19,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,20,import java.util.Collection;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,23,* An interface for one-way ANOVA (analysis of variance).
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,25,* <p> Tests for differences between two or more categories of univariate data
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,26,"* (for example, the body mass index of accountants, lawyers, doctors and"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,27,"* computer programmers).  When two categories are given, this is equivalent to"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,28,* the {@link org.apache.commons.math.stat.inference.TTest}.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,29,* </p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,31,* @since 1.2
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,32,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,34,public interface OneWayAnova {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,36,* Computes the ANOVA F-value for a collection of <code>double[]</code>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,37,* arrays.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,39,* <p><strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,40,* <li>The categoryData <code>Collection</code> must contain
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,41,* <code>double[]</code> arrays.</li>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,42,* <li> There must be at least two <code>double[]</code> arrays in the
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,43,* <code>categoryData</code> collection and each of these arrays must
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,44,* contain at least two values.</li></ul></p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,46,* @param categoryData <code>Collection</code> of <code>double[]</code>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,47,* arrays each containing data for one category
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,48,* @return Fvalue
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,49,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,50,* @throws MathException if the statistic can not be computed do to a
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,51,*         convergence or other numerical error.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,53,public double anovaFValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,54,"throws IllegalArgumentException, MathException;"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,57,* Computes the ANOVA P-value for a collection of <code>double[]</code>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,58,* arrays.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,60,* <p><strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,61,* <li>The categoryData <code>Collection</code> must contain
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,62,* <code>double[]</code> arrays.</li>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,63,* <li> There must be at least two <code>double[]</code> arrays in the
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,64,* <code>categoryData</code> collection and each of these arrays must
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,65,* contain at least two values.</li></ul></p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,67,* @param categoryData <code>Collection</code> of <code>double[]</code>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,68,* arrays each containing data for one category
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,69,* @return Pvalue
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,70,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,71,* @throws MathException if the statistic can not be computed do to a
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,72,*         convergence or other numerical error.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,74,public double anovaPValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,75,"throws IllegalArgumentException, MathException;"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,78,"* Performs an ANOVA test, evaluating the null hypothesis that there"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,79,* is no difference among the means of the data categories.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,81,* <p><strong>Preconditions</strong>: <ul>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,82,* <li>The categoryData <code>Collection</code> must contain
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,83,* <code>double[]</code> arrays.</li>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,84,* <li> There must be at least two <code>double[]</code> arrays in the
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,85,* <code>categoryData</code> collection and each of these arrays must
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,86,* contain at least two values.</li>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,87,* <li>alpha must be strictly greater than 0 and less than or equal to 0.5.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,88,* </li></ul></p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,90,* @param categoryData <code>Collection</code> of <code>double[]</code>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,91,* arrays each containing data for one category
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,92,* @param alpha significance level of the test
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,93,* @return true if the null hypothesis can be rejected with
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,94,* confidence 1 - alpha
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,95,* @throws IllegalArgumentException if the preconditions are not met
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,96,* @throws MathException if the statistic can not be computed do to a
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,97,*         convergence or other numerical error.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,99,"public boolean anovaTest(Collection categoryData, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,src/java/org/apache/commons/math/stat/inference/OneWayAnova.java,100,"throws IllegalArgumentException, MathException;"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,17,package org.apache.commons.math.stat.inference;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,19,import org.apache.commons.math.MathException;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,20,import org.apache.commons.math.stat.descriptive.summary.Sum;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,21,import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,23,import org.apache.commons.math.distribution.FDistribution;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,24,import org.apache.commons.math.distribution.FDistributionImpl;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,26,import java.util.Collection;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,27,import java.util.Iterator;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,31,* Implements one-way ANOVA statistics defined in the {@link OneWayAnovaImpl}
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,32,* interface.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,34,* <p>Uses the
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,35,* {@link org.apache.commons.math.distribution.FDistribution
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,36,*  commons-math F Distribution implementation} to estimate exact p-values.</p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,38,* <p>This implementation is based on a description at
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,39,* http://faculty.vassar.edu/lowry/ch13pt1.html</p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,40,* <pre>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,41,"* Abbreviations: bg = between groups,"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,42,"*                wg = within groups,"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,43,*                ss = sum squared deviations
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,44,* </pre>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,46,* @since 1.2
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,47,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,49,public class OneWayAnovaImpl implements OneWayAnova  {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,52,* Default constructor.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,54,public OneWayAnovaImpl() {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,58,* {@inheritDoc}<p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,59,* This implementation computes the F statistic using the definitional
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,60,* formula<pre>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,61,*   F = msbg/mswg</pre>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,62,* where<pre>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,63,*  msbg = between group mean square
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,64,*  mswg = within group mean square</pre>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,65,"* are as defined <a href=""http://faculty.vassar.edu/lowry/ch13pt1.html"">"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,66,* here</a></p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,68,public double anovaFValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,69,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,70,AnovaStats a = anovaStats(categoryData);
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,71,return a.F;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,75,* {@inheritDoc}<p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,76,* This implementation uses the
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,77,* {@link org.apache.commons.math.distribution.FDistribution
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,78,* commons-math F Distribution implementation} to estimate the exact
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,79,"* p-value, using the formula<pre>"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,80,*   p = 1 - cumulativeProbability(F)</pre>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,81,* where <code>F</code> is the F value and <code>cumulativeProbability</code>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,82,* is the commons-math implementation of the F distribution.</p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,84,public double anovaPValue(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,85,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,86,AnovaStats a = anovaStats(categoryData);
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,87,"FDistribution fdist = new FDistributionImpl(a.dfbg, a.dfwg);"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,88,return 1.0 - fdist.cumulativeProbability(a.F);
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,92,* {@inheritDoc}<p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,93,* This implementation uses the
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,94,* {@link org.apache.commons.math.distribution.FDistribution
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,95,* commons-math F Distribution implementation} to estimate the exact
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,96,"* p-value, using the formula<pre>"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,97,*   p = 1 - cumulativeProbability(F)</pre>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,98,* where <code>F</code> is the F value and <code>cumulativeProbability</code>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,99,* is the commons-math implementation of the F distribution.</p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,100,* <p>True is returned iff the estimated p-value is less than alpha.</p>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,102,"public boolean anovaTest(Collection categoryData, double alpha)"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,103,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,104,if ((alpha <= 0) || (alpha > 0.5)) {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,105,"throw new IllegalArgumentException(""bad significance level: "" + alpha);"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,107,return (anovaPValue(categoryData) < alpha);
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,112,* This method actually does the calculations (except P-value).
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,114,* @param categoryData <code>Collection</code> of <code>double[]</code>
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,115,* arrays each containing data for one category
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,116,* @return computed AnovaStats
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,117,* @throws IllegalArgumentException if categoryData does not meet
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,118,* preconditions specified in the interface definition
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,119,* @throws MathException if an error occurs computing the Anova stats
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,121,private AnovaStats anovaStats(Collection categoryData)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,122,"throws IllegalArgumentException, MathException {"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,124,// check if we have enough categories
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,125,if (categoryData.size() < 2) {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,126,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,127,"""ANOVA: two or more categories required"");"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,130,// check if each category has enough data and all is double[]
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,131,for (Iterator iterator = categoryData.iterator(); iterator.hasNext();) {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,132,double[] array;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,133,try {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,134,array = (double[])iterator.next();
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,135,} catch (Exception ex) {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,136,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,137,"""ANOVA: categoryData contains non-double[] elements."", ex);"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,139,if (array.length <= 1) {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,140,throw new IllegalArgumentException(
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,141,"""ANOVA: one element of categoryData has fewer than 2 values."");"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,145,int dfwg = 0;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,146,double sswg = 0;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,147,Sum totsum = new Sum();
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,148,SumOfSquares totsumsq = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,149,int totnum = 0;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,151,for (Iterator iterator = categoryData.iterator(); iterator.hasNext();) {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,152,double[] data = (double[])iterator.next();
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,154,Sum sum = new Sum();
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,155,SumOfSquares sumsq = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,156,int num = 0;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,158,for (int i = 0; i < data.length; i++) {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,159,double val = data[i];
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,161,// within category
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,162,num++;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,163,sum.increment(val);
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,164,sumsq.increment(val);
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,166,// for all categories
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,167,totnum++;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,168,totsum.increment(val);
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,169,totsumsq.increment(val);
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,171,dfwg += num - 1;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,172,double ss = sumsq.getResult() - sum.getResult() * sum.getResult() / num;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,173,sswg += ss;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,175,double sst = totsumsq.getResult() - totsum.getResult() *
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,176,totsum.getResult()/totnum;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,177,double ssbg = sst - sswg;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,178,int dfbg = categoryData.size() - 1;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,179,double msbg = ssbg/dfbg;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,180,double mswg = sswg/dfwg;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,181,double F = msbg/mswg;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,183,"return new AnovaStats(dfbg, dfwg, F);"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,187,"Convenience class to pass dfbg,dfwg,F values around within AnovaImpl."
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,188,No get/set methods provided.
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,190,private static class AnovaStats {
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,191,private int dfbg;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,192,private int dfwg;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,193,private double F;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,196,* Constructor
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,197,* @param dfbg degrees of freedom in numerator (between groups)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,198,* @param dfwg degrees of freedom in denominator (within groups)
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,199,* @param F statistic
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,201,"AnovaStats(int dfbg, int dfwg, double F) {"
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,202,this.dfbg = dfbg;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,203,this.dfwg = dfwg;
True,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,src/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java,204,this.F = F;
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,17,package org.apache.commons.math.stat.inference;
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,20,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,21,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,23,import java.util.ArrayList;
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,24,import java.util.List;
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,27,* Test cases for the OneWayAnovaImpl class.
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,29,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,32,public class OneWayAnovaTest extends TestCase {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,34,protected OneWayAnova testStatistic = new OneWayAnovaImpl();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,36,"private char[] wrongArray = { 'a', 'b', 'c' };"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,37,private double[] emptyArray = {};
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,39,private double[] classA =
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,40,"{93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0 };"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,41,private double[] classB =
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,42,"{99.0, 92.0, 102.0, 100.0, 102.0, 89.0 };"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,43,private double[] classC =
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,44,"{110.0, 115.0, 111.0, 117.0, 128.0, 117.0 };"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,46,public OneWayAnovaTest(String name) {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,47,super(name);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,50,public void setUp() {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,53,public static Test suite() {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,54,TestSuite suite = new TestSuite(OneWayAnovaTest.class);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,55,"suite.setName(""TestStatistic Tests"");"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,56,return suite;
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,59,public void testAnovaFValue() throws Exception {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,60,// Target comparison values computed using R version 2.6.0 (Linux version)
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,61,List threeClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,62,threeClasses.add(classA);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,63,threeClasses.add(classB);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,64,threeClasses.add(classC);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,66,"assertEquals(""ANOVA F-value"",  24.67361709460624,"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,67,"testStatistic.anovaFValue(threeClasses), 1E-12);"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,69,List twoClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,70,twoClasses.add(classA);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,71,twoClasses.add(classB);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,73,"assertEquals(""ANOVA F-value"",  0.0150579150579,"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,74,"testStatistic.anovaFValue(twoClasses), 1E-12);"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,76,// now try some input hashes which should fail
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,77,List wrongContents = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,78,wrongContents.add(classC);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,79,wrongContents.add(wrongArray);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,80,try {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,81,double bad = testStatistic.anovaFValue(wrongContents);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,82,"fail(""non double[] hash value for key classX, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,83,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,84,// expected
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,87,List emptyContents = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,88,emptyContents.add(emptyArray);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,89,emptyContents.add(classC);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,90,try {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,91,double bad = testStatistic.anovaFValue(emptyContents);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,92,"fail(""empty array for key classX, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,93,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,94,// expected
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,97,List tooFew = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,98,tooFew.add(classA);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,99,try {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,100,double bad = testStatistic.anovaFValue(tooFew);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,101,"fail(""less than two classes, IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,102,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,103,// expected
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,108,public void testAnovaPValue() throws Exception {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,109,// Target comparison values computed using R version 2.6.0 (Linux version)
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,110,List threeClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,111,threeClasses.add(classA);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,112,threeClasses.add(classB);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,113,threeClasses.add(classC);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,115,"assertEquals(""ANOVA P-value"", 6.959446E-06,"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,116,"testStatistic.anovaPValue(threeClasses), 1E-12);"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,118,List twoClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,119,twoClasses.add(classA);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,120,twoClasses.add(classB);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,122,"assertEquals(""ANOVA P-value"",  0.904212960464,"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,123,"testStatistic.anovaPValue(twoClasses), 1E-12);"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,127,public void testAnovaTest() throws Exception {
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,128,// Target comparison values computed using R version 2.3.1 (Linux version)
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,129,List threeClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,130,threeClasses.add(classA);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,131,threeClasses.add(classB);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,132,threeClasses.add(classC);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,134,"assertTrue(""ANOVA Test P<0.01"", testStatistic.anovaTest(threeClasses, 0.01));"
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,136,List twoClasses = new ArrayList();
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,137,twoClasses.add(classA);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,138,twoClasses.add(classB);
True,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,src/test/org/apache/commons/math/stat/inference/OneWayAnovaTest.java,140,"assertFalse(""ANOVA Test P>0.01"", testStatistic.anovaTest(twoClasses, 0.01));"

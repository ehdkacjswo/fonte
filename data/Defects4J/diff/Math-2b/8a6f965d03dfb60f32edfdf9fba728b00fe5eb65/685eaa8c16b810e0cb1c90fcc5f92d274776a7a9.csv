is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,21,import org.apache.commons.math3.exception.OutOfRangeException;
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,35,** Default inverse cumulative probability accuracy. */
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,36,/** Default inverse cumulative probability accuracy.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,37,"* @deprecated as of 3.2 not used anymore, will be removed in 4.0"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,39,@Deprecated
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,43,** Inverse cumulative probability accuracy. */
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,44,rivate final double solverAbsoluteAccuracy;
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,64,"his(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,66,"this(new  Well19937c(), lower, upper);"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,76,"* @deprecated as of 3.2, inverse CDF is now calculated analytically, use"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,77,"*             {@link #UniformRealDistribution(double, double)} instead."
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,79,@Deprecated
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,77,"his(new  Well19937c(), lower, upper, inverseCumAccuracy);"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,82,"this(new  Well19937c(), lower, upper);"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,94,"* @deprecated as of 3.2, inverse CDF is now calculated analytically, use"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,95,"*             {@link #UniformRealDistribution(RandomGenerator, double, double)}"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,96,*             instead.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,98,@Deprecated
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,93,ouble inverseCumAccuracy)
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,102,double inverseCumAccuracy){
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,103,"this(rng, lower, upper);"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,107,* Creates a uniform distribution.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,109,* @param rng Random number generator.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,110,* @param lower Lower bound of this distribution (inclusive).
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,111,* @param upper Upper bound of this distribution (exclusive).
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,112,* @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,113,* @since 3.1
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,115,"public UniformRealDistribution(RandomGenerator rng,"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,116,"double lower,"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,117,double upper)
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,104,olverAbsoluteAccuracy = inverseCumAccuracy;
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,126,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,128,rotected double getSolverAbsoluteAccuracy() {
False,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,129,eturn solverAbsoluteAccuracy;
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,150,public double inverseCumulativeProbability(final double p)
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,151,throws OutOfRangeException {
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,152,if (p < 0.0 || p > 1.0) {
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,153,"throw new OutOfRangeException(p, 0, 1);"
True,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java,155,return p * (upper - lower) + lower;
True,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,115,* Check accuracy of analytical inverse CDF. Fails if a solver is used
True,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,116,* with the default accuracy.
True,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,118,@Test
True,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,119,public void testInverseCumulativeDistribution() {
True,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,120,"UniformRealDistribution dist = new UniformRealDistribution(0, 1e-9);"
True,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java,122,"Assert.assertEquals(2.5e-10, dist.inverseCumulativeProbability(0.25), 0);"

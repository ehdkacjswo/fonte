is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,21,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,22,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,469, Note that the converted function is able to handle {@link DerivativeStructure} with
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,470, <em>only</em> one parameter and up to order one. If the function is called with
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,471," more parameters or higher order, a {@link DimensionMismatchException} will be thrown."
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,471,* Note that the converted function is able to handle {@link DerivativeStructure} up to order one.
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,472,"* If the function is called with higher order, a {@link NumberIsTooLargeException} will be thrown."
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,488,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,489,* @exception NumberIsTooLargeException if derivation order is greater than 1
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,491,public DerivativeStructure value(final DerivativeStructure t)
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,492,throws NumberIsTooLargeException {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,493,switch (t.getOrder()) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,494,case 0 :
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,495,"return new DerivativeStructure(t.getFreeParameters(), 0, f.value(t.getValue()));"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,496,case 1 : {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,497,final int parameters = t.getFreeParameters();
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,498,final double[] derivatives = new double[parameters + 1];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,499,derivatives[0] = f.value(t.getValue());
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,500,final double fPrime = f.derivative().value(t.getValue());
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,501,int[] orders = new int[parameters];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,502,for (int i = 0; i < parameters; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,503,orders[i] = 1;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,504,derivatives[i + 1] = fPrime * t.getPartialDerivative(orders);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,505,orders[i] = 0;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,507,"return new DerivativeStructure(parameters, 1, derivatives);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,509,default :
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,510,"throw new NumberIsTooLargeException(t.getOrder(), 1, true);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,517,/** Convert a {@link MultivariateDifferentiableFunction} into a {@link DifferentiableMultivariateFunction}.
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,518,* @param f function to convert
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,519,* @return converted function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,520,"* @deprecated this conversion method is temporary in version 3.1, as the {@link"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,521,* DifferentiableMultivariateFunction} interface itself is deprecated
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,523,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,524,public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,525,return new DifferentiableMultivariateFunction() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,527,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,528,public double value(final double[] x) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,529,return f.value(x);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,532,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,533,public MultivariateFunction partialDerivative(final int k) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,534,return new MultivariateFunction() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,535,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,536,public double value(final double[] x) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,538,final int n = x.length;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,540,// delegate computation to underlying function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,541,final DerivativeStructure[] dsX = new DerivativeStructure[n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,542,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,543,if (i == k) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,544,"dsX[i] = new DerivativeStructure(1, 1, 0, x[i]);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,545,} else {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,546,"dsX[i] = new DerivativeStructure(1, 1, x[i]);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,549,final DerivativeStructure y = f.value(dsX);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,551,// extract partial derivative
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,552,return y.getPartialDerivative(1);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,558,public MultivariateVectorFunction gradient() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,559,return new MultivariateVectorFunction() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,560,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,561,public double[] value(final double[] x) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,563,final int n = x.length;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,565,// delegate computation to underlying function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,566,final DerivativeStructure[] dsX = new DerivativeStructure[n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,567,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,568,"dsX[i] = new DerivativeStructure(n, 1, i, x[i]);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,570,final DerivativeStructure y = f.value(dsX);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,572,// extract gradient
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,573,final double[] gradient = new double[n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,574,final int[] orders = new int[n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,575,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,576,orders[i]   = 1;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,577,gradient[i] = y.getPartialDerivative(orders);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,578,orders[i]   = 0;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,581,return gradient;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,590,/** Convert a {@link DifferentiableMultivariateFunction} into a {@link MultivariateDifferentiableFunction}.
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,591,* <p>
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,592,* Note that the converted function is able to handle {@link DerivativeStructure} elements
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,593,"* that all have the same number of free parameters and order, and with order at most 1."
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,594,"* If the function is called with inconsistent numbers of free parameters or higher order, a"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,595,* {@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,596,* </p>
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,597,* @param f function to convert
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,598,* @return converted function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,599,"* @deprecated this conversion method is temporary in version 3.1, as the {@link"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,600,* DifferentiableMultivariateFunction} interface itself is deprecated
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,602,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,603,public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,604,return new MultivariateDifferentiableFunction() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,606,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,607,public double value(final double[] x) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,608,return f.value(x);
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,491,ublic DerivativeStructure value(final DerivativeStructure t)
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,492,hrows DimensionMismatchException {
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,493,f (t.getFreeParameters() != 1) {
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,494,"hrow new DimensionMismatchException(t.getFreeParameters(), 1);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,615,public DerivativeStructure value(final DerivativeStructure[] t)
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,616,"throws DimensionMismatchException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,618,// check parameters and orders limits
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,619,final int parameters = t[0].getFreeParameters();
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,620,final int order      = t[0].getOrder();
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,621,final int n          = t.length;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,622,if (order > 1) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,623,"throw new NumberIsTooLargeException(order, 1, true);"
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,496,f (t.getOrder() > 1) {
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,497,"hrow new DimensionMismatchException(t.getOrder(), 1);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,626,// check all elements in the array are consistent
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,627,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,628,if (t[i].getFreeParameters() != parameters) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,629,"throw new DimensionMismatchException(t[i].getFreeParameters(), parameters);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,632,if (t[i].getOrder() != order) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,633,"throw new DimensionMismatchException(t[i].getOrder(), order);"
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,499,eturn t.compose(new double[] {
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,500,".value(t.getValue()),"
False,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,501,.derivative().value(t.getValue())
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,637,// delegate computation to underlying function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,638,final double[] point = new double[n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,639,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,640,point[i] = t[i].getValue();
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,642,final double value      = f.value(point);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,643,final double[] gradient = f.gradient().value(point);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,645,// merge value and gradient into one DerivativeStructure
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,646,final double[] derivatives = new double[parameters + 1];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,647,derivatives[0] = value;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,648,final int[] orders = new int[parameters];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,649,for (int i = 0; i < parameters; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,650,orders[i] = 1;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,651,for (int j = 0; j < n; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,652,derivatives[i + 1] += gradient[j] * t[j].getPartialDerivative(orders);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,654,orders[i] = 0;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,657,"return new DerivativeStructure(parameters, order, derivatives);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,664,/** Convert a {@link MultivariateDifferentiableVectorFunction} into a {@link DifferentiableMultivariateVectorFunction}.
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,665,* @param f function to convert
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,666,* @return converted function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,667,"* @deprecated this conversion method is temporary in version 3.1, as the {@link"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,668,* DifferentiableMultivariateVectorFunction} interface itself is deprecated
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,670,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,671,public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,672,return new DifferentiableMultivariateVectorFunction() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,674,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,675,public double[] value(final double[] x) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,676,return f.value(x);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,679,public MultivariateMatrixFunction jacobian() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,680,return new MultivariateMatrixFunction() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,681,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,682,public double[][] value(final double[] x) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,684,final int n = x.length;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,686,// delegate computation to underlying function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,687,final DerivativeStructure[] dsX = new DerivativeStructure[n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,688,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,689,"dsX[i] = new DerivativeStructure(n, 1, i, x[i]);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,691,final DerivativeStructure[] y = f.value(dsX);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,693,// extract Jacobian
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,694,final double[][] jacobian = new double[y.length][n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,695,final int[] orders = new int[n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,696,for (int i = 0; i < y.length; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,697,for (int j = 0; j < n; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,698,orders[j]      = 1;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,699,jacobian[i][j] = y[i].getPartialDerivative(orders);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,700,orders[j]      = 0;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,704,return jacobian;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,713,/** Convert a {@link DifferentiableMultivariateVectorFunction} into a {@link MultivariateDifferentiableVectorFunction}.
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,714,* <p>
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,715,* Note that the converted function is able to handle {@link DerivativeStructure} elements
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,716,"* that all have the same number of free parameters and order, and with order at most 1."
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,717,"* If the function is called with inconsistent numbers of free parameters or higher order, a"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,718,* {@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,719,* </p>
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,720,* @param f function to convert
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,721,* @return converted function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,722,"* @deprecated this conversion method is temporary in version 3.1, as the {@link"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,723,* DifferentiableMultivariateFunction} interface itself is deprecated
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,725,@Deprecated
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,726,public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,727,return new MultivariateDifferentiableVectorFunction() {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,729,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,730,public double[] value(final double[] x) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,731,return f.value(x);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,734,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,735,* @exception DimensionMismatchException if number of parameters or derivation
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,736,* order are higher than 1
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,738,public DerivativeStructure[] value(final DerivativeStructure[] t)
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,739,"throws DimensionMismatchException, NumberIsTooLargeException {"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,741,// check parameters and orders limits
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,742,final int parameters = t[0].getFreeParameters();
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,743,final int order      = t[0].getOrder();
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,744,final int n          = t.length;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,745,if (order > 1) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,746,"throw new NumberIsTooLargeException(order, 1, true);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,749,// check all elements in the array are consistent
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,750,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,751,if (t[i].getFreeParameters() != parameters) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,752,"throw new DimensionMismatchException(t[i].getFreeParameters(), parameters);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,755,if (t[i].getOrder() != order) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,756,"throw new DimensionMismatchException(t[i].getOrder(), order);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,760,// delegate computation to underlying function
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,761,final double[] point = new double[n];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,762,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,763,point[i] = t[i].getValue();
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,765,final double[] value      = f.value(point);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,766,final double[][] jacobian = f.jacobian().value(point);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,768,// merge value and Jacobian into a DerivativeStructure array
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,769,final DerivativeStructure[] merged = new DerivativeStructure[value.length];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,770,for (int k = 0; k < merged.length; ++k) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,771,final double[] derivatives = new double[parameters + 1];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,772,derivatives[0] = value[k];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,773,final int[] orders = new int[parameters];
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,774,for (int i = 0; i < parameters; ++i) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,775,orders[i] = 1;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,776,for (int j = 0; j < n; ++j) {
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,777,derivatives[i + 1] += jacobian[k][j] * t[j].getPartialDerivative(orders);
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,779,orders[i] = 0;
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,781,"merged[k] = new DerivativeStructure(parameters, order, derivatives);"
True,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java,784,return merged;
False,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,554,ublic DerivativeStructure compose(final double[] f) {
True,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,src/main/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructure.java,554,public DerivativeStructure compose(final double ... f) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,21,import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,237,@Test
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,238,@Deprecated
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,239,public void testToDifferentiableUnivariateFunction() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,241,// Sin implements both UnivariateDifferentiableFunction and DifferentiableUnivariateFunction
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,242,Sin sin = new Sin();
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,243,DifferentiableUnivariateFunction converted = FunctionUtils.toDifferentiableUnivariateFunction(sin);
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,244,for (double x = 0.1; x < 0.5; x += 0.01) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,245,"Assert.assertEquals(sin.value(x), converted.value(x), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,246,"Assert.assertEquals(sin.derivative().value(x), converted.derivative().value(x), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,251,@Test
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,252,@Deprecated
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,253,public void testToUnivariateDifferential() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,255,// Sin implements both UnivariateDifferentiableFunction and DifferentiableUnivariateFunction
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,256,Sin sin = new Sin();
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,257,UnivariateDifferentiableFunction converted = FunctionUtils.toUnivariateDifferential(sin);
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,258,for (double x = 0.1; x < 0.5; x += 0.01) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,259,"DerivativeStructure t = new DerivativeStructure(2, 1, x, 1.0, 2.0);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,260,"Assert.assertEquals(sin.value(t).getValue(), converted.value(t).getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,261,"Assert.assertEquals(sin.value(t).getPartialDerivative(1, 0),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,262,"converted.value(t).getPartialDerivative(1, 0),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,263,1.0e-10);
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,264,"Assert.assertEquals(sin.value(t).getPartialDerivative(0, 1),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,265,"converted.value(t).getPartialDerivative(0, 1),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,266,1.0e-10);
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,271,@Test
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,272,@Deprecated
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,273,public void testToDifferentiableMultivariateFunction() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,275,MultivariateDifferentiableFunction hypot = new MultivariateDifferentiableFunction() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,277,public double value(double[] point) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,278,"return FastMath.hypot(point[0], point[1]);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,281,public DerivativeStructure value(DerivativeStructure[] point) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,282,"return DerivativeStructure.hypot(point[0], point[1]);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,286,DifferentiableMultivariateFunction converted = FunctionUtils.toDifferentiableMultivariateFunction(hypot);
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,287,for (double x = 0.1; x < 0.5; x += 0.01) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,288,for (double y = 0.1; y < 0.5; y += 0.01) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,289,"double[] point = new double[] { x, y };"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,290,"Assert.assertEquals(hypot.value(point), converted.value(point), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,291,"Assert.assertEquals(x / hypot.value(point), converted.gradient().value(point)[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,292,"Assert.assertEquals(y / hypot.value(point), converted.gradient().value(point)[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,298,@Test
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,299,@Deprecated
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,300,public void testToMultivariateDifferentiableFunction() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,302,DifferentiableMultivariateFunction hypot = new DifferentiableMultivariateFunction() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,304,public double value(double[] point) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,305,"return FastMath.hypot(point[0], point[1]);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,308,public MultivariateFunction partialDerivative(final int k) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,309,return new MultivariateFunction() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,310,public double value(double[] point) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,311,"return point[k] / FastMath.hypot(point[0], point[1]);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,316,public MultivariateVectorFunction gradient() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,317,return new MultivariateVectorFunction() {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,318,public double[] value(double[] point) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,319,"final double h = FastMath.hypot(point[0], point[1]);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,320,"return new double[] { point[0] / h, point[1] / h };"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,327,MultivariateDifferentiableFunction converted = FunctionUtils.toMultivariateDifferentiableFunction(hypot);
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,328,for (double x = 0.1; x < 0.5; x += 0.01) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,329,for (double y = 0.1; y < 0.5; y += 0.01) {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,330,DerivativeStructure[] t = new DerivativeStructure[] {
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,331,"new DerivativeStructure(3, 1, x, 1.0, 2.0, 3.0 ),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,332,"new DerivativeStructure(3, 1, y, 4.0, 5.0, 6.0 )"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,334,"DerivativeStructure h = DerivativeStructure.hypot(t[0], t[1]);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,335,"Assert.assertEquals(h.getValue(), converted.value(t).getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,336,"Assert.assertEquals(h.getPartialDerivative(1, 0, 0),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,337,"converted.value(t).getPartialDerivative(1, 0, 0),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,338,1.0e-10);
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,339,"Assert.assertEquals(h.getPartialDerivative(0, 1, 0),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,340,"converted.value(t).getPartialDerivative(0, 1, 0),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,341,1.0e-10);
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,342,"Assert.assertEquals(h.getPartialDerivative(0, 0, 1),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,343,"converted.value(t).getPartialDerivative(0, 0, 1),"
True,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,src/test/java/org/apache/commons/math3/analysis/FunctionUtilsTest.java,344,1.0e-10);

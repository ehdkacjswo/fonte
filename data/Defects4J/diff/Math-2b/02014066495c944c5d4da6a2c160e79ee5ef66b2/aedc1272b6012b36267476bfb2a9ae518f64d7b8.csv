is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,252,* @param forward forward integration indicator
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,258,"rotected double filterStep(final double h, final boolean acceptSmall)"
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,259,"protected double filterStep(final double h, final boolean forward, final boolean acceptSmall)"
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,264,ilteredH = (filteredH < 0) ? -minStep : minStep;
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,265,filteredH = forward ? minStep : -minStep;
False,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,277, else if (h < -maxStep) {
True,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,278,} else if (filteredH < -maxStep) {
False,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,277,"New = filterStep(stepSize * factor, false);"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,277,"hNew = filterStep(stepSize * factor, forward, false);"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,307,"// in some rare cases we may get here with stepSize = 0, for example"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,308,"// when an event occurs at integration start, reducing the first step"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,309,// to zero; we have to reset the step to some safe non zero value
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,310,"stepSize = filterStep(stepSize, forward, true);"
False,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,314,"New = filterStep(scaledH, nextIsLast);"
True,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,319,"hNew = filterStep(scaledH, forward, nextIsLast);"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,641,"New   = Math.abs(filterStep(stepSize * stabilityReduction, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,641,"hNew   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,665,"New   = Math.abs(filterStep(stepSize * stabilityReduction, false));"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,665,"hNew   = Math.abs(filterStep(stepSize * stabilityReduction, forward, false));"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,677,"ptimalStep[k]     = Math.abs(filterStep(stepSize * fac, true));"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,677,"optimalStep[k]     = Math.abs(filterStep(stepSize * fac, forward, true));"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,906,New = filterStep(optimalStep[k] *
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,907,"ostPerStep[optimalIter+1] / costPerStep[k],"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,908,alse);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,906,"hNew = filterStep(optimalStep[k] * costPerStep[optimalIter+1] / costPerStep[k],"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,907,"forward, false);"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,910,New = filterStep(optimalStep[k] *
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,911,"ostPerStep[optimalIter] / costPerStep[k],"
False,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,912,alse);
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,909,"hNew = filterStep(optimalStep[k] * costPerStep[optimalIter] / costPerStep[k],"
True,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,910,"forward, false);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,19,import org.apache.commons.math3.analysis.function.Sqrt;
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,105,* Returns the square root of {@code this} diagonal operator. More
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,106,"* precisely, this method returns"
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,107,"* P = diag(1 / &radic;A<sub>11</sub>, 1 / &radic;A<sub>22</sub>, &hellip;)."
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,109,* @return the square root of {@code this} operator
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,111,public RealLinearOperator sqrt(){
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,112,final RealVector sqrtDiag = diag.map(new Sqrt());
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,113,return new RealLinearOperator() {
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,114,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,115,@Override
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,116,public RealVector operate(final RealVector x) {
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,117,return x.ebeDivide(sqrtDiag);
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,120,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,121,@Override
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,122,public int getRowDimension() {
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,123,return sqrtDiag.getDimension();
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,126,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,127,@Override
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,128,public int getColumnDimension() {
True,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,src/main/java/org/apache/commons/math3/linear/JacobiPreconditioner.java,129,return sqrtDiag.getDimension();
False,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,22,mport org.apache.commons.math3.exception.MathUnsupportedOperationException;
False,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,646,inal RealLinearOperator m = JacobiPreconditioner.create(a);
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,645,final JacobiPreconditioner m = JacobiPreconditioner.create(a);
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,646,final RealLinearOperator p = m.sqrt();
False,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,656,inal double rnorm = r.getNorm();
True,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,src/test/java/org/apache/commons/math3/linear/SymmLQTest.java,656,final double rnorm = p.operate(r).getNorm();

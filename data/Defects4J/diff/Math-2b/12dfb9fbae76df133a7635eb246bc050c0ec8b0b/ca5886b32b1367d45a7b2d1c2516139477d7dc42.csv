is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,131,* Returns the inverse erf.
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,132,* <p>
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,133,* This implementation is described in the paper:
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,134,"* <a href=""http://people.maths.ox.ac.uk/gilesm/files/gems_erfinv.pdf"">Approximating"
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,135,"* the erfinv function</a> by Mike Giles, Oxford-Man Institute of Quantitative Finance,"
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,136,"* which was published in GPU Computing Gems, volume 2, 2010."
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,137,"* The source code is available <a href=""http://gpucomputing.net/?q=node/1828"">here</a>."
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,138,* </p>
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,139,* @param x the value
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,140,* @return t such that x = erf(t)
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,141,* @since 3.2
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,143,public static double erfInv(final double x) {
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,145,// beware that the logarithm argument must be
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,146,"// commputed as (1.0 - x) * (1.0 + x),"
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,147,// it must NOT be simplified as 1.0 - x * x as this
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,148,// would induce rounding errors near the boundaries +/-1
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,149,double w = - FastMath.log((1.0 - x) * (1.0 + x));
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,150,double p;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,152,if (w < 6.25) {
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,153,w = w - 3.125;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,154,p =  -3.6444120640178196996e-21;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,155,p =   -1.685059138182016589e-19 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,156,p =   1.2858480715256400167e-18 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,157,p =    1.115787767802518096e-17 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,158,p =   -1.333171662854620906e-16 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,159,p =   2.0972767875968561637e-17 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,160,p =   6.6376381343583238325e-15 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,161,p =  -4.0545662729752068639e-14 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,162,p =  -8.1519341976054721522e-14 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,163,p =   2.6335093153082322977e-12 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,164,p =  -1.2975133253453532498e-11 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,165,p =  -5.4154120542946279317e-11 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,166,p =    1.051212273321532285e-09 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,167,p =  -4.1126339803469836976e-09 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,168,p =  -2.9070369957882005086e-08 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,169,p =   4.2347877827932403518e-07 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,170,p =  -1.3654692000834678645e-06 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,171,p =  -1.3882523362786468719e-05 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,172,p =    0.0001867342080340571352 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,173,p =  -0.00074070253416626697512 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,174,p =   -0.0060336708714301490533 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,175,p =      0.24015818242558961693 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,176,p =       1.6536545626831027356 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,177,} else if (w < 16.0) {
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,178,w = FastMath.sqrt(w) - 3.25;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,179,p =   2.2137376921775787049e-09;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,180,p =   9.0756561938885390979e-08 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,181,p =  -2.7517406297064545428e-07 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,182,p =   1.8239629214389227755e-08 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,183,p =   1.5027403968909827627e-06 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,184,p =   -4.013867526981545969e-06 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,185,p =   2.9234449089955446044e-06 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,186,p =   1.2475304481671778723e-05 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,187,p =  -4.7318229009055733981e-05 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,188,p =   6.8284851459573175448e-05 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,189,p =   2.4031110387097893999e-05 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,190,p =   -0.0003550375203628474796 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,191,p =   0.00095328937973738049703 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,192,p =   -0.0016882755560235047313 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,193,p =    0.0024914420961078508066 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,194,p =   -0.0037512085075692412107 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,195,p =     0.005370914553590063617 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,196,p =       1.0052589676941592334 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,197,p =       3.0838856104922207635 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,198,} else if (!Double.isInfinite(w)) {
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,199,w = FastMath.sqrt(w) - 5.0;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,200,p =  -2.7109920616438573243e-11;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,201,p =  -2.5556418169965252055e-10 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,202,p =   1.5076572693500548083e-09 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,203,p =  -3.7894654401267369937e-09 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,204,p =   7.6157012080783393804e-09 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,205,p =  -1.4960026627149240478e-08 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,206,p =   2.9147953450901080826e-08 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,207,p =  -6.7711997758452339498e-08 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,208,p =   2.2900482228026654717e-07 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,209,p =  -9.9298272942317002539e-07 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,210,p =   4.5260625972231537039e-06 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,211,p =  -1.9681778105531670567e-05 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,212,p =   7.5995277030017761139e-05 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,213,p =  -0.00021503011930044477347 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,214,p =  -0.00013871931833623122026 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,215,p =       1.0103004648645343977 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,216,p =       4.8499064014085844221 + p * w;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,217,} else {
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,218,"// this branch does not appears in the original code, it"
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,219,// was added because the previous branch does not handle
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,220,"// x = +/-1 correctly. In this case, w is positive infinity"
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,221,// and as the first coefficient (-2.71e-11) is negative.
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,222,"// Once the first multiplication is done, p becomes negative"
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,223,// infinity and remains so throughout the polynomial evaluation.
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,224,// So the branch above incorrectly returns negative infinity
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,225,// instead of the correct positive infinity.
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,226,p = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,229,return p * x;
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,234,* Returns the inverse erfc.
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,235,* @param x the value
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,236,* @return t such that x = erfc(t)
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,237,* @since 3.2
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,239,public static double erfcInv(final double x) {
True,src/main/java/org/apache/commons/math3/special/Erf.java,src/main/java/org/apache/commons/math3/special/Erf.java,240,return erfInv(1 - x);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,217,@Test
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,218,public void testErfInvNaN() {
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,219,Assert.assertTrue(Double.isNaN(Erf.erfInv(-1.001)));
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,220,Assert.assertTrue(Double.isNaN(Erf.erfInv(+1.001)));
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,223,@Test
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,224,public void testErfInvInfinite() {
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,225,Assert.assertTrue(Double.isInfinite(Erf.erfInv(-1)));
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,226,Assert.assertTrue(Erf.erfInv(-1) < 0);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,227,Assert.assertTrue(Double.isInfinite(Erf.erfInv(+1)));
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,228,Assert.assertTrue(Erf.erfInv(+1) > 0);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,231,@Test
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,232,public void testErfInv() {
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,233,for (double x = -5.9; x < 5.9; x += 0.01) {
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,234,final double y = Erf.erf(x);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,235,final double dydx = 2 * FastMath.exp(-x * x) / FastMath.sqrt(FastMath.PI);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,236,"Assert.assertEquals(x, Erf.erfInv(y), 1.0e-15 / dydx);"
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,240,@Test
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,241,public void testErfcInvNaN() {
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,242,Assert.assertTrue(Double.isNaN(Erf.erfcInv(-0.001)));
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,243,Assert.assertTrue(Double.isNaN(Erf.erfcInv(+2.001)));
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,246,@Test
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,247,public void testErfcInvInfinite() {
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,248,Assert.assertTrue(Double.isInfinite(Erf.erfcInv(-0)));
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,249,Assert.assertTrue(Erf.erfcInv( 0) > 0);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,250,Assert.assertTrue(Double.isInfinite(Erf.erfcInv(+2)));
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,251,Assert.assertTrue(Erf.erfcInv(+2) < 0);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,254,@Test
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,255,public void testErfcInv() {
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,256,for (double x = -5.85; x < 5.9; x += 0.01) {
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,257,final double y = Erf.erfc(x);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,258,final double dydxAbs = 2 * FastMath.exp(-x * x) / FastMath.sqrt(FastMath.PI);
True,src/test/java/org/apache/commons/math3/special/ErfTest.java,src/test/java/org/apache/commons/math3/special/ErfTest.java,259,"Assert.assertEquals(x, Erf.erfcInv(y), 1.0e-15 / dydxAbs);"
